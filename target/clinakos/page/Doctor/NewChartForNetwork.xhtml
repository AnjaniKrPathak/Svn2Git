<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:p="http://primefaces.org/ui">
	
	<style>
           div.tooltip {
  position: absolute;
  text-align: center;
  width: 80px;
  height: 20px;
  padding: 2px;
  font: 12px sans-serif;
  background: trasparent;
  border: 0px;
  border-radius: 4px;
  color: #2AAAFF;
  font-weight: bold;
 /*  pointer-events: none;	This line needs to be removed */
	
}
           </style>
	<!-- <f:view contentType="text/html"> -->
		<h:head>
			<f:facet name="first">
				<meta http-equiv="X-UA-Compatible" content="EmulateIE8" />
				<meta content='text/html; charset=UTF-8' http-equiv="Content-Type" />
				<meta Http-Equiv="Cache-Control" content="no-cache, no-store, must-revalidate,max-age=0" />
        		<meta Http-Equiv="Pragma" Content="no-cache" />
        		<meta Http-Equiv="Expires" Content="-1"/>
				<title><h:outputText value="#{msg.clinakos}" /></title>
			</f:facet>
           </h:head>
           
           <h:body>
           <div id="network" style="float: left" ></div>
           <table height="300px">
             <tr>
               <td><div id="networkDefault" style="display:none;">No Records Available</div></td>
             </tr>
           </table>

<script type="text/javascript" src="../../JavaScript/d3.v2.js"></script>
<script type="text/javascript" src="../../JavaScript/d3.v3.min.js"></script>
<script type="text/javascript" charset="utf-8">

valueForNetwork='#{dashBoardManageBean.networkChartList}';
var networkData= $.parseJSON(valueForNetwork);
var networklen = networkData.length;
/* networklen=0; */
/* alert(networkData); */
if(networklen==0)
{
/*  alert(" value anand: "+specialityDrugData); */
 document.getElementById('networkDefault').style.display="block";
 document.getElementById('network').style.display="none";
}
//console.log("networkData====== "+networkData);

var patientIDArray = new Array();
var doctorNameArray = new Array();
var prescriberArray = new Array();
for(var i in networkData){
	var doctorName = networkData[i].doctor_name;
	var patientID = networkData[i].patient_id;
	var doctor_prescriptions = networkData[i].doctor_prescriptions;
	patientIDArray.push(patientID);
	doctorNameArray.push(doctorName);
	prescriberArray.push(doctor_prescriptions);
	console.log("------------------ "+doctorNameArray[i]+"++++++++++++++++++++++ "+patientIDArray[i]+"********* "+prescriberArray[i]);
	
}
//var sorted_arr = doctorNameArray.sort();
 console.log(doctorNameArray);
var results = [];
for (var i = 0; i &lt; doctorNameArray.length ; i++) {
    if (doctorNameArray[i + 1] != doctorNameArray[i]) {
        results.push(doctorNameArray[i]);
    }
} 
//alert(results);

		
for(var i in patientIDArray)
	{
	
	}
/* var tooltip = d3.select("body")
.data(patientIDArray)
.append("div")
.style("position", "absolute")
.style("z-index", "10")
.style("visibility", "hidden")
.text(function(d,i){return patientIDArray[i];}); */

var w = 400, h = 300;

var labelDistance = 0;

/* var vis = d3.select("#network").append("svg:svg").attr("width", w).attr("height", h); */

/* var vis = d3.select("#network").append("svg:svg")
.attr("width", w)
.attr("height", h); */

var vis = d3.select("#network")
.append("svg")
.attr("width", w)
.attr("height", h);

  var div = d3.select("body")
.append("div")  // declare the tooltip div 
.attr("class", "tooltip")              // apply the 'tooltip' class
.style("opacity", 0);  
 
 

var nodes = [];
var labelAnchors = [];
var labelAnchorLinks = [];
var links = [];
//var new_nodes=[];
for(var i = 0; i &lt; doctorNameArray.length; i++) {
	if(doctorNameArray[i] != null)
		{
		var node = {
				label : "Dr " + doctorNameArray[i]
		 
			};
		//alert(doctorNameArray[i]);
		
	
	nodes.push(node);
	
	 labelAnchors.push({
		node : node
		
	});
	 
	 //console.log("labelAnchors========== "+labelAnchors.valueOf());
	labelAnchors.push({
		node : node
	}); 
	
		}
	/* new_nodes.push(nodes[i].label);
	var new_name=new_nodes[i]; */
	/*  console.log("nodes========== "+nodes[i].label+" patientIDArray "+patientIDArray[i]+" Dr " + doctorNameArray[i]);
	var node = vis.selectAll("g.node").data(nodes).enter().append("svg:g").attr("class", "node");
	node.append("svg:circle").attr("r", patientIDArray[i]).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);  */
	//console.log("labelAnchors1========== "+labelAnchors.valueOf());
};


for(var i = 0; i &lt; 1; i++) {
	for(var j = 0; j &lt;= nodes.length-1; j++) {
		//if(doctorNameArray[i] != doctorNameArray[i+1])
			links.push({
				source : i,
				target : j,
				weight : 1
			});		
		//console.log("i========= "+i+" j=============== "+j);
		//console.log("weight========= "+weight);
		labelAnchorLinks.push({
			source : j * 2,
			target : j * 2 + 1,
			weight : 2
		});	
	}
	
	//console.log("labelAnchorLinks========== "+labelAnchorLinks.valueOf());
};
//console.log("links========== "+links.length);
//console.log("labelAnchorLinks========== "+labelAnchorLinks.length);

var force = d3.layout.force().size([w, h]).nodes(nodes).links(links).gravity(1).linkDistance(50).charge(-3000).linkStrength(function(x) {
	return x.weight * 2
});


force.start();

var force2 = d3.layout.force().nodes(labelAnchors).links(labelAnchorLinks).gravity(0).linkDistance(0).linkStrength(8).charge(-100).size([w, h]);
force2.start();


 //var node=[];
 /* for(var key in nodes) {
    var val = nodes[key];
  alert("Key: "+key+" value:"+val);
} */
//var node = new Array();
  /* for(var i=0;i &lt; nodes.length;i++){
	console.log("nodes length============= "+nodes[i].label);
	
	node = vis.selectAll("g.node").data(nodes[i].label).enter().append("svg:g").attr("class", "node");
	//alert(typeof(node));
}   */ 
 /* var node = [];
 for(var i=0;i &lt; 1;i++){
	 node = vis.selectAll("g.node").data(nodes).enter().append("svg:g").attr("class", "node");
	 //alert(typeof(nodes));
	 //node.append("svg:circle").attr("r", 2).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);  
}  */
//var node=[];

	//var node = vis.selectAll("g.node").data(nodes, function(d){return d;}).enter().append("svg:g").attr("class", "node");
	

//node.append("svg:circle").attr("r", function(patientIDArray) { return Math.ceil(patientIDArray/10); }).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);
// var node = [];
var patient_result = new Array();
var prescriber_result = new Array();
var new_nodes= [];
var new_name = 0;

var patient_max = 0;
var prescriber_max = 0;
var a = patientIDArray.length;
var b = prescriberArray.length;
for (counter=0;counter &lt; a;counter++)
{
 if (patientIDArray[counter] > patient_max)
 {
	 patient_max = patientIDArray[counter];
 }
}
for (counter=0;counter &lt; b;counter++)
{
 if (prescriberArray[counter] > prescriber_max)
 {
	 prescriber_max = prescriberArray[counter];
 }
}
console.log("   " +patient_max+"   "+prescriber_max);
 for(var i=0;i &lt; 1;i++)
{
 for(var j=0;j &lt; nodes.length;j++)
 {
	 new_nodes.push(nodes[j].label);
	 console.log("new_nodes====== "+new_nodes[j]);
	 new_name=new_nodes[j];
	 console.log("new_name====== "+new_name);
	 //var node = vis.selectAll("g.node").data(nodes).enter().append("svg:g").attr("class", "node");
	 //alert(typeof(new_nodes)+node.length);
	 console.log("patient count+++++++++ "+patientIDArray[j]);
	  // var fixed=patientIDArray[i];
	   var patient_fixed=patient_max;
	   var prescriber_fixed=prescriber_max;
	   console.log("fixed============== "+prescriber_fixed);
	   patient_result.push(Math.ceil(10*(patientIDArray[j]/patient_fixed)));
	   //prescriber_result.push(Math.ceil(prescriberArray[j]/prescriber_fixed));
	  prescriber_result.push(prescriberArray[j]/prescriber_fixed);
	   
	  // result=Math.ceil(result);
	   console.log("Final count================ "+patient_result+"    "+prescriber_result);
	   //node = vis.selectAll("g.node").data(nodes[j]).enter().append("svg:g").attr("class", "node");
	   
		   //node.append("svg:circle").attr("r", result).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 0); 
	 //node.append("svg:circle").attr("r", 2).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);  
		   //alert(node.length);
	   
}
} 
 console.log("patient_result================ "+patient_result);
 
 var link = vis.selectAll("line.link").data(links).enter().append("svg:line").attr("class", "link").style("stroke", "#000066").style("stroke-width", 
		 function(d,i){
	 		if(prescriber_result[i] == 0)
	 			{
	 			return 0.2;
	 			}
	 		else
	 			{
	 			return prescriber_result[i];
	 			}
	 			});
 //var m=0;
 //while(m &lt; nodes.length){
var node=vis.selectAll("g.node").data(force.nodes()).enter().append("svg:g").attr("class", "node")
 	.append("svg:circle").attr("r", function(d,i){return patient_result[i];}).style("fill", "#7CB5EC").style("stroke", "#FFF").style("stroke-width", 1)
 	  .on("mouseover", function(d,i) {
	div.transition()
		.duration(100)
		.style("opacity", .8);
	div.html(patientIDArray[i] + " patients")
		.style("left", (d3.event.pageX) + "px")
		.style("top", (d3.event.pageY - 28) + "px");
	}).on("mouseout", function(d) {
        div.transition()
        .duration(500)
        .style("opacity", 0);
})  /* .on("mouseover", function(){return tooltip.style("visibility", "visible");})
.on("mousemove", function(){return tooltip.style("top", (event.pageY-10)+"px").style("left",(event.pageX+10)+"px");})
.on("mouseout", function(){return tooltip.style("visibility", "hidden");}) */; 
 	//m++;
 //}
 	
//var count=;
   for(var i=0;i &lt; 1;i++)
	{
	   for(var j=0;j &lt; nodes.length;j++)
		   {
		     /* console.log("patient count+++++++++ "+patientIDArray[j]);
		   var fixed=patientIDArray[i];
		   //console.log("fixed============== "+fixed);
		   result=10*(patientIDArray[j]/fixed);
		   var randomValues = Math.random(result);
		   //console.log(patientIDArray[j]);
		  // result=Math.ceil(result);
		   console.log("Final count================ "+result);
		   //node = vis.selectAll("g.node").data(nodes[j]).enter().append("svg:g").attr("class", "node");
		   
			   node.append("svg:circle").attr("r", result).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);   */
			   
		   
		   }
	  /* for(var j=0;j &lt;= i;j++)
		  { */
		  
		 // console.log("doctorNameArray.length========= "+nodes[i].label);
	 /* console.log("patient count+++++++++ "+patientIDArray[i]);
	 var count=patientIDArray[i];
	 
	 console.log("Final count================ "+result); */
	// count=count+10;
	// console.log(patientIDArray[i]);
	//if (doctorNameArray[i] == doctorNameArray[i+1]) {
       	//console.log("inside for loop "+i);
       // count++;
      // alert(nodes);
      //var name=nodes[i].label;
      //new_nodes.push(name);
     // console.log("new node ================= "+new_nodes[i]);
       //console.log("nodes length============= "+nodes[i]+" "+name);
       //new_name=new_nodes[i];
       //console.log("new name================= "+new_name);
     // var node = vis.selectAll("g.node").data(nodes).enter().append("svg:g").attr("class", "node");
      
       /* if (nodes[i].label == nodes[i+1].label) 
		{
    	   					
			            	console.log("doctorNameArray "+doctorNameArray[i]+" "+doctorNameArray[i+1]);
			            	console.log("nodes length============= "+nodes[i]);
			            	count++;
			            	console.log("if count============== "+count);
			            	console.log("if node============== "+node);
			            	node.append("svg:circle").attr("r", count).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);
	   }
       else  
		{ 
    	   count = 1; 
		   console.log("else count============== "+count);
		   console.log("else node============== "+node);
		   node.append("svg:circle").attr("r", count).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);
		}  */
	/* } */
       // count++;
         /* node.append("svg:circle").attr("r", 
        		 function(x) 
	        	 {
	            		var returnColor;
			            if (doctorNameArray[i] == doctorNameArray[i+1]) 
			            {
			            	console.log("doctorNameArray "+doctorNameArray[i]+" "+doctorNameArray[i+1]);
			            	count++;
			            	returnColor = count;
			            	console.log("if count============== "+count);
			            	console.log("if count returnColor============== "+returnColor+" "+i);
			            }
	           // if (x > 1) { returnColor = count; } 
	            		else  
	            		{ 
	            			returnColor = 1; 
	            			console.log("else count============== "+returnColor);
	            		} 
             			return returnColor;
            	}).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3)
        ;  */
    // }
	// else
		//{
		 //console.log("doctorNameArray "+doctorNameArray[i]+" "+doctorNameArray[i+1]);
		//count=1;
		//node.append("svg:circle").attr("r", count).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);
		/* node.append("svg:circle").attr("r", function(x) {
            var returnColor;
            if (x === 1) { returnColor = count; } 
            else  {  } 
             return returnColor;
            }).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3)
		; */
		//console.log("else count============== "+count);
		//} 
	
	
	}   
 node.call(force.drag);



var anchorLink = vis.selectAll("line.anchorLink").data(labelAnchorLinks)//.enter().append("svg:line").attr("class", "anchorLink").style("stroke", "#999");

var anchorNode = vis.selectAll("g.anchorNode").data(force2.nodes()).enter().append("svg:g").attr("class", "anchorNode");
anchorNode.append("svg:circle").attr("r", 0).style("fill", "#FFF");
	anchorNode.append("svg:text").text(function(d, i) {
	return i % 2 == 0 ? "" : d.node.label
}).style("fill", "#000066").style("font-family", "Arial").style("font-size", 12);

var updateLink = function() {
	this.attr("x1", function(d) {
		return d.source.x;
	}).attr("y1", function(d) {
		return d.source.y;
	}).attr("x2", function(d) {
		return d.target.x;
	}).attr("y2", function(d) {
		return d.target.y;
	});

}

var updateNode = function() {
	this.attr("transform", function(d) {
		return "translate(" + d.x + "," + d.y + ")";
	});

}


force.on("tick", function() {

	force2.start();

	node.call(updateNode);

	anchorNode.each(function(d, i) {
		if(i % 2 == 0) {
			d.x = d.node.x;
			d.y = d.node.y;
		} else {
			var b = this.childNodes[1].getBBox();

			var diffX = d.x - d.node.x;
			var diffY = d.y - d.node.y;

			var dist = Math.sqrt(diffX * diffX + diffY * diffY);

			var shiftX = b.width * (diffX - dist) / (dist * 2);
			shiftX = Math.max(-b.width, Math.min(0, shiftX));
			var shiftY = 5;
			this.childNodes[1].setAttribute("transform", "translate(" + shiftX + "," + shiftY + ")");
		}
	});


	anchorNode.call(updateNode);

	link.call(updateLink);
	anchorLink.call(updateLink);

});

		</script>



<!-- 	</f:view> -->

	
</h:body>

</html>