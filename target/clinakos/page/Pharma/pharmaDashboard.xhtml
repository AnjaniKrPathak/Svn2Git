
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:p="http://primefaces.org/ui" template="../templates/ui.xhtml">
<h:body onload="#{dashBoardManageBean.setoverviewindex()}">

	<f:view contentType="text/html">
		<h:head>
			<f:facet name="first">
				<meta charset="utf-8"></meta>
				<meta http-equiv="X-UA-Compatible" content="EmulateIE8" />
				<meta content='text/html; charset=UTF-8' http-equiv="Content-Type" />
				<meta Http-Equiv="Cache-Control"
					content="no-cache, no-store, must-revalidate,max-age=0" />
				<meta Http-Equiv="Pragma" Content="no-cache" />
				<meta Http-Equiv="Expires" Content="-1" />
				<title><h:outputText value="#{msg.clinakos}" /></title>
			</f:facet>


			<link type="text/css" rel="stylesheet" href="../../CSS/style.css" />
			 <link href="../../JavaScript/nv.d31.css" rel="stylesheet"
				type="text/css" /> 
			<style>
div.tooltip {
	position: absolute;
	text-align: center;
	width: 80px;
	height: 20px;
	padding: 2px;
	font: 12px sans-serif;
	background: trasparent;
	border: 0px;
	border-radius: 4px;
	color: #2AAAFF;
	font-weight: bold;
	/*  pointer-events: none;	This line needs to be removed */
}

.mypiechart {
	width: 300px;
	border: 2px;
}

.bar, .containerMedT {
	fill: #7cb5ec; /*
 
}

.bar:hover {
	fill: #4682B4; /* rgb(4,180,180) rgb(0,128,192); #f08080 #416c85 */
/* steelblue; */
}

.sector {
	cursor: pointer;
}

.highcharts-tooltip span {
	height: auto;
	width: 200px;
	/* overflow: auto; */
	white-space: normal !important;
}
</style>
			<script type="text/javascript" src="../../JavaScript/jsapi.js"></script>
			 <script type="text/javascript" src="../../JavaScript/d3.v2.js"></script>
			<script type="text/javascript" src="../../JavaScript/d3.v3.min.js"></script>
			<script type="text/javascript"
				src="../../JavaScript/highcharts_analytic.js"></script>
			<script type="text/javascript" src="../../JavaScript/exporting.js"></script>
			<script type="text/javascript"
				src="../../JavaScript/highcharts-more.js"></script>
			<script type="text/javascript"
				src="../../JavaScript/solid-gauge.src.js"></script>

			<script type="text/javascript" language="javascript">
			
			$(document).ready(function() {                      
   		      setTimeout(pharmaDashboardChartLoading,1500);
		 
		      console.log("rendering analytic charts from bean for PHARMA role ");
			 });
    
			
			google.load('visualization', '1', {packages:['gauge']})  
			 	
	function renderOtherCharts(xhr,status,args){	      
       
			      
                    var ageSplitChartData = args.ageSplitChartData;
                    var ageSplitJsonData =$.parseJSON(ageSplitChartData);
                    var ageChartArray=new Array();
                    for(var i in ageSplitJsonData){
 		      		   var noOfPatients=ageSplitJsonData[i].countValue;
 		      		 var labelName=ageSplitJsonData[i].rangeName;
 		      		 var lowRangeVal=ageSplitJsonData[i].lowRangeVal;
 		      		 var highRangeVal=ageSplitJsonData[i].highRangeVal;
 		      		 if(noOfPatients>0){
 		      		ageChartArray.push([(labelName),(noOfPatients),(lowRangeVal),(highRangeVal)]);
 		      		 }
 		      		 
 		      	   }
                    console.log("age split array data================> "+ageChartArray.length);
                    if(ageChartArray.length==0){
                    	
                   	 document.getElementById('ageSplitDefault').style.display="block";
	                 	 document.getElementById('ageSplitId').style.display="none";
                   }
                    
                    var genderSplitChartData = args.genderPieChartData;
                    var genderSplitJsonData =$.parseJSON(genderSplitChartData);
                    var genderChartArray=new Array();
                    for(var i in genderSplitJsonData){
 		      		   var noOfPatients=genderSplitJsonData[i].countValue;
 		      		 var labelName=genderSplitJsonData[i].rangeName;
 		      	
 		      		 if(noOfPatients>0){
 		      		genderChartArray.push([(labelName),(noOfPatients)]);
 		      		 }
 		      		 
 		      	   }
                    console.log("age split array data================> "+genderChartArray.length);
                    console.log("age split array data ================> "+genderChartArray);
                    if(genderChartArray.length==0){
                    	
                    	 document.getElementById('genderSplitDefault').style.display="block";
	                 	 document.getElementById('genderSplitId').style.display="none";
                    }
                    
                    
			          $(document).ready(function () {
				          	//For age split chart
				          	// Build the chart
				          	
				              $('#ageSplitId').highcharts({
				                  chart: {
				                      plotBackgroundColor: null,
				                      plotBorderWidth: null,
				                      plotShadow: false
				                  },
				                  title: {
				                      text: ' '
				                  },
				                  tooltip: {
				              	    pointFormat: '<b>{point.percentage:.1f}%</b>'
				                  },
				                  plotOptions: {
				                      pie: {
				                          allowPointSelect: true,
				                          cursor: 'pointer',
				                          dataLabels: {
				                              enabled: false
				                          },
				                          showInLegend: true
				                      },
				                  series: {
			                          cursor: 'pointer',
			                          point: {
			                              events: {
			                                  click: function() {
			                                	
			                                	 fnAgeSplit(event.point.name,this.y,ageSplitJsonData);
			                                  }
			                              }
			                          }
			                      }
				                  },
				                  series: [{
				                      type: 'pie',
				                      name: 'Age Split',
				                      data: ageChartArray
				                  }]
				              });
				          });  
	                    
	                  $(document).ready(function () {
				          	//For gender split chart
				          	// Build the chart
				              $('#genderSplitId').highcharts({
				                  chart: {
				                      plotBackgroundColor: null,
				                      plotBorderWidth: null,
				                      plotShadow: false
				                  },
				                  title: {
				                      text: ' '
				                  },
				                  tooltip: {
				              	    pointFormat: '<b>{point.percentage:.1f}%</b>'
				                  },
				                  plotOptions: {
				                      pie: {
				                          allowPointSelect: true,
				                          cursor: 'pointer',
				                          dataLabels: {
				                              enabled: false
				                          },
				                          showInLegend: true
				                      }
				                  ,
				                  series: {
			                          cursor: 'pointer',
			                          point: {
			                              events: {
			                                  click: function() {
			                                	
			                                	 fnGenderSplit(event.point.name);
			                                  }
			                              }
			                          }
			                      }
				                  },
				                  series: [{
				                      type: 'pie',
				                      name: 'Gender Split',
				                      data:genderChartArray
				                  }]
				              });
				          });  
	                  
	                  //for paients on RA drug chart
	                  var noOfPatientsOnRAdrugData=args.patientsOnRAdrugs;
	                  var noOfPatientsOnRAdrugJSonData=$.parseJSON(noOfPatientsOnRAdrugData);
	                  console.log("noOfPatientsOnRAdrugJSonData json data "+noOfPatientsOnRAdrugJSonData);
	                  var noOfPatientsOnRAdrugArray = new Array();
				      	 for(var i in noOfPatientsOnRAdrugJSonData)
						 {
						 var noOfPatientsCount= noOfPatientsOnRAdrugJSonData[i].countValue;
						 var labelName = noOfPatientsOnRAdrugJSonData[i].rangeName;
						 console.log("Label Name "+labelName +" no of patients count "+noOfPatientsCount);
						 if(noOfPatientsCount>0){
						 noOfPatientsOnRAdrugArray.push([(labelName),(noOfPatientsCount)]);
						 }
						 }
				      	 console.log("noOfPatientsOnRAdrugArray length "+noOfPatientsOnRAdrugArray.length);
				      	 if(noOfPatientsOnRAdrugArray.length==0){
				      		 document.getElementById('containerMedTDefault').style.display="block";
		                 	 document.getElementById('containerMedT').style.display="none";
				      	 }
	                  
	                  $('#containerMedT').highcharts({
			                chart: {
			                    type: 'column'
			                },
			                title: {
			                    text: ' '
			                },
			                subtitle: {
			                    text: ''
			                },
			                xAxis: {
			                    type: 'category',
			                    labels: {
			                        rotation: -45,
			                        formatter: function() {
			                            return(this.value.substring(0,8) + "...");
			                        },
			                        style: {
			                            fontSize: '10px',
			                            fontFamily: 'Verdana, sans-serif'
			                        }
			                    }
			                },
			                yAxis: {
			                    min: 0,
			                    title: {
			                        text: ''
			                           
			                    }
			                },
			                legend: {
			                    enabled: false
			                },
			                tooltip: {
			                	useHTML:true,
			                
			                	//pointFormat: 'Total Drug: <b>{point.y:.1f} </b>',
			                	
			                	 formatter: function() {
		                            //return "<div style='width: 400px; white-space:normal;'>"+this.point.name.substring(0,this.point.name.indexOf(',')+1)+'<br />'+this.point.name.substring(this.point.name.indexOf(',')+1,this.point.name.length)+'<br />'+'Drugs:'+'<b>'+ this.point.y+'.0</b>'+ "</div>";
		                            return  this.point.name +"<br/>"+'Total Patients: '+'<b>'+ this.point.y+'</b>';
		                       } 
			                
			                 
			                },
			                
			                plotOptions: {
			                    column: {
			                        pointPadding: 0.2,
			                        borderWidth: 0,
			                        color:'#7CB5EC',
			                        cursor:'pointer'
			                        
			                    },
			                    series: {
				                    stacking: 'normal',
				                    cursor: 'pointer',
				                	point: {
				                        events: {
				                            click: function() {
				                            	fnEnbrelRAdrug(event.point.name);
				                            	
				                            }
				                        }
				                    }
				                }
			                },
			                series: [{
			                    name: '',
			                    data:noOfPatientsOnRAdrugArray, 
			                    
			                    dataLabels: {
			                        enabled: true,
			                        rotation: -90,
			                        color: '#FFFFFF',
			                        align: 'right',
			                        x: 4,
			                        y: 8,
			                        style: {
			                            fontSize: '9px',
			                            fontFamily: 'Verdana, sans-serif',
			                            textShadow: '0 0 3px black'
			                        }
			                    }
			                }]
			            });  

	                  
	                  var enbrelConcurrentMedsData=args.pharmaEnbrelConcurrentMedsData;
	                 // console.log("concurrent med enbrel length "+enbrelConcurrentMedsData.length);
	                  
	                  var enbrelConcurrentMedsJSONData=$.parseJSON(enbrelConcurrentMedsData);
	                  if(enbrelConcurrentMedsJSONData.length==0)
	                 	{
	                 	//console.log("inside empty condition")
	                 	 document.getElementById('concurrentMedsEnbrelIdDefault').style.display="block";
	                 	 document.getElementById('concurrentMedsEnbrelId').style.display="none";
	                 	}else{
	                  console.log("enbrelConcurrentMedsJSONData json data "+enbrelConcurrentMedsJSONData.length);
	                  var concurrentMedsOnEnbrelJson = new Array();
				      	 for(var i in enbrelConcurrentMedsJSONData)
						 {
						 var drugCountValue= enbrelConcurrentMedsJSONData[i].countValue;
						 var labelName = enbrelConcurrentMedsJSONData[i].rangeName;
						 console.log("Label Name "+labelName +" no of patients count "+drugCountValue);
						 concurrentMedsOnEnbrelJson.push([(labelName),(drugCountValue)]);
						 }
			}
	                
	                  $('#concurrentMedsEnbrelId').highcharts({
			                chart: {
			                    type: 'column'
			                },
			                title: {
			                    text: ' '
			                },
			                subtitle: {
			                    text: ''
			                },
			                xAxis: {
			                    type: 'category',
			                    labels: {
			                        rotation: -45,
			                        formatter: function() {
			                            return(this.value.substring(0,8) + "...");
			                        },
			                        style: {
			                            fontSize: '10px',
			                            fontFamily: 'Verdana, sans-serif'
			                        }
			                    }
			                },
			                yAxis: {
			                    min: 0,
			                    title: {
			                        text: ''
			                           
			                    }
			                },
			                legend: {
			                    enabled: false
			                },
			                tooltip: {
			                	useHTML:true,
			                
			                	//pointFormat: 'Total Drug: <b>{point.y:.1f} </b>',
			                	
			                	 formatter: function() {
		                            //return "<div style='width: 400px; white-space:normal;'>"+this.point.name.substring(0,this.point.name.indexOf(',')+1)+'<br />'+this.point.name.substring(this.point.name.indexOf(',')+1,this.point.name.length)+'<br />'+'Drugs:'+'<b>'+ this.point.y+'.0</b>'+ "</div>";
		                            return  this.point.name +"<br/>"+'Total Patients: '+'<b>'+ this.point.y+'</b>';
		                       } 
			                
			                 
			                },
			                
			                plotOptions: {
			                    column: {
			                        pointPadding: 0.2,
			                        borderWidth: 0,
			                        color:'#7CB5EC',
			                        cursor:'pointer'
			                        
			                    },
			                    series: {
				                    stacking: 'normal',
				                    cursor: 'pointer',
				                	point: {
				                        events: {
				                            click: function() {
				                            	fnEnbrelConcurrentMeds(event.point.name,enbrelConcurrentMedsJSONData);
				                            	
				                            }
				                        }
				                    }
				                }
			                },
			                series: [{
			                    name: '',
			                    data:concurrentMedsOnEnbrelJson, 
			                    
			                    dataLabels: {
			                        enabled: true,
			                        rotation: -90,
			                        color: '#FFFFFF',
			                        align: 'right',
			                        x: 4,
			                        y: 8,
			                        style: {
			                            fontSize: '9px',
			                            fontFamily: 'Verdana, sans-serif',
			                            textShadow: '0 0 3px black'
			                        }
			                    }
			                }]
			            });  
	                  
	                /*   var timeOnEnbrelJson = new Array();
	                  timeOnEnbrelJson.push(["0 - 3 months",0]);
	                  timeOnEnbrelJson.push(["3 - 6 months",0]);
	                  timeOnEnbrelJson.push(["6 - 12 months",0]);
	                  timeOnEnbrelJson.push(["12+ months",0]); */
	                  //for paients on RA drug chart
	                  var noOfPatientsOnEnbrel=args.timeOnEnbrelData;
	                  var noOfPatientsOnEnbrelJSonData=$.parseJSON(noOfPatientsOnEnbrel);
	                  console.log("noOfPatientsOnEnbreldrugJSonData json data "+noOfPatientsOnEnbrelJSonData);
	                  var timeOnEnbrelJson = new Array();
				      	 for(var i in noOfPatientsOnEnbrelJSonData)
						 {
						 var noOfPatientsCount= noOfPatientsOnEnbrelJSonData[i].countValue;
						 var labelName = noOfPatientsOnEnbrelJSonData[i].rangeName;
						 console.log("Label Name "+labelName +" no of patients count "+noOfPatientsCount);
						// if(noOfPatientsCount>0){
							 timeOnEnbrelJson.push([(labelName),(noOfPatientsCount)]);
						// }
						 }
				      	 console.log("noOfPatientsOn on enbrel length "+timeOnEnbrelJson.length);
				      	 if(timeOnEnbrelJson.length==0){
				      		 document.getElementById('timeOnEnbrelIdDefault').style.display="block";
		                 	 document.getElementById('timeOnEnbrelId').style.display="none";
				      	 }
	                  
	                  $('#timeOnEnbrelId').highcharts({
			                chart: {
			                    type: 'column'
			                },
			                title: {
			                    text: ' '
			                },
			                subtitle: {
			                    text: ''
			                },
			                xAxis: {
			                    type: 'category',
			                    labels: {
			                        rotation: -45,
			                        formatter: function() {
			                            return(this.value.substring(0,8) + "...");
			                        },
			                        style: {
			                            fontSize: '10px',
			                            fontFamily: 'Verdana, sans-serif'
			                        }
			                    }
			                },
			                yAxis: {
			                    min: 0,
			                    title: {
			                        text: ''
			                           
			                    }
			                },
			                legend: {
			                    enabled: false
			                },
			                tooltip: {
			                	useHTML:true,
			                
			                	//pointFormat: 'Total Drug: <b>{point.y:.1f} </b>',
			                	
			                	 formatter: function() {
		                            //return "<div style='width: 400px; white-space:normal;'>"+this.point.name.substring(0,this.point.name.indexOf(',')+1)+'<br />'+this.point.name.substring(this.point.name.indexOf(',')+1,this.point.name.length)+'<br />'+'Drugs:'+'<b>'+ this.point.y+'.0</b>'+ "</div>";
		                            return  this.point.name +"<br/>"+'Total Patients: '+'<b>'+ this.point.y+'</b>';
		                       } 
			                
			                   
			                },
			                
			                plotOptions: {
			                    column: {
			                        pointPadding: 0.2,
			                        borderWidth: 0,
			                        color:'#7CB5EC',
			                        cursor:'pointer'
			                        
			                    },
			                    series: {
				                    stacking: 'normal',
				                    cursor: 'pointer',
				                	point: {
				                        events: {
				                            click: function() {
				                            	fnTimeOnEnbrel(event.point.name,noOfPatientsOnEnbrelJSonData);
				                            	
				                            }
				                        }
				                    }
				                }
			                },
			                series: [{
			                    name: '',
			                    data:timeOnEnbrelJson, 
			                    
			                    dataLabels: {
			                        enabled: true,
			                        rotation: -90,
			                        color: '#FFFFFF',
			                        align: 'right',
			                        x: 4,
			                        y: 8,
			                        style: {
			                            fontSize: '9px',
			                            fontFamily: 'Verdana, sans-serif',
			                            textShadow: '0 0 3px black'
			                        }
			                    }
			                }]
			            });  



					    			    	  //Comlaince  
					    				      	//Red Gauge
					    				      	/*  var valueGauge=#{userManageBean.meterGaugeModel.value};
					    				    var valueGauge1=valueGauge.toString(); */
					    				   /*  alert(valueGauge); */
					    	    var gaugeOptions = {
					    		
					    		    chart: {
					    		        type: 'solidgauge'
					    		    },
					    		    
					    		    title: null,
					    		    
					    		    pane: {
					    		    	center: ['50%', '85%'],
					    		    	size: '140%',
					    		        startAngle: -90,
					    		        endAngle: 90,
					    	            background: {
					    	                backgroundColor: '#EEE',
					    	                innerRadius: '60%',
					    	                outerRadius: '100%',
					    	                shape: 'arc'
					    	            }
					    		    },

					    		    tooltip: {
					    		    	enabled: false
					    		    },
					    		    navigation: {
					    		        buttonOptions: {
					    		            verticalAlign: 'top',
					    		            y: -15
					    		        }
					    		    },
					    		       
					    		    // the value axis
					    		    yAxis: {
					    		    	stops: [
					    						[0.0, '#FF0000'], // red
					    			            [0.6, '#FF0000'], // red
					    			            [0.6, '#FFA500'], // orange
					    			            [0.8, '#FFA500'], // orange
					    			            [0.8, '#008000'], //green
					    			            [1, '#008000'] //green
					    					],
					    				lineWidth: 0,
					    	            minorTickInterval: null,
					    	            tickPixelInterval: 400,
					    	            tickWidth: 0,
					    		        title: {
					    	                y: -70
					    		        },
					    	            labels: {
					    	                y: 16
					    	            }        
					    		    },
					    	        
					    	        plotOptions: {
					    	            solidgauge: {
					    	                dataLabels: {
					    	                    y: -30,
					    	                    borderWidth: 0,
					    	                    useHTML: true
					    	                }
					    	            }
					    	        }
					    	    };
					    	    
					    	    // The speed gauge
					    	    $('#containerComplaince').highcharts(Highcharts.merge(gaugeOptions, {
					    	        yAxis: {
					    		        min: 0,
					    		        max: 100,
					    		        title: {
					    		            text: ''
					    		        }       
					    		    },

					    		    credits: {
					    		    	enabled: false
					    		    },
					    		   
					    		    series: [{
					    		        name: '',
					    		        data: [0],
					    		        dataLabels: {
					    		        	format: '<div style="text-align:center"><span style="font-size:25px;color:' + 
					    	                    ('black') + '">{y}</span><br/>' + 
					    	                   	'</div>'
					    		        },
					    		        tooltip: {
					    		            valueSuffix: ' '
					    		        }
					    		    }]
					    		
					    		}));
					    	   
					    						  	                       
					    				    // Bring life to the dials
					    				    setInterval(function () {
					    				    	 var valueGauge=#{userManageBean.enbrelAdherenceChartModel.value};
							    				    var valueGauge1=valueGauge.toString();
					    				 //   var valueGauge=#{userManageBean.meterGaugeModel.value};
					    				 //   var valueGauge1=valueGauge.toString();
					    				
					    				    	// Speed
					    				        var chart = $('#containerComplaince').highcharts();
					    				        if (chart) {
					    				            var point = chart.series[0].points[0];  
					    				            point.update(#{userManageBean.enbrelAdherenceChartModel.value});
					    				        }
					    				    }, 1000);   
					    				    
					    				    
					    				 /* Start STAR Ratings Charts:Added on 27/Jan/2015 By Nagaraj  */
					    				 /*Start :D09 - High Risk Medication  */
					    				     var gaugeOptions = {
					    		
					    		    chart: {
					    		        type: 'solidgauge'
					    		    },
					    		    
					    		    title: null,
					    		    
					    		    pane: {
					    		    	center: ['50%', '85%'],
					    		    	size: '140%',
					    		        startAngle: -90,
					    		        endAngle: 90,
					    	            background: {
					    	                backgroundColor: '#EEE',
					    	                innerRadius: '60%',
					    	                outerRadius: '100%',
					    	                shape: 'arc'
					    	            }
					    		    },

					    		    tooltip: {
					    		    	enabled: false
					    		    },
					    		    navigation: {
					    		        buttonOptions: {
					    		            verticalAlign: 'top',
					    		            y: -15
					    		        }
					    		    },
					    		       
					    		    // the value axis
					    		    yAxis: {
					    		    	stops: [
					    						[0.0, '#FF0000'], // red
					    			            [0.6, '#FF0000'], // red
					    			            [0.6, '#FFA500'], // orange
					    			            [0.8, '#FFA500'], // orange
					    			            [0.8, '#008000'], //green
					    			            [1, '#008000'] //green
					    					],
					    				lineWidth: 0,
					    	            minorTickInterval: null,
					    	            tickPixelInterval: 400,
					    	            tickWidth: 0,
					    		        title: {
					    	                y: -70
					    		        },
					    	            labels: {
					    	                y: 16
					    	            }        
					    		    },
					    	        
					    	        plotOptions: {
					    	            solidgauge: {
					    	                dataLabels: {
					    	                    y: -30,
					    	                    borderWidth: 0,
					    	                    useHTML: true
					    	                }
					    	            }
					    	        }
					    	    };
					    	    
					    	
					    				     var gaugeOptions = {
					 					    		
										    		    chart: {
										    		        type: 'solidgauge'
										    		    },
										    		    
										    		    title: null,
										    		    
										    		    pane: {
										    		    	center: ['50%', '85%'],
										    		    	size: '140%',
										    		        startAngle: -90,
										    		        endAngle: 90,
										    	            background: {
										    	                backgroundColor: '#EEE',
										    	                innerRadius: '60%',
										    	                outerRadius: '100%',
										    	                shape: 'arc'
										    	            }
										    		    },

										    		    tooltip: {
										    		    	enabled: false
										    		    },
										    		    navigation: {
										    		        buttonOptions: {
										    		            verticalAlign: 'top',
										    		            y: -15
										    		        }
										    		    },
										    		       
										    		    // the value axis
										    		    yAxis: {
										    		    	stops: [
										    						[0.0, '#FF0000'], // red
										    			            [0.6, '#FF0000'], // red
										    			            [0.6, '#FFA500'], // orange
										    			            [0.8, '#FFA500'], // orange
										    			            [0.8, '#008000'], //green
										    			            [1, '#008000'] //green
										    					],
										    				lineWidth: 0,
										    	            minorTickInterval: null,
										    	            tickPixelInterval: 400,
										    	            tickWidth: 0,
										    		        title: {
										    	                y: -70
										    		        },
										    	            labels: {
										    	                y: 16
										    	            }        
										    		    },
										    	        
										    	        plotOptions: {
										    	            solidgauge: {
										    	                dataLabels: {
										    	                    y: -30,
										    	                    borderWidth: 0,
										    	                    useHTML: true
										    	                }
										    	            }
										    	        }
										    	    };
										    	    
										    	    // The speed gauge
										    	    $('#containerTotalComplaince').highcharts(Highcharts.merge(gaugeOptions, {
										    	        yAxis: {
										    		        min: 0,
										    		        max: 100,
										    		        title: {
										    		            text: ''
										    		        }       
										    		    },

										    		    credits: {
										    		    	enabled: false
										    		    },
										    		   
										    		    series: [{
										    		        name: '',
										    		        data: [0],
										    		        dataLabels: {
										    		        	format: '<div style="text-align:center"><span style="font-size:25px;color:' + 
										    	                    ('black') + '">{y}</span><br/>' + 
										    	                   	'</div>'
										    		        },
										    		        tooltip: {
										    		            valueSuffix: ' '
										    		        }
										    		    }]
										    		
										    		}));
										    	   
										    						  	                       
										    				    // Bring life to the dials
										    				    setInterval(function () {
										    				    	 var valueGauge=#{userManageBean.meterGaugeModel.value};
												    				    var valueGauge1=valueGauge.toString();
										    				 //   var valueGauge=#{userManageBean.meterGaugeModel.value};
										    				 //   var valueGauge1=valueGauge.toString();
										    				
										    				    	// Speed
										    				        var chart = $('#containerTotalComplaince').highcharts();
										    				        if (chart) {
										    				            var point = chart.series[0].points[0];  
										    				            point.update(#{userManageBean.meterGaugeModel.value});
										    				        }
										    				    }, 1000);   
										    				    
										    				    
										    				 /* Start STAR Ratings Charts:Added on 27/Jan/2015 By Nagaraj  */
										    				 /*Start :D09 - High Risk Medication  */
										    				     var gaugeOptions = {
										    		
										    		    chart: {
										    		        type: 'solidgauge'
										    		    },
										    		    
										    		    title: null,
										    		    
										    		    pane: {
										    		    	center: ['50%', '85%'],
										    		    	size: '140%',
										    		        startAngle: -90,
										    		        endAngle: 90,
										    	            background: {
										    	                backgroundColor: '#EEE',
										    	                innerRadius: '60%',
										    	                outerRadius: '100%',
										    	                shape: 'arc'
										    	            }
										    		    },

										    		    tooltip: {
										    		    	enabled: false
										    		    },
										    		    navigation: {
										    		        buttonOptions: {
										    		            verticalAlign: 'top',
										    		            y: -15
										    		        }
										    		    },
										    		       
										    		    // the value axis
										    		    yAxis: {
										    		    	stops: [
										    						[0.0, '#FF0000'], // red
										    			            [0.6, '#FF0000'], // red
										    			            [0.6, '#FFA500'], // orange
										    			            [0.8, '#FFA500'], // orange
										    			            [0.8, '#008000'], //green
										    			            [1, '#008000'] //green
										    					],
										    				lineWidth: 0,
										    	            minorTickInterval: null,
										    	            tickPixelInterval: 400,
										    	            tickWidth: 0,
										    		        title: {
										    	                y: -70
										    		        },
										    	            labels: {
										    	                y: 16
										    	            }        
										    		    },
										    	        
										    	        plotOptions: {
										    	            solidgauge: {
										    	                dataLabels: {
										    	                    y: -30,
										    	                    borderWidth: 0,
										    	                    useHTML: true
										    	                }
										    	            }
										    	        }
										    	    };
					    				
										    				     //networkchart
										    			    	    valueForNetwork=args.networkworkChartData;
										    			    	    var networkData= $.parseJSON(valueForNetwork);
										    			    	    var networklen = networkData.length;
										    			    	    /* networklen=0; */
										    			    	    /* alert(networkData); */
										    			    	    if(networklen==0)
										    			    	    {
										    			    	    /*  alert(" value anand: "+specialityDrugData); */
										    			    	     document.getElementById('networkDefault').style.display="block";
										    			    	     document.getElementById('network').style.display="none";
										    			    	    }
										    			    	    //console.log("networkData====== "+networkData);

										    			    	    var patientIDArray = new Array();
										    			    	    var doctorNameArray = new Array();
										    			    	    var prescriberArray = new Array();
										    			    	    for(var i in networkData){
										    			    	    	var doctorName = networkData[i].doctor_name;
										    			    	    	var patientID = networkData[i].patient_id;
										    			    	    	var doctor_prescriptions = networkData[i].doctor_prescriptions;
										    			    	    	patientIDArray.push(patientID);
										    			    	    	doctorNameArray.push(doctorName);
										    			    	    	prescriberArray.push(doctor_prescriptions);
										    			    	    	console.log("------------------ "+doctorNameArray[i]+"++++++++++++++++++++++ "+patientIDArray[i]+"********* "+prescriberArray[i]);
										    			    	    	
										    			    	    }
										    			    	    //var sorted_arr = doctorNameArray.sort();
										    			    	     console.log(doctorNameArray);
										    			    	    var results = [];
										    			    	    for (var i = 0; i &lt; doctorNameArray.length ; i++) {
										    			    	        if (doctorNameArray[i + 1] != doctorNameArray[i]) {
										    			    	            results.push(doctorNameArray[i]);
										    			    	        }
										    			    	    } 
										    			    	    //alert(results);

										    			    	    		
										    			    	    for(var i in patientIDArray)
										    			    	    	{
										    			    	    	
										    			    	    	}
										    			    	    /* var tooltip = d3.select("body")
										    			    	    .data(patientIDArray)
										    			    	    .append("div")
										    			    	    .style("position", "absolute")
										    			    	    .style("z-index", "10")
										    			    	    .style("visibility", "hidden")
										    			    	    .text(function(d,i){return patientIDArray[i];}); */

										    			    	    var w = 400, h = 360;

										    			    	    var labelDistance = 0;

										    			    	    /* var vis = d3.select("#network").append("svg:svg").attr("width", w).attr("height", h); */

										    			    	    /* var vis = d3.select("#network").append("svg:svg")
										    			    	    .attr("width", w)
										    			    	    .attr("height", h); */

										    			    	    var vis = d3.select("#network")
										    			    	    .append("svg")
										    			    	    .attr("width", w)
										    			    	    .attr("height", h);

										    			    	      var div = d3.select("body")
										    			    	    .append("div")  // declare the tooltip div 
										    			    	    .attr("class", "tooltip")              // apply the 'tooltip' class
										    			    	    .style("opacity", 0);  
										    			    	     
										    			    	     

										    			    	    var nodes = [];
										    			    	    var labelAnchors = [];
										    			    	    var labelAnchorLinks = [];
										    			    	    var links = [];
										    			    	    //var new_nodes=[];
										    			    	    for(var i = 0; i &lt; doctorNameArray.length; i++) {
										    			    	    	if(doctorNameArray[i] != null)
										    			    	    		{
										    			    	    		var node = {
										    			    	    				label : "Dr " + doctorNameArray[i]
										    			    	    		 
										    			    	    			};
										    			    	    		//alert(doctorNameArray[i]);
										    			    	    		
										    			    	    	
										    			    	    	nodes.push(node);
										    			    	    	
										    			    	    	 labelAnchors.push({
										    			    	    		node : node
										    			    	    		
										    			    	    	});
										    			    	    	 
										    			    	    	 //console.log("labelAnchors========== "+labelAnchors.valueOf());
										    			    	    	labelAnchors.push({
										    			    	    		node : node
										    			    	    	}); 
										    			    	    	
										    			    	    		}
										    			    	    	/* new_nodes.push(nodes[i].label);
										    			    	    	var new_name=new_nodes[i]; */
										    			    	    	/*  console.log("nodes========== "+nodes[i].label+" patientIDArray "+patientIDArray[i]+" Dr " + doctorNameArray[i]);
										    			    	    	var node = vis.selectAll("g.node").data(nodes).enter().append("svg:g").attr("class", "node");
										    			    	    	node.append("svg:circle").attr("r", patientIDArray[i]).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);  */
										    			    	    	//console.log("labelAnchors1========== "+labelAnchors.valueOf());
										    			    	    };


										    			    	    for(var i = 0; i &lt; 1; i++) {
										    			    	    	for(var j = 0; j &lt;= nodes.length-1; j++) {
										    			    	    		//if(doctorNameArray[i] != doctorNameArray[i+1])
										    			    	    			links.push({
										    			    	    				source : i,
										    			    	    				target : j,
										    			    	    				weight : 1
										    			    	    			});		
										    			    	    		//console.log("i========= "+i+" j=============== "+j);
										    			    	    		//console.log("weight========= "+weight);
										    			    	    		labelAnchorLinks.push({
										    			    	    			source : j * 2,
										    			    	    			target : j * 2 + 1,
										    			    	    			weight : 2
										    			    	    		});	
										    			    	    	}
										    			    	    	
										    			    	    	//console.log("labelAnchorLinks========== "+labelAnchorLinks.valueOf());
										    			    	    };
										    			    	    //console.log("links========== "+links.length);
										    			    	    //console.log("labelAnchorLinks========== "+labelAnchorLinks.length);

										    			    	    var force = d3.layout.force().size([w, h]).nodes(nodes).links(links).gravity(1).linkDistance(50).charge(-3000).linkStrength(function(x) {
										    			    	    	return x.weight * 2
										    			    	    });


										    			    	    force.start();

										    			    	    var force2 = d3.layout.force().nodes(labelAnchors).links(labelAnchorLinks).gravity(0).linkDistance(0).linkStrength(8).charge(-100).size([w, h]);
										    			    	    force2.start();


										    			    	     //var node=[];
										    			    	     /* for(var key in nodes) {
										    			    	        var val = nodes[key];
										    			    	      alert("Key: "+key+" value:"+val);
										    			    	    } */
										    			    	    //var node = new Array();
										    			    	      /* for(var i=0;i &lt; nodes.length;i++){
										    			    	    	console.log("nodes length============= "+nodes[i].label);
										    			    	    	
										    			    	    	node = vis.selectAll("g.node").data(nodes[i].label).enter().append("svg:g").attr("class", "node");
										    			    	    	//alert(typeof(node));
										    			    	    }   */ 
										    			    	     /* var node = [];
										    			    	     for(var i=0;i &lt; 1;i++){
										    			    	    	 node = vis.selectAll("g.node").data(nodes).enter().append("svg:g").attr("class", "node");
										    			    	    	 //alert(typeof(nodes));
										    			    	    	 //node.append("svg:circle").attr("r", 2).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);  
										    			    	    }  */
										    			    	    //var node=[];

										    			    	    	//var node = vis.selectAll("g.node").data(nodes, function(d){return d;}).enter().append("svg:g").attr("class", "node");
										    			    	    	

										    			    	    //node.append("svg:circle").attr("r", function(patientIDArray) { return Math.ceil(patientIDArray/10); }).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);
										    			    	    // var node = [];
										    			    	    var patient_result = new Array();
										    			    	    var prescriber_result = new Array();
										    			    	    var new_nodes= [];
										    			    	    var new_name = 0;

										    			    	    var patient_max = 0;
										    			    	    var prescriber_max = 0;
										    			    	    var a = patientIDArray.length;
										    			    	    var b = prescriberArray.length;
										    			    	    for (counter=0;counter &lt; a;counter++)
										    			    	    {
										    			    	     if (patientIDArray[counter] > patient_max)
										    			    	     {
										    			    	    	 patient_max = patientIDArray[counter];
										    			    	     }
										    			    	    }
										    			    	    for (counter=0;counter &lt; b;counter++)
										    			    	    {
										    			    	     if (prescriberArray[counter] > prescriber_max)
										    			    	     {
										    			    	    	 prescriber_max = prescriberArray[counter];
										    			    	     }
										    			    	    }
										    			    	    console.log("   " +patient_max+"   "+prescriber_max);
										    			    	     for(var i=0;i &lt; 1;i++)
										    			    	    {
										    			    	     for(var j=0;j &lt; nodes.length;j++)
										    			    	     {
										    			    	    	 new_nodes.push(nodes[j].label);
										    			    	    	 console.log("new_nodes====== "+new_nodes[j]);
										    			    	    	 new_name=new_nodes[j];
										    			    	    	 console.log("new_name====== "+new_name);
										    			    	    	 //var node = vis.selectAll("g.node").data(nodes).enter().append("svg:g").attr("class", "node");
										    			    	    	 //alert(typeof(new_nodes)+node.length);
										    			    	    	 console.log("patient count+++++++++ "+patientIDArray[j]);
										    			    	    	  // var fixed=patientIDArray[i];
										    			    	    	   var patient_fixed=patient_max;
										    			    	    	   var prescriber_fixed=prescriber_max;
										    			    	    	   console.log("fixed============== "+prescriber_fixed);
										    			    	    	   patient_result.push(Math.ceil(10*(patientIDArray[j]/patient_fixed)));
										    			    	    	   //prescriber_result.push(Math.ceil(prescriberArray[j]/prescriber_fixed));
										    			    	    	  prescriber_result.push(prescriberArray[j]/prescriber_fixed);
										    			    	    	   
										    			    	    	  // result=Math.ceil(result);
										    			    	    	   console.log("Final count================ "+patient_result+"    "+prescriber_result);
										    			    	    	   //node = vis.selectAll("g.node").data(nodes[j]).enter().append("svg:g").attr("class", "node");
										    			    	    	   
										    			    	    		   //node.append("svg:circle").attr("r", result).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 0); 
										    			    	    	 //node.append("svg:circle").attr("r", 2).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);  
										    			    	    		   //alert(node.length);
										    			    	    	   
										    			    	    }
										    			    	    } 
										    			    	     console.log("patient_result================ "+patient_result);
										    			    	     
										    			    	     var link = vis.selectAll("line.link").data(links).enter().append("svg:line").attr("class", "link").style("stroke", "#000066").style("stroke-width", 
										    			    	    		 function(d,i){
										    			    	    	 		if(prescriber_result[i] == 0)
										    			    	    	 			{
										    			    	    	 			return 0.2;
										    			    	    	 			}
										    			    	    	 		else
										    			    	    	 			{
										    			    	    	 			return prescriber_result[i];
										    			    	    	 			}
										    			    	    	 			});
										    			    	     //var m=0;
										    			    	     //while(m &lt; nodes.length){
										    			    	    var node=vis.selectAll("g.node").data(force.nodes()).enter().append("svg:g").attr("class", "node")
										    			    	     	.append("svg:circle").attr("r", function(d,i){return patient_result[i];}).style("fill", "#7CB5EC").style("stroke", "#7CB5EC").style("stroke-width", .1)
										    			    	     	  .on("mouseover", function(d,i) {
										    			    	    	div.transition()
										    			    	    		.duration(100)
										    			    	    		.style("border",5)
										    			    	    		.style("opacity", .8);
										    			    	    	div.html(patientIDArray[i] + " patients")
										    			    	    		.style("left", (d3.event.pageX) + "px")
										    			    	    		.style("top", (d3.event.pageY - 28) + "px");
										    			    	    	}).on("mouseout", function(d) {
										    			    	            div.transition()
										    			    	            .duration(500)
										    			    	            .style("opacity", 0);
										    			    	    })  /* .on("mouseover", function(){return tooltip.style("visibility", "visible");})
										    			    	    .on("mousemove", function(){return tooltip.style("top", (event.pageY-10)+"px").style("left",(event.pageX+10)+"px");})
										    			    	    .on("mouseout", function(){return tooltip.style("visibility", "hidden");}) */; 
										    			    	     	//m++;
										    			    	     //}
										    			    	     	
										    			    	    //var count=;
										    			    	       for(var i=0;i &lt; 1;i++)
										    			    	    	{
										    			    	    	   for(var j=0;j &lt; nodes.length;j++)
										    			    	    		   {
										    			    	    		     /* console.log("patient count+++++++++ "+patientIDArray[j]);
										    			    	    		   var fixed=patientIDArray[i];
										    			    	    		   //console.log("fixed============== "+fixed);
										    			    	    		   result=10*(patientIDArray[j]/fixed);
										    			    	    		   var randomValues = Math.random(result);
										    			    	    		   //console.log(patientIDArray[j]);
										    			    	    		  // result=Math.ceil(result);
										    			    	    		   console.log("Final count================ "+result);
										    			    	    		   //node = vis.selectAll("g.node").data(nodes[j]).enter().append("svg:g").attr("class", "node");
										    			    	    		   
										    			    	    			   node.append("svg:circle").attr("r", result).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);   */
										    			    	    			   
										    			    	    		   
										    			    	    		   }
										    			    	    	  /* for(var j=0;j &lt;= i;j++)
										    			    	    		  { */
										    			    	    		  
										    			    	    		 // console.log("doctorNameArray.length========= "+nodes[i].label);
										    			    	    	 /* console.log("patient count+++++++++ "+patientIDArray[i]);
										    			    	    	 var count=patientIDArray[i];
										    			    	    	 
										    			    	    	 console.log("Final count================ "+result); */
										    			    	    	// count=count+10;
										    			    	    	// console.log(patientIDArray[i]);
										    			    	    	//if (doctorNameArray[i] == doctorNameArray[i+1]) {
										    			    	           	//console.log("inside for loop "+i);
										    			    	           // count++;
										    			    	          // alert(nodes);
										    			    	          //var name=nodes[i].label;
										    			    	          //new_nodes.push(name);
										    			    	         // console.log("new node ================= "+new_nodes[i]);
										    			    	           //console.log("nodes length============= "+nodes[i]+" "+name);
										    			    	           //new_name=new_nodes[i];
										    			    	           //console.log("new name================= "+new_name);
										    			    	         // var node = vis.selectAll("g.node").data(nodes).enter().append("svg:g").attr("class", "node");
										    			    	          
										    			    	           /* if (nodes[i].label == nodes[i+1].label) 
										    			    	    		{
										    			    	        	   					
										    			    	    			            	console.log("doctorNameArray "+doctorNameArray[i]+" "+doctorNameArray[i+1]);
										    			    	    			            	console.log("nodes length============= "+nodes[i]);
										    			    	    			            	count++;
										    			    	    			            	console.log("if count============== "+count);
										    			    	    			            	console.log("if node============== "+node);
										    			    	    			            	node.append("svg:circle").attr("r", count).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);
										    			    	    	   }
										    			    	           else  
										    			    	    		{ 
										    			    	        	   count = 1; 
										    			    	    		   console.log("else count============== "+count);
										    			    	    		   console.log("else node============== "+node);
										    			    	    		   node.append("svg:circle").attr("r", count).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);
										    			    	    		}  */
										    			    	    	/* } */
										    			    	           // count++;
										    			    	             /* node.append("svg:circle").attr("r", 
										    			    	            		 function(x) 
										    			    	    	        	 {
										    			    	    	            		var returnColor;
										    			    	    			            if (doctorNameArray[i] == doctorNameArray[i+1]) 
										    			    	    			            {
										    			    	    			            	console.log("doctorNameArray "+doctorNameArray[i]+" "+doctorNameArray[i+1]);
										    			    	    			            	count++;
										    			    	    			            	returnColor = count;
										    			    	    			            	console.log("if count============== "+count);
										    			    	    			            	console.log("if count returnColor============== "+returnColor+" "+i);
										    			    	    			            }
										    			    	    	           // if (x > 1) { returnColor = count; } 
										    			    	    	            		else  
										    			    	    	            		{ 
										    			    	    	            			returnColor = 1; 
										    			    	    	            			console.log("else count============== "+returnColor);
										    			    	    	            		} 
										    			    	                 			return returnColor;
										    			    	                	}).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3)
										    			    	            ;  */
										    			    	        // }
										    			    	    	// else
										    			    	    		//{
										    			    	    		 //console.log("doctorNameArray "+doctorNameArray[i]+" "+doctorNameArray[i+1]);
										    			    	    		//count=1;
										    			    	    		//node.append("svg:circle").attr("r", count).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);
										    			    	    		/* node.append("svg:circle").attr("r", function(x) {
										    			    	                var returnColor;
										    			    	                if (x === 1) { returnColor = count; } 
										    			    	                else  {  } 
										    			    	                 return returnColor;
										    			    	                }).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3)
										    			    	    		; */
										    			    	    		//console.log("else count============== "+count);
										    			    	    		//} 
										    			    	    	
										    			    	    	
										    			    	    	}   
										    			    	     node.call(force.drag);



										    			    	    var anchorLink = vis.selectAll("line.anchorLink").data(labelAnchorLinks)//.enter().append("svg:line").attr("class", "anchorLink").style("stroke", "#999");

										    			    	    var anchorNode = vis.selectAll("g.anchorNode").data(force2.nodes()).enter().append("svg:g").attr("class", "anchorNode");
										    			    	    anchorNode.append("svg:circle").attr("r", 0).style("fill", "#FFF");
										    			    	    	anchorNode.append("svg:text").text(function(d, i) {
										    			    	    	return i % 2 == 0 ? "" : d.node.label
										    			    	    }).style("fill", "#000066").style("font-family", "Arial").style("font-size", 12);

										    			    	    var updateLink = function() {
										    			    	    	this.attr("x1", function(d) {
										    			    	    		return d.source.x;
										    			    	    	}).attr("y1", function(d) {
										    			    	    		return d.source.y;
										    			    	    	}).attr("x2", function(d) {
										    			    	    		return d.target.x;
										    			    	    	}).attr("y2", function(d) {
										    			    	    		return d.target.y;
										    			    	    	});

										    			    	    }

										    			    	    var updateNode = function() {
										    			    	    	this.attr("transform", function(d) {
										    			    	    		return "translate(" + d.x + "," + d.y + ")";
										    			    	    	});

										    			    	    }


										    			    	    force.on("tick", function() {

										    			    	    	force2.start();

										    			    	    	node.call(updateNode);

										    			    	    	anchorNode.each(function(d, i) {
										    			    	    		if(i % 2 == 0) {
										    			    	    			d.x = d.node.x;
										    			    	    			d.y = d.node.y;
										    			    	    		} else {
										    			    	    			var b = this.childNodes[1].getBBox();

										    			    	    			var diffX = d.x - d.node.x;
										    			    	    			var diffY = d.y - d.node.y;

										    			    	    			var dist = Math.sqrt(diffX * diffX + diffY * diffY);

										    			    	    			var shiftX = b.width * (diffX - dist) / (dist * 2);
										    			    	    			shiftX = Math.max(-b.width, Math.min(0, shiftX));
										    			    	    			var shiftY = 5;
										    			    	    			this.childNodes[1].setAttribute("transform", "translate(" + shiftX + "," + shiftY + ")");
										    			    	    		}
										    			    	    	});


										    			    	    	anchorNode.call(updateNode);

										    			    	    	link.call(updateLink);
										    			    	    	anchorLink.call(updateLink);

										    			    	    });		
										    			    	    
										    			    	    
										    			    	    //Chart for Insurance
											    			    	
										    			    		dataSetBar=args.insuranceChartData;
					                                                 console.log("insuranceChartDaata::::"+dataSetBar);
										    			        	 var barData =$.parseJSON(dataSetBar);
										    			        	 var barDataLen=barData.length;
										    			        	 
										    			        	 if(barDataLen==0)
										    	                 	{
										    	                 	
										    	                 	 document.getElementById('chartDefault').style.display="block";
										    	                 	 document.getElementById('chart').style.display="none";
										    	                 	}
										    			        	 
										    			        //	 alert(datavalue);
										    			      	   $.each(barData, function(index, value) {
										    			      	 //   	console.log("drugCategory "+this['DrugCategory']+"totalDrug"+this['totalDrug']);
										    			      	    	});
										    			      
										    			      	 var processed_json = new Array();
										    			      	 for(var i in barData)
										    					 {
										    						console.log("json array company Name  "+barData[i].rangeName);
										    						console.log("json array company Value "+barData[i].countValue);
										    					 var companyName= barData[i].rangeName;
										    					
										    					 var totalPatientCount = barData[i].countValue;
										    					
										    					  processed_json.push([(companyName),(totalPatientCount)]);
										    					
										    					 }
										    			              
										    			        	console.log("printing json array data "+processed_json);
										    			    	    $('#chart').highcharts({
										    			                chart: {
										    			                    type: 'bar'
										    			                },
										    			                title: {
										    			                    text: ' '
										    			                },
										    			                subtitle: {
										    			                    text: ''
										    			                },
										    			                xAxis: {
										    			                    type: 'category',
										    			                    labels: {
										    			                        rotation: -360,
										    			                        formatter: function() {
										    			                            return(this.value.substring(0,10) + "...");
										    			                        },
										    			                        style: {
										    			                            fontSize: '10px',
										    			                            fontFamily: 'Verdana, sans-serif',
										    			                           
										    			                        }
										    			                    }
										    			                },
										    			                yAxis: {
										    			                    min: 0,
										    			                    title: {
										    			                        text: ''
										    			                           
										    			                    }
										    			                },
										    			                legend: {
										    			                    enabled: false
										    			                },
										    			                tooltip: {
										    			                	useHTML:true,
										    			                
										    			                	//pointFormat: 'Total Drug: <b>{point.y:.1f} </b>',
										    			                	
										    			                	 formatter: function() {
										    		                            //return "<div style='width: 400px; white-space:normal;'>"+this.point.name.substring(0,this.point.name.indexOf(',')+1)+'<br />'+this.point.name.substring(this.point.name.indexOf(',')+1,this.point.name.length)+'<br />'+'Drugs:'+'<b>'+ this.point.y+'.0</b>'+ "</div>";
										    		                            return  this.point.name +"<br/>"+'Total Patients: '+'<b>'+ this.point.y+'</b>';
										    		                       } 
										    			                
										    			                    
										    			                },
										    			                
										    			                plotOptions: {
										    			                    column: {
										    			                        pointPadding: 0.2,
										    			                        borderWidth: 0,
										    			                        color:'#7CB5EC'
										    			                    }
										    			                },
										    			                series: [{
										    			                	pointWidth: 18,
										    			                	name: '',
										    			                    data:processed_json, 
										    			                    color:'#7CB5EC',
										    			                    dataLabels: {
										    			                        enabled: true,
										    			                        rotation: -360,
										    			                        color: '#FFFFFF',
										    			                        align: 'right',
										    			                        x: -8,
										    			                        y: 3,
										    			                        style: {
										    			                            fontSize: '9px',
										    			                            fontFamily: 'Verdana, sans-serif',
										    			                            textShadow: '0 0 3px black'
										    			                        }
										    			                    }
										    			                }]
										    			            });
				    	}
				    	
			
			

		 </script>
			<script type="text/javascript" language="javascript">
		
    
    function fnTimeOnEnbrel(rangeName,noOfPatientsOnEnbrelJSonData)
    {
    	var patientIds;
		for(var range in noOfPatientsOnEnbrelJSonData){
			if(noOfPatientsOnEnbrelJSonData[range].rangeName == rangeName ){
				patientIds=noOfPatientsOnEnbrelJSonData[range].patients;
				break;
			}
		}
    	
    	document.getElementById('timeOnEnbrelFormId:hiddenTexforTimeOnEnbrel').value=rangeName;
    	document.getElementById('timeOnEnbrelFormId:hiddenTextforPatientsTimeOnEnbrel').value=patientIds;
		document.getElementById('timeOnEnbrelFormId:hiddenBtnforTimeOnEnbrel').click();

    }
    
    function fnEnbrelConcurrentMeds(drugName,enbrelConcurrentMedsJSONData)
    {
    	var drugNameId;
    	for(var range in enbrelConcurrentMedsJSONData){
    		if(enbrelConcurrentMedsJSONData[range].rangeName == drugName ){
    			drugNameId=enbrelConcurrentMedsJSONData[range].drugNameId;
				break;
			}
    	}
    	document.getElementById('enbrelConcurrentMedsFormId:hiddenTexforEnbrelConcurrentMeds').value=drugName;
    	document.getElementById('enbrelConcurrentMedsFormId:hiddenTexforEnbrelConcurrentMedsDrugNameId').value=drugNameId;
		document.getElementById('enbrelConcurrentMedsFormId:hiddenBtnforEnbrelConcurrentMeds').click();
    }
    
    function fnEnbrelRAdrug(radrugName)
    {
    	document.getElementById('enbrelRAdrugFormId:hiddenTexforEnbrelRAdrug').value=radrugName;
		document.getElementById('enbrelRAdrugFormId:hiddenBtnforEnbrelRAdrug').click();
    }
    
    
    function fnshowDrugDetailSpeciality(id)
    {

    	/*  alert(id+'dd');   */   	
    	 document.getElementById('frmMedSpvsnon:hiddenTexforSPMed').value=id;
     	
 		document.getElementById('frmMedSpvsnon:hiddenbtnforSPMed').click();
   /* 	alert(id);  */

    }
		   function noBack() {
			    window.location.hash="no-back-button";
				window.location.hash="Again-No-back-button";//again because google chrome don't insert first hash into history
				window.onhashchange=function(){window.location.hash="";}
		       }
		     
			 function customExtender() {
			    this.cfg.highlighter = {
			      useAxesFormatters: false,
			      tooltipAxes: 'x'
			    }
			  }
			 
			
			

			function updatePateintAna(){
				document.getElementById('hiddenFromForPatient:hiddenButtonForPateintAna').click();
				}

			function fncompliance(string){
				//alert(string);
                   document.getElementById('complianceFrom:hiddenInputForComliance').value=string;
                   document.getElementById('complianceFrom:hiddenBtnForCompliance').click();
				}
			
			function fnEnbrelCompliance(string){
				
                   document.getElementById('enbrelComplianceFormId:hiddenInputForEnbrelComliance').value=string;
                   document.getElementById('enbrelComplianceFormId:hiddenBtnForEnbrelCompliance').click();
				}
			
			function fnAgeSplit(ageSplitValue,noOfPatients,ageSplitArray){
			
				
				
				var lowRangeAgeValue;
				var highRangeAgeValue;
				for(var ageObj in ageSplitArray){
					if(ageSplitArray[ageObj].rangeName == ageSplitValue )
				{
						if( ageSplitArray[ageObj].countValue==noOfPatients){
						lowRangeAgeValue=ageSplitArray[ageObj].lowRangeVal;
						highRangeAgeValue=ageSplitArray[ageObj].highRangeVal;
						break;
						}
				}
				}
				
				  document.getElementById('ageSplitFormId:hiddenInputForAgeSplit1').value=lowRangeAgeValue;
				  document.getElementById('ageSplitFormId:hiddenInputForAgeSplit2').value=highRangeAgeValue;
                  document.getElementById('ageSplitFormId:hiddenBtnForAgeSplit').click();
			}
			
			function fnGenderSplit(gender){
				  document.getElementById('genderSplitFormId:hiddenInputForGenderSplit').value=gender;
                  document.getElementById('genderSplitFormId:hiddenBtnForGenderSplit').click();
			}
		
		</script>


		</h:head>

		<p:blockUI id="blockDialog" widgetVar="blockUI">  
                               LOADING ...<br />
			<p:graphicImage value="./../../Images/ajax_loader.gif" width="40"
				height="40" />
		</p:blockUI>
		<!-- >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>...for Top display>>>>>>>>>>>>>>>>>>>>>>>>>>>> -->
		<p:layout fullPage="true">
			<p:layoutUnit position="north" size="85" minSize="60">

				<ui:include src="../Pharma/pharmaHeader.xhtml">
				</ui:include>
			</p:layoutUnit>

			<p:layoutUnit id="bottom" position="south" size="24">
				<ui:include src="../core/footer.xhtml"></ui:include>
			</p:layoutUnit>

			<p:layoutUnit id="left" position="west" size="0" closable="false"
				collapsible="true" minSize="0" style="border:none;">
				  <ui:include src="pharma_profile_leftmenu.xhtml">
				</ui:include> 
			</p:layoutUnit>
		
			<!-- >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>..top>>>>>>>>>>>>>>>>>>>>>>>>> -->
			<p:layoutUnit position="center">
				
	<h:form>
				<p:remoteCommand name="pharmaDashboardChartLoading" process="@this"
					actionListener="#{dashBoardManageBean.pharmaDashboardChartLoading}"
					oncomplete="renderOtherCharts(xhr,status,args);" async="true" update=":pateintAnaLytics:deferredId,:pateintAnaLytics:nrPatientId,:pateintAnaLytics:tnDrugId,:pateintAnaLytics:avPhyscianId,:pateintAnaLytics:avMedId" />
			</h:form>
				

			<h:form id="ddlFullInsuranceForm">
					<p:commandButton id="hiddenbtnforInsurancePatientFull"
						actionListener="#{userManageBean.getInsuranceDetailListBarFull}"
						update=":diag1" style="display: none"></p:commandButton>

				</h:form>

			
				<h:form id="ddlValFormFormulary">
					<p:commandButton id="hiddenbtnforFormulary"
						action="#{dashBoardManageBean.fetchPatientByFormulary}"
						style="display: none"
						oncomplete="formularyTierComplete(xhr, status, args)"></p:commandButton>
					<h:inputText id="hiddenTexforFormulary"
						value="#{dashBoardManageBean.levelVal4Formulary}"
						style="display:none"></h:inputText>
				</h:form>

				<!-- <h:form id="frmMedTaken">
					<p:remoteCommand id="rcMEDT" name="doAwesomeness" update="frmMedTaken:er5" action="#{reportManageBean.fetchDrugByCategoryChart}"  autoRun="true"  /> 
					<p:commandButton id="hiddenbtnforMedT" style="display: none">
						<f:ajax event="click" immediate="true"
							listener="#{reportManageBean.fetchDrugByCategoryChart}"
							execute="hiddenbtnforMedT" render="outputDrugJSON"></f:ajax>

						 <p:ajax event="click" actionListener="#{reportManageBean.fetchDrugByCategoryChart}" update="outputDrugJSON" immediate="true"/>
					</p:commandButton>

					<h:inputText id="hiddenTexforMedT"
						value="#{reportManageBean.levelVal4DrugChart}"
						style="display:none"></h:inputText>

					<h:outputText id="outputDrugJSON"
						value="#{reportManageBean.rptMedByDrugCategoryBarList}"
						style="display:none">
					</h:outputText>
				</h:form> -->

			<h:form id="timeOnEnbrelFormId">
					

					<h:inputText id="hiddenTexforTimeOnEnbrel"
						value="#{dashBoardManageBean.chartModel.rangeName}"
						style="display:none"></h:inputText>
					
					<h:inputText id="hiddenTextforPatientsTimeOnEnbrel"
						value="#{dashBoardManageBean.chartModel.patients}"
						style="display:none"></h:inputText>
					
					<p:commandButton id="hiddenBtnforTimeOnEnbrel"
						actionListener="#{dashBoardManageBean.fetchPatientsForTimeOnEnbrel}"
						style="display:none">
					</p:commandButton>
				</h:form>
				
					<h:form id="enbrelConcurrentMedsFormId">
					

					<h:inputText id="hiddenTexforEnbrelConcurrentMeds"
						value="#{dashBoardManageBean.chartModel.rangeName}"
						style="display:none"></h:inputText>
						
					<h:inputText id="hiddenTexforEnbrelConcurrentMedsDrugNameId"
						value="#{dashBoardManageBean.chartModel.drugNameId}"
						style="display:none"></h:inputText>

					<p:commandButton id="hiddenBtnforEnbrelConcurrentMeds"
						actionListener="#{dashBoardManageBean.fetchPatientsForEnbrelConcurrentMeds}"
						style="display:none">
					</p:commandButton>
				</h:form>
				
					<h:form id="enbrelRAdrugFormId">
					

					<h:inputText id="hiddenTexforEnbrelRAdrug"
						value="#{dashBoardManageBean.chartModel.rangeName}"
						style="display:none"></h:inputText>

					<p:commandButton id="hiddenBtnforEnbrelRAdrug"
						actionListener="#{dashBoardManageBean.fetchPatientsForOtherEnbrelRAdrugs}"
						style="display:none">
					</p:commandButton>
				</h:form>

			

				<h:form id="complianceFrom">
					<h:inputHidden id="hiddenInputForComliance"
						value="#{dashBoardManageBean.selectedCompliancePart}" />
					<p:commandButton id="hiddenBtnForCompliance"
						actionListener="#{dashBoardManageBean.fetchPateintListForCompliance}"
						style="display: none" />
				</h:form>
				
				<h:form id="enbrelComplianceFormId">
					<h:inputHidden id="hiddenInputForEnbrelComliance"
						value="#{dashBoardManageBean.selectedCompliancePart}" />
					<p:commandButton id="hiddenBtnForEnbrelCompliance"
						actionListener="#{dashBoardManageBean.fetchPateintsForEnbrelCompliance}"
						style="display: none" />
				</h:form>
				
				<h:form id="ageSplitFormId">
					<h:inputHidden id="hiddenInputForAgeSplit1"
						value="#{dashBoardManageBean.chartModel.lowRangeVal}" />
					<h:inputHidden id="hiddenInputForAgeSplit2"
						value="#{dashBoardManageBean.chartModel.highRangeVal}" />
					<p:commandButton id="hiddenBtnForAgeSplit"
						actionListener="#{dashBoardManageBean.fetchPateintsForAgeSplit}"
						style="display: none" />
				</h:form>

				<h:form id="genderSplitFormId">
					<h:inputHidden id="hiddenInputForGenderSplit"
						value="#{dashBoardManageBean.chartModel.rangeName}" />
					<p:commandButton id="hiddenBtnForGenderSplit"
						actionListener="#{dashBoardManageBean.fetchPateintsForGenderSplit}"
						style="display: none" />
				</h:form>
				
				
				<h:form id="hiddenFromForPatient">
					<p:commandButton id="hiddenButtonForPateintAna"
						update=":pateintAnaLytics" style="display: none" />
				</h:form>
			

	<div id="fullNetworkChart" class="fullNetworkListDiv">
					<table width="100%" style="background-color: #FFFFFF">
						<tr>
							<td class="secHeadPart" valign="top">
								<table width="100%">
									<tr>
										<td><b>Physician Network</b></td>
										<td align="right"><a href="#" onclick="closeNetwork()">X</a>
										</td>
									</tr>
								</table>

							</td>

						</tr>
						<tr>
							<td align="center" valign="top">
								<!-- <ui:include src="../Doctor/NetworkChartFull.xhtml"></ui:include>  -->
								<table height="300px">
									<tr>
										<td align="center" valign="top"><div id="networkFull"></div></td>
									</tr>
									<tr>
										<td align="center" valign="top"><div id="networkDefault"
												style="display: none;">No Records Available</div></td>
									</tr>
								</table>
							</td>
						</tr>
					</table>


				</div>
<br/>
				<table width="100%" cellpadding="4" cellspacing="4">
					<tr>
						<td valign="top" width="30%"><h:form id="pateintAnaLytics">
								<table cellpadding="7" cellspacing="7" style="margin-left: 20px">
									<tr>
										<td style="min-width: 120px" valign="top">
											<table class="noticeBoard" cellpadding="0" cellspacing="0"
												width="140px">
												<tr>
													<td align="center"><img
														src="${request.contextPath}/Images/patientGroup.png"
														height="35px"> </img></td>
													<td class="numberBoard" style="width: 60px"><p:graphicImage
															value="./../../Images/grayProgressWheel.gif"
															rendered="#{userManageBean.numberOfPatientParticularProvider.size() eq null}"
															width="40" height="40" /> <h:outputText
															value=" #{userManageBean.numberOfPatientParticularProvider.size()}"
															style="color:#FFFFFF;font-weight:bolder;"></h:outputText>
													</td>
												</tr>
												<tr height="45px" style="padding-top: 5px">
													<td colspan="2" align="center"><h:outputText
															value=" Total Patients" style="color:#006;" /></td>
												</tr>
											</table> <!-- <h:outputText value=" #{msg.numberofPatientsunderPharmacotherapyManagement}" style="color:#006;"/>
					</td>
								<td style="background-color: #2F4F4F; width: 40px;height: 30px" align="center">
								   <h:outputText value=" #{userManageBean.numberOfPatientParticularProvider.size()} " style="color:#FFFFFF;font-weight:bolder;"></h:outputText> -->
										</td>
										<td style="min-width: 120px" valign="top">
											<table class="noticeBoard" cellpadding="0" cellspacing="0"
												width="120px">
												<tr>
													<td align="center"><img
														src="${request.contextPath}/Images/med.png" height="35px">
													</img></td>
													<td class="numberBoard" style="width: 60px">
													<p:outputPanel deferred="false" id="avMedId" styleClass="numberBoard">
													 <p:graphicImage
															value="./../../Images/grayProgressWheel.gif"
															rendered="#{userManageBean.averageMedicine eq ''}"
															width="40" height="40" /> 
															 <h:outputText
															value="#{userManageBean.averageMedicine}" rendered="#{userManageBean.averageMedicine ne ''}" 
															style="color:#FFFFFF;font-weight:bolder;"></h:outputText>

													</p:outputPanel>
													</td>
												</tr>
												<tr height="45px" style="padding-top: 5px">
													<td colspan="2" align="center"><h:outputText
															value=" Average Med" style="color:#006;" /></td>
												</tr>
											</table>

										</td>
										<td style="min-width: 120px">
											<table class="noticeBoard" cellpadding="0" cellspacing="0"
												width="140px">
												<tr>
													<td align="center"><img
														src="${request.contextPath}/Images/doctor.png"
														height="35px"> </img></td>
													<td class="numberBoard" style="width: 60px">
													<p:outputPanel id="avPhyscianId" deferred="false" styleClass="numberBoard">
													 <p:graphicImage
															value="./../../Images/grayProgressWheel.gif"
															rendered="#{userManageBean.averagePhysicians eq ''}"
															width="40" height="40" /> 
															 <h:outputText
															value="#{userManageBean.averagePhysicians}" rendered="#{userManageBean.averagePhysicians ne ''}"
															style="color:#FFFFFF;font-weight:bolder;"></h:outputText>
													</p:outputPanel>
													</td>
												</tr>
												<tr height="45px" style="padding-top: 5px">
													<td colspan="2" align="center"><h:outputText
															value=" Average Physician" style="color:#006;" /></td>
												</tr>
											</table>
										</td>

									</tr>
									<tr>
									<td style="min-width: 120px" valign="top">
									<table class="noticeBoard" cellpadding="0" cellspacing="0"
												width="140px">
									<tr>
										
													<td align="center"><img
														src="${request.contextPath}/Images/patientGroup.png"
														height="35px"> </img></td>
													<td class="numberBoard" style="width: 60px"> 
													<p:outputPanel id="tnDrugId" deferred="false" styleClass="numberBoard">
												
													 <p:graphicImage
															value="./../../Images/grayProgressWheel.gif"
															rendered="#{userManageBean.totalNumberOfDrugHistoryRecordsPulled eq ''}"
															width="40" height="40" /> 
													<h:outputText
															value="#{userManageBean.totalNumberOfDrugHistoryRecordsPulled}" rendered="#{userManageBean.totalNumberOfDrugHistoryRecordsPulled ne ''}"
															style="color:#FFFFFF;font-weight:bolder;"></h:outputText>
													</p:outputPanel>
													</td>
												</tr>
												<tr height="45px" style="padding-top: 5px">
													<td colspan="2" align="center"><h:outputText
															value="Total Number of Med Records Pulled" style="color:#006;" /></td>
															</tr>
										</table>	
										</td>			
											
										<td style="min-width: 120px" valign="top">
											<table class="noticeBoard" cellpadding="0" cellspacing="0"
												width="120px">
												<tr>
													<td align="center"><img
														src="${request.contextPath}/Images/patientGroup.png" height="35px">
													</img></td>
													<td class="numberBoard" style="width: 60px">
													<p:outputPanel id="nrPatientId" deferred="false" styleClass="numberBoard">
														 <p:graphicImage
															value="./../../Images/grayProgressWheel.gif"
															rendered="#{userManageBean.numberOfRowsPerPatient == ''}"
															width="40" height="40" /> 
													 <h:outputText
															value="#{userManageBean.numberOfRowsPerPatient}" rendered="#{userManageBean.numberOfRowsPerPatient != ''}"
															style="color:#FFFFFF;font-weight:bolder;"></h:outputText>
														</p:outputPanel>

													</td>
												</tr>
												<tr height="45px" style="padding-top: 5px">
													<td colspan="2" align="center"><h:outputText
															value="Number of Rows Per Patient" style="color:#006;" /></td>
												</tr>
											</table>

										</td>
										
										<td style="min-width: 120px">
											<table class="noticeBoard" cellpadding="0" cellspacing="0"
												width="140px">
												<tr>
													<td align="center"><img
														src="${request.contextPath}/Images/patientGroup.png"
														height="35px"> </img></td>
													<td class="numberBoard" style="width: 60px">
													<p:outputPanel deferred="false" id="deferredId" styleClass="numberBoard">
													  <p:graphicImage
															value="./../../Images/grayProgressWheel.gif"
															rendered="#{empty userManageBean.currentEnbrelPatientCount}"
															width="40" height="40" id="enbrelRotId"/> 
													 <h:outputText id="enbrelPatientCountsId" 
															value="#{userManageBean.currentEnbrelPatientCount}"
															rendered="#{not empty userManageBean.currentEnbrelPatientCount}"
															style="color:#FFFFFF;font-weight:bolder;text-align:center" />
															</p:outputPanel>
															</td>
												</tr>
												<tr height="45px" style="padding-top: 5px">
													<td colspan="2" align="center"><h:outputText
															value="Patients Currently on Specialty Drug"
															style="color:#006;" /></td>
												</tr>
											</table>
										</td>
										
										</tr>
									
									
									
								</table></h:form>
								</td>
								

<!-- overall adherence -->
						<td valign="top">
							<table width="100%" cellpadding="0" cellspacing="0"
								style="height: 252px; min-width: 220px"
								class="secContentBorderH">
								<tr height="30px">
									<td class="secHeadPartH" colspan="2">Overall Adherence</td>
								</tr>
								<tr class="secContentBorderH">

									<!-- <td width="10px"></td> -->
									<td align="center"><span id="containerTotalComplaince"
										style="width: 175px; height: 122px; margin: 0 auto"> <p:graphicImage
												value="./../../Images/grayProgressWheel.gif" width="40"
												height="40" />
									</span>
										<div id="containerTotalComplainceDefault"
											style="display: none; text-align: center">No Records
											Available</div>
										<div id="containerTotalComplainceAnlysis"
											style="background-color: #FFFFFF">
											<table style="font-size: 12px;">
												<tr>
													<td id="greenTotalID"
														style="background-color: GREEN; width: 60px; text-align: center; color: #FFFFFF; cursor: pointer;"
														onclick="fncompliance('green');"
														title="Compliance Percentage above 80 and Total Patients : #{userManageBean.noOfGreenSymbolPatient}">
														<h:outputText
															value="#{userManageBean.noOfGreenSymbolPatient}" />
													</td>
													<td
														style="background-color: ORANGE; width: 60px; text-align: center; color: #FFFFFF;cursor: pointer;"
														onclick="fncompliance('amber');"
														title="Compliance Percentage between 60-80 and Total Patients : #{userManageBean.noOfOrangeSymbolPatient}">
														<h:outputText
															value="#{userManageBean.noOfOrangeSymbolPatient}" />
													</td>
													<td
														style="background-color: RED; width: 60px; text-align: center; color: #FFFFFF;cursor: pointer;"
														onclick="fncompliance('red');"
														title="Compliance Percentage between 0-60 and Total Patients : #{userManageBean.noOfRedSymbolPatient}">
														<h:outputText
															value="#{userManageBean.noOfRedSymbolPatient}" />
													</td>
												</tr>
												<tr height="10px"></tr>
											</table>
										</div></td>

								</tr>
							</table>
						</td>
					
							
						


						<!-- Adherence on Enbrel -->
						<td valign="top">
							<table width="100%" cellpadding="0" cellspacing="0"
								style="height: 252px; min-width: 220px"
								class="secContentBorderH">
								<tr height="30px">
									<td class="secHeadPartH" colspan="2">Adherence on Specialty Drug</td>
								</tr>
								<tr class="secContentBorderH">

									<!-- <td width="10px"></td> -->
									<td align="center"><span id="containerComplaince"
										style="width: 175px; height: 122px; margin: 0 auto"> <p:graphicImage
												value="./../../Images/grayProgressWheel.gif" width="40"
												height="40" />
									</span>
										<div id="containerComplainceDefault"
											style="display: none; text-align: center">No Records
											Available</div>
										<div id="containerComplainceAnlysis"
											style="background-color: #FFFFFF">
											<table style="font-size: 12px;">
												<tr>
													<td id="greenID"
														style="background-color: GREEN; width: 60px; text-align: center; color: #FFFFFF; cursor: pointer;"
														onclick="fnEnbrelCompliance('green');"
														title="Compliance Percentage above 80 and Total Patients : #{userManageBean.enbrelPatientsHighCompliance}">
														<h:outputText
															value="#{userManageBean.enbrelPatientsHighCompliance}" />
													</td>
													<td
														style="background-color: ORANGE; width: 60px; text-align: center; color: #FFFFFF;cursor: pointer;"
														onclick="fnEnbrelCompliance('amber');"
														title="Compliance Percentage between 60-80 and Total Patients : #{userManageBean.enbrelPatientsMedCompliance}">
														<h:outputText
															value="#{userManageBean.enbrelPatientsMedCompliance}" />
													</td>
													<td
														style="background-color: RED; width: 60px; text-align: center; color: #FFFFFF;cursor: pointer;"
														onclick="fnEnbrelCompliance('red');"
														title="Compliance Percentage between 0-60 and Total Patients : #{userManageBean.enbrelPatientsLowCompliance}">
														<h:outputText
															value="#{userManageBean.enbrelPatientsLowCompliance}" />
													</td>
												</tr>
												<tr height="10px"></tr>
											</table>
										</div></td>

								</tr>
							</table>
						</td>

					
					

					</tr>
				</table>

				<!-- Chart area -->
				<table width="100%" style="margin-top: 5px;" cellpadding="4"
					cellspacing="4">
					<tr>
					

					

						<!--•	Number of Patients Recently Taking Another RA Drug -->
						<td valign="top">
							<!-- <fieldset style="min-width:350px;height:270px;" class="fieldContent">
					  <legend class="titleBar">Compliance Meter</legend> -->

							<table width="100%" cellpadding="0" cellspacing="0"
								style="height: 252px" class="secContentBorderH">
								<tr height="30px">
									<td class="secHeadPartH">Number of Patients Taking Another RA Drug</td>
								</tr>
								<tr class="secContentBorderH">
									<td align="center">
										<div id="containerMedT"
											style="width: 340px; height: 200px; display: table-cell; text-align: center; vertical-align: middle">
											<p:graphicImage value="./../../Images/grayProgressWheel.gif"
												width="40" height="40" />
										</div>
										<div id="containerMedTDefault"
											style="display: none; text-align: center">No Records
											Available</div>
									</td>
								</tr>

							</table> <!-- </fieldset> -->
						</td>


						<!--•	Time on Enbrel -->
						<td valign="top">
							<!-- <fieldset style="min-width:350px;height:270px;" class="fieldContent">
					  <legend class="titleBar">Compliance Meter</legend> -->

							<table width="100%" cellpadding="0" cellspacing="0"
								style="height: 252px" class="secContentBorderH">
								<tr height="30px">
									<td class="secHeadPartH">Time on Specialty Drug</td>
								</tr>
								<tr class="secContentBorderH">
									<td align="center">
										<div id="timeOnEnbrelId"
											style="width: 340px; height: 200px; display: table-cell; text-align: center; vertical-align: middle">
											<p:graphicImage value="./../../Images/grayProgressWheel.gif"
												width="40" height="40" />
										</div>
										<div id="timeOnEnbrelIdDefault"
											style="display: none; text-align: center">No Records
											Available</div>
									</td>
								</tr>

							</table> <!-- </fieldset> -->
						</td>
						
							<!--•	Most Common Concurrent Meds for Enbrel-->
						<td valign="top">
							<!-- <fieldset style="min-width:350px;height:270px;" class="fieldContent">
					  <legend class="titleBar">Compliance Meter</legend> -->

							<table width="100%" cellpadding="0" cellspacing="0"
								style="height: 252px" class="secContentBorderH">
								<tr height="30px">
									<td class="secHeadPartH">Most Common Concurrent Meds for Specialty Drug</td>
								</tr>
								<tr class="secContentBorderH">
									<td align="center">
										<div id="concurrentMedsEnbrelId"
											style="width: 340px; height: 200px; display: table-cell; text-align: center; vertical-align: middle">
											<p:graphicImage value="./../../Images/grayProgressWheel.gif"
												width="40" height="40" />
										</div>
										<div id="concurrentMedsEnbrelIdDefault"
											style="display: none; text-align: center">No Records
											Available</div>
									</td>
								</tr>

							</table> <!-- </fieldset> -->
						</td>

					</tr>
				</table>
				
				
				
				<table width="100%" cellpadding="3" cellspacing="3">
					<tr>
						<td valign="top">
							<!-- <fieldset style="min-width:400px;min-height:270px;" class="fieldContent">
					  <legend class="titleBar">Clinics</legend>
					 <center> -->
							<table width="100%" cellpadding="0" cellspacing="0"
								style="height: 252px" class="secContentBorderH">
								<tr height="30px">
									<td class="secHeadPartH">Age Split</td>
								</tr>
								<tr class="secContentBorderH">
									<td align="center"><span id="ageSplitId"
										style="width: 340px; height: 220px; margin: 0 auto; display: table-cell; text-align: center; vertical-align: middle">
											<p:graphicImage value="./../../Images/grayProgressWheel.gif"
												width="40" height="40" />
									</span>
										<div id="ageSplitDefault"
											style="display: none; text-align: center">No Records
											Available</div></td>
								</tr>
							</table>
						</td>

					<td valign="top">
							
							<table width="100%" cellpadding="0" cellspacing="0"
								style="height: 252px" class="secContentBorderH">
								<tr height="30px">
									<td class="secHeadPartH">Gender Split</td>
								</tr>
								<tr class="secContentBorderH">
									<td align="center"><span id="genderSplitId"
										style="width: 340px; height: 220px; margin: 0 auto; display: table-cell; text-align: center; vertical-align: middle">
											<p:graphicImage value="./../../Images/grayProgressWheel.gif"
												width="40" height="40" />
									</span>
										<div id="genderSplitDefault"
											style="display: none; text-align: center">No Records
											Available</div></td>
								</tr>
							</table>
						</td>

					

				

					</tr>
					
					<tr>
					<td valign="top" width="30%">
							<table style="height: 400px;" width="100%" cellpadding="0"
								cellspacing="0" class="secContentBorderH">
								<tr height="30px">
									<td class="secHeadPartH">Physician Network</td>
								</tr>
								<tr class="secContentBorderH">
									<td valign="top" align="center" bgcolor="#FFFFFF">
										<!-- <img src="images/Network_chart.png" height="345px" width="550px"></img> -->
										<table width="100%">
											<tr>
												<td align="center">
													<!-- <ui:include src="../Doctor/NewChartForNetwork.xhtml"></ui:include> -->
													<!-- <p:graphicImage value="./../../Images/grayProgressWheel.gif" rendered="#{DashBoardManageBean.networkChartList.size()==0}" width="40" height="40" /> -->
													<div id="network" style="float: left"></div>
													<table>
														<tr>
															<td><div id="networkDefault"
																	style="display: none; text-align: center">No
																	Records Available</div></td>
														</tr>
													</table>
												</td>
											</tr>
										</table>
										</td>
									</tr>
								</table>
										<table width="100%" style="margin-top: -20px">
											<tr>
												<!-- onclick="initPopUp();showPopWin('NetworkChartFull.jsf', 1200, 628, null);" oncomplete="fullNetworkDivDialog.show();"-->
												<td align="right" valign="bottom"><h:form
														id="networkForm">
														<p:commandLink
															value="Total Number of Doctors in Your Network: #{dashBoardManageBean.total_connectedDoctor}"
															style="font-weight:bold" onclick="showNetwork();">

														</p:commandLink>
													</h:form></td>
											</tr>
										</table>

										<div></div>
						</td>
						<td valign="top" width="30%">
							<!-- <fieldset style="width:360px;height:270px;font-size: 11px;" class="fieldContent"> -->
							<!-- <legend class="titleBar">Insurance</legend> -->

							<table width="100%" cellpadding="0" cellspacing="0"
								style="height: 400px;" class="secContentBorderH">
								<tr height="30px">
									<td class="secHeadPartH">Prescription Plan</td>
								</tr>
								<tr class="secContentBorderH">
									<td align="center">
										<div id="chart"
											style="width: 325px; height: 300px; display: table-cell; text-align: center; vertical-align: middle">
											<p:graphicImage value="./../../Images/grayProgressWheel.gif"
												width="40" height="40" />
										</div>
										<div id="chartDefault"
											style="display: none; text-align: center">No Records
											Available</div>
									</td>
								</tr>

							</table>
							<table width="100%" style="margin-top: -20px">
								<tr>
									<td align="right"><h:form id="InsuranceForm">
											<p:commandLink value="view all Insurance"
												style="font-weight:bold" onclick="showfullInsuranceChart();">

											</p:commandLink>
										</h:form></td>
								</tr>
							</table> <!--  <div style="height:30px;background-color:rgb(70,130,180); "></div>
					</fieldset>  -->
						</td>
					</tr>
				</table>
		

			

				

				

			
			
				<p:dialog widgetVar="complianceDrillDown" id="complianceDrillID"
					dynamic="true" header="List of Patients" modal="true"
					appendTo="@(body)" hideEffect="fold" resizable="true"
					position="450,200">
					<p:ajax event="close" update="complianceDrillID" />
					<h:form id="complianceFrmDrillDown">
						<p:dataTable id="DTblComplianceDrill"
							value="#{dashBoardManageBean.pateintListForComplianceMeterList}"
							var="complianceDrillDown" scrollable="true" scrollHeight="272"
							style="width:500px;table-layout: auto"
							rowKey="#{complianceDrillDown.id}" selectionMode="single"
							emptyMessage="#{msg.noMedFound}">

							<p:column>
								<f:facet name="header">
									<h:outputText value="Patient ID" />
								</f:facet>
								<div align="center">
									<h:commandLink action="#{dashBoardManageBean.onRowSelect}"
										value="#{complianceDrillDown.userId}"
										style="text-decoration:underline;background-color:transparent;">
										<f:setPropertyActionListener
											target="#{dashBoardManageBean.selectedUserDetail}"
											value="#{complianceDrillDown}" />
									</h:commandLink>
								</div>
							</p:column>

							<p:column>
								<f:facet name="header">
									<h:outputText value="First Name" />
								</f:facet>
								<div align="center">
									<h:commandLink action="#{dashBoardManageBean.onRowSelect}"
										value="#{msg.pharma_starred_out}"
										style="text-decoration:underline;background-color:transparent;">
										<f:setPropertyActionListener
											target="#{dashBoardManageBean.selectedUserDetail}"
											value="#{complianceDrillDown}" />
									</h:commandLink>
								</div>
								<!-- <h:outputText value="#{anticoagListForLow.first_name}"></h:outputText> -->
							</p:column>
							<p:column>
								<f:facet name="header">
									<h:outputText value="Middle Name" />
								</f:facet>
								<div align="center">
									<h:commandLink action="#{dashBoardManageBean.onRowSelect}"
										value="#{msg.pharma_starred_out}"
										style="text-decoration:underline;background-color:transparent;">
										<f:setPropertyActionListener
											target="#{dashBoardManageBean.selectedUserDetail}"
											value="#{complianceDrillDown}" />
									</h:commandLink>
								</div>
							</p:column>
							<p:column>
								<f:facet name="header">
									<h:outputText value="Last Name" />
								</f:facet>
								<div align="center">
									<h:commandLink action="#{dashBoardManageBean.onRowSelect}"
										value="#{msg.pharma_starred_out}"
										style="text-decoration:underline;background-color:transparent;">
										<f:setPropertyActionListener
											target="#{dashBoardManageBean.selectedUserDetail}"
											value="#{complianceDrillDown}" />
									</h:commandLink>
								</div>
							</p:column>
							<p:column>
								<f:facet name="header">
									<h:outputText value="Date of Birth" />
								</f:facet>
								<div align="center">
									<h:commandLink action="#{dashBoardManageBean.onRowSelect}"
										value="#{msg.pharma_starred_out}"
										style="text-decoration:underline;background-color:transparent;">
										<f:setPropertyActionListener
											target="#{dashBoardManageBean.selectedUserDetail}"
											value="#{complianceDrillDown}" />
									</h:commandLink>
								</div>
							</p:column>
						</p:dataTable>
					</h:form>
				</p:dialog>

	<div id="fullInsuranceChart" class="fullNetworkListDiv">
					<table width="100%" style="background-color: #FFFFFF">
						<tr>
							<td class="secHeadPart" valign="top">
								<table width="100%">
									<tr>
										<td><b>Prescription Plan</b></td>
										<td align="right"><a href="#"
											onclick="closefullInsuranceChart()">X</a></td>
									</tr>
								</table>

							</td>

						</tr>
						<tr>
							<td align="center" valign="top">
								<!-- <ui:include src="../Doctor/NetworkChartFull.xhtml"></ui:include>  -->
								<table height="300px">
									<tr>
										<td align="center" valign="top"><div
												id="chartAllInsurance"></div></td>
									</tr>
									<tr>
										<td align="center" valign="top">
											<div id="chartAllInsuranceDefault" style="display: none;">No
												Records Available</div>
										</td>
									</tr>
								</table>
							</td>
						</tr>
					</table>


				</div>
		<h:form id="diag1">
					<p:dialog id="dlgForAnticoagClinicStatus1"
						widgetVar="dlgForAnticoagClinicStatusLow"
						header="List of Patients" modal="true" appendTo="@(body)"
						hideEffect="fold" resizable="true" position="450,200">

						<p:dataTable
							value="#{dashBoardManageBean.retrivePatientByAnticoagCategoryList}"
							var="anticoagListForLow" scrollable="true" scrollHeight="272"
							style="width:500px;table-layout: auto"
							rowKey="#{anticoagListForLow.id}" selectionMode="single"
							emptyMessage="#{msg.noMedFound}">

							<p:column>
								<f:facet name="header">
									<h:outputText value="Patient ID" />
								</f:facet>
								<div align="center">
									<h:commandLink action="#{dashBoardManageBean.onRowSelect}"
										value="#{anticoagListForLow.userId}"
										style="text-decoration:underline;background-color:transparent;">
										<f:setPropertyActionListener
											target="#{dashBoardManageBean.selectedUserDetail}"
											value="#{anticoagListForLow}" />
									</h:commandLink>
								</div>
								<!-- <h:outputText value="#{dlgPatientList.patientId}"></h:outputText> -->
							</p:column>

							<p:column>
								<f:facet name="header">
									<h:outputText value="First Name" />
								</f:facet>
								<div align="center">
									<h:commandLink action="#{dashBoardManageBean.onRowSelect}"
										value="#{msg.pharma_starred_out}"
										style="text-decoration:underline;background-color:transparent;">
										<f:setPropertyActionListener
											target="#{dashBoardManageBean.selectedUserDetail}"
											value="#{anticoagListForLow}" />
									</h:commandLink>
								</div>
								<!-- <h:outputText value="#{anticoagListForLow.first_name}"></h:outputText> -->
							</p:column>
							<p:column>
								<f:facet name="header">
									<h:outputText value="Middle Name" />
								</f:facet>
								<div align="center">
									<h:commandLink action="#{dashBoardManageBean.onRowSelect}"
										value="#{msg.pharma_starred_out}"
										style="text-decoration:underline;background-color:transparent;">
										<f:setPropertyActionListener
											target="#{dashBoardManageBean.selectedUserDetail}"
											value="#{anticoagListForLow}" />
									</h:commandLink>
								</div>
								<!-- <h:outputText value="#{anticoagListForLow.middle_name}"></h:outputText> -->
							</p:column>
							<p:column>
								<f:facet name="header">
									<h:outputText value="Last Name" />
								</f:facet>
								<div align="center">
									<h:commandLink action="#{dashBoardManageBean.onRowSelect}"
										value="#{msg.pharma_starred_out}"
										style="text-decoration:underline;background-color:transparent;">
										<f:setPropertyActionListener
											target="#{dashBoardManageBean.selectedUserDetail}"
											value="#{anticoagListForLow}" />
									</h:commandLink>
								</div>
								<!-- <h:outputText value="#{anticoagListForLow.last_name}"></h:outputText> -->
							</p:column>
							<p:column>
								<f:facet name="header">
									<h:outputText value="Date of Birth" />
								</f:facet>
								<div align="center">
									<h:commandLink action="#{dashBoardManageBean.onRowSelect}"
										value="#{msg.pharma_starred_out}"
										style="text-decoration:underline;background-color:transparent;">
										<f:setPropertyActionListener
											target="#{dashBoardManageBean.selectedUserDetail}"
											value="#{anticoagListForLow}" />
									</h:commandLink>
								</div>
								<!-- <h:outputText value="#{anticoagListForLow.date_of_birth}"></h:outputText> -->
							</p:column>
							<p:column>
								<f:facet name="header">
									<h:outputText value="INR Value" />
								</f:facet>
								<div align="center">
									<h:commandLink action="#{dashBoardManageBean.onRowSelect}"
										value="#{anticoagListForLow.result}"
										style="text-decoration:underline;background-color:transparent;">
										<f:setPropertyActionListener
											target="#{dashBoardManageBean.selectedUserDetail}"
											value="#{anticoagListForLow}" />
										<h:outputText value="!"
											rendered="#{((anticoagListForLow.medicine_stage eq 'Maintenance') and (anticoagListForLow.result gt 4.5))}"
											style="color:red;"></h:outputText>
									</h:commandLink>
								</div>
								<!-- <h:outputText value="#{anticoagListForLow.date_of_birth}"></h:outputText> -->
							</p:column>

						</p:dataTable>
						<!-- <h:outputText value="#{userManageBean.numberOfPatientforanticoagclinicforintiationphase}"></h:outputText> -->

					</p:dialog>
				</h:form>
			</p:layoutUnit>
		</p:layout>

	</f:view>
<!-- <script type="text/javascript" src="../../JavaScript/d3.v2.js"></script> -->
	<script type="text/javascript" src="../../JavaScript/gauge.js"></script>
<script type="text/javascript">
a=1;
function showNetwork()
{
document.getElementById('fullNetworkChart').style.display="block";	
if(a==1){
plotNetworkFullForMe();
}
a++;
}

function closeNetwork()
{
document.getElementById('fullNetworkChart').style.display="none";		
}

function showfullInsuranceChart()
{
document.getElementById('ddlFullInsuranceForm:hiddenbtnforInsurancePatientFull').click(); 
showInsuranceChart();
document.getElementById('fullInsuranceChart').style.display="block";
}

function closefullInsuranceChart()
{
document.getElementById('fullInsuranceChart').style.display="none";	
}
function showInsuranceChart()
{
dataSetBar='#{userManageBean.insuranceDetailListBarFull}';

 var barData =$.parseJSON(dataSetBar);
 console.log("insurance 1111::: "+barData);
 var barDataLen=barData.length;
 //alert(barDataLen);
 if(barDataLen==0)
	{
	
	 document.getElementById('chartAllInsuranceDefault').style.display="block";
	 document.getElementById('chartAllInsurance').style.display="none";
	}
 
//	 alert(datavalue);
 $.each(barData, function(index, value) {
//   	console.log("drugCategory "+this['DrugCategory']+"totalDrug"+this['totalDrug']);
  	});

var processed_json = new Array();
for(var i in barData)
{
console.log("json array company Name  "+barData[i].rangeName);
console.log("json array company Value "+barData[i].countValue);
var companyName= barData[i].rangeName;

var totalPatientCount = barData[i].countValue;

processed_json.push([(companyName),(totalPatientCount)]);

}
  
console.log("printing json array data "+processed_json);
$('#chartAllInsurance').highcharts({
    chart: {
        type: 'bar'
    },
    title: {
        text: ' '
    },
    subtitle: {
        text: ''
    },
    xAxis: {
        type: 'category',
        labels: {
            rotation: -360,
            formatter: function() {
                return(this.value.substring(0,10) + "...");
            },
            style: {
                fontSize: '10px',
                fontFamily: 'Verdana, sans-serif',
               
            }
        }
    },
    yAxis: {
        min: 0,
        title: {
            text: ''
               
        }
    },
    legend: {
        enabled: false
    },
    tooltip: {
    	useHTML:true,
    
    	//pointFormat: 'Total Drug: <b>{point.y:.1f} </b>',
    	
    	 formatter: function() {
            //return "<div style='width: 400px; white-space:normal;'>"+this.point.name.substring(0,this.point.name.indexOf(',')+1)+'<br />'+this.point.name.substring(this.point.name.indexOf(',')+1,this.point.name.length)+'<br />'+'Drugs:'+'<b>'+ this.point.y+'.0</b>'+ "</div>";
            return  this.point.name +"<br/>"+'Total Patients: '+'<b>'+ this.point.y+'</b>';
       } 
    
        
    },
    
    plotOptions: {
        column: {
            pointPadding: 0.2,
            borderWidth: 0,
            color:'#7CB5EC'
        }
    },
    series: [{
    	pointWidth: 18,
    	name: '',
        data:processed_json, 
        color:'#7CB5EC',
        dataLabels: {
            enabled: true,
            rotation: -360,
            color: '#FFFFFF',
            align: 'right',
            x: -8,
            y: 3,
            style: {
                fontSize: '9px',
                fontFamily: 'Verdana, sans-serif',
                textShadow: '0 0 3px black'
            }
        }
    }]
});
}

//Funtion to plot full network chart
function plotNetworkFullForMe()
{
valueForNetwork='#{dashBoardManageBean.networkChartListFull}';
var networkData= $.parseJSON(valueForNetwork);
var networklen = networkData.length;
/* networklen=0; */
 
if(networklen==0)
{
/*  alert(" value anand: "+specialityDrugData); */
 document.getElementById('networkFullDefault').style.display="block";
 document.getElementById('networkFull').style.display="none";
}
//console.log("networkData====== "+networkData);

var patientIDArray = new Array();
var doctorNameArray = new Array();
var prescriberArray = new Array();
for(var i in networkData){
	var doctorName = networkData[i].doctor_name;
	var patientID = networkData[i].patient_id;
	var doctor_prescriptions = networkData[i].doctor_prescriptions;
	patientIDArray.push(patientID);
	doctorNameArray.push(doctorName);
	prescriberArray.push(doctor_prescriptions);
	console.log("------------------ "+doctorNameArray[i]+"++++++++++++++++++++++ "+patientIDArray[i]+"********* "+prescriberArray[i]);
	
}
//var sorted_arr = doctorNameArray.sort();
 console.log(doctorNameArray);
var results = [];
for (var i = 0; i &lt; doctorNameArray.length ; i++) {
    if (doctorNameArray[i + 1] != doctorNameArray[i]) {
        results.push(doctorNameArray[i]);
    }
} 
//alert(results);

		
for(var i in patientIDArray)
	{
	
	}
/* var tooltip = d3.select("body")
.data(patientIDArray)
.append("div")
.style("position", "absolute")
.style("z-index", "10")
.style("visibility", "hidden")
.text(function(d,i){return patientIDArray[i];}); */

var w = 1100, h = 800;

var labelDistance = 0;

/* var vis = d3.select("#network").append("svg:svg").attr("width", w).attr("height", h); */

/* var vis = d3.select("#network").append("svg:svg")
.attr("width", w)
.attr("height", h); */

var vis = d3.select("#networkFull")
.append("svg")
.attr("width", w)
.attr("height", h);

  var div = d3.select("body")
.append("div")  // declare the tooltip div 
.attr("class", "tooltip")              // apply the 'tooltip' class
.style("opacity", 0);  
 
 

var nodes = [];
var labelAnchors = [];
var labelAnchorLinks = [];
var links = [];
//var new_nodes=[];
for(var i = 0; i &lt; doctorNameArray.length; i++) {
	if(doctorNameArray[i] != null)
		{
		var node = {
				label : "Dr " + doctorNameArray[i]
		 
			};
		//alert(doctorNameArray[i]);
		
	
	nodes.push(node);
	
	 labelAnchors.push({
		node : node
		
	});
	 
	 //console.log("labelAnchors========== "+labelAnchors.valueOf());
	labelAnchors.push({
		node : node
	}); 
	
		}
	/* new_nodes.push(nodes[i].label);
	var new_name=new_nodes[i]; */
	/*  console.log("nodes========== "+nodes[i].label+" patientIDArray "+patientIDArray[i]+" Dr " + doctorNameArray[i]);
	var node = vis.selectAll("g.node").data(nodes).enter().append("svg:g").attr("class", "node");
	node.append("svg:circle").attr("r", patientIDArray[i]).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);  */
	//console.log("labelAnchors1========== "+labelAnchors.valueOf());
};


for(var i = 0; i &lt; 1; i++) {
	for(var j = 0; j &lt;= nodes.length-1; j++) {
		//if(doctorNameArray[i] != doctorNameArray[i+1])
			links.push({
				source : i,
				target : j,
				weight : 1
			});		
		//console.log("i========= "+i+" j=============== "+j);
		//console.log("weight========= "+weight);
		labelAnchorLinks.push({
			source : j * 2,
			target : j * 2 + 1,
			weight : 2
		});	
	}
	
	//console.log("labelAnchorLinks========== "+labelAnchorLinks.valueOf());
};
//console.log("links========== "+links.length);
//console.log("labelAnchorLinks========== "+labelAnchorLinks.length);

var force = d3.layout.force().size([w, h]).nodes(nodes).links(links).gravity(1).linkDistance(50).charge(-3000).linkStrength(function(x) {
	return x.weight * 2
});


force.start();

var force2 = d3.layout.force().nodes(labelAnchors).links(labelAnchorLinks).gravity(0).linkDistance(0).linkStrength(8).charge(-100).size([w, h]);
force2.start();


 //var node=[];
 /* for(var key in nodes) {
    var val = nodes[key];
  alert("Key: "+key+" value:"+val);
} */
//var node = new Array();
  /* for(var i=0;i &lt; nodes.length;i++){
	console.log("nodes length============= "+nodes[i].label);
	
	node = vis.selectAll("g.node").data(nodes[i].label).enter().append("svg:g").attr("class", "node");
	//alert(typeof(node));
}   */ 
 /* var node = [];
 for(var i=0;i &lt; 1;i++){
	 node = vis.selectAll("g.node").data(nodes).enter().append("svg:g").attr("class", "node");
	 //alert(typeof(nodes));
	 //node.append("svg:circle").attr("r", 2).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);  
}  */
//var node=[];

	//var node = vis.selectAll("g.node").data(nodes, function(d){return d;}).enter().append("svg:g").attr("class", "node");
	

//node.append("svg:circle").attr("r", function(patientIDArray) { return Math.ceil(patientIDArray/10); }).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);
// var node = [];
var patient_result = new Array();
var prescriber_result = new Array();
var new_nodes= [];
var new_name = 0;

var patient_max = 0;
var prescriber_max = 0;
var a = patientIDArray.length;
var b = prescriberArray.length;
for (counter=0;counter &lt; a;counter++)
{
 if (patientIDArray[counter] > patient_max)
 {
	 patient_max = patientIDArray[counter];
 }
}
for (counter=0;counter &lt; b;counter++)
{
 if (prescriberArray[counter] > prescriber_max)
 {
	 prescriber_max = prescriberArray[counter];
 }
}
console.log("   " +patient_max+"   "+prescriber_max);
 for(var i=0;i &lt; 1;i++)
{
 for(var j=0;j &lt; nodes.length;j++)
 {
	 new_nodes.push(nodes[j].label);
	 console.log("new_nodes====== "+new_nodes[j]);
	 new_name=new_nodes[j];
	 console.log("new_name====== "+new_name);
	 //var node = vis.selectAll("g.node").data(nodes).enter().append("svg:g").attr("class", "node");
	 //alert(typeof(new_nodes)+node.length);
	 console.log("patient count+++++++++ "+patientIDArray[j]);
	  // var fixed=patientIDArray[i];
	   var patient_fixed=patient_max;
	   var prescriber_fixed=prescriber_max;
	   console.log("fixed============== "+prescriber_fixed);
	   patient_result.push(Math.ceil(10*(patientIDArray[j]/patient_fixed)));
	   //prescriber_result.push(Math.ceil(prescriberArray[j]/prescriber_fixed));
	  prescriber_result.push(prescriberArray[j]/prescriber_fixed);
	   
	  // result=Math.ceil(result);
	   console.log("Final count================ "+patient_result+"    "+prescriber_result);
	   //node = vis.selectAll("g.node").data(nodes[j]).enter().append("svg:g").attr("class", "node");
	   
		   //node.append("svg:circle").attr("r", result).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 0); 
	 //node.append("svg:circle").attr("r", 2).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);  
		   //alert(node.length);
	   
}
} 
 console.log("patient_result================ "+patient_result);
 
 var link = vis.selectAll("line.link").data(links).enter().append("svg:line").attr("class", "link").style("stroke", "#000066").style("stroke-width", 
		 function(d,i){
	 		if(prescriber_result[i] == 0)
	 			{
	 			return 0.2;
	 			}
	 		else
	 			{
	 			return prescriber_result[i];
	 			}
	 			});
 //var m=0;
 //while(m &lt; nodes.length){
var node=vis.selectAll("g.node").data(force.nodes()).enter().append("svg:g").attr("class", "node")
 	.append("svg:circle").attr("r", function(d,i){return patient_result[i];}).style("fill", "#7CB5EC").style("stroke", "#FFF").style("stroke-width", 1)
 	  .on("mouseover", function(d,i) {
	div.transition()
		.duration(100)
		.style("opacity", .8);
	div.html(patientIDArray[i] + " patients")
		.style("left", (d3.event.pageX) + "px")
		.style("top", (d3.event.pageY - 28) + "px");
	}).on("mouseout", function(d) {
        div.transition()
        .duration(500)
        .style("opacity", 0);
})  /* .on("mouseover", function(){return tooltip.style("visibility", "visible");})
.on("mousemove", function(){return tooltip.style("top", (event.pageY-10)+"px").style("left",(event.pageX+10)+"px");})
.on("mouseout", function(){return tooltip.style("visibility", "hidden");}) */; 
 	//m++;
 //}
 	
//var count=;
   for(var i=0;i &lt; 1;i++)
	{
	   for(var j=0;j &lt; nodes.length;j++)
		   {
		     /* console.log("patient count+++++++++ "+patientIDArray[j]);
		   var fixed=patientIDArray[i];
		   //console.log("fixed============== "+fixed);
		   result=10*(patientIDArray[j]/fixed);
		   var randomValues = Math.random(result);
		   //console.log(patientIDArray[j]);
		  // result=Math.ceil(result);
		   console.log("Final count================ "+result);
		   //node = vis.selectAll("g.node").data(nodes[j]).enter().append("svg:g").attr("class", "node");
		   
			   node.append("svg:circle").attr("r", result).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);   */
			   
		   
		   }
	  /* for(var j=0;j &lt;= i;j++)
		  { */
		  
		 // console.log("doctorNameArray.length========= "+nodes[i].label);
	 /* console.log("patient count+++++++++ "+patientIDArray[i]);
	 var count=patientIDArray[i];
	 
	 console.log("Final count================ "+result); */
	// count=count+10;
	// console.log(patientIDArray[i]);
	//if (doctorNameArray[i] == doctorNameArray[i+1]) {
       	//console.log("inside for loop "+i);
       // count++;
      // alert(nodes);
      //var name=nodes[i].label;
      //new_nodes.push(name);
     // console.log("new node ================= "+new_nodes[i]);
       //console.log("nodes length============= "+nodes[i]+" "+name);
       //new_name=new_nodes[i];
       //console.log("new name================= "+new_name);
     // var node = vis.selectAll("g.node").data(nodes).enter().append("svg:g").attr("class", "node");
      
       /* if (nodes[i].label == nodes[i+1].label) 
		{
    	   					
			            	console.log("doctorNameArray "+doctorNameArray[i]+" "+doctorNameArray[i+1]);
			            	console.log("nodes length============= "+nodes[i]);
			            	count++;
			            	console.log("if count============== "+count);
			            	console.log("if node============== "+node);
			            	node.append("svg:circle").attr("r", count).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);
	   }
       else  
		{ 
    	   count = 1; 
		   console.log("else count============== "+count);
		   console.log("else node============== "+node);
		   node.append("svg:circle").attr("r", count).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);
		}  */
	/* } */
       // count++;
         /* node.append("svg:circle").attr("r", 
        		 function(x) 
	        	 {
	            		var returnColor;
			            if (doctorNameArray[i] == doctorNameArray[i+1]) 
			            {
			            	console.log("doctorNameArray "+doctorNameArray[i]+" "+doctorNameArray[i+1]);
			            	count++;
			            	returnColor = count;
			            	console.log("if count============== "+count);
			            	console.log("if count returnColor============== "+returnColor+" "+i);
			            }
	           // if (x > 1) { returnColor = count; } 
	            		else  
	            		{ 
	            			returnColor = 1; 
	            			console.log("else count============== "+returnColor);
	            		} 
             			return returnColor;
            	}).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3)
        ;  */
    // }
	// else
		//{
		 //console.log("doctorNameArray "+doctorNameArray[i]+" "+doctorNameArray[i+1]);
		//count=1;
		//node.append("svg:circle").attr("r", count).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);
		/* node.append("svg:circle").attr("r", function(x) {
            var returnColor;
            if (x === 1) { returnColor = count; } 
            else  {  } 
             return returnColor;
            }).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3)
		; */
		//console.log("else count============== "+count);
		//} 
	
	
	}   
 node.call(force.drag);



var anchorLink = vis.selectAll("line.anchorLink").data(labelAnchorLinks)//.enter().append("svg:line").attr("class", "anchorLink").style("stroke", "#999");

var anchorNode = vis.selectAll("g.anchorNode").data(force2.nodes()).enter().append("svg:g").attr("class", "anchorNode");
anchorNode.append("svg:circle").attr("r", 0).style("fill", "#FFF");
	anchorNode.append("svg:text").text(function(d, i) {
	return i % 2 == 0 ? "" : d.node.label
}).style("fill", "#000066").style("font-family", "Arial").style("font-size", 12);

var updateLink = function() {
	this.attr("x1", function(d) {
		return d.source.x;
	}).attr("y1", function(d) {
		return d.source.y;
	}).attr("x2", function(d) {
		return d.target.x;
	}).attr("y2", function(d) {
		return d.target.y;
	});

}

var updateNode = function() {
	this.attr("transform", function(d) {
		return "translate(" + d.x + "," + d.y + ")";
	});

}


force.on("tick", function() {

	force2.start();

	node.call(updateNode);

	anchorNode.each(function(d, i) {
		if(i % 2 == 0) {
			d.x = d.node.x;
			d.y = d.node.y;
		} else {
			var b = this.childNodes[1].getBBox();

			var diffX = d.x - d.node.x;
			var diffY = d.y - d.node.y;

			var dist = Math.sqrt(diffX * diffX + diffY * diffY);

			var shiftX = b.width * (diffX - dist) / (dist * 2);
			shiftX = Math.max(-b.width, Math.min(0, shiftX));
			var shiftY = 5;
			this.childNodes[1].setAttribute("transform", "translate(" + shiftX + "," + shiftY + ")");
		}
	});


	anchorNode.call(updateNode);

	link.call(updateLink);
	anchorLink.call(updateLink);

});
			}
</script>
	
</h:body>
	





</html>




