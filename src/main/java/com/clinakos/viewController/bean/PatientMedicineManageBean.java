package com.clinakos.viewController.bean;

import static com.clinakos.common.util.ClinakosConstant.*;
import https.secure_newcropaccounts_com.v7.webservices.DrugAllergyDetail;
import https.secure_newcropaccounts_com.v7.webservices.DrugAllergyDetailV2;
import https.secure_newcropaccounts_com.v7.webservices.DrugDiseaseDetail;
import https.secure_newcropaccounts_com.v7.webservices.DrugHistoryDetail;
import https.secure_newcropaccounts_com.v7.webservices.DrugInteraction;
import https.secure_newcropaccounts_com.v7.webservices.PatientAllergyExtendedDetailV4;
import https.secure_newcropaccounts_com.v7.webservices.PatientFullMedHistoryV6;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.net.URL;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.ConcurrentModificationException;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.faces.FacesException;
import javax.faces.application.FacesMessage;
import javax.faces.application.FacesMessage.Severity;
import javax.faces.bean.ManagedProperty;
import javax.faces.component.UIData;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.faces.context.Flash;
import javax.faces.event.ActionEvent;
import javax.faces.event.AjaxBehaviorEvent;
import javax.faces.event.ComponentSystemEvent;
import javax.faces.event.ValueChangeEvent;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Validator;
import javax.xml.XMLConstants;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Source;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringEscapeUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.apache.log4j.chainsaw.Main;
import org.aspectj.lang.annotation.After;
import org.hibernate.HibernateException;
import org.joda.time.DateTime;
import org.joda.time.Days;
import org.joda.time.LocalDate;
import org.joda.time.Years;
import org.primefaces.component.datatable.DataTable;
import org.primefaces.context.RequestContext;
import org.primefaces.event.FlowEvent;
import org.primefaces.event.ToggleEvent;
import org.primefaces.json.JSONArray;
import org.primefaces.json.JSONException;
import org.primefaces.json.JSONObject;
import org.primefaces.model.chart.CartesianChartModel;
import org.primefaces.model.chart.ChartSeries;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.web.util.HtmlUtils;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;



import com.clinakos.common.rules.KnowledgePackageUtil;
import com.clinakos.common.util.ContextUtil;
import com.clinakos.common.util.DateUtil;
import com.clinakos.common.util.RulesUtil;
import com.clinakos.data.model.core.FormularyDetail;
import com.clinakos.data.model.patient.AllergyMaster;
import com.clinakos.data.model.patient.CalculateCreatimineClearance;
import com.clinakos.data.model.patient.Calculator;
import com.clinakos.data.model.patient.ACOPatientMeasure;
import com.clinakos.data.model.patient.AlertGenericMedActionLab;
import com.clinakos.data.model.patient.AlertsFilter;
import com.clinakos.data.model.patient.ChadsScore;
import com.clinakos.data.model.patient.ChildMedActionPlanParameter;
import com.clinakos.data.model.patient.ChildMonitoringParameters;
import com.clinakos.data.model.patient.ClinicDiagonsis;
import com.clinakos.data.model.patient.ClinicDiagonsisLab;
import com.clinakos.data.model.patient.ClinicQuestionnaire;
import com.clinakos.data.model.patient.ClinicSubdiagnosis;
import com.clinakos.data.model.patient.DosageFrom;
import com.clinakos.data.model.patient.DrugCategoryFilter;
import com.clinakos.data.model.patient.DrugDrugInteractionData;
import com.clinakos.data.model.patient.DrugFilter;
import com.clinakos.data.model.patient.DrugInteractionForWarfarin;
import com.clinakos.data.model.patient.DrugInteractionOverview;
import com.clinakos.data.model.patient.EncounterSummary;
import com.clinakos.data.model.patient.GenericMedActionPlan;
import com.clinakos.data.model.patient.GeriatricPrecaution;
import com.clinakos.data.model.patient.HepatitisC;
import com.clinakos.data.model.patient.InrRange;
import com.clinakos.data.model.patient.LabDetail;
import com.clinakos.data.model.patient.LabLineBarChart;
import com.clinakos.data.model.patient.MasterDrugAllergyInteraction;
import com.clinakos.data.model.patient.MasterDrugDiseaseInteraction;
import com.clinakos.data.model.patient.MasterLOINCData;
import com.clinakos.data.model.patient.MasterMonitorParameters;
import com.clinakos.data.model.patient.MedActionPlan;
import com.clinakos.data.model.patient.MedTherapeuticCategory;
import com.clinakos.data.model.patient.MedUnitSummary;
import com.clinakos.data.model.patient.MedandGenricmed;
import com.clinakos.data.model.patient.Medicine;
import com.clinakos.data.model.patient.NpiAndClinakosDoctorsDetail;
import com.clinakos.data.model.patient.PaediatricPrecaution;
import com.clinakos.data.model.patient.ParentMedActionPlan;
import com.clinakos.data.model.patient.PatientAllergy;
import com.clinakos.data.model.patient.PatientDiagnosesDetails;
import com.clinakos.data.model.patient.PatientDrugAllergyInteraction;
import com.clinakos.data.model.patient.PatientDrugDiseaseInteraction;
import com.clinakos.data.model.patient.PatientDrugMapping;
import com.clinakos.data.model.patient.PatientGuarantor;
import com.clinakos.data.model.patient.PatientMedicationData;
import com.clinakos.data.model.patient.PatientMedicationHistory;
import com.clinakos.data.model.patient.PatientMedicineNotes;
import com.clinakos.data.model.patient.PatientPharmacogenomicsCurrentMedicineData;
import com.clinakos.data.model.patient.PatientVital;
import com.clinakos.data.model.patient.PharmacogenomicsClassification;
import com.clinakos.data.model.patient.PharmacogenomicsRecomendations;
import com.clinakos.data.model.patient.PharmacogenomicsUserSummary;
import com.clinakos.data.model.patient.PharmacyDetail;
import com.clinakos.data.model.patient.PrescriberFilter;
import com.clinakos.data.model.patient.ProcedureResultHistory;
import com.clinakos.data.model.patient.ProcedureType;
import com.clinakos.data.model.patient.PsychopharmModelData;
import com.clinakos.data.model.patient.QuestionForMaintenance;
import com.clinakos.data.model.patient.RouteDetails;
import com.clinakos.data.model.patient.SendMessageEditRx;
import com.clinakos.data.model.patient.SigCode;
import com.clinakos.data.model.patient.UnitDetails;
import com.clinakos.data.model.patient.UserInsuranceDetails;
import com.clinakos.data.model.patient.UserLoginDetail;
import com.clinakos.data.model.patient.VisitHistory;
import com.clinakos.data.model.patient.WSDrug;
import com.clinakos.data.model.patient.WeeklyDose;
import com.clinakos.data.model.rules.HepatitisCRulesData;
import com.clinakos.data.model.rules.MedPlan;
import com.clinakos.data.model.rules.Message;
import com.clinakos.data.model.rules.ModelMessage;
import com.clinakos.data.model.rules.Patient;
import com.clinakos.data.model.rules.PsychopharmLabParameter;
import com.clinakos.data.model.rules.PsychopharmMessage;
import com.clinakos.data.model.rules.Request;
import com.clinakos.service.ILabService;
import com.clinakos.service.IPatientMedicineService;
import com.clinakos.service.IPatientService;
import com.clinakos.service.IUserService;
import com.clinakos.service.serviceImpl.LabServiceImpl;
import com.clinakos.service.serviceImpl.PatientMedicineServiceImpl;
import com.clinakos.viewController.webservicMangedBean.NcDrugDetailWSBean;
import com.clinakos.viewController.webservicMangedBean.NcFormulary1WSBean;
import com.clinakos.viewController.webservicMangedBean.NcFormulary2WSBean;
import com.clinakos.viewController.webservicMangedBean.NcUpdate1WSBean;
import com.google.gson.Gson;
import com.sun.org.apache.xerces.internal.util.URI;

public class PatientMedicineManageBean implements Serializable{
	/**
	 * 
	 */
	
	private static final long serialVersionUID = 1L;

	public static final Logger logger = Logger.getLogger("PatientMedicineManageBean.class");

	IPatientMedicineService patientMedicineService;
	ILabService labService;
	HepatitisC hepatitisC = new HepatitisC();
	HepatitisC hepatitisCObj = new HepatitisC();
	private PatientMedicationData patientMedicationData = new PatientMedicationData();
	private PatientMedicineNotes patientMedicineNotes= new PatientMedicineNotes();
	private PharmacogenomicsClassification pharmacogenomicsClassification= new PharmacogenomicsClassification();
	private PharmacogenomicsRecomendations pharmacogenomicsRecomendations=new PharmacogenomicsRecomendations();
	private Calculator calculator = new Calculator();
	private static List<String>regimenList=new ArrayList<String>();
	private UserLoginDetail userLoginDetail = new UserLoginDetail();
	//private List<String>enzymeInducerStatus=new ArrayList<String>();
	private List<PatientMedicationHistory> fetchMedicationHistoryList;
	private List<PatientMedicationData> fetchMedicationHistoryListforanticoag=new ArrayList<PatientMedicationData>();
	private List<PatientMedicationData> medicationListForPatient=null;
	List<String>labFrequencyList=new ArrayList<String>();
	//List<String>questionList=new ArrayList<String>();
	//private String questionForMAintenance=new String();
	List<String>daySupplyList=new ArrayList<String>();
	List<Integer>refillDetailsList=new ArrayList<Integer>();
	List<String>labFrequencyListForQuickPrescribe=new ArrayList<String>();	
	private List<PatientMedicationData> addNewmedicationListForPatient=new ArrayList<PatientMedicationData>();
	
	private List<PatientMedicationData> removeDuplicateModifyMedicationListForPatient=new ArrayList<PatientMedicationData>();
	private List<PatientMedicationData> medicineListForEprescribe=new ArrayList<PatientMedicationData>();
	private List<PatientMedicationData> medicineListGetDataBeforeEprescribe=new ArrayList<PatientMedicationData>();
	//private Set<PatientMedicationData> modifyMedicationListForPatient=new HashSet<PatientMedicationData>();
	//private Set<PatientMedicationData> modifyMedicationListForPatient=new LinkedHashSet<PatientMedicationData>();
	List<ClinicDiagonsisLab>clinicDiagnosisLabList=new ArrayList<ClinicDiagonsisLab>();
	private List<PatientMedicationHistory> medicationHistoryListForPatient;
	//private LoincKeyMaster loincKeyMaster = new LoincKeyMaster();
	List<PatientMedicationData> patientMedicationDataList = null;// new	 ArrayList<PatientMedicationData>();
	private List<PatientMedicineNotes> patientMedicineNotesList=null;
	private List<FormularyDetail> fetchforumlarymedList; //List to Fetch Formulary List for DP Optimizer for Perticular Patient in Doctor Profile, Author:LI-0011
	private List<FormularyDetail> fetchMyForumlaryMedList; //List to Fetch Formulary List for Logged In patient, Author LI-0011
	private List<FormularyDetail> optimizeDPList;   //List to store optimized value of medicine
	private List<FormularyDetail> myFormularyList;
	private List<PatientMedicationData> patientMedicationSummaryList=null;
	private List<PharmacogenomicsClassification> pharmacogenomicsClassificationList;
	private List<PharmacogenomicsRecomendations> pharmacogenomicsRecomendationsListForImpactedMedicine;
	private List<PharmacogenomicsRecomendations> recommendedFutureMedicineList;
	private List<ClinicQuestionnaire> clinicQuestionnaireList=null;
	private List<String>alternativeMedicine=new ArrayList<String>();
	private FormularyDetail[] selectedFDetel; //To take Selected Medicine to optiize Formulary
	//private FormularyDetail[] selectedFormulary; //TO take selected formulary for logged patient
	private int selectIntervention=0;
	List<String>clinicDiagnosisLabDetailList=new ArrayList<String>();
	//public List<String> patientMedicationDataListforTesting=new ArrayList<String>();
	private List<Medicine>anticoagMedList=new ArrayList<Medicine>();
	private List<Medicine>antiPlateletMedList=new ArrayList<Medicine>();
	private List<WeeklyDose> weekdoselist=new ArrayList<WeeklyDose>();
	private List<PatientMedicationData>currentAntiCoagMedList=new ArrayList<PatientMedicationData>();
	private boolean showRxTab;
	private DataTable patientMedicineDataTable;
	private DataTable medicalActionDataTable;
	private DataTable addNewMedDataTable;
	private DataTable medDataTable = new DataTable();
	private DataTable viewRxDataTable=new DataTable();
	private DataTable viewRxDataTableforoverviewPharmacogenomics=new DataTable();
	private DataTable viewRxDataTableforoverview=new DataTable();
	private DataTable viewRxDataTableforoverviewfilter=new DataTable();
	private DataTable currentAnticoagDataTable=new DataTable();
	private DataTable reconsileMedsDataTable=new DataTable();
	private DataTable reconsileMedsDataTableforoverview=new DataTable();
	private DataTable reconsileMedsDataTableforoverviewfilter=new DataTable();
	private DataTable searchMedicineDataTable=new DataTable();
	private DataTable searchMedicineDataTableForAnticoag=new DataTable();
	private DataTable searchMedicineDataTableforoverview=new DataTable();
	private DataTable searchMedicineDataTableforoverviewfilter=new DataTable();
	private DataTable allergyMasterDatatable=new DataTable();
	private DataTable allergyDataTableBinding=new DataTable();
	private DataTable reconsileMedsForPharmacyDataTable=new DataTable();
	private DataTable reconsileMedsForPharmacyDataTableforoverview=new DataTable();
	private DataTable reconsileMedsForPharmacyDataTableforoverviewfilter=new DataTable();

	private DataTable medActionPlanMessageDataTable=new DataTable();
	private String drugName;
	private String msgForOverview;
	private boolean showOptimizer; //Variable to show or hide Optimize table at dpo
	private boolean showFormulary=false;
	private boolean showTabForAnticoagMeds;
	private MedActionPlan medActionPlan=new MedActionPlan();//for testing the med action plan
	private List<MedandGenricmed>medicalActionPlanListforgenricandnongenricmed=null;//new ArrayList<MedActionPlan>();
	private List<ClinicDiagonsis>clinicDiagnosisList=null;
	private String otherMed="";
	//private String myOtherMed;
	private List<MedActionPlan>medicalActionPlanList=null; // List of medActionPlan for Anticoag med 
	private List<MedActionPlan>medicalActionPlanListforanticaog=new ArrayList<MedActionPlan>();
	//private List<String> amiodaroneMedList = new ArrayList<String>();
	public static List<SigCode>sigCodeList=null;//new ArrayList<SigCode>();//.findSigCodeList();
	private List<PatientMedicationHistory> doseInrlinearGraphList;
	private Date anticoagClinicStartDate;
	private Date anticoagDate;
	private Date warfarinStartDate;
	private List<PatientMedicationData>currentAntiplateletMedsList=new ArrayList<PatientMedicationData>();
	private List<String> lastReconcileInfo=new ArrayList<String>();
	private List<String>confirmDayListForWarfarinmaintenance=new ArrayList<String>();	
	private List<DrugInteractionForWarfarin>drugInteractionForWarfarinList=new ArrayList<DrugInteractionForWarfarin>();	 // List which have drug Interaction with warfrain 

	//private boolean showChadTab;
	private List<InrRange>inrRangeList=new ArrayList<InrRange>();
	InrRange inrRange=new InrRange();

	private ChadsScore chadsScore=new ChadsScore();
	private PatientMedicationData changePatientMedicineBackUpdata=new PatientMedicationData();
	private boolean showMedHistoryForReconcile=true;
	private AllergyMaster allergyMaster=new AllergyMaster();
	private PatientAllergy patientAllergy=new PatientAllergy();


	private List<Medicine>medicineList=null;
	private Medicine medicine=new Medicine();
	//private Set<String>discontinueMedicineListInSet=new HashSet<String>();
	//private List<String>discontinueMedicineList=new ArrayList<String>();
	private Integer tabValue=0;
	public double weekStatus=0.0;

	private SendMessageEditRx sendMessageEditRx = new SendMessageEditRx();
	private List<PatientMedicationHistory>medicineHistoryForAnticoag=new ArrayList<PatientMedicationHistory>();

	private List<PatientMedicationData> medicineReminderList=null;
	private List<MedActionPlan> mymedicationList=null;

	private Date reminderFilterEndDate=new DateUtil().AddDate(new DateUtil().getTodayDate(), 1); //-----Reminder before this date
	private Date reminderFilterFromDate=new DateUtil().AddDate(new DateUtil().getTodayDate(),-1) ;//---Reminder after this date
	private DataTable mymedicationTableObj= new DataTable();
	private CalculateCreatimineClearance calculateCreatimineClearance =new CalculateCreatimineClearance();

	//private List<String> labFrequencyListForFondaParinux=new ArrayList<String>();
	//private List<String> subDiagnosisDetailList=new ArrayList<String>();
	private String subDiagnosisDetail=new String();
	private List<String> medicineListForApixaBanDoseTest=new ArrayList<String>();
	private List<String> medicineListForApixaBanDoseTest2=new ArrayList<String>();
	private List<String> medicineListForApixaBanDoseTest3=new ArrayList<String>();
	private List<String>lMWHFrequencyList=new ArrayList<String>();
	private String exitLocationForEPrescribe=new String();
	private List<PatientMedicationData>reconcileMedsList=new ArrayList<PatientMedicationData>();
	private List<PatientMedicationData>pharmacyMedsMedsListForReconcile=new ArrayList<PatientMedicationData>(); // List For Reconcile Med 

	private List<ClinicSubdiagnosis>clinicSubDiagnosisList=new ArrayList<ClinicSubdiagnosis>();
	private List<String>durationOfTherapy=new ArrayList<String>();
	private List<String>inrGoalTargetList=new ArrayList<String>();
	private String medicinename;
	private String labname;
	List<String>medNcComparision=new ArrayList<String>();
	private boolean checkdateForMedactionplan;

	private boolean showDesirudinLabFrequency;
	//private boolean showDifferenceDataOfMeds;
	//private boolean showDifferenceDataOfAlergy;
	private int selectaPTTMonitoring=0;
	private int searchPatientId;
	private int loggedDoctorId=0;
	
	//List<PatientMedicationData>removeDuplicateDisContinueMedicationListForPatient=new ArrayList<PatientMedicationData>();
	List<PatientMedicationData>disContinueMedicationListForPatient=new ArrayList<PatientMedicationData>();
	List<PatientMedicationData> disContinueMedicationListForPatientShowUI = new ArrayList<PatientMedicationData>();

	List<PatientMedicationData>addedOrChangedMedicationListForPatient=new ArrayList<PatientMedicationData>();
	private double selectedDrugId=0.0;


	@Autowired
	private NcFormulary2WSBean formulary2WSBean;
	@Autowired
	private NcFormulary1WSBean formulary1WsBean;
	@Autowired
	private NcDrugDetailWSBean drugDetailWSBean;
	private List<RouteDetails>routeDetailsList = new ArrayList<RouteDetails>();
	private List<UnitDetails>unitDetailsList = new ArrayList<UnitDetails>();
	private List<DosageFrom>dosageDetailsList = new ArrayList<DosageFrom>();
	private List<MedUnitSummary>unitSummaryList= new ArrayList<MedUnitSummary>();
	List<DrugDrugInteractionData> drugInteractionList;
	Map<String, List<FormularyDetail>> alternativeFormularyDetailMap;
	private List<FormularyDetail> alternativeDrugDetailListForOptimizedDrug;

	private boolean showAlternativeDrug;
	private int showQuestionarieFormaintenance=0;
	List<AllergyMaster> allergyMasterList;

	List<PatientAllergy> patientAllergyList;  // Patient Allergy List 
	private String newCropPatientAllergy;
	private List<FormularyDetail> dpOptimizerDrugList=null;
	@Autowired
	private NcUpdate1WSBean ncUpdate1WSBean;

	private IUserService userService;
	private String timeFrameForReconcile;
	private List<String>timeFrameListForReconcile=new ArrayList<String>();
	//private  static Date todayDate;
	private List<LabDetail>labDetailList=new ArrayList<LabDetail>();
	private String allergyDescriptionForEdit;
	private String showPatientNotes; //--------------Variables to show value on visit summary
	private String showPatientEducation; //--------------Variables to show value on visit summary
	List<DrugAllergyDetailV2> druAllergyDetailV2List;
	List<PatientAllergy> patientAllergieList;
	List<MasterDrugDiseaseInteraction> drugDiseaseDetailList;
	List<PatientDiagnosesDetails> patientDiagnosesDetailList;

	private IPatientService patientService;
	List<DrugHistoryDetail> drugHistoryDetailList;
	// private List<PatientFullMedHistoryV6> patientFullMedHistoryV6List;
	private List<MasterDrugAllergyInteraction> drugAllergyDetailList;
	public DrugDrugInteractionData[] drugInteractionDataModel;
	public MasterDrugDiseaseInteraction[]drugDiseaseInteractionDataModel;
	public MasterDrugAllergyInteraction[]drugAllergyDataModel;
	private List<DrugInteraction>drugInteractions;
	private List<DrugAllergyDetail>drugAllergyInteractions;
	private List<DrugDiseaseDetail>drugDiseaseDetailsInteractions;
	List<PatientMedicationData>patientMedicationDataFromNewCrop=new ArrayList<PatientMedicationData>();
	List<PatientAllergy>patientAllergyListFromNewCrop=new ArrayList<PatientAllergy>();
	private NpiAndClinakosDoctorsDetail npiAndClinakosDoctorsDetail= new NpiAndClinakosDoctorsDetail();
	private List<NpiAndClinakosDoctorsDetail> npiAndClinakosDoctorsDetailList;
	private List<PatientPharmacogenomicsCurrentMedicineData>patientPharmacogenomicsOverviewList=null;
	private PatientPharmacogenomicsCurrentMedicineData[]patientPharmacogenomicsCurrentMedicineDataModel;
	public String[]selectedOptionsDrugFilterList;
	private String allergyNameForAddingNew;
	private boolean checkAllergyValidName=false;
	private List<UserInsuranceDetails> userInsuranceDetailListFromIntegration;
	List<DrugDrugInteractionData> drugInteractionListFilterCopyList;
	List<MasterDrugDiseaseInteraction>drugDiseaseDetailListCopyList;
	List<MasterDrugAllergyInteraction>drugAllergyCopyList;
	List<PatientPharmacogenomicsCurrentMedicineData>patientPharmacogenomicsOverviewCopyList;
	private Date commonTodayDateForVallidation=new DateUtil().getTodayDate();
	//private Date commonTodayDateForDateVallidation=new DateUtil().getTodayDate();
	// public String []selectedMonitoringParameters;
	private Map<String, String>monitoringParameters;
	private List<GenericMedActionPlan>genericMedActionPlanList;
	public GenericMedActionPlan[]genericMedActionSelectionModel;
	private Map<String,String>alertSymbolsList;
	public DataTable genericMedActionPlanProperty;
	private DataTable genericMedActionPlanPropertyforfilter;
	private Map<String,String>frequencyList;
	private Map<String,String>frequencyNoList;
	public List<MasterLOINCData>labLOINCsearchResultSet;
	private int checkIntegrationForNewCropforTesScenario8ForTest=0;
	public DataTable loincBindingObj;
	public String loincNumber;
	private String pharmacogenomicsDetails;
	private List<ParentMedActionPlan>allGenericMedActionPlan;

	public List<DrugInteractionOverview>drugInterectionListDetail;
	public List<DrugInteractionOverview>drugAlleryInterectionListDetail;
	public List<DrugInteractionOverview>drugDiseaseInterectionListDetail;
	public List<DrugInteractionOverview>drugPharmaInterectionListDetail;
	String highestServity;
	String highestServityForAllergy;
	String highestServityForDisease;
	String highestServityForpharmacogenomic;

	private DrugInteractionOverview drugInteraction=new DrugInteractionOverview();
	public DataTable genericMedActionDatatable; // Datatable object of bind dataTable 
	public GenericMedActionPlan genericMedActionPlan;
	public String reconcilieMedicine;
	private String pharmacogenomicInteractionDetail;
	private List<PharmacogenomicsRecomendations>pharmacogenomicInteractionDetailList;
	private List<AlertGenericMedActionLab>alertMedActionPlans;
	public List<GenericMedActionPlan>temporaryGenericMedPlanList;
	private List<ChildMedActionPlanParameter>temporaryChildMedActionPlansParams;
	private PatientDiagnosesDetails patientDiagnosesDetailsObj;
	public List<String>selectedMonitoringParameters;

	private List<MedandGenricmed>allClinicMedPlans;
	//patient count related List.

	private List<DrugInteraction >drugInteractionsListIssue;
	private List<DrugInteractionOverview>drugInteractionsListIssueDetail;
	private List<DrugDiseaseDetail>drugDiseaseInteractionsListIsssues;
	private List<DrugAllergyDetail>drugAllergyDetailsListIssues;
	private List<SendMessageEditRx> sendMessageEditRxList; 
	private String pharmacyName="";
	private MedandGenricmed medandGenricmed=new MedandGenricmed();
	private List<MedandGenricmed>medActionListForChart=new ArrayList<MedandGenricmed>();
	private List<PrescriberFilter>prescriberFilterList;
	private List<String>prescriberFilterByName;
	private List<PatientMedicationData>filterPatientMedicationList;
	private List<DrugFilter>drugFilterList;
	private List<String>drugFilterByName;
	private List<PatientMedicationData>copyOriginalPatientMedicationList;
	private List<String>formularyFilterByTier;
	private List<String>alertFilterLevels;
	private List<String>alertTypeFilterLevels;
	private List<AlertGenericMedActionLab>copyAlertMedPlansFilter;
	private List<AlertsFilter>alertFilters;
	private Map<String, String>alertInteractions;
	// added by vinod
	private List<MedActionPlan>   medActionListForINRLabMessage = new ArrayList<MedActionPlan>();
	//for Slider in filter section
	private   int lowData=0;
	private   int mediumData=1;
	private   int highData=2;
	private List<PatientMedicationData>temporaryFilteredList;
	
	public List<ACOPatientMeasure> patientmesure =null;
	public List<ACOPatientMeasure> patientmesureHistory = null ;
	boolean patientmesureFalg = false ;
	ACOPatientMeasure acoPat = new ACOPatientMeasure() ;
	public List<ACOPatientMeasure>acoPatientMeasureFilterPageList;
	private boolean acoMeasureSelectedOption=true; // used for Star Rating 
	private Map<String,String>formularyTiersMapList;
	private List<String>medData;
	private Map<String,String>medClassifiactionList;
	private List<String>medCategory;
	private List<MedTherapeuticCategory>therapeuticCategories;
	private List<DrugInteractionOverview>cachedDrugIssuesList;
	public List<DrugInteractionOverview>overviewFilterDrugInteractionsList;
	private List<PatientMedicationData>cachedPatientMedicationList;
	private boolean hedisSelectedOption=true; // used for Hedis  
	private boolean gapinSelectedOption=true; // used for GapsInCare  
	//list for visit page editRxMessage
	private List<SendMessageEditRx> sendMessageCurrentEditRxList; 
	public Date todayDate;
	List<PatientMedicationHistory>disContinueMedicationListForVisit=new ArrayList<PatientMedicationHistory>();
	List<PatientMedicationData>addedOrChangedMedicationListForCurrentDatePatient=new ArrayList<PatientMedicationData>();
	private List<MedandGenricmed>medicalActionPlanListForCurrentDate=new ArrayList<MedandGenricmed>();
	private Date modifyDate;
	private List<PatientMedicationData>patientMedicationListForVisit;
	private List<DrugCategoryFilter>drugCategoryList;
	private Map<String,String>drugClassificationList;
	private List<String>drugType;
	private List<PatientMedicationData> patVirtualPillBoxListForDoctor=null; // Patient  Medication  List for Virtual Pill Box 
	private List<MedActionPlan>anticoagClinicMessages;
	private MedActionPlan anticoagAlertMessageObj;
	private Boolean showNotesForINRlabOvw;
	private Map<String, String>optionsValue;
	private PsychopharmModelData psychopharmModelDataObj;
	private List<ModelMessage>modelMessageList;
	private List<String>contraindicatedMedsForPsychopharmClinic;
	private List<String>contraindicatedDiagnosisForPsychopharmClinic;
	private List<String>selectedContraindicatedMeds;
	private List<String>selectedContraindicatedDiagnosis;
	private String genderOfPatient;
	private List<PsychopharmLabParameter>psychopharmParamterList;
	private List<GenericMedActionPlan>selectedLabParamters;
	private List<GenericMedActionPlan>selectedLabParamtersHgb; 
	private List<String>phase;
	private List<GenericMedActionPlan>psychopharmDefaultMedPlanParameters;
	public List<GenericMedActionPlan>hepatitisCDefaultMedParameters ;
	public List<GenericMedActionPlan>hepatitisCSvrParameters ;
	public List<GenericMedActionPlan>hepatitisCHgbParameters ;
	
	private List<PatientMedicationData> patientMedList=null;
	//added by vinod
		 List<PatientAllergy> allergyListForNewPatient;
		 public DataTable allergyDataTableForNewPatient = new DataTable();
		 public DataTable masterDataBindingTable = new DataTable();
		 public Date dosingStartDate;
		 List<PatientAllergy> allergyDetailsForEditPatientList;
		 public DataTable selectAllergyBindingForEditpatient = new DataTable();
		private List<ParentMedActionPlan>psychoPharmClinicMedActionPlanList;
    //Added By Anjani
		 private List<AlertGenericMedActionLab> psychoPharmAlertMedActionPlanList;
		 private List<GenericMedActionPlan> psychoPharmMedActionChartMonitoringParameterList=null;
		 private List<GenericMedActionPlan> psychoPharmMedActionChartDrugNameList=null;
		 private DataTable psychopharmMedPlanDatatable;

		 private List<ParentMedActionPlan> hepatitisCMedActionPlanList=null;

		 private WSDrug selectedMedObj;
		 private List<PatientMedicationData>currentPsychopharmMeds;
		 private PatientMedicationData clinicViewPatientMedicationData;
		 private List<PatientMedicationData> currentHepatitsCMedList=null;
		 private DataTable hepCMedPlanDataTable=null;
		 private List<AlertGenericMedActionLab> hepCAlertMedActionPlanList=null;
		 private List<GenericMedActionPlan> hepCChartLabMonitoringParameterList=null;
		 private List<String> psychoPharmClinicMedicineList=null;
		 private List<String> hepititsCClinicMedicineList=null;
		 private String exitLocationForLabIntegration=new String();
		 private String labXmlFullSummary=new String();
		 private List<EncounterSummary> patientEncounterSummaryHistoryList;

		 
		 // To get patient guarantor values for lab integration by venu
		 private List<PatientGuarantor> patientGuarantorList = new ArrayList<PatientGuarantor>();
		 private List<UserInsuranceDetails> patientInsuranceList = new ArrayList<UserInsuranceDetails>();
		 private EncounterSummary encounterSummary;
		 private boolean ifYesInputDisabled=true;
		 private boolean reasonForEncounterInputEnabledForOther=true;

		 private DataTable encounterSummaryHistoryDataTable;
		 private Date selectedEncounterDateForPrint;
	     private EncounterSummary selectedEncounterSummary;
	     private List<MedandGenricmed> medAndGenrticMedPlanListForSelectedDate;
	     private List<SendMessageEditRx> sendMessageEditRxListForSelectedEncounterDate;
	     private List<PatientMedicationData> addedOrChangeMedListOnSelectedEncounterDate;
	     private List<PatientMedicationData> patientMedicationListForSelectedEncounterDate;

	    
	     private Map<String, List<String>> formularyTextAlterantiveMedicineMap=new HashMap<String, List<String>>();
	     private List<String> alternativeMedicineKeyList;


	     private List<PharmacyDetail> oldMedicationDataList=null;

		 
		@ManagedProperty(value = "auditManageBean")
		public AuditManageBean auditManageBean;
		 

	
	//private String Yes;
	/*public void init() 
	{
		logger.debug("::::::init startin patientMedicine ManageBean");
	}*/

	/*
	 * for reset the value and list..
	 * @author:Gopal Krishna jha
	 */
	public void reset()
	{

		logger.info("reset in PatientMedicine manage bean start");
		patientMedicationDataList=null;
		//patientMedicationDataListforTesting=new ArrayList<String>();
		alternativeMedicine=new ArrayList<String>();
		patientMedicationData=new PatientMedicationData();
		regimenList=new ArrayList<String>();
		clinicDiagnosisList=null;
		setTabValue(0);
		clinicDiagnosisLabList=new ArrayList<ClinicDiagonsisLab>();
		clinicDiagnosisLabDetailList=new ArrayList<String>();
		labFrequencyList=new ArrayList<String>();
		medicalActionPlanList=null;//new ArrayList<MedActionPlan>();
		medActionPlan=new MedActionPlan();
		chadsScore=new ChadsScore();
		currentAntiCoagMedList=new ArrayList<PatientMedicationData>();
		clinicQuestionnaireList=null;
		medicineHistoryForAnticoag=new ArrayList<PatientMedicationHistory>();
		removeDuplicateModifyMedicationListForPatient=new ArrayList<PatientMedicationData>();
		visitHistory=new VisitHistory();
		pharmacogenomicsRecomendationsListForImpactedMedicine=null;
		recommendedFutureMedicineList=null;
		//discontinueMedicineList=new ArrayList<String>();
		fetchforumlarymedList=null;
		setShowOptimizer(false);
		setShowTabForAnticoagMeds(false);
		labChartForAnticoag=null;
		getLabChartForAnticoag();
		anticoagDate=null;
		anticoagClinicStartDate=null;
		//setLastReconcileDate("");
		//lastReconcileDate="";
		lastReconcileInfo=new ArrayList<String>();
		pharmacyMedsMedsListForReconcile=new ArrayList<PatientMedicationData>();
		reconcileMedsList=new ArrayList<PatientMedicationData>();
		currentAntiplateletMedsList=new ArrayList<PatientMedicationData>();
		setShowMessageForNewAddMeds(false);
		setCheckdateForMedactionplan(false);
		setLoggedDoctorId(0);
		//	removeDuplicateDisContinueMedicationListForPatient=new ArrayList<PatientMedicationData>();
		disContinueMedicationListForPatient=new ArrayList<PatientMedicationData>();
		addedOrChangedMedicationListForPatient=new ArrayList<PatientMedicationData>();
		patientAllergyList=null;
		allergySize=0;
		patientFullDrugDetailListByWebservices=new ArrayList<PatientFullMedHistoryV6>();
		pharmacyDetailList=new ArrayList<PharmacyDetail>();
		setShowPatientEducation(null);
		setShowPatientNotes(null);
		drugInteractionList=null;
		drugAllergyDetailList=null;
		drugDiseaseDetailList=null;
		patientPharmacogenomicsOverviewList=null;
		selectedOptionsDrugFilterList=null;
		drugInteractionListFilterCopyList=null;
		drugDiseaseDetailListCopyList=null;
		drugAllergyCopyList=null;
		patientPharmacogenomicsOverviewCopyList=null;
		//setPharmacogenomicInteractionDetailList(null);
		pharmacogenomicInteractionDetailList=null;
		alertMedActionPlans=null;
		patientDiagnosesDetailsObj=null;
		//checkNotesForLab=0;
		showAnticoagMedactionPlanMessage=0;
		medactionPlanMessageBeforeLab=new ArrayList<MedActionPlan>();
		medactionPlanMessageAfterLab=new ArrayList<MedActionPlan>();
		prescriberFilterList=null;
		prescriberFilterByName=null;
		filterPatientMedicationList=null;
		drugFilterList=null;
		copyOriginalPatientMedicationList=null;
		formularyFilterByTier=null;
		copyAlertMedPlansFilter=null;
		alertTypeFilterLevels=null;
		temporaryFilteredList=null;
		acoPatientMeasureFilterPageList=null;
		therapeuticCategories=null;
		patientmesure=null;//new ArrayList<ACOPatientMeasure>();
		cachedDrugIssuesList=null;
		cachedPatientMedicationList=null;
		timeFrameForReconcile=null;
		drugCategoryList=null;
		patVirtualPillBoxListForDoctor=null; // initilize Virtual Pill Box page 
	//	anticoagClinicMessages=null;
		anticoagAlertMessageObj=null;
		showNotesForINRlabOvw=null;
		allergyListForNewPatient=null;
		genderOfPatient=null;

		psychoPharmAlertMedActionPlanList=null;

		drugInteractionForWarfarinList=new ArrayList<DrugInteractionForWarfarin>();
		encounterSummary=new EncounterSummary();



		checkNotesForWarfarinDrugInteraction=0;
		psychoPharmMedActionChartMonitoringParameterList=null;
		alertMedActionPlans=null;
		currentPsychopharmMeds=null;

		currentHepatitsCMedList=null;
		hepatitisCMedActionPlanList=null;
        patientAge=null;
        hepCAlertMedActionPlanList=null;
        hepCChartLabMonitoringParameterList=null;
        hepititsCClinicMedicineList=null;
        psychoPharmClinicMedicineList=null;
        oldMedicationDataList=null;
        
        resetMAPs();
        
        resetReconcileInfo();
        
        resetComplianceChartInfo();
        
        resetBatchInteractionHistory();
        
       
		
	}
	
	public void resetBatchInteractionHistory() {
		FacesContext context = FacesContext	.getCurrentInstance();
		BatchInteractionBean batchInteractionBean=(BatchInteractionBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"batchInteractionBean");
		batchInteractionBean.setInteractionHistoryData(null);
	}

	public void resetMAPs() {
		allGeneralMedPlans=null;
		FacesContext context = FacesContext	.getCurrentInstance();
		AuditManageBean auditManageBean=(AuditManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"auditManageBean");
		auditManageBean.setInactiveMedsWithActiveMAP(null);
	}

	/**Added By Nagaraj on 10/Feb/2015
	 * This method is used to reset resetComplianceChartInfo from UserManageBean Values
	 * 
	 */
	public void resetComplianceChartInfo() {
		FacesContext context = FacesContext	.getCurrentInstance();
		UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");
		userManageBean.setMeterGaugeModel(null);
		
	}

	/**Added By Nagaraj on 19/Jan/2015
	 * This method is used to reset reconcileInfo from AuditManageBean Values
	 * 
	 */
	public void resetReconcileInfo() {
		
		FacesContext context = FacesContext	.getCurrentInstance();
		AuditManageBean auditManageBean=(AuditManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"auditManageBean");
		auditManageBean.setReconcileInfo(null);
		
	}
	public double getWeekStatus() {
		return weekStatus;
	}

	public void setWeekStatus(double weekStatus) {
		this.weekStatus = weekStatus;
	}

	public void setPatientMedicineService(
			IPatientMedicineService patientMedicineService) {
		this.patientMedicineService = patientMedicineService;
	}

	public PatientMedicationData getPatientMedicationData() {
		   if(patientMedicationData.getDosageForm() == null || patientMedicationData.getDosageForm().equalsIgnoreCase("Add'l Sig") || patientMedicationData.getDosageForm().equalsIgnoreCase("Add'I Sig")){
			   patientMedicationData.setDosageForm(" ");
		   }
		   if(patientMedicationData.getDirections() == null || patientMedicationData.getDirections().equalsIgnoreCase("Add'l Sig")||patientMedicationData.getDirections().equalsIgnoreCase("Add'I Sig")){
			   patientMedicationData.setDirections(" ");
		   }
		return patientMedicationData;
	}

	public void setPatientMedicationData(
			PatientMedicationData patientMedicationData) {
		this.patientMedicationData = patientMedicationData;
	}

	public void setPatientMedicationDataList(
			List<PatientMedicationData> patientMedicationDataList) {
		this.patientMedicationDataList = patientMedicationDataList;
	}


	public void cancelSyncDataNewCropToClinakos() throws Exception
	{

		patientMedicineService.saveValueForIntegration(new ContextUtil().getPatientId(), false);

	}
	public void syncDataNewCropToClinakos() throws Exception
	{
		System.out.println(":::::::::syncDataNewCropToClinakos");	
		medicineIntegration();
		patientMedicineService.saveValueForIntegration(new ContextUtil().getPatientId(), false);
	}

	public void cancelSyncDataNewCropToClinakosForAllergy() throws Exception
	{

		patientMedicineService.saveValueForIntegration(new ContextUtil().getPatientId(), false);
		//setShowDifferenceDataOfMeds(false);
		//setShowDifferenceDataOfAlergy(false);

	}
	public void syncDataNewCropToClinakosForAllergy() throws Exception
	{
		System.out.println(":::::::::syncDataNewCropToClinakos");	
		alergyIntegration();
		patientMedicineService.saveValueForIntegration(new ContextUtil().getPatientId(), false);
		//setShowDifferenceDataOfMeds(false);
		//setShowDifferenceDataOfAlergy(false);
	}

	/*
	 * change date format to compare..
	 * @author: Saurabh
	 */
	public  String changeGMTFormatForCompare(String date) {

		String convertDate="";
		if (date.length()!=29) {
			//System.out.println("patientDrugDetail5.getPrescriptionDate !=29::"+date);
			String addMiddlePart="";
			String addLastPart="";
			String firstPart=date.substring(0, 19);
			//System.out.println("firstPart:::"+firstPart);
			String middlePart,lastPart;
			lastPart=date.substring(date.length()-6, date.length()); 
			middlePart=date.substring(firstPart.length(), date.length()-6);
			//System.out.println("middlePart:"+middlePart+":lastPart"+lastPart);
			if (middlePart.length()==0) {
				addMiddlePart=".000";
			}
			else if (middlePart.length()==2) {
				addMiddlePart="00";
			}
			else if (middlePart.length()==3) {
				addMiddlePart="0";
			}
			middlePart=middlePart+addMiddlePart;

			addLastPart=lastPart.replace(":", ""); 
			//System.out.println("addLastPart:"+addLastPart);
			String modifiedDateFormat=firstPart+middlePart+addLastPart;
			//System.out.println("new string:"+modifiedDateFormat);
			convertDate=modifiedDateFormat;
			//patMedData.setStartDate(new DateUtil().convertStringToDateFormatToCurrentTimeZone(modifiedDateFormat,"yyyy-MM-dd'T'HH:mm:ss"));
			//patMedData.setDateWithTimeZoneForCompare(modifiedDateFormat);
			logger.info("modifiedDateFormat="+modifiedDateFormat);
		}
		else if (date.length()==29)  
		{
			//System.out.println("Inside if block:::length=29"+date.length());
			//System.out.println("patientDrugDetail5.getPrescriptionDate2::"+date);
			String firstpart=date.substring(0, 26);
			String LastPart=date.substring(26);
			String addedLastPart=LastPart.replace(":", "");
			//System.out.println("firstpart:"+firstpart+"LastPart="+LastPart+":addedLastPart:"+addedLastPart);
			String modifiedDateFormat=firstpart+addedLastPart;
			//System.out.println("new string:"+modifiedDateFormat);
			convertDate=modifiedDateFormat;
			//	patMedData.setStartDate(new DateUtil().convertStringToDateFormatToCurrentTimeZone(modifiedDateFormat,"yyyy-MM-dd'T'HH:mm:ss"));
			//patMedData.setDateWithTimeZoneForCompare(modifiedDateFormat);
			logger.info("convertDate="+convertDate);
		}
		return convertDate;
	}




	public int getCheckIntegrationForNewCropforTesScenario8ForTest() throws Exception {

		logger.info("getCheckIntegrationForNewCropforTesScenario8ForTest method start in bean:::");
		boolean checkUrl=findUrlForComingBackClinakosFromNewCrop();
		//checkIntegrationForNewCropforTesScenario8=0;

		//System.out.println("111::::::::::::"+checkUrl);
		//checkUrl=true;
		if(checkUrl)
		{
			//check full medication historty.....

			String prescriptionArchiveStatus="%";
			//String prescriptionArchiveStatus="N";
			FacesContext context = FacesContext	.getCurrentInstance();
			NcUpdate1WSBean update1ServiceClient=(NcUpdate1WSBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"update1ServiceClient");
			List<PatientFullMedHistoryV6>PatientDrugDetailListByWebservicesForSync=new ArrayList<PatientFullMedHistoryV6>();
			int timePeriod=-90;
			Date startDate,endDate;
			//startDate=new Date();
			startDate=new DateUtil().AddDate(new DateUtil().getTodayDate(), 1);
			endDate=new DateUtil().AddDate(startDate, timePeriod);
			//FacesContext context = FacesContext .getCurrentInstance();
			System.out.println(":::::::::::::::::::::::stare date:<><::::"+startDate+"::::::endDate:::::::::+"+endDate);
			UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");
			PatientDrugDetailListByWebservicesForSync=update1ServiceClient.getPatientFullMedHistoryV6UsingDomParser(prescriptionArchiveStatus,startDate,endDate,userManageBean.getProviderLocation());
			//patientFullDrugDetailListByWebservices=update1ServiceClient.callFullMedicationHistoryServices(prescriptionArchiveStatus,startDate,endDate,userManageBean.getProviderLocation());
			System.out.println(":::::::::::::::::>>>>>>>>>>"+PatientDrugDetailListByWebservicesForSync.size());
			Date newCropDateForCompare = null;
			Date clinakosDateForCompare = null;
			List<Date> clinakosDateList=new ArrayList<Date>();
			List<Date> newCropDateList= new ArrayList<Date>();
			for(PatientFullMedHistoryV6 patientFullMedHistoryV6:PatientDrugDetailListByWebservicesForSync)
			{
				System.out.println("::::::::::::::;time:::"+patientFullMedHistoryV6.getPrescriptionTimestamp());
				String prescriptionTime=changeGMTFormatForCompare(patientFullMedHistoryV6.getPrescriptionTimestamp());
				newCropDateList.add(new DateUtil().convertStringToDateFormatToCurrentTimeZone(prescriptionTime,"yyyy-MM-dd'T'HH:mm:ss"));

			}
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>size:::"+newCropDateList.size());
			if (newCropDateList.size()>=1) {
				Collections.sort(newCropDateList);
				newCropDateForCompare=Collections.max(newCropDateList);
			}
			// for clinakos time stamp???
			getPatientMedicationDataList();
			for(PatientMedicationData patdata:patientMedicationDataList)
			{
				if (patdata.getDateWithTimeZoneForCompare()!=null) 
					clinakosDateList.add(new DateUtil().convertStringToDateFormatToCurrentTimeZone(patdata.getDateWithTimeZoneForCompare(),"yyyy-MM-dd'T'HH:mm:ss"));
				//clinakosDateForCompare.add(new DateUtil().convertStringToDateFormatToCurrentTimeZone(patdata.getp,"yyyy-MM-dd'T'HH:mm:ss"));
			}

			//find patient medication history list... particular patient..
			List<PatientMedicationHistory>patientMedicationHistoryList=new ArrayList<PatientMedicationHistory>();
			patientMedicationHistoryList=patientMedicineService.findFullPatientMedicationHistoryData(new ContextUtil().getPatientId(),new ContextUtil().getProviderId());
			for(PatientMedicationHistory history:patientMedicationHistoryList)
			{

				if(history.getDateTimeZoneForCompare()!=null)
					clinakosDateList.add(new DateUtil().convertStringToDateFormatToCurrentTimeZone(history.getDateTimeZoneForCompare(),"yyyy-MM-dd'T'HH:mm:ss"));
			}

			if (clinakosDateList.size()>=1) {
				Collections.sort(clinakosDateList);
				clinakosDateForCompare=Collections.max(clinakosDateList);
			}

			System.out.println(clinakosDateForCompare+"::::::::::::::::::::::::latest date:::::::::::: of new crop"+newCropDateForCompare);
			//newCropDateForCompare.a
			
		
			if(newCropDateForCompare!=null && clinakosDateForCompare!=null)
			{
				if(newCropDateForCompare.after(clinakosDateForCompare))
				{
					System.out.println(":::::::::::::::::::::after");
					List<PatientMedicationData>patientMedicationDataForIntegrate=new ArrayList<PatientMedicationData>();
					for(PatientFullMedHistoryV6 PatientFullMedHistoryV6:PatientDrugDetailListByWebservicesForSync)
					{
						//if(patientDrugDetail5.getArchiveStatus().equalsIgnoreCase("N"))
						if(PatientFullMedHistoryV6.getArchiveStatus().equalsIgnoreCase("N"))
						{
							PatientMedicationData patMedData=new PatientMedicationData();
							patMedData.setPatientId(Integer.parseInt(PatientFullMedHistoryV6.getPatientID()));
							patMedData.setDrugId(Double.parseDouble(PatientFullMedHistoryV6.getDrugID()));
							patMedData.setDataProvider("FDB");
							patMedData.setDrugs(PatientFullMedHistoryV6.getDrugName());
							patMedData.setStrengths(PatientFullMedHistoryV6.getStrength()+" "+PatientFullMedHistoryV6.getStrengthUOM());

							patMedData.setDosageForm(PatientFullMedHistoryV6.getDosageForm());
							/*if(patMedData.equals("Add'l Sig"))
								patMedData.setDosageForm("Add l Sig");*/
							patMedData.setUnit(PatientFullMedHistoryV6.getDosageNumberDescription());
							patMedData.setByRoute(PatientFullMedHistoryV6.getRoute());


							patMedData.setProviderId(new ContextUtil().getProviderId());

							patMedData.setQuantity(PatientFullMedHistoryV6.getDispense());
							if(PatientFullMedHistoryV6.getDosageFrequencyDescription().isEmpty())
								patMedData.setDirections(PatientFullMedHistoryV6.getPrescriptionNotes());
							else
								patMedData.setDirections(PatientFullMedHistoryV6.getDosageFrequencyDescription());
							if(patMedData.getDirections().equalsIgnoreCase("Add'l Sig"))
								patMedData.setDirections(PatientFullMedHistoryV6.getPrescriptionNotes());

							patMedData.setReffils(Integer.parseInt(PatientFullMedHistoryV6.getRefills()));


							patMedData.setExternalPrescriptionId(PatientFullMedHistoryV6.getExternalPrescriptionID());

							String modifiedDateFormat=changeGMTFormatForCompare(PatientFullMedHistoryV6.getPrescriptionDate());
							patMedData.setStartDate(new DateUtil().convertStringToDateFormatToCurrentTimeZone(modifiedDateFormat,"yyyy-MM-dd'T'HH:mm:ss"));
							patMedData.setDateWithTimeZoneForCompare(modifiedDateFormat);

							//patMedData.setStartDate(new Date());
							//System.out.println("::::::::::::::::::::::::date111:::"+patMedData.getStartDate());
							if(!(PatientFullMedHistoryV6.getExternalPhysicianID().isEmpty()))
								patMedData.setDoctorId(Integer.parseInt(PatientFullMedHistoryV6.getExternalPhysicianID().trim()));

							patMedData.setPrescriberName(PatientFullMedHistoryV6.getPhysicianName());
							patMedData.setAdditionalSig(PatientFullMedHistoryV6.getPrescriptionNotes());
							if(PatientFullMedHistoryV6.getTakeAsNeeded().equalsIgnoreCase("Y"))
								patMedData.setPrn(true);
							if(PatientFullMedHistoryV6.getTakeAsNeeded().equalsIgnoreCase("N"))
								patMedData.setPrn(false);
							System.out.println("prn value::::"+patMedData.isPrn());

							if(PatientFullMedHistoryV6.getDispenseAsWritten().equalsIgnoreCase("Y"))
								patMedData.setAllowSubstitution(true);
							if(PatientFullMedHistoryV6.getDispenseAsWritten().equalsIgnoreCase("N"))
								patMedData.setAllowSubstitution(false);

							patMedData.setPrescriptionGuid(PatientFullMedHistoryV6.getPrescriptionGuid());
							patMedData.setPharmacyName(PatientFullMedHistoryV6.getPharmacyFullInfo());

							patMedData.setPrescriptionStatus(PatientFullMedHistoryV6.getPrescriptionStatus());
							patMedData.setPrescriptionSubStatus(PatientFullMedHistoryV6.getSubStatus());
							
							System.out.println("patmeddata::::::;"+patMedData.getPrescriberName()+"::::"+patMedData.getDrugId());
							
							
							//----------added by saurabh
							//patMedData.setDateTimeForCompare(new DateUtil().convertStringToDateFormat(PatientFullMedHistoryV6.getPrescriptionDate(),DATE_PATTERN));
							patientMedicationDataForIntegrate.add(patMedData);

						}//close if
					}//close for loop
					
					
					patientMedicineService.medicineIntegrateFromNewCropToClinakos(patientMedicationDataForIntegrate,new ContextUtil().getPatientId(),patientMedicationDataList,
							getAnticoagMedList(),getMedicalActionPlanList(),getAllGeneralMedPlans());

					//for visitsummary..
					patientMedicineService.endingVisitOfParticularPatient(new ContextUtil().getPatientId(),new ContextUtil().getProviderId());

					//patientFullDrugDetailListByWebservices=new ArrayList<PatientFullMedHistoryV6>();
					patientMedicationDataList = null;
				}
			}
		}

		patientMedicineService.saveValueForIntegration(new ContextUtil().getPatientId(), false);
		return checkIntegrationForNewCropforTesScenario8ForTest;
	}



	public void setCheckIntegrationForNewCropforTesScenario8ForTest(
			int checkIntegrationForNewCropforTesScenario8ForTest) {
		this.checkIntegrationForNewCropforTesScenario8ForTest = checkIntegrationForNewCropforTesScenario8ForTest;
	}

	public String syncDataAfterExitNewCrop() throws Exception
	{
		logger.info("syncDataAfterExitNewCrop::::::::::::::");
		alergyIntegration();
		medicineIntegration();
		currentAntiCoagMedList=new ArrayList<PatientMedicationData>();
		currentAntiplateletMedsList=new ArrayList<PatientMedicationData>();
		medicalActionPlanList=null;
		patientMedicineService.saveValueForIntegration(new ContextUtil().getPatientId(), false);
		makeFilterPageRefreshData();
		return "go_to_ovw_filters";

	}

	/*public int getCheckIntegrationForNewCrop() throws Exception {
		logger.info("::::::getCheckIntegrationForNewCrop:::method start");
		boolean checkUrl=findUrlForComingBackClinakosFromNewCrop();
		checkUrl=true;
		System.out.println("::::::::::::::::checkUrl::"+checkUrl);
		if(checkUrl)
			{
				alergyIntegration();
				medicineIntegration();
				FacesContext fc = FacesContext.getCurrentInstance();
				ConfigurableNavigationHandler nav 
				   = (ConfigurableNavigationHandler) 
					fc.getApplication().getNavigationHandler();

			}

		return checkIntegrationForNewCrop;
	}
	 */
	private void medicineIntegration() throws Exception {
		getPatientMedicationDataList();

		patientFullDrugDetailListByWebservices=new ArrayList<PatientFullMedHistoryV6>();
		getPatientFullDrugDetailListByWebservices();
		System.out.println(":::::::::patientFullDrugDetailListByWebservices::"+patientFullDrugDetailListByWebservices.size());
		List<PatientMedicationData>patientMedicationDataForIntegrate=new ArrayList<PatientMedicationData>();
		//List<PatientDiagnosesDetails> patientDiagnosisListFromIntegration=new ArrayList<PatientDiagnosesDetails>();
		Set<PatientDiagnosesDetails> patientDiagnosisSetFromIntegration=new HashSet<PatientDiagnosesDetails>();
		
		//----------start---- added by ajay--- for prescriber name- date 9/5/2014
		getMedicineListGetDataBeforeEprescribe();
		
		for(PatientMedicationData pa: medicineListGetDataBeforeEprescribe)
		{
			System.out.println("medicineListGetDataBeforeEprescribe::::::::"+pa.getPrescriberName()+":::::::"+pa.getDrugId());
		}
		//---------end----------
		
		for(PatientFullMedHistoryV6 PatientFullMedHistoryV6:patientFullDrugDetailListByWebservices)
		{
			//if(patientDrugDetail5.getArchiveStatus().equalsIgnoreCase("N"))
			if(PatientFullMedHistoryV6.getArchiveStatus().equalsIgnoreCase("N"))
			{
				System.out.println("**********************************");
				System.out.println("0::::::getStatus:"+PatientFullMedHistoryV6.getPrescriptionStatus());
				System.out.println("0::::::getArchiveStatus:"+PatientFullMedHistoryV6.getArchiveStatus());
				System.out.println("1::::::getAccountName:"+PatientFullMedHistoryV6.getAccountName());
				System.out.println("2::getAccountGuid:::::"+PatientFullMedHistoryV6.getAccountGuid());
				System.out.println("00::::::::"+PatientFullMedHistoryV6.getPrescriptionNotes());

				System.out.println("3:::getDiagnosis::::"+PatientFullMedHistoryV6.getDiagnosis());
				System.out.println("4:::getDiagnosisName::::"+PatientFullMedHistoryV6.getDiagnosisName());
				System.out.println("5::getDiagnosisSource:::::"+PatientFullMedHistoryV6.getDiagnosisSource());
				System.out.println("6:::getDispense::::"+PatientFullMedHistoryV6.getDispense());
				System.out.println("7::getDispenseAsWritten:::::"+PatientFullMedHistoryV6.getDispenseAsWritten());
				System.out.println("8:::getDosageForm::::"+PatientFullMedHistoryV6.getDosageForm());
				System.out.println("9::getDosageFrequencyDescription:::::"+PatientFullMedHistoryV6.getDosageFrequencyDescription());
				System.out.println("10:::::getDosageNumberDescription::"+PatientFullMedHistoryV6.getDosageNumberDescription());
				System.out.println("11::getDrugID:::::"+PatientFullMedHistoryV6.getDrugID());
				System.out.println("12::::getDrugName:::"+PatientFullMedHistoryV6.getDrugName());
				System.out.println("13:::getDrugInfo::::"+PatientFullMedHistoryV6.getDrugInfo());
				System.out.println("14:::getDrugSubID1::::"+PatientFullMedHistoryV6.getDrugSubID1());
				System.out.println("15:::::getDrugTypeID::"+PatientFullMedHistoryV6.getDrugTypeID());

				System.out.println("16::::getExternalAccountID:::"+PatientFullMedHistoryV6.getExternalAccountID());
				System.out.println("17:::::getExternalPatientID::"+PatientFullMedHistoryV6.getExternalPatientID());
				System.out.println("18:::getExternalPhysicianID::::"+PatientFullMedHistoryV6.getExternalPhysicianID());

				System.out.println("19:::getFinalDestinationType::::"+PatientFullMedHistoryV6.getFinalDestinationType());
				System.out.println("20:::getFinalStatusType::::"+PatientFullMedHistoryV6.getFinalStatusType());
				System.out.println("21::getFormularyChecked:::::"+PatientFullMedHistoryV6.getFormularyChecked());
				System.out.println("22::::getFullName:::"+PatientFullMedHistoryV6.getFullName());

				System.out.println("23:::getOrderGUID::::"+PatientFullMedHistoryV6.getOrderGUID());

				System.out.println("24:::getPatientFriendlySIG::::"+PatientFullMedHistoryV6.getPatientFriendlySIG());
				System.out.println("25::getPatientGUID:::::"+PatientFullMedHistoryV6.getPatientGUID());
				System.out.println("26:::getPatientID::::"+PatientFullMedHistoryV6.getPatientID());
				System.out.println("27:::getPatientIDType::::"+PatientFullMedHistoryV6.getPatientIDType());
				System.out.println("28::::getPharmacistNotes:::"+PatientFullMedHistoryV6.getPharmacistNotes());
				System.out.println("29::::getPharmacyDetailType:::"+PatientFullMedHistoryV6.getPharmacyDetailType());
				System.out.println("30::::getPharmacyFullInfo:::"+PatientFullMedHistoryV6.getPharmacyFullInfo());
				System.out.println(":31:::getPharmacyNCPDP:::"+PatientFullMedHistoryV6.getPharmacyNCPDP());
				System.out.println("32::::getPharmacyType:::"+PatientFullMedHistoryV6.getPharmacyType());
				System.out.println("33:::getPhysicianName::::"+PatientFullMedHistoryV6.getPhysicianName());
				System.out.println("34::::getPrescriptionDate:::"+PatientFullMedHistoryV6.getPrescriptionDate()+"::"+new DateUtil().convertStringToDateFormat(PatientFullMedHistoryV6.getPrescriptionDate(),"yyyy-MM-dd'T'HH:mm:ss"));
				System.out.println("35:::::getPrescriptionGuid::"+PatientFullMedHistoryV6.getPrescriptionGuid());
				System.out.println("36::::getPrescriptionNotes:::"+PatientFullMedHistoryV6.getPrescriptionNotes());

				System.out.println(":37::getRefills::::"+PatientFullMedHistoryV6.getRefills());
				System.out.println("38:::getRoute::::"+PatientFullMedHistoryV6.getRoute());
				System.out.println("39:::::getSiteID::"+PatientFullMedHistoryV6.getSiteID());
				System.out.println("40:::::getStrength::"+PatientFullMedHistoryV6.getStrength());
				System.out.println("41:getStrengthUOM::::::"+PatientFullMedHistoryV6.getStrengthUOM());

				System.out.println("42:::getTakeAsNeeded::::"+PatientFullMedHistoryV6.getTakeAsNeeded());
				System.out.println(":43:::::::::::::::::::::::::"+PatientFullMedHistoryV6.getSubStatus());
				System.out.println(":43::::::::::::::::::::getPrescriptionTimestamp:::::"+PatientFullMedHistoryV6.getPrescriptionTimestamp());
				System.out.println(":44:::::getExternalPrescriptionID::::::::::::::::::::"+PatientFullMedHistoryV6.getExternalPrescriptionID());
				System.out.println("54:::::prn:::::::"+PatientFullMedHistoryV6.getTakeAsNeeded());
				System.out.println("54:::::allow Substitution:::::::"+PatientFullMedHistoryV6.getDispenseAsWritten());
				System.out.println("55:::::Days Supply:::::::"+PatientFullMedHistoryV6.getDaysSupply());

				PatientMedicationData patMedData=new PatientMedicationData();


				patMedData.setPatientId(Integer.parseInt(PatientFullMedHistoryV6.getPatientID()));
				patMedData.setDrugId(Double.parseDouble(PatientFullMedHistoryV6.getDrugID()));
				patMedData.setDataProvider("FDB");
				patMedData.setDrugs(PatientFullMedHistoryV6.getDrugName());
				patMedData.setStrengths(PatientFullMedHistoryV6.getStrength()+" "+PatientFullMedHistoryV6.getStrengthUOM());

				patMedData.setDosageForm(PatientFullMedHistoryV6.getDosageForm());
				/*if(patMedData.equals("Add'l Sig"))
					patMedData.setDosageForm("Add l Sig");*/
				patMedData.setUnit(PatientFullMedHistoryV6.getDosageNumberDescription());
				patMedData.setByRoute(PatientFullMedHistoryV6.getRoute());

				patMedData.setPharmacyType(PatientFullMedHistoryV6.getPharmacyType());
				patMedData.setPharmacyDetailsType(PatientFullMedHistoryV6.getPharmacyDetailType());
				patMedData.setFinalDestinationType(PatientFullMedHistoryV6.getFinalDestinationType());
				patMedData.setFinalStatusType(PatientFullMedHistoryV6.getFinalStatusType());
				
				patMedData.setProviderId(new ContextUtil().getProviderId());

				patMedData.setQuantity(PatientFullMedHistoryV6.getDispense());
				if(PatientFullMedHistoryV6.getDosageFrequencyDescription().isEmpty())
					patMedData.setDirections(PatientFullMedHistoryV6.getPrescriptionNotes());
				else
					patMedData.setDirections(PatientFullMedHistoryV6.getDosageFrequencyDescription());
				if(patMedData.getDirections().equalsIgnoreCase("Add'l Sig"))
					patMedData.setDirections(PatientFullMedHistoryV6.getPrescriptionNotes());

				patMedData.setReffils(Integer.parseInt(PatientFullMedHistoryV6.getRefills()));
				patMedData.setAdditionalSig(PatientFullMedHistoryV6.getPrescriptionNotes());
				//patMedData.setPrn(PatientFullMedHistoryV6.getTakeAsNeeded());
				//String str = "true";
				if(PatientFullMedHistoryV6.getTakeAsNeeded().equalsIgnoreCase("Y"))
					patMedData.setPrn(true);
				if(PatientFullMedHistoryV6.getTakeAsNeeded().equalsIgnoreCase("N"))
					patMedData.setPrn(false);
				System.out.println("prn value::::"+patMedData.isPrn());

				if(PatientFullMedHistoryV6.getDispenseAsWritten().equalsIgnoreCase("Y"))
					patMedData.setAllowSubstitution(true);
				if(PatientFullMedHistoryV6.getDispenseAsWritten().equalsIgnoreCase("N"))
					patMedData.setAllowSubstitution(false);
				System.out.println("patMedData.setAllowSubstitution(true);:::::"+patMedData.isAllowSubstitution());

				patMedData.setExternalPrescriptionId(PatientFullMedHistoryV6.getExternalPrescriptionID());


				//patMedData.setStartDate(new DateUtil().convertStringToDateFormatToCurrentTimeZone(PatientFullMedHistoryV6.getPrescriptionDate(),"yyyy-MM-dd'T'HH:mm:ss"));
				//-----------date time conversion in GMT
				String modifiedDateFormat=changeGMTFormatForCompare(PatientFullMedHistoryV6.getPrescriptionDate());
				patMedData.setStartDate(new DateUtil().convertStringToDateFormatToCurrentTimeZone(modifiedDateFormat,"yyyy-MM-dd'T'HH:mm:ss"));
				System.out.println("patMedData:::::::::::::::priscriptiondate::::::::"+modifiedDateFormat);
				String modifiedDateForComparingTimeZone=changeGMTFormatForCompare(PatientFullMedHistoryV6.getPrescriptionTimestamp());
				patMedData.setDateWithTimeZoneForCompare(modifiedDateForComparingTimeZone);
				logger.info("modifiedDateForComparingTimeZone:string:::"+modifiedDateForComparingTimeZone);
				logger.info("prescriptionTimestamp in patMedData::::"+patMedData.getDateWithTimeZoneForCompare());

				//patMedData.setStartDate(new Date());
				System.out.println("::::::::::::::::::::::::date111:::"+patMedData.getStartDate());
				if(!(PatientFullMedHistoryV6.getExternalPhysicianID().isEmpty()))
					patMedData.setDoctorId(Integer.parseInt(PatientFullMedHistoryV6.getExternalPhysicianID().trim()));

				patMedData.setPrescriberName(PatientFullMedHistoryV6.getPhysicianName());
				
				//----------start---- added by ajay-- for prescriber name- date 9/5/2014
				System.out.println("getPhysicianName:::::123:::::"+patMedData.getPrescriberName());
				
				/*for(PatientMedicationData patData: medicineListGetDataBeforeEprescribe)
				{
					System.out.println("med data befor ePrescribe::::"+patData.getDrugId()+":::"+patData.getDrugs()+"::::"+patData.getPrescriberName());
					
					if(((patData.getDrugId()==patMedData.getDrugId()) && (patMedData.getPrescriberName().equalsIgnoreCase("NOT SENT")) 
							&& (patMedData.getDirections().equalsIgnoreCase(patData.getDirections()))))
					{
						patMedData.setPrescriberName(patData.getPrescriberName());
						System.out.println("::::::::getPrescriberName:121::"+patMedData.getPrescriberName());
						//save
					}
				}*/
				// ------end-------
				patMedData.setPrescriptionGuid(PatientFullMedHistoryV6.getPrescriptionGuid());
				patMedData.setPharmacyName(PatientFullMedHistoryV6.getPharmacyFullInfo());

				patMedData.setPrescriptionStatus(PatientFullMedHistoryV6.getPrescriptionStatus());
				patMedData.setPrescriptionSubStatus(PatientFullMedHistoryV6.getSubStatus());
				patMedData.setDaySupply(PatientFullMedHistoryV6.getDaysSupply());
				
				
				patientMedicationDataForIntegrate.add(patMedData);
				
			

			}
		}
		

		//----------start---- added by ajay--- for discontinue meds records fron new crop- date 9/9/2014 modified by umesh on 30/09/2014
		for(PatientMedicationData patData: medicineListGetDataBeforeEprescribe)
		{
			if(!patientMedicationDataForIntegrate.contains(patData)){
				
				System.out.println("patData drug id details::::::"+patData.getDrugId());
				PatientMedicationHistory patHis= new PatientMedicationHistory();
				//patHis.setDrugId(patData.getDrugId());
				
				patHis.setPatientId(patData.getPatientId());
				patHis.setStrength(patData.getStrengths());
				patHis.setProviderId(patData.getProviderId());
				patHis.setDrugs(patData.getDrugs());
				patHis.setQuantity(patData.getQuantity());
				patHis.setReffils(patData.getReffils());
				patHis.setStartDate(patData.getStartDate());
				patHis.setMedicineStatus(DISCONTINUE_MEDS);
				patHis.setDirection(patData.getDirections());
				patHis.setPrescriberID(patData.getDoctorId());
				patHis.setDrugId(patData.getDrugId());
				patHis.setDrugNameId(patData.getDrugNameId());
				patHis.setDataProvider(patData.getDataProvider());
				patHis.setNotes(patData.getNotes());
				patHis.setUnit(patData.getUnit());
				patHis.setUnitDetail(patData.getUnitDetail());
				patHis.setByRoute(patData.getByRoute());
				patHis.setDosageForm(patData.getDosageForm());
				patHis.setPrescriptionGuid(patData.getPrescriptionGuid());
				patHis.setPrescriberName(patData.getPrescriberName());
				patHis.setPrescriptionStatus(patData.getPrescriptionStatus());
				patHis.setPrescriptionSubStatus(patData.getPrescriptionSubStatus());
				patHis.setFlagForVisit(true);
				patHis.setActionDate(new Date());
				//patientMedicineHistory.setDateWithTimeZoneForCompare(new DateUtil().convertDateFormatUsingFormat(new Date(), "yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
				patHis.setDateTimeZoneForCompare(new DateUtil().convertDateFormatUsingFormat(new Date(), "yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
				
				
				patientMedicineService.saveNewCropDiscontinueMedsData(patHis);
			}
		}
		
		//----------end----
		
		patientMedicineService.medicineIntegrateFromNewCropToClinakos(patientMedicationDataForIntegrate,new ContextUtil().getPatientId(),
				patientMedicationDataList,getAnticoagMedList(),getMedicalActionPlanList(), getAllGeneralMedPlans());

		patientService.diagnosisIntegrationFromNewCropToClinakos(patientDiagnosisSetFromIntegration,new ContextUtil().getPatientId());

		//patientService.insuranceDetailIntegrationFromNewCropToClinakos(getUserInsuranceDetailListFromIntegration(),new ContextUtil().getPatientId());

		//for visitsummary..
		patientMedicineService.endingVisitOfParticularPatient(new ContextUtil().getPatientId(),new ContextUtil().getProviderId());

		patientFullDrugDetailListByWebservices=new ArrayList<PatientFullMedHistoryV6>();
		patientMedicationDataList = null;


	}

	private void alergyIntegration() throws Exception {

		List<PatientAllergy> patientAllergyListForIntegrate=new ArrayList<PatientAllergy>();
		FacesContext context = FacesContext	.getCurrentInstance();
		UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");
		userManageBean.setPatientAllergyExtendedList(null);
		for(PatientAllergyExtendedDetailV4 patientAllergyFromNewCrop:userManageBean.getPatientAllergyExtendedList())
		{
			PatientAllergy patientallergy=new PatientAllergy();
			System.out.println(":::::::::::::::::::::::::::::##################################################");
			System.out.println(":::getAllergyType:::"+patientAllergyFromNewCrop.getAllergyType());
			System.out.println("::::getAllergyConceptId::"+patientAllergyFromNewCrop.getAllergyConceptId());
			System.out.println("::::getAllergyId::"+patientAllergyFromNewCrop.getAllergyId());
			System.out.println(":::::getAllergyName:"+patientAllergyFromNewCrop.getAllergyName());
			System.out.println(":::getAllergyNotes:::"+patientAllergyFromNewCrop.getAllergyNotes());
			System.out.println("::::getAllergySeverityName::"+patientAllergyFromNewCrop.getAllergySeverityName());
			System.out.println("::::getAllergySeverityTypeId::"+patientAllergyFromNewCrop.getAllergySeverityTypeId());
			System.out.println("::::getAllergySourceId::"+patientAllergyFromNewCrop.getAllergySourceId());
			System.out.println("::::getCompositeAllergyId::"+patientAllergyFromNewCrop.getCompositeAllergyId());
			System.out.println(":::getConceptId:::"+patientAllergyFromNewCrop.getConceptId());
			System.out.println(":::getConceptType:::"+patientAllergyFromNewCrop.getConceptType());
			System.out.println("::::getConceptTypeId::"+patientAllergyFromNewCrop.getConceptTypeId());
			System.out.println(":::getEndDate:::"+patientAllergyFromNewCrop.getEndDate());
			System.out.println(":::getOnsetDate:::"+patientAllergyFromNewCrop.getOnsetDate());
			System.out.println(":::getRecordedDate:::"+patientAllergyFromNewCrop.getRecordedDate());
			System.out.println("::::getRxcui::"+patientAllergyFromNewCrop.getRxcui());
			System.out.println("::::::"+patientAllergyFromNewCrop.getSpare1());
			System.out.println("::::::"+patientAllergyFromNewCrop.getStatus());



			System.out.println(patientAllergyFromNewCrop.getCompositeAllergyId()+"AAA<<<<<<<<<<<<<>>>>>:::::"+patientAllergyFromNewCrop.getAllergyName());

			patientallergy.setAllergytype(Integer.parseInt(patientAllergyFromNewCrop.getAllergyType()));
			patientallergy.setPatientId(new ContextUtil().getPatientId());
			patientallergy.setAllergyName(patientAllergyFromNewCrop.getAllergyName());
			patientallergy.setAllergyNotes(patientAllergyFromNewCrop.getAllergyNotes());
			if(patientAllergyFromNewCrop.getAllergySeverityName()==null)
				patientallergy.setAllergySeverity("");
			else
				patientallergy.setAllergySeverity(patientAllergyFromNewCrop.getAllergySeverityName());

			patientallergy.setAllergySource(patientAllergyFromNewCrop.getAllergySourceId());
			if(patientAllergyFromNewCrop.getCompositeAllergyId().equals(""))
				patientallergy.setCompositeAllergyId(0);

			else
				patientallergy.setCompositeAllergyId(Integer.parseInt(patientAllergyFromNewCrop.getCompositeAllergyId()));
			patientallergy.setAlergyConceptId(Integer.parseInt(patientAllergyFromNewCrop.getConceptId()));
			patientallergy.setAllergyConceptType(patientAllergyFromNewCrop.getConceptType());
			patientallergy.setAllergyConceptTypeId(Integer.parseInt(patientAllergyFromNewCrop.getConceptTypeId().trim()));
			//new DateUtil().StringConvertToDate(patientDrugDetail5.getPrescriptionDate()));
			patientallergy.setStartDate(new DateUtil().convertStringToDateFormat(patientAllergyFromNewCrop.getRecordedDate(),DATE_PATTERN));
			if(!(patientAllergyFromNewCrop.getOnsetDate().trim().equals("")))
				patientallergy.setOnSetDate(new DateUtil().convertStringToDateFormat(patientAllergyFromNewCrop.getOnsetDate(),DATE_PATTERN));


			//patientallergy.setAllergy(patientAllergy.getAllergyName());
			//patientallergy.setAllergyDescription(patientAllergy.getAllergySeverityName());
			//patientallergy.setAllergyId(patientAllergy.getCompositeAllergyId());
			//patientallergy.setPatientId(new ContextUtil().getPatientId());
			patientallergy.setDateTimeForcompareAllergy(patientAllergyFromNewCrop.getRecordedDate());
			logger.info("inside alergyIntegration setDateTimeForcompareAllergy="+patientallergy.getDateTimeForcompareAllergy());
			patientAllergyListForIntegrate.add(patientallergy);

		}
		patientMedicineService.allergyIntegrateFromNewCropToClinakos(patientAllergyListForIntegrate,new ContextUtil().getPatientId());
		patientAllergyList=null;
		allergySize=0;



	}

	/*public void setCheckIntegrationForNewCrop(int checkIntegrationForNewCrop) {
		this.checkIntegrationForNewCrop = checkIntegrationForNewCrop;
	}*/
	public void  saveValueForIntegration()
	{
		logger.info("::::saveValueForIntegration");
		boolean checkIntegration=true;
		patientMedicineService.saveValueForIntegration(new ContextUtil().getPatientId(),checkIntegration);
		//return "http://preproduction.newcropaccounts.com/InterfaceV7/RxEntry.aspx";
	}

	private boolean findUrlForComingBackClinakosFromNewCrop() {
		boolean check=false;
		check=patientMedicineService.findStatusOfIntegration(new ContextUtil().getPatientId());

		return check;
	}

	public List<PatientMedicationData> getPatientMedicationDataFromNewCrop() {
		return patientMedicationDataFromNewCrop;
	}

	public void setPatientMedicationDataFromNewCrop(
			List<PatientMedicationData> patientMedicationDataFromNewCrop) {
		this.patientMedicationDataFromNewCrop = patientMedicationDataFromNewCrop;
	}

	public List<PatientAllergy> getPatientAllergyListFromNewCrop() {
		return patientAllergyListFromNewCrop;
	}

	public void setPatientAllergyListFromNewCrop(
			List<PatientAllergy> patientAllergyListFromNewCrop) {
		this.patientAllergyListFromNewCrop = patientAllergyListFromNewCrop;
	}

	/**
	 * Get Medication Data based on Patient   
	 * medication.jsf
	 * @return PatientMedication Data List 
	 */
	public List<PatientMedicationData> getPatientMedicationDataList() {
		//logger.info("getPatientMedicationDataList method::::"+ new DateUtil().getTodayDate());
		//for testing..

		if (patientMedicationDataList == null)
		{
			try{
			getSigCodeList();
			patientMedicationDataList = patientMedicineService
					.findPatientMedicationDataList(new ContextUtil()
					.getPatientId(),sigCodeList); // Get Medication data based patient Id and Sig Code  
			for(PatientMedicationData pat: patientMedicationDataList)
			{
			//	System.out.println(pat.getDrugs()+"pate::::::"+pat.getStartDate());
		//	System.out.println("<><><><><><><><><<<<<<<<<<<<<,days supply::::::"+pat.getDaySupply());

		//		logger.info("Prescriber Name "+pat.getPrescriberName());
				if(StringUtils.isBlank(pat.getPrescriberName()) || pat.getPrescriberName().equals("NOT SENT")|| pat.getPrescriberName().equals("N/A"))
				{
			//		logger.info("Inside IF Condition pat.getPrescriberName() == null");
					pat.setPrescriberName("NOT SENT");
				}
				
				else{
					if(pat.getPrescriberName().contains("Dr ")){

						pat.setPrescriberName(pat.getPrescriberName().trim());

					}else{
						
						pat.setPrescriberName("Dr "+pat.getPrescriberName().trim());
					}
				}
				
				if(pat.getDirections() == null || pat.getDirections().equalsIgnoreCase("Add'I Sig") || pat.getDirections().equalsIgnoreCase("Add'l Sig") 
						            ){
	            	   pat.setDirections(" ");
	            	   
	            	   
	               }
				if(pat.getDosageForm()==null || pat.getDosageForm().equalsIgnoreCase("Add'l Sig") || pat.getDosageForm().equalsIgnoreCase("Add'I Sig")){
					 pat.setDosageForm(" ");
				}
				
			
			
				
				System.out.println("::::::::directions:::"+pat.getDirections()+":::::dosageform::::::"+pat.getDosageForm());
				if(pat.getStartDate()!=null){				
				Date after7Days=new DateUtil().AddDate(pat.getStartDate(), 7);
				System.out.println(":::after7Days::"+after7Days);
				if(after7Days.after(new DateUtil().getTodayDate()))
				{
					pat.setIconForNewMedAdd(true);
					//pat.setCauseOfAddMeds("add newly meds");
					System.out.println("1:::after7Days::"+pat.getDrugs());
				}
				
				System.out.println("NOT SENT::::::::::"+pat.getPrescriberName());
				if(pat.isFlagForVisit())
				{
					Date todayDate= new DateUtil().getTodayDate();
					System.out.println("getCauseOfAddMeds:::::::::"+pat.getStartDate()+"::::::::::::"+after7Days+"::::"+todayDate);
					
					if(!(pat.getPrescriberName().equalsIgnoreCase("NOT SENT")))
					{
						pat.setPrescriberNamefornewcropreturn(pat.getPrescriberName());
					
					if(todayDate.after(after7Days))
					{
						//System.out.println("heloo:::::::");
						pat.setCauseOfAddMeds("Not Completed");
						System.out.println("pat.setCauseOfAddMeds add newly med"+pat.getCauseOfAddMeds());
					}
					
				}
				}
				if(!(pat.isFlagForVisit()))
				{
					/*getMedicineListGetDataBeforeEprescribe();
					System.out.println("getMedicineListGetDataBeforeEprescribe():::::LLLL::::"+medicineListGetDataBeforeEprescribe.size());
					for(PatientMedicationData patData: medicineListGetDataBeforeEprescribe)
					{
						System.out.println("med data befor ePrescribe::::"+patData.getDrugId()+":::"+patData.getDrugs()+"::::"+patData.getPrescriberName());
						
						if(((patData.getDrugId()==pat.getDrugId()) && (pat.getPrescriberName().equalsIgnoreCase("NOT SENT"))))
						{
							pat.setPrescriberName(patData.getPrescriberName());
							System.out.println("::::::::getPrescriberName:::"+pat.getPrescriberName());
							//save
						}
					}*/
					
					Date todayDate= new DateUtil().getTodayDate();
					System.out.println("getCauseOfAddMeds:::::::::"+pat.getStartDate()+"::::::::::::"+after7Days+"::::"+todayDate);
					
					if(!(pat.getPrescriberName().equalsIgnoreCase("NOT SENT")))
					{
						pat.setPrescriberNamefornewcropreturn(pat.getPrescriberName());
					
					if((todayDate.after(pat.getStartDate())) && (todayDate.before(after7Days)))
					{
						//System.out.println("heloo:::::::");
						pat.setCauseOfTransmittedMeds("Newly Added Med");
						System.out.println("pat.setCauseOfAddMeds add newly med"+pat.getCauseOfAddMeds());
					}
					
					if(todayDate.after(after7Days))
					{
						//System.out.println("heloo:::::::");
						pat.setCauseOfTransmittedMeds(" ");
						System.out.println("pat.setCauseOfAddMeds add newly med"+pat.getCauseOfAddMeds());
					}
					
					if(pat.getPrescriberName().equalsIgnoreCase("Dr John Smith"))
					{
						pat.setCauseOfTransmittedMeds(RECONCILE_MEDS);
						
					}
					
					/*else if(!(((todayDate.after(pat.getStartDate())) && (todayDate.before(after7Days)))))
					{
						pat.setCauseOfTransmittedMeds("Newly Added Meds1111");
						System.out.println("medDetail.daySupply eq :::::::::::::::::::::"+pat.getCauseOfTransmittedMeds());
					}*/
				}
					else if(pat.getPrescriberName().equalsIgnoreCase("NOT SENT"))
					{
						System.out.println("medDetail.daySupply eq :::::::::::::::::::::"+pat.getCauseOfAddMeds());
						pat.setCauseOfTransmittedMeds("Newly Added Meds (Not Completed)");
						pat.setPrescriberNamefornewcropreturn("Dr "+new ContextUtil().getLoggerFirstName()+" "+new ContextUtil().getLoggedUserMiddleName()+" "+new ContextUtil().getLoggerLastName());
						if(pat.getCauseOfAddMeds().equalsIgnoreCase(RECONCILE_MEDS))
						{
							pat.setCauseOfTransmittedMeds(RECONCILE_MEDS);	
						}
						
						if(pat.getCauseOfAddMeds().equalsIgnoreCase(CHANGE_MEDS))
						{
							System.out.println("Inside Change med");
							pat.setCauseOfTransmittedMeds(CHANGE_MEDS);	
						}
						if(todayDate.after(after7Days))
						{
							//System.out.println("heloo:::::::");
							pat.setCauseOfTransmittedMeds("Not Completed");
							System.out.println("pat.setCauseOfAddMeds add newly med inside not completed"+pat.getCauseOfAddMeds()+"cause of transmitted med"+pat.getCauseOfTransmittedMeds());
						}
					}
					
			}
					/*if((after7Days.before(new DateUtil().getTodayDate()))&&(pat.getCauseOfAddMeds().equalsIgnoreCase(NEW_ADDED_MEDS)))
					{
						pat.setCauseOfAddMeds("add newly meds");
					}*/
				}
				
				else{
					
				}
				
				if(!pat.getDrugs().isEmpty())
				{
				pat.setDrugs(pat.getDrugs().substring(0, 1).toUpperCase()+pat.getDrugs().substring(1).toLowerCase());// Changed Drugs name first letter in upper case 
				}
				else
				{
					pat.setDrugs("N/A");
				}
			}
			}catch(Exception e){
				e.printStackTrace();
			}
			/*copyOriginalPatientMedicationList=new ArrayList<PatientMedicationData>();
			filterPatientMedicationList=new ArrayList<PatientMedicationData>();
			copyOriginalPatientMedicationList.addAll(callToTherapeuticCategories(patientMedicationDataList));
			filterPatientMedicationList.addAll(patientMedicationDataList);*/
		}
		return patientMedicationDataList;
	}


	// Getter for Medicine Detail DataTable Object
	public DataTable getMedDataTable() {
		return medDataTable;
	}

	// Setter for Medicine Detail DataTable Object
	public void setMedDataTable(DataTable medDataTable) {
		this.medDataTable = medDataTable;
	}


	public DataTable getAllergyDataTableBinding() {
		return allergyDataTableBinding;
	}

	public void setAllergyDataTableBinding(DataTable allergyDataTableBinding) {
		this.allergyDataTableBinding = allergyDataTableBinding;
	}

	public DataTable getViewRxDataTable() {
		return viewRxDataTable;
	}

	public void setViewRxDataTable(DataTable viewRxDataTable) {
		this.viewRxDataTable = viewRxDataTable;
	}

	// Getter for Medication History
	public List<PatientMedicationHistory> getFetchMedicationHistoryList() {
		return fetchMedicationHistoryList;
	}

	// Setter for Medication History
	public void setFetchMedicationHistoryList(
			List<PatientMedicationHistory> fetchMedicationHistoryList) {
		this.fetchMedicationHistoryList = fetchMedicationHistoryList;
	}
	
	

	public boolean isCheckdateForMedactionplan() {
		return checkdateForMedactionplan;
	}
	public void setCheckdateForMedactionplan(boolean checkdateForMedactionplan) {
		this.checkdateForMedactionplan = checkdateForMedactionplan;
	}
	// Method to show Medication History by Anand S Jha
	/*
	 * method maodified by Gopal K Jha for patient medication datatalist to Pharmacy data list
	 */
	public void onRowExpensionMedicationHistory(ToggleEvent event) {
	
			PatientMedicationData pmDataHistory = (PatientMedicationData) getMedDataTable()
					.getRowData();
			logger.info("onRowExpensionMedicationHistory method start in patientmedicine manage bean::"+pmDataHistory.getDrugId());
			pharmacyDetailList=new ArrayList<PharmacyDetail>();
			pharmacyDetailList=patientMedicineService.findPharmacyDetailHistoryListAccordingToParticularDrugId(pmDataHistory.getDrugId(),new ContextUtil().getPatientId());
			/*fetchMedicationHistoryList = patientMedicineService
					.fetchMedicationHistoryList(
							new ContextUtil().getPatientId(),
							pmDataHistory.getDrugs());
			System.out.println("dosageform ::::::::"+pmDataHistory.getDosageForm()+"unit:::::::::::::::::"+pmDataHistory.getUnit()+"directions::"+pmDataHistory.getDirections());
			for (PatientMedicationHistory patMedHis : fetchMedicationHistoryList) {
				if( patMedHis.getDirection() == null  || patMedHis.getDirection().equalsIgnoreCase("Add'I Sig") || patMedHis.getDirection().equalsIgnoreCase("Add'l Sig")){
					patMedHis.setDirection(" ");
				}
				if(patMedHis.getDosageForm() == null || patMedHis.getDosageForm().equalsIgnoreCase("Add'I Sig") || patMedHis.getDosageForm().equalsIgnoreCase("Add'l Sig")){
					patMedHis.setDosageForm(" ");
				}
				
			}*/
		
			
	/*	} catch (Exception e) {

			logger.debug(e.toString());
		}*/

	}

	/**
	 * Get the medication list of patient  based on patietnId
	 * @param patientId
	 * @return the medicationListForPatient
	 */
	public List<PatientMedicationData> getMedicationListForPatient(int patientId) {
		if(patientId==0){
			patientId=new ContextUtil().getLoginId();
		}
		System.out.println("patientId in patient Profile "+patientId);
		if (medicationListForPatient == null) {
            
			medicationListForPatient = new ArrayList<PatientMedicationData>();
			medicationListForPatient = patientMedicineService 
					.getPatientMedicationeData(patientId); // Get Medication data of Patient 
			for(PatientMedicationData pdata:medicationListForPatient)
			{
				pharmacyName=pdata.getPharmacyName();
				
				
			}
		}

			
		
		/*medicationListForPatient = patientMedicineService
				.getPatientMedicationeData();*/
		return medicationListForPatient;
	}

	/**
	 * @param medicationListForPatient
	 *            the medicationListForPatient to set
	 */
	public void setMedicationListForPatient(
			List<PatientMedicationData> medicationListForPatient) {
		this.medicationListForPatient = medicationListForPatient;
	}

	/**
	 * @return the patientMedicineDataTable
	 */
	public DataTable getPatientMedicineDataTable() {
		if (patientMedicineDataTable == null) {
			patientMedicineDataTable = new DataTable();
		}
		return patientMedicineDataTable;
	}

	/**
	 * @param patientMedicineDataTable
	 *            the patientMedicineDataTable to set
	 */
	public void setPatientMedicineDataTable(DataTable patientMedicineDataTable) {
		this.patientMedicineDataTable = patientMedicineDataTable;
	}

	/**
	 * @return the medicationHistoryListForPatient
	 */
	public List<PatientMedicationHistory> getMedicationHistoryListForPatient() {
		try{
			if (medicationHistoryListForPatient == null) {
				medicationHistoryListForPatient = new ArrayList<PatientMedicationHistory>();
				medicationHistoryListForPatient = patientMedicineService
						.getPatientMedicationeHistoryData(getPatientMedicationData()
								.getDrugs());
			}


		} catch (Exception e) {
			e.printStackTrace();
		}
		return medicationHistoryListForPatient;
	}

	/**
	 * @param medicationHistoryListForPatient
	 *            the medicationHistoryListForPatient to set
	 */
	public void setMedicationHistoryListForPatient(
			List<PatientMedicationHistory> medicationHistoryListForPatient) {
		this.medicationHistoryListForPatient = medicationHistoryListForPatient;
	}

	/**
	 * @return the drugName
	 */
	public String getDrugName() {
		return drugName;
	}

	/**
	 * @param drugName
	 *            the drugName to set
	 */
	public void setDrugName(String drugName) {
		this.drugName = drugName;
	}

	/**
	 * @return the patientMedicineNotes
	 */
	public PatientMedicineNotes getPatientMedicineNotes() {
		return patientMedicineNotes;
	}

	/**
	 * @param patientMedicineNotes the patientMedicineNotes to set
	 */
	public void setPatientMedicineNotes(PatientMedicineNotes patientMedicineNotes) {
		this.patientMedicineNotes = patientMedicineNotes;
	}

	/**
	 * @return the patientMedicineNotesList
	 */
	public List<PatientMedicineNotes> getPatientMedicineNotesList() {
		if (patientMedicineNotesList==null) {
			patientMedicineNotesList=new ArrayList<PatientMedicineNotes>();
			patientMedicineNotesList=patientMedicineService.getMedicineNotes();	
			
			System.out.println("patientMedicineNotesList.size()::::::::::  "+patientMedicineNotesList.size());

		}

		return patientMedicineNotesList;
	}

	/**
	 * @param patientMedicineNotesList the patientMedicineNotesList to set
	 */
	public void setPatientMedicineNotesList(
			List<PatientMedicineNotes> patientMedicineNotesList) {
		this.patientMedicineNotesList = patientMedicineNotesList;
	}



	public boolean isShowOptimizer() {
		return showOptimizer;
	}

	public void setShowOptimizer(boolean showOptimizer) {
		this.showOptimizer = showOptimizer;
	}


	public List<FormularyDetail> getMyFormularyList() {
		return myFormularyList;
	}

	public void setMyFormularyList(List<FormularyDetail> myFormularyList) {
		this.myFormularyList = myFormularyList;
	}
	public boolean isShowFormulary() {
		return showFormulary;
	}

	public void setShowFormulary(boolean showFormulary) {
		this.showFormulary = showFormulary;
	}

	public int getSelectIntervention() {
		return selectIntervention;
	}

	public void setSelectIntervention(int selectIntervention) {
		this.selectIntervention = selectIntervention;
	}

	public boolean isShowRxTab() {
		return showRxTab;
	}

	public void setShowRxTab(boolean showRxTab) {
		this.showRxTab = showRxTab;
	}
	public Medicine getMedicine() {
		return medicine;
	}
	public void setMedicine(Medicine medicine) {
		this.medicine = medicine;
	}
	public List<Medicine> getMedicineList() {
		if(medicineList==null)
			medicineList=patientMedicineService.findMedicineList();
		return medicineList;
	}
	public void setMedicineList(List<Medicine> medicineList) {
		this.medicineList = medicineList;
	}
	/**
	 * On Row Expension Get Patient Medication Data History
	 */

	public void onRowExpensionPatientMedicationDataHistory(ToggleEvent toggleEvent) {
		try {
			PatientMedicationData medicationData = (PatientMedicationData) getPatientMedicineDataTable()
					.getRowData();
			getPatientMedicationData().setDrugs(medicationData.getDrugs());
			//			System.out.println("Dryg name on row expension ........."
			//					+ getPatientMedicationData().getDrugs());
			medicationHistoryListForPatient = patientMedicineService.getPatientMedicationeHistoryData(getPatientMedicationData().getDrugs());
		} catch (Exception exception) {
			exception.printStackTrace();
		}
	}


	/*
	 * *******METHOD TO GET SELECTED MEDICINE NAME 
	 */

	public String getMedicationTableId() {
		Map<String, String> params = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();
		patientMedicationData.setDrugName(params.get("drugName"));

		logger.debug("value of drug::::::"+ patientMedicationData.getDrugName());
		return null;
	}

	/*
	 *******************************METHOD TO SAVE MEDICATION NOTES
	 */

	public void savePatientMedicationNotes() {

		patientMedicineNotes.setDrugName(patientMedicationData.getDrugName());
		patientMedicineNotes.setPatientId(new ContextUtil().getLoginId());
		patientMedicineNotes.setNotes(patientMedicineNotes.getNotes());
		patientMedicineNotes.setDate(new DateUtil().getTodayDate());
		logger.debug("value of medication ::::::"+ patientMedicationData.getDrugName()+"::"+patientMedicineNotes.getNotes());
		patientMedicineService.savePatientMedicationNotes(patientMedicineNotes);

		//------------------------TO CLEAN  Medication Notes
		patientMedicineNotes=new PatientMedicineNotes();
		patientMedicineNotesList=null;
	}

	//Method to fetch Medication Formulary list for DPOptimizer modified by Gopal Krishna JHa
	public List<FormularyDetail> getFetchforumlarymedList() {
		//getPatientMedicationDataList();
		/*if(fetchforumlarymedList==null)
		{*/

		getPatientMedicationDataList();
		
		Map<String,String>formularyMAPtoOldText=patientMedicineService.formularyMAPtoOldText();//Added By Nagaraj on 29/Jan/2015:To map older formulary text to new text
		List<String>medicineList=new ArrayList<String>();
		fetchforumlarymedList=new ArrayList<FormularyDetail>();
		for(PatientMedicationData pat:patientMedicationDataList)
		{
			FormularyDetail fdMed = new FormularyDetail();
			fdMed.setMedicineName(pat.getDrugs());
			if(StringUtils.isNotBlank(pat.getFormularySymbol())){
				fdMed.setFormulayTier(formularyMAPtoOldText.get(pat.getFormularySymbol()));
			}
			//fdMed.setFormulayTier(pat.getFormularySymbol());
			fdMed.setPatientCopay("Not Available");
			fdMed.setMedicineId((int) pat.getDrugId());
			fdMed.setMedStrength(pat.getStrengths());
			fetchforumlarymedList.add(fdMed);


		}
		return fetchforumlarymedList;
	}

	public void setFetchforumlarymedList(
			List<FormularyDetail> fetchforumlarymedList) {
		this.fetchforumlarymedList = fetchforumlarymedList;
	}

	//Fetching Formulary Detail for Logged in Patient Modified by gopal krishna jha
	public List<FormularyDetail> getFetchMyForumlaryMedList() {
		if(fetchMyForumlaryMedList==null)
		{
			//patientMedicationDataList;
			List<String>medicineList=new ArrayList<String>();
			if(!(medicineList.size()==0)){
				for(PatientMedicationData pat:medicationListForPatient)
				{
					medicineList.add(pat.getDrugs());
				}
				if(medicineList.isEmpty())
					fetchMyForumlaryMedList=new ArrayList<FormularyDetail>();
				else
					fetchMyForumlaryMedList=patientMedicineService.fetchFormularyMedList(medicineList, 2);
				//medicine which is not belongs to ext formuary table
				List<FormularyDetail> fetchforumlarymedListFormissingMeds=new ArrayList<FormularyDetail>(); 
				if(!(fetchMyForumlaryMedList.size()==medicationListForPatient.size()))
				{

					for(PatientMedicationData pat:medicationListForPatient)
					{
						int count=0;
						for(FormularyDetail fdetail:fetchMyForumlaryMedList)
						{
							if(!(pat.getDrugs().equalsIgnoreCase(fdetail.getMedicineName())))
							{
								count++;

							}

						}
						if(count==fetchMyForumlaryMedList.size())
						{
							//	System.out.println(":::pat.getDrugs()::"+pat.getDrugs()+":::"+":pat.getFormularySymbol():"+pat.getFormularySymbol());
							FormularyDetail formularyDetail=new FormularyDetail();
							formularyDetail.setMedicineName(pat.getDrugs());
							formularyDetail.setIsFormulary(pat.getFormularySymbol());
							fetchforumlarymedListFormissingMeds.add(formularyDetail);
						}
					}
					fetchMyForumlaryMedList.addAll(fetchforumlarymedListFormissingMeds);
				}
			}
		}
		return fetchMyForumlaryMedList;
	}

	public void setFetchMyForumlaryMedList(
			List<FormularyDetail> fetchMyForumlaryMedList) {
		this.fetchMyForumlaryMedList = fetchMyForumlaryMedList;
	}


	public FormularyDetail[] getSelectedFDetel() {
		return selectedFDetel;
	}

	public void setSelectedFDetel(FormularyDetail[] selectedFDetel) {
		System.out.println("Selected " + selectedFDetel.length );
		this.selectedFDetel = selectedFDetel;
	}

	public List<FormularyDetail> getOptimizeDPList() {
		return optimizeDPList;
	}

	public void setOptimizeDPList(List<FormularyDetail> optimizeDPList) {
		this.optimizeDPList = optimizeDPList;
	}

	//Method to optimize Drug price modified by Gopal Krishna jHA...
	public void optimizeDrugPrice() throws Exception
	{
		dpOptimizerDrugList=new ArrayList<FormularyDetail>();
		List<FormularyDetail>temporaryDPoptimizerDrugList=new ArrayList<FormularyDetail>();
		Integer drugId=0;
		Double drugIdValue=0.0;
		String drugConcept="";
		String formularyText="";
		logger.info("optimizeDrugPrice inside bean method:::");
		optimizeDPList=new ArrayList<FormularyDetail>();
		//selectedFDetel;
		//FormularyDetail[] selectedFDetel
		Map<String,String>formularyMAPtoOldText=patientMedicineService.formularyMAPtoOldText();//Added By Nagaraj on 29/Jan/2015:To map older formulary text to new text
		String healthPlan=Integer.toString(new ContextUtil().getInsuranceId()) ;
		String patientId=Integer.toString(new ContextUtil().getPatientId());
		FacesContext context = FacesContext	.getCurrentInstance();
		UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");
		if(!otherMed.equals(""))
		{


			drugIdValue = userService
					.getDrugIdByDrugName(otherMed);

			drugId=(int)drugIdValue.doubleValue();
			drugConcept=Integer.toString(drugId);
			System.out.println("Othe med ::::::::"+otherMed);
			optimizeDPList=formulary2WSBean.convertFormularyCompositeUsingDomParser(patientId,otherMed,drugConcept,userManageBean.getProviderLocation(),userManageBean.getRoleSecurity());

			/*optimizeDPList=ncUpdate1WSBean.getFormularyAlternativeWithDrugInfoForDpOptimizer(healthPlan,patientId,otherMed,drugConcept,userManageBean.getProviderLocation());*/ //Commented By Anjani 
			//dpOptimizerDrugList.addAll(optimizeDPList);
			temporaryDPoptimizerDrugList.addAll(optimizeDPList);
		}
		for(FormularyDetail fDetail:selectedFDetel){
			System.out.println("Medicine name of all selected medicine "+fDetail.getMedicineName()+"  length of array total select med "+selectedFDetel.length);
		}


		if(!(selectedFDetel.length==0))
		{


			for(FormularyDetail foDetail:selectedFDetel){
				String medicineName=foDetail.getMedicineName();
				System.out.println("Med after selection "+medicineName);

				/* drugIdValue=patientMedicineService.getDrugIdByDrugName(medicineName);
				 drugId=(int)drugIdValue.doubleValue();*/ //Commented By Anjani now getting data from PatientMedicationData Table 
				drugId=foDetail.getMedicineId();
				drugConcept=Integer.toString(drugId);
				formularyText=foDetail.getFormulayTier();
				System.out.println("formulary Tier????????"+formularyText);
				System.out.println("drug iddddddddddd"+drugId);
				optimizeDPList=formulary2WSBean.convertFormularyCompositeUsingDomParser(patientId,medicineName,drugConcept,userManageBean.getProviderLocation(),userManageBean.getRoleSecurity()); 

				/*optimizeDPList=ncUpdate1WSBean.getFormularyAlternativeWithDrugInfoForDpOptimizer(healthPlan,patientId,medicineName,drugConcept,userManageBean.getProviderLocation());*///Commented by Anjani
				//dpOptimizerDrugList.addAll(optimizeDPList);
				temporaryDPoptimizerDrugList.addAll(optimizeDPList);
			}

		}
		//optimizeDPList=patientMedicineService.optimizeDrugPrice(new ContextUtil().getPatientId(),new ContextUtil().getInsuranceId(),selectedFDetel,otherMed);
		//showOptimizer=true;
		for(FormularyDetail formularyDetailObj:temporaryDPoptimizerDrugList){
			FormularyDetail formularyObj=new FormularyDetail();
			formularyObj=formularyDetailObj;
			if(StringUtils.isNotBlank(formularyDetailObj.getFormulayTier())){
				formularyObj.setFormulayTier(formularyMAPtoOldText.get(formularyDetailObj.getFormulayTier()));
			}
			if(formularyText.equalsIgnoreCase("On Formulary") || formularyText.equalsIgnoreCase("Generic")){
				if(formularyDetailObj.getFormulayTier().equalsIgnoreCase("On Formulary") || formularyDetailObj.getFormulayTier().equalsIgnoreCase("Unlisted Drug")){
					dpOptimizerDrugList.add(formularyObj);
				}
			}
			else if (formularyText.equalsIgnoreCase("Preferred Level 1") || formularyText.equalsIgnoreCase("Preferred Level 2") || formularyText.equalsIgnoreCase("Preferred Level 3") || formularyText.equalsIgnoreCase("Tier 4 and above") || formularyText.equalsIgnoreCase("Preferred Level 4")) {
				if(formularyDetailObj.getFormulayTier().equalsIgnoreCase("On Formulary") || formularyDetailObj.getFormulayTier().equalsIgnoreCase("Unlisted Drug")){
					dpOptimizerDrugList.add(formularyObj);
				}
			}
			else if (formularyText.equalsIgnoreCase("Prior Authorization") || formularyText.equalsIgnoreCase("Non Formulary") || formularyText.equalsIgnoreCase("Not Reimbursed")) {
				if(formularyDetailObj.getFormulayTier().equalsIgnoreCase("On Formulary") || formularyDetailObj.getFormulayTier().equalsIgnoreCase("Unlisted Drug") || formularyDetailObj.getFormulayTier().equalsIgnoreCase("Tier 1") || formularyDetailObj.getFormulayTier().equalsIgnoreCase("Tier 2") || formularyDetailObj.getFormulayTier().equalsIgnoreCase("Tier 3") || formularyDetailObj.getFormulayTier().equalsIgnoreCase("On Formulary") || formularyDetailObj.getFormulayTier().equalsIgnoreCase("Tier 4") || formularyDetailObj.getFormulayTier().equalsIgnoreCase("Tier 4 and above")){
					dpOptimizerDrugList.add(formularyObj);
				}
			}
			
			
		}
		System.out.println("formularyText:::::::"+formularyText+" Prefredd Level 1"+formularyMAPtoOldText.get(PREFERRED_LEVEL_1));
		setShowOptimizer(true);
		setOtherMed("");
		//System.out.println("Optimizer Value::"+showOptimizer);
	}

	/*private List<String> dpOptimizerDrugList() {
		// TODO Auto-generated method stub
		return null;
	}*/

	//Method to look up Formulary for Logged in Patient
	public List<PatientMedicationData> getPatientMedicationSummaryList() {
		logger.info("getPatientMedicationSummaryList method in bean:::");
		if (patientMedicationSummaryList == null)
		{
			patientMedicationSummaryList = patientMedicineService
					.findPatientMedicationDataList(new ContextUtil().getPatientId(),sigCodeList);


		}
		return patientMedicationSummaryList;
	}

	public void setPatientMedicationSummaryList(
			List<PatientMedicationData> patientMedicationSummaryList) {
		this.patientMedicationSummaryList = patientMedicationSummaryList;
	}

	/*
	 * for deleting current medicine by doctor when using Reconsile i should deleted Anticoag as well as Visit summary
	 * @author : Gopal krishna jha from LI
	 */

	public void cancelCurrentMedicineforoverview()
	{
		logger.info("cancelCurrentMedicineforoverview method start in PatientMedicatinManageBean");
		FacesContext fc = FacesContext.getCurrentInstance();
		Map<String,String> params = fc.getExternalContext().getRequestParameterMap();
		//int medicineId=Integer.parseInt(params.get("medicineId"));
		//int columnId=Integer.parseInt(params.get("columnId"));
		String medicinename=params.get("medicineName");
		double drugId=Double.parseDouble(params.get("drugId"));
		//deleteMedcineOnPMRVisitSummaryAndAnticoag(medicinename);

		PatientMedicationData changePatientMedicineBackUpdata=new PatientMedicationData();

		int check=0,count=0;
		for(PatientMedicationData pat:patientMedicationDataList)
		{
			count++;
			if(pat.getDrugId()==drugId)
			{
				check++;
				changePatientMedicineBackUpdata=pat;
				break;
			}

		}

		if(!(check==0))
			patientMedicationDataList.remove(count-1);
		
		int reconcileMedsCounter=0;
		boolean isSelectedDrugExists=false;
		for(PatientMedicationData currentPatientMedicationData:reconciledMeds){
			reconcileMedsCounter++;
			if(currentPatientMedicationData.getDrugId()==drugId){
				isSelectedDrugExists=true;
				break;
			}
		}
			
		if(isSelectedDrugExists){
			reconciledMeds.remove(reconcileMedsCounter-1);
		}
		
	/*	changePatientMedicineBackUpdata.setMedicineStatus(DISCONTINUE_MEDS);
		changePatientMedicineBackUpdata.setModifyDate(changePatientMedicineBackUpdata.getStartDate());
		System.out.println("changePatientMedicineBackUpdata::::::startDate current medication added into reconcilelist::::::::"+changePatientMedicineBackUpdata.getStartDate());*/
	/*	patientMedicineService.deleteMedicineChanges(changePatientMedicineBackUpdata);
		patientMedicineService.updateReconcileInfoonDeleteMed(changePatientMedicineBackUpdata,false);*/
		reconcileMedsList.add(changePatientMedicineBackUpdata);
		pharmacyMedsMedsListForReconcile.add(changePatientMedicineBackUpdata);
		Collections.sort(pharmacyMedsMedsListForReconcile,PatientMedicationData.dateComparator);
		//resetReconcileInfo();


	}

	@SuppressWarnings("static-access")
	public void cancelCurrentMedicine()
	{
		logger.info("cancelCurrentMedicine method start in PatientMedicatinManageBean");
		FacesContext fc = FacesContext.getCurrentInstance();
		Map<String,String> params = fc.getExternalContext().getRequestParameterMap();
		//int medicineId=Integer.parseInt(params.get("medicineId"));
		//int columnId=Integer.parseInt(params.get("columnId"));
		String medicinename=params.get("medicineName");
		double drugId=Double.parseDouble(params.get("drugId"));
		//deleteMedcineOnPMRVisitSummaryAndAnticoag(medicinename);

		PatientMedicationData changePatientMedicineBackUpdata=new PatientMedicationData();

		int check=0,count=0;
		for(PatientMedicationData pat:patientMedicationDataList)
		{
			count++;
			if(pat.getDrugId()==drugId)
			{
				check++;
				changePatientMedicineBackUpdata=pat;
				break;
			}

		}

		if(!(check==0))
			patientMedicationDataList.remove(count-1);

		changePatientMedicineBackUpdata.setMedicineStatus(DISCONTINUE_MEDS);
		changePatientMedicineBackUpdata.setModifyDate(new DateUtil().getTodayDate());
		patientMedicineService.deleteMedicineChanges(changePatientMedicineBackUpdata);



	}
	/**
	 * @return the pharmacogenomicsClassification
	 */
	public PharmacogenomicsClassification getPharmacogenomicsClassification() {
		return pharmacogenomicsClassification;
	}

	/**
	 * @param pharmacogenomicsClassification the pharmacogenomicsClassification to set
	 */
	public void setPharmacogenomicsClassification(
			PharmacogenomicsClassification pharmacogenomicsClassification) {
		this.pharmacogenomicsClassification = pharmacogenomicsClassification;
	}

	/**
	 * @return the pharmacogenomicsRecomendations
	 */
	public PharmacogenomicsRecomendations getPharmacogenomicsRecomendations() {
		return pharmacogenomicsRecomendations;
	}

	/**
	 * @param pharmacogenomicsRecomendations the pharmacogenomicsRecomendations to set
	 */
	public void setPharmacogenomicsRecomendations(
			PharmacogenomicsRecomendations pharmacogenomicsRecomendations) {
		this.pharmacogenomicsRecomendations = pharmacogenomicsRecomendations;
	}

	/**
	 * @return the pharmacogenomicsClassificationList
	 */
	public List<PharmacogenomicsClassification> getPharmacogenomicsClassificationList() {
		return pharmacogenomicsClassificationList;
	}

	/**
	 * @param pharmacogenomicsClassificationList the pharmacogenomicsClassificationList to set
	 */
	public void setPharmacogenomicsClassificationList(
			List<PharmacogenomicsClassification> pharmacogenomicsClassificationList) {
		this.pharmacogenomicsClassificationList = pharmacogenomicsClassificationList;
	}

	/**
	 * @return the recommendedFutureMedicineList
	 */
	public List<PharmacogenomicsRecomendations> getRecommendedFutureMedicineList() {
		if(recommendedFutureMedicineList==null){
			recommendedFutureMedicineList=new ArrayList<PharmacogenomicsRecomendations>();
			//System.out.println("Method stated now for recomaded medicine ");
		}
		recommendedFutureMedicineList=patientMedicineService.getRecommendedFutureMedicine(new ContextUtil().getPatientId());
		return recommendedFutureMedicineList;
	}

	/**
	 * @param recommendedFutureMedicineList the recommendedFutureMedicineList to set
	 */
	public void setRecommendedFutureMedicineList(
			List<PharmacogenomicsRecomendations> recommendedFutureMedicineList) {
		this.recommendedFutureMedicineList = recommendedFutureMedicineList;
	}


	/**
	 * @return the pharmacogenomicsRecomendationsListForImpactedMedicine
	 */
	public List<PharmacogenomicsRecomendations> getPharmacogenomicsRecomendationsListForImpactedMedicine() {

		if (pharmacogenomicsRecomendationsListForImpactedMedicine==null) {
			pharmacogenomicsRecomendationsListForImpactedMedicine= new ArrayList<PharmacogenomicsRecomendations>();
		}
		//----------------------method to find impacted medicine for Pharmacogenomics
		pharmacogenomicsRecomendationsListForImpactedMedicine=patientMedicineService.findImpactedMedication(new ContextUtil().getPatientId());
		return pharmacogenomicsRecomendationsListForImpactedMedicine;
	}
	/**
	 * @param pharmacogenomicsRecomendationsListForImpactedMedicine the pharmacogenomicsRecomendationsListForImpactedMedicine to set
	 */
	public void setPharmacogenomicsRecomendationsListForImpactedMedicine(
			List<PharmacogenomicsRecomendations> pharmacogenomicsRecomendationsListForImpactedMedicine) {
		this.pharmacogenomicsRecomendationsListForImpactedMedicine = pharmacogenomicsRecomendationsListForImpactedMedicine;
	}
	/*
	 * for change or select the intervention on view rx pop up
	 * @author by Gopal krishna jha
	 */
	public void checkSelectIntervention()
	{
		logger.info("checkSelectIntervention::::"+selectIntervention);
		if(selectIntervention==2 || selectIntervention==3 || selectIntervention==4 || selectIntervention==5)
			setShowRxTab(true);
		else
			setShowRxTab(false);
		System.out.println("::::::::::::::::::>>>>>>"+isShowRxTab());

	}

	public void checkSelectaPTTMonitoring()

	{
		logger.info("checkSelectIntervention::::"+selectaPTTMonitoring);
		if(medicineListForApixaBanDoseTest.size()>=1)
		{
			setShowDesirudinLabFrequency(true);
		}
		/*if(selectaPTTMonitoring==1 || selectaPTTMonitoring==2)
			setShowDesirudinLabFrequency(true);*/
		else
			setShowDesirudinLabFrequency(false);
		System.out.println("::::::::::::::::::>>>>>>"+isShowRxTab());

	}

	public int getSelectaPTTMonitoring() {
		return selectaPTTMonitoring;
	}

	public void setSelectaPTTMonitoring(int selectaPTTMonitoring) {
		this.selectaPTTMonitoring = selectaPTTMonitoring;
	}

	public boolean isShowDesirudinLabFrequency() {
		return showDesirudinLabFrequency;
	}

	public void setShowDesirudinLabFrequency(boolean showDesirudinLabFrequency) {
		this.showDesirudinLabFrequency = showDesirudinLabFrequency;
	}

	/*
	 * show view rx pop up after clicking particular medicine
	 * @author: GOpal Krishna Jha
	 */
	public PatientMedicationData getChangePatientMedicineBackUpdata() {
		return changePatientMedicineBackUpdata;
	}
	public void setChangePatientMedicineBackUpdata(
			PatientMedicationData changePatientMedicineBackUpdata) {
		this.changePatientMedicineBackUpdata = changePatientMedicineBackUpdata;
	}

	public void showViewRXforoverview() throws Exception
	{
		logger.info("showViewRXforoverview method in patientMedicineManageBean::::");	
		//patientMedicationData
		setShowRxTab(false);
		//setSelectIntervention(selectIntervention)
		setSelectIntervention(1);
		patientMedicationData= (PatientMedicationData) getViewRxDataTableforoverview().getRowData();  
		
		pharmacogenomicInteractionDetailList=patientMedicineService.findPharmacogenomicsInteractionDuringAddMedicine(patientMedicationData.getDrugNameId(),patientMedicationData.getDrugs(),new ContextUtil().getPatientId());
		System.out.println(patientMedicationData.getDrugNameId()+"value of  PharmacogenomicInteractionDetail after @ 8356="+getPharmacogenomicInteractionDetail());
		drugPharmaInterectionListDetail=new ArrayList<DrugInteractionOverview>();
		getPharmacogenomicsRecomendationsListForImpactedMedicine();
		highestServityForpharmacogenomic = new String();
		String drugName=patientMedicationData.getDrugs();
		for (PharmacogenomicsRecomendations pr : pharmacogenomicInteractionDetailList) {
			DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
			System.out.println("inside onRowExpensionDrugInteraction::::::"+pr.getDrugName()+"="+drugName);
			if (drugName.equalsIgnoreCase(pr.getDrugName())) {
				System.out.println("inside if block::::::"+pr.getDrugName()+"="+drugName);
				drugInteractionOverview.setSeverityLevel(pr.getAttentionRating());
				drugInteractionOverview.setIssueType(PHARMACOGENOMIC);

				drugInteractionOverview.setConflict(pr.getPharmacogenomicsId().getGeneSymbol());
				drugInteractionOverview.setClinicalEffects(pr.getImplications());
				drugInteractionOverview.setPatientManagement(pr.getRecommendation());
				final String PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING=pr.getOvaleMessage();
				drugInteractionOverview.setSeverityLevelToolTip(pr.getOvaleMessage());
				if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), HIGH_SEVERITY_LEVEL_RATING)){
					drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL_RATING);
					drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
				}else if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), MEDIUM_SEVERITY_LEVEL_RATING)){
					drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL_RATING);
					drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
				}else if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), LOW_SEVERITY_LEVEL_RATING)){
					drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL_RATING);
					drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
				}
				if(!drugPharmaInterectionListDetail.contains(drugInteractionOverview)){
					//	drugInteractionOverview.setSeverityLevel(drugDiseaseDetail.getSeverityLevelShortText());
					drugPharmaInterectionListDetail.add(drugInteractionOverview);
				}
				for(DrugInteractionOverview dio: drugPharmaInterectionListDetail)
				{
					System.out.println("drugInterectionListDetail::PHARMACOGENOMIC:::anti::::123:::"+dio.getSeverityLevel());
					setHighestServityForpharmacogenomic(dio.getSeverityLevel());
					System.out.println("drugInterectionListDetail::PHARMACOGENOMIC::456::anti:::123:::"+dio.getSeverityLevelToolTip());
				}
			}

		}
		
		
		System.out.println(":::::getDrugName::"+patientMedicationData.getDrugs()+patientMedicationData.getDosageForm());
		patientMedicationData.setAlterNateDrugs(patientMedicationData.getDrugs());
		
		
		changePatientMedicineBackUpdata=new PatientMedicationData();

		//patientMedicationData.setDaySupply("30 days");
		//setting the value changePatientMedicineBackUpdata from patient medication data for changing meds or dose changes.. 
		changePatientMedicineBackUpdata.setId(patientMedicationData.getId());
		changePatientMedicineBackUpdata.setDrugs(patientMedicationData.getDrugs());
		changePatientMedicineBackUpdata.setStrengths(patientMedicationData.getStrengths());
		changePatientMedicineBackUpdata.setQuantity(patientMedicationData.getQuantity());
		changePatientMedicineBackUpdata.setDirections(patientMedicationData.getDirections());
		changePatientMedicineBackUpdata.setDrugId(patientMedicationData.getDrugId());
		changePatientMedicineBackUpdata.setDrugNameId(patientMedicationData.getDrugNameId());

		changePatientMedicineBackUpdata.setUnit(patientMedicationData.getUnit());
		changePatientMedicineBackUpdata.setDosageForm(patientMedicationData.getDosageForm());
		changePatientMedicineBackUpdata.setByRoute(patientMedicationData.getByRoute());
		changePatientMedicineBackUpdata.setReffils(patientMedicationData.getReffils());
		changePatientMedicineBackUpdata.setDaySupply(patientMedicationData.getDaySupply());

		changePatientMedicineBackUpdata.setPatientId(patientMedicationData.getPatientId());
		changePatientMedicineBackUpdata.setProviderId(patientMedicationData.getProviderId());
		changePatientMedicineBackUpdata.setReffils(patientMedicationData.getReffils());
		changePatientMedicineBackUpdata.setStartDate(patientMedicationData.getStartDate());
		changePatientMedicineBackUpdata.setPrescriberName(patientMedicationData.getPrescriberName());
		changePatientMedicineBackUpdata.setDoctorId(patientMedicationData.getDoctorId());
		changePatientMedicineBackUpdata.setDataProvider(patientMedicationData.getDataProvider());
		changePatientMedicineBackUpdata.setNotes(patientMedicationData.getNotes());
		changePatientMedicineBackUpdata.setPrescriptionGuid(patientMedicationData.getPrescriptionGuid());
		changePatientMedicineBackUpdata.setPrescriptionStatus(patientMedicationData.getPrescriptionStatus());
		changePatientMedicineBackUpdata.setPrescriptionSubStatus(patientMedicationData.getPrescriptionSubStatus());
		changePatientMedicineBackUpdata.setFlagForVisit(patientMedicationData.isFlagForVisit());
		changePatientMedicineBackUpdata.setGenericName(patientMedicationData.getGenericName());


		//changePatientMedicineBackUpdata.setStrengths(patientMedicationData.getStrengths());

		/*setChangePatientMedicineBackUpdata((PatientMedicationData) getViewRxDataTable()
				.getRowData());*/
		System.out.println("::::::::::::::::::::changePatientMedicineBackUpdata:::"+changePatientMedicineBackUpdata.getDrugs()+"::::"+patientMedicationData.getDrugs());
		//patientMedicationData=pmDataHistory;

		// find suggested alternative medicine......
		//Modified By Anjani
		/*alternativeMedicine=patientMedicineService.findAlternativeMedicine(patientMedicationData.getDrugs(), new ContextUtil().getInsuranceId());*/

		alternativeMedicine=new ArrayList<String>();
	
		String	drugConcept=Double.toString(patientMedicationData.getDrugId());
		String formularyTier=patientMedicationData.getFormularySymbol();
		String healtPlan=Integer.toString(new ContextUtil().getInsuranceId());
		String patientId=Integer.toString(new ContextUtil().getPatientId());
		FacesContext context = FacesContext	.getCurrentInstance();
		UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");
		System.out.println("Othe med ::::::::"+otherMed);
		/*optimizeDPList=ncUpdate1WSBean.getFormularyAlternativeWithDrugInfoForDpOptimizer(healtPlan,patientId,patientMedicationData.getDrugs(),drugConcept,userManageBean.getProviderLocation());*/ //Commanted By Anjani 
		optimizeDPList=formulary2WSBean.convertFormularyCompositeUsingDomParser(patientId, patientMedicationData.getDrugs(),drugConcept, userManageBean.getProviderLocation(), userManageBean.getRoleSecurity());                                                                                                                                                                                     // now get value by Formulary Composite API 
		logger.info("drugs "+patientMedicationData.getDrugs()+"Drug Id "+patientMedicationData.getDrugId() +"Optmize drug List"+optimizeDPList.size());
		for(FormularyDetail formuDetail:optimizeDPList){

			logger.info(":::getMedicineId:::"+formuDetail.getMedicineId()+"::::name::"+formuDetail.getMedicineName()+"::getAlternateMedicine::"+formuDetail.getAlternateMedicine()+"Formulary Tier   "+formuDetail.getFormulayTier());
			System.out.println(":::::::::::"+formuDetail.getInsuranceId()+"::getMedStrength:::"+formuDetail.getMedStrength()+":::getPatientCopay:::"+formuDetail.getPatientCopay());
			System.out.println("::::getPharmacyTypeDesc:::::"+formuDetail.getPharmacyTypeDesc()+"::getSaving:::"+formuDetail.getSaving());
			
			if(formuDetail.getFormulayTier().equalsIgnoreCase(ON_FORMULARY) || formuDetail.getFormulayTier().equalsIgnoreCase(UNLISTED_DRUG) ){
				String alterMedicine=formuDetail.getAlternateMedicine();
				alternativeMedicine.add(alterMedicine);
				formularyTextAlterantiveMedicineMap.put("On Formulary", alternativeMedicine);
			}
		
		else if (formularyTier.equalsIgnoreCase(PREFERRED_LEVEL_1) || formularyTier.equalsIgnoreCase(PREFERRED_LEVEL_2) || formularyTier.equalsIgnoreCase(PREFERRED_LEVEL_3)) {
			String alterMedicine=formuDetail.getAlternateMedicine();
			alternativeMedicine.add(alterMedicine);
			formularyTextAlterantiveMedicineMap.put("On Formulary", alternativeMedicine);
		
		}
			
      
			
		}		

		

		//alternativeMedicine.add("Warfarin");
		//alternativeMedicine.add("Effient");

		/*getMedicineList();
		if(!(patientMedicationData.getDrugs()==null))
				{
					for(Medicine med: medicineList)
					{
						if(patientMedicationData.getDrugs().equals(med.getMedicinName()))
						{
							medicine.setFlagForMedActionPlan(med.isFlagForMedActionPlan());
							setShowMedActionPlanButton(medicine.isFlagForMedActionPlan());;

						}
						//System.out.println("11::::::::"+medicine.isFlagForMedActionPlan());
					}
				}*/
		logger.info("patientMedicationData.getDrugNameId()"+patientMedicationData.getDrugNameId()+patientMedicationData.getDrugs());
		
		doseDetailList=patientMedicineService.findDoseListOfParticularMeds(patientMedicationData.getDrugNameId(),patientMedicationData.getDosageForm());

		System.out.println("11::::::::::::::::::::changePatientMedicineBackUpdata:::"+changePatientMedicineBackUpdata.getDrugs()+"::::"+patientMedicationData.getDrugs());

	}
	
	/**
	 * used in overViewFilter.jsf 
	 * Fire method on Click on EditRx Button  
	 * Get All Patient Medication Data of selected Medication  
	 * @throws Exception
	 */
	public void duplicateshowViewRXforoverviewfilter() throws Exception
	{
		logger.info("showViewRXforoverview method in patientMedicineManageBean::::");	
		//patientMedicationData
		setShowRxTab(false);
		//setSelectIntervention(selectIntervention)
		setSelectIntervention(1);
		patientMedicationData= (PatientMedicationData) getViewRxDataTableforoverviewfilter().getRowData(); 
		
		//#1051:issue resolved
		/*if(StringUtils.isNotBlank(patientMedicationData.getDosageForm())){
		logger.info("Dosage Form "+patientMedicationData.getDosageForm());
		String dosageFormVar=patientMedicationData.getDosageForm().trim();
		patientMedicationData.setDosageForm(dosageFormVar.toLowerCase());
		}*/
		//
		
		pharmacogenomicInteractionDetailList=patientMedicineService.findPharmacogenomicsInteractionDuringAddMedicine(patientMedicationData.getDrugNameId(),patientMedicationData.getDrugs(),new ContextUtil().getPatientId());
		System.out.println(patientMedicationData+"value of  PharmacogenomicInteractionDetail after @ 8356="+getPharmacogenomicInteractionDetail());
		drugPharmaInterectionListDetail=new ArrayList<DrugInteractionOverview>();
		getPharmacogenomicsRecomendationsListForImpactedMedicine();
		highestServityForpharmacogenomic = new String();
		String drugName=patientMedicationData.getDrugs();
		for (PharmacogenomicsRecomendations pr : pharmacogenomicInteractionDetailList) {
			DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
			System.out.println("inside onRowExpensionDrugInteraction::::::"+pr.getDrugName()+"="+drugName);
			if (drugName.equalsIgnoreCase(pr.getDrugName())) {
				System.out.println("inside if block::::::"+pr.getDrugName()+"="+drugName);
				drugInteractionOverview.setSeverityLevel(pr.getAttentionRating());
				drugInteractionOverview.setIssueType(PHARMACOGENOMIC);

				drugInteractionOverview.setConflict(pr.getPharmacogenomicsId().getGeneSymbol());
				drugInteractionOverview.setClinicalEffects(pr.getImplications());
				drugInteractionOverview.setPatientManagement(pr.getRecommendation());
				final String PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING=pr.getOvaleMessage();
				drugInteractionOverview.setSeverityLevelToolTip(pr.getOvaleMessage());
				if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), HIGH_SEVERITY_LEVEL_RATING)){
					drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL_RATING);
					drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
				}else if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), MEDIUM_SEVERITY_LEVEL_RATING)){
					drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL_RATING);
					drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
				}else if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), LOW_SEVERITY_LEVEL_RATING)){
					drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL_RATING);
					drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
				}
				if(!drugPharmaInterectionListDetail.contains(drugInteractionOverview)){
					//	drugInteractionOverview.setSeverityLevel(drugDiseaseDetail.getSeverityLevelShortText());
					drugPharmaInterectionListDetail.add(drugInteractionOverview);
				}
				for(DrugInteractionOverview dio: drugPharmaInterectionListDetail)
				{
					System.out.println("drugInterectionListDetail::PHARMACOGENOMIC:::anti::::123:::"+dio.getSeverityLevel());
					setHighestServityForpharmacogenomic(dio.getSeverityLevel());
					System.out.println("drugInterectionListDetail::PHARMACOGENOMIC::456::anti:::123:::"+dio.getSeverityLevelToolTip());
				}
			}

		}
		
		
		System.out.println(":::::getDrugName::"+patientMedicationData.getDrugs()+patientMedicationData.getDosageForm());
		patientMedicationData.setAlterNateDrugs(patientMedicationData.getDrugs());
		changePatientMedicineBackUpdata=new PatientMedicationData();

		//patientMedicationData.setDaySupply("30 days");
		//setting the value changePatientMedicineBackUpdata from patient medication data for changing meds or dose changes.. 
		changePatientMedicineBackUpdata.setId(patientMedicationData.getId());
		changePatientMedicineBackUpdata.setDrugs(patientMedicationData.getDrugs());
		changePatientMedicineBackUpdata.setStrengths(patientMedicationData.getStrengths());
		changePatientMedicineBackUpdata.setQuantity(patientMedicationData.getQuantity());
		changePatientMedicineBackUpdata.setDirections(patientMedicationData.getDirections());
		changePatientMedicineBackUpdata.setDrugId(patientMedicationData.getDrugId());
		changePatientMedicineBackUpdata.setDrugNameId(patientMedicationData.getDrugNameId());

		changePatientMedicineBackUpdata.setUnit(patientMedicationData.getUnit());
		changePatientMedicineBackUpdata.setDosageForm(patientMedicationData.getDosageForm().trim());
		changePatientMedicineBackUpdata.setByRoute(patientMedicationData.getByRoute());
		changePatientMedicineBackUpdata.setReffils(patientMedicationData.getReffils());
		changePatientMedicineBackUpdata.setDaySupply(patientMedicationData.getDaySupply());

		changePatientMedicineBackUpdata.setPatientId(patientMedicationData.getPatientId());
		changePatientMedicineBackUpdata.setProviderId(patientMedicationData.getProviderId());
		changePatientMedicineBackUpdata.setReffils(patientMedicationData.getReffils());
		changePatientMedicineBackUpdata.setStartDate(patientMedicationData.getStartDate());
		changePatientMedicineBackUpdata.setPrescriberName(patientMedicationData.getPrescriberName());
		changePatientMedicineBackUpdata.setDoctorId(patientMedicationData.getDoctorId());
		changePatientMedicineBackUpdata.setDataProvider(patientMedicationData.getDataProvider());
		changePatientMedicineBackUpdata.setNotes(patientMedicationData.getNotes());
		changePatientMedicineBackUpdata.setPrescriptionGuid(patientMedicationData.getPrescriptionGuid());
		changePatientMedicineBackUpdata.setPrescriptionStatus(patientMedicationData.getPrescriptionStatus());
		changePatientMedicineBackUpdata.setPrescriptionSubStatus(patientMedicationData.getPrescriptionSubStatus());
		changePatientMedicineBackUpdata.setFlagForVisit(patientMedicationData.isFlagForVisit());
		changePatientMedicineBackUpdata.setGenericName(patientMedicationData.getGenericName());


		//changePatientMedicineBackUpdata.setStrengths(patientMedicationData.getStrengths());

		/*setChangePatientMedicineBackUpdata((PatientMedicationData) getViewRxDataTable()
				.getRowData());*/
		System.out.println("::::::::::::::::::::changePatientMedicineBackUpdata:::"+changePatientMedicineBackUpdata.getDrugs()+"::::"+patientMedicationData.getDrugs());
		//patientMedicationData=pmDataHistory;

		// find suggested alternative medicine......
		//Modified By Anjani
		/*alternativeMedicine=patientMedicineService.findAlternativeMedicine(patientMedicationData.getDrugs(), new ContextUtil().getInsuranceId());*/

		alternativeMedicine=new ArrayList<String>();
		formularyTextAlterantiveMedicineMap=new HashMap<String, List<String>>();
		//Double drugIdValue = userService.getDrugIdByDrugName(patientMedicationData.getDrugs());

		//Integer drugId=(int)drugIdValue.doubleValue();
		String	drugConcept=Double.toString(patientMedicationData.getDrugId());
		String formularyTier=patientMedicationData.getFormularySymbol();
		String healtPlan=Integer.toString(new ContextUtil().getInsuranceId());
		String patientId=Integer.toString(new ContextUtil().getPatientId());
		FacesContext context = FacesContext	.getCurrentInstance();
		UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");
		System.out.println("Othe med ::::::::"+otherMed);
		/*optimizeDPList=ncUpdate1WSBean.getFormularyAlternativeWithDrugInfoForDpOptimizer(healtPlan,patientId,patientMedicationData.getDrugs(),drugConcept,userManageBean.getProviderLocation());*/ //Commanted By Anjani 
		
		optimizeDPList=formulary2WSBean.convertFormularyCompositeUsingDomParser(patientId, patientMedicationData.getDrugs(),drugConcept, userManageBean.getProviderLocation(), userManageBean.getRoleSecurity());  
		logger.info("Optimized DP List"+optimizeDPList.size() +"drugConcept"+drugConcept+"  "+patientMedicationData.getDrugId());
		// now get value by Formulary Composite API 
		for(FormularyDetail formuDetail:optimizeDPList){

			System.out.println(":::::::::::::::getMedicineId::::::::::"+formuDetail.getMedicineId()+"::::name::"+formuDetail.getMedicineName()+"::getAlternateMedicine::"+formuDetail.getAlternateMedicine());
			System.out.println(":::::::::::"+formuDetail.getInsuranceId()+"::getMedStrength:::"+formuDetail.getMedStrength()+":::getPatientCopay:::"+formuDetail.getPatientCopay());
			System.out.println("::::getPharmacyTypeDesc:::::"+formuDetail.getPharmacyTypeDesc()+"::getSaving:::"+formuDetail.getSaving());
			if(formularyTier.equalsIgnoreCase("Tier 1") || formularyTier.equalsIgnoreCase("Tier 2") || formularyTier.equalsIgnoreCase("Tier 3") || formularyTier.equalsIgnoreCase("Tier 4") || formularyTier.equalsIgnoreCase("Tier 4 and above")){
				if(formuDetail.getFormulayTier().equalsIgnoreCase(ON_FORMULARY) || formuDetail.getFormulayTier().equalsIgnoreCase(UNLISTED_DRUG) ){
					String alterMedicine=formuDetail.getAlternateMedicine();
					alternativeMedicine.add(alterMedicine);
					formularyTextAlterantiveMedicineMap.put(ON_FORMULARY, alternativeMedicine);
				}
				
			}
			
			else if (formularyTier.equalsIgnoreCase("Prior Authorization") || formularyTier.equalsIgnoreCase("Non Formulary") || formularyTier.equalsIgnoreCase("Not Reimbursed")) {
				if(formuDetail.getFormulayTier().equalsIgnoreCase(ON_FORMULARY) || formuDetail.getFormulayTier().equalsIgnoreCase(UNLISTED_DRUG) ){
					String alterMedicine=formuDetail.getAlternateMedicine();
					alternativeMedicine.add(alterMedicine);
					formularyTextAlterantiveMedicineMap.put(ON_FORMULARY, alternativeMedicine);
				}
				if(formuDetail.getFormulayTier().equalsIgnoreCase(PREFERRED_LEVEL_1)|| formuDetail.getFormulayTier().equalsIgnoreCase(PREFERRED_LEVEL_2) || formuDetail.getFormulayTier().equalsIgnoreCase(PREFERRED_LEVEL_3)){
					String alterMedicine=formuDetail.getAlternateMedicine();
					alternativeMedicine.add(alterMedicine);
					formularyTextAlterantiveMedicineMap.put(PREFERRED_LEVEL_1, alternativeMedicine);
				}
				
			}
			
			
		}
		/*alternativeMedicine.add("Accupril 20mg");
		alternativeMedicine.add("Clopidogrel ");
		formularyTextAlterantiveMedicineMap.put("Tier 1",alternativeMedicine);
		formularyTextAlterantiveMedicineMap.put("Unlisted Drug", alternativeMedicine);*/
		System.out.println("Formulary Alternative Map Size "+formularyTextAlterantiveMedicineMap.size());
		for(Map.Entry<String, List<String>> entry:formularyTextAlterantiveMedicineMap.entrySet()){
			String key=entry.getKey();
			System.out.println("Key of med "+key);
			List<String> alternativeMed=entry.getValue();
			for(String alMed:alternativeMed){
				System.out.println("Alterantive Med"+alMed);
			}
		}

		
		

		//alternativeMedicine.add("Warfarin");
		//alternativeMedicine.add("Effient");

		/*getMedicineList();
		if(!(patientMedicationData.getDrugs()==null))
				{
					for(Medicine med: medicineList)
					{
						if(patientMedicationData.getDrugs().equals(med.getMedicinName()))
						{
							medicine.setFlagForMedActionPlan(med.isFlagForMedActionPlan());
							setShowMedActionPlanButton(medicine.isFlagForMedActionPlan());;

						}
						//System.out.println("11::::::::"+medicine.isFlagForMedActionPlan());
					}
				}*/
		doseDetailList=patientMedicineService.findDoseListOfParticularMeds(patientMedicationData.getDrugNameId(),patientMedicationData.getDosageForm());
		
		
		if(doseDetailList.size()>0){
			createDrugDosageMap(doseDetailList);
			initializeDosageForm(doseDetailList.get(0).getDose());
		}else{
			doseDetailList=prepareWSdrugObj(patientMedicationData);
			dosageForms=new ArrayList<String>();
			dosageForms.add(patientMedicationData.getDosageForm().trim());
			
		}
		System.out.println("11::::::::::::::::::::changePatientMedicineBackUpdata:::"+changePatientMedicineBackUpdata.getDrugs()+"::::"+patientMedicationData.getDrugs());

	}



	private List<WSDrug> prepareWSdrugObj(
			PatientMedicationData patientMedicationData2) {
		List<WSDrug>doseList=new ArrayList<WSDrug>();
		WSDrug wsDrugObj=new WSDrug();
		wsDrugObj.setDrugId(patientMedicationData2.getDrugId());
		wsDrugObj.setDrugNameId(patientMedicationData2.getDrugNameId());
		wsDrugObj.setDose(patientMedicationData2.getStrengths());
		wsDrugObj.setDataProvider(patientMedicationData2.getDataProvider());
		wsDrugObj.setTherapeuticCategory(patientMedicationData2.getTherapeuticCategory());
		wsDrugObj.setDrugCategory(patientMedicationData2.getDrugCategory());
		wsDrugObj.setDosageForm(patientMedicationData2.getDosageForm().trim());
		doseList.add(wsDrugObj);
		return doseList;
	}

	public void showViewRX() throws Exception
	{
		logger.info("showViewRX method in patientMedicineManageBean::::");	
		//patientMedicationData
		setShowRxTab(false);
		//setSelectIntervention(selectIntervention)
		setSelectIntervention(1);
		patientMedicationData= (PatientMedicationData) getViewRxDataTable().getRowData();
		System.out.println(":::::getDrugName::"+patientMedicationData.getDrugs());
		patientMedicationData.setAlterNateDrugs(patientMedicationData.getDrugs());
		changePatientMedicineBackUpdata=new PatientMedicationData();

		//patientMedicationData.setDaySupply("30 days");
		//setting the value changePatientMedicineBackUpdata from patient medication data for changing meds or dose changes.. 
		changePatientMedicineBackUpdata.setId(patientMedicationData.getId());
		changePatientMedicineBackUpdata.setDrugs(patientMedicationData.getDrugs());
		changePatientMedicineBackUpdata.setStrengths(patientMedicationData.getStrengths());
		changePatientMedicineBackUpdata.setQuantity(patientMedicationData.getQuantity());
		changePatientMedicineBackUpdata.setDirections(patientMedicationData.getDirections());
		changePatientMedicineBackUpdata.setDrugId(patientMedicationData.getDrugId());
		changePatientMedicineBackUpdata.setDrugNameId(patientMedicationData.getDrugNameId());

		changePatientMedicineBackUpdata.setUnit(patientMedicationData.getUnit());
		changePatientMedicineBackUpdata.setDosageForm(patientMedicationData.getDosageForm());
		changePatientMedicineBackUpdata.setByRoute(patientMedicationData.getByRoute());
		changePatientMedicineBackUpdata.setReffils(patientMedicationData.getReffils());
		changePatientMedicineBackUpdata.setDaySupply(patientMedicationData.getDaySupply());

		changePatientMedicineBackUpdata.setPatientId(patientMedicationData.getPatientId());
		changePatientMedicineBackUpdata.setProviderId(patientMedicationData.getProviderId());
		changePatientMedicineBackUpdata.setReffils(patientMedicationData.getReffils());
		changePatientMedicineBackUpdata.setStartDate(patientMedicationData.getStartDate());
		changePatientMedicineBackUpdata.setPrescriberName(patientMedicationData.getPrescriberName());
		changePatientMedicineBackUpdata.setDoctorId(patientMedicationData.getDoctorId());
		changePatientMedicineBackUpdata.setDataProvider(patientMedicationData.getDataProvider());
		changePatientMedicineBackUpdata.setNotes(patientMedicationData.getNotes());
		changePatientMedicineBackUpdata.setPrescriptionGuid(patientMedicationData.getPrescriptionGuid());
		changePatientMedicineBackUpdata.setPrescriptionStatus(patientMedicationData.getPrescriptionStatus());
		changePatientMedicineBackUpdata.setPrescriptionSubStatus(patientMedicationData.getPrescriptionSubStatus());
		changePatientMedicineBackUpdata.setFlagForVisit(patientMedicationData.isFlagForVisit());
		changePatientMedicineBackUpdata.setGenericName(patientMedicationData.getGenericName());

		//changePatientMedicineBackUpdata.setStrengths(patientMedicationData.getStrengths());

		/*setChangePatientMedicineBackUpdata((PatientMedicationData) getViewRxDataTable()
				.getRowData());*/
		System.out.println("::::::::::::::::::::changePatientMedicineBackUpdata:::"+changePatientMedicineBackUpdata.getDrugs()+"::::"+patientMedicationData.getDrugs());
		//patientMedicationData=pmDataHistory;

		// find suggested alternative medicine......
		//Modified By Anjani
		/*alternativeMedicine=patientMedicineService.findAlternativeMedicine(patientMedicationData.getDrugs(), new ContextUtil().getInsuranceId());*/

		alternativeMedicine=new ArrayList<String>();
		//Double drugIdValue = userService.getDrugIdByDrugName(patientMedicationData.getDrugs());

		//Integer drugId=(int)drugIdValue.doubleValue();
		String	drugConcept=Double.toString(patientMedicationData.getDrugId());
		String healtPlan=Integer.toString(new ContextUtil().getInsuranceId());
		String formularyTier=patientMedicationData.getFormularySymbol();
		String patientId=Integer.toString(new ContextUtil().getPatientId());
		FacesContext context = FacesContext	.getCurrentInstance();
		UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");
		//System.out.println("Othe med ::::::::"+otherMed);
		/*optimizeDPList=ncUpdate1WSBean.getFormularyAlternativeWithDrugInfoForDpOptimizer(healtPlan,patientId,patientMedicationData.getDrugs(),drugConcept,userManageBean.getProviderLocation());*/ //Commanted By Anjani 
		optimizeDPList=formulary2WSBean.convertFormularyCompositeUsingDomParser(patientId, patientMedicationData.getDrugs(),drugConcept, userManageBean.getProviderLocation(), userManageBean.getRoleSecurity());                                                                                                                                                                                     // now get value by Formulary Composite API 
		
		System.out.println("formulary details....::weerrr");
		for (FormularyDetail frm : optimizeDPList)
		{
			System.out.println("formulary details....:::::::"+frm.getFormulayTier()+"::::"+frm.getIsFormulary());
			
		}
			
		
		
		/*for (Iterator iterator = optimizeDPList.iterator(); iterator.hasNext();){
			FormularyDetail formularyDetail =  (FormularyDetail) iterator.next();
			
			System.out.println("formulary details....:::"+formularyDetail.getIsFormulary()+":::::::"+formularyDetail.getFormulayTier());
			// System.out.println(":::::::name:"+clinicDiagnosis.getDiagnosisName());
			if(formularyDetail.get.equalsIgnoreCase(HIGH_SEVERITY_LEVEL))
			{
				//System.out.println("getSeverityLevel::::"+drugInteraction.getSeverityLevel());
				setHighestServity(HIGH_SEVERITY_LEVEL);
				// System.out.println("getSeverityLevel::444::"+highestServity);
				break;
			}
		*/
		for(FormularyDetail formuDetail:optimizeDPList){

			//System.out.println(":::::::::::::::getMedicineId::::::::::"+formuDetail.getMedicineId()+"::::name::"+formuDetail.getMedicineName()+"::getAlternateMedicine::"+formuDetail.getAlternateMedicine());
			//System.out.println(":::::::::::"+formuDetail.getInsuranceId()+"::getMedStrength:::"+formuDetail.getMedStrength()+":::getPatientCopay:::"+formuDetail.getPatientCopay());
			//System.out.println("::::getPharmacyTypeDesc:::::"+formuDetail.getPharmacyTypeDesc()+"::getSaving:::"+formuDetail.getSaving());
			if(formularyTier.equalsIgnoreCase("Tier 1") || formularyTier.equalsIgnoreCase("Tier 2") || formularyTier.equalsIgnoreCase("Tier 3") || formularyTier.equalsIgnoreCase("Tier 4 and above")){
				if(formuDetail.getFormulayTier().equalsIgnoreCase("On Formulary") || formuDetail.getFormulayTier().equalsIgnoreCase("On Formulary") ){
					String alterMedicine=formuDetail.getAlternateMedicine();
					alternativeMedicine.add(alterMedicine);
					formularyTextAlterantiveMedicineMap.put("On Formulary", alternativeMedicine);
				}
			}
			else if (formularyTier.equalsIgnoreCase("Unlisted Drug") || formularyTier.equalsIgnoreCase("On Formulary") || formularyTier.equalsIgnoreCase("Generic")) {
				String alterMedicine=formuDetail.getAlternateMedicine();
				alternativeMedicine.add(alterMedicine);
				formularyTextAlterantiveMedicineMap.put("On Formulary", alternativeMedicine);
			}
			
		}
		
		for(Map.Entry entry:formularyTextAlterantiveMedicineMap.entrySet()){
			System.out.println("Entry"+entry.getKey()+"Value"+entry.getValue());
		}

		
		for(Map.Entry<String,List<String>> entry:formularyTextAlterantiveMedicineMap.entrySet()){
			System.out.println("Entry Key "+entry.getKey());
			alternativeMedicineKeyList.add(entry.getKey());
		}
		System.out.println("alternativeMedicineKeyList.size():::::: "+alternativeMedicineKeyList.size());

		doseDetailList=patientMedicineService.findDoseListOfParticularMeds(patientMedicationData.getDrugNameId(),patientMedicationData.getDosageForm());

		System.out.println("11::::::::::::::::::::changePatientMedicineBackUpdata:::"+changePatientMedicineBackUpdata.getDrugs()+"::::"+patientMedicationData.getDrugs());

	}



	public void showViewRXforPharmacogenomic() throws Exception
	{
		logger.info("showViewRXforPharmacogenomic method in patientMedicineManageBean::::");	
		//patientMedicationData
		setShowRxTab(false);
		//setSelectIntervention(selectIntervention)
		setSelectIntervention(1);
		pharmacogenomicsRecomendations= (PharmacogenomicsRecomendations) getViewRxDataTableforoverviewPharmacogenomics().getRowData();
		System.out.println(":::::getDrugName:showViewRXforPharmacogenomic:"+pharmacogenomicsRecomendations.getDrugName()+
				"LLLKJ::::"+pharmacogenomicsRecomendations.getDose()+":::::::"+pharmacogenomicsRecomendations.getPatientMedicationDataId());

		getPatientMedicationDataList();

		for(PatientMedicationData pat: patientMedicationDataList)

		{
			if(pat.getId()== pharmacogenomicsRecomendations.getPatientMedicationDataId())
			{
				System.out.println("pat.getId()"+pat.getId());
				System.out.println("pharmacogenomicsRecomendations.getPatientMedicationDataId().getId()"+pharmacogenomicsRecomendations.getPatientMedicationDataId());
				patientMedicationData=new PatientMedicationData();
				patientMedicationData=pat;
				System.out.println("patientMedicationData:::::::::::"+patientMedicationData.getReffils()+"test:::"+patientMedicationData.getDaySupply()+
						"medician name:::"+patientMedicationData.getDrugs());
				System.out.println(":::::::::::"+pat.getStrengths());
				System.out.println(":::::::::::"+pat.getReffils());
				System.out.println(":::::::::::"+pat.getUnit());
				System.out.println(":::::::::::"+pat.getNotes());

					
				patientMedicationData.setAlterNateDrugs(patientMedicationData.getDrugs());

				changePatientMedicineBackUpdata=new PatientMedicationData();

				//patientMedicationData.setDaySupply("30 days");
				//setting the value changePatientMedicineBackUpdata from patient medication data for changing meds or dose changes.. 
				changePatientMedicineBackUpdata.setId(patientMedicationData.getId());
				changePatientMedicineBackUpdata.setDrugs(patientMedicationData.getDrugs());
				changePatientMedicineBackUpdata.setStrengths(patientMedicationData.getStrengths());
				changePatientMedicineBackUpdata.setQuantity(patientMedicationData.getQuantity());
				changePatientMedicineBackUpdata.setDirections(patientMedicationData.getDirections());
				changePatientMedicineBackUpdata.setDrugId(patientMedicationData.getDrugId());
				changePatientMedicineBackUpdata.setDrugNameId(patientMedicationData.getDrugNameId());

				changePatientMedicineBackUpdata.setUnit(patientMedicationData.getUnit());
				changePatientMedicineBackUpdata.setDosageForm(patientMedicationData.getDosageForm());
				changePatientMedicineBackUpdata.setByRoute(patientMedicationData.getByRoute());
				changePatientMedicineBackUpdata.setReffils(patientMedicationData.getReffils());
				changePatientMedicineBackUpdata.setDaySupply(patientMedicationData.getDaySupply());

				changePatientMedicineBackUpdata.setPatientId(patientMedicationData.getPatientId());
				changePatientMedicineBackUpdata.setProviderId(patientMedicationData.getProviderId());
				changePatientMedicineBackUpdata.setReffils(patientMedicationData.getReffils());
				changePatientMedicineBackUpdata.setStartDate(patientMedicationData.getStartDate());
				changePatientMedicineBackUpdata.setPrescriberName(patientMedicationData.getPrescriberName());
				changePatientMedicineBackUpdata.setDoctorId(patientMedicationData.getDoctorId());
				changePatientMedicineBackUpdata.setDataProvider(patientMedicationData.getDataProvider());
				changePatientMedicineBackUpdata.setNotes(patientMedicationData.getNotes());
				changePatientMedicineBackUpdata.setPrescriptionGuid(patientMedicationData.getPrescriptionGuid());
				changePatientMedicineBackUpdata.setPrescriptionStatus(patientMedicationData.getPrescriptionStatus());
				changePatientMedicineBackUpdata.setPrescriptionSubStatus(patientMedicationData.getPrescriptionSubStatus());
				changePatientMedicineBackUpdata.setFlagForVisit(patientMedicationData.isFlagForVisit());
				changePatientMedicineBackUpdata.setGenericName(patientMedicationData.getGenericName());


				//changePatientMedicineBackUpdata.setStrengths(patientMedicationData.getStrengths());

				/*setChangePatientMedicineBackUpdata((PatientMedicationData) getViewRxDataTable()
				.getRowData());*/
				System.out.println(":::::::::showViewRXforPharmacogenomic:::::::::::changePatientMedicineBackUpdata:::"+changePatientMedicineBackUpdata.getDrugs()+"::::"+patientMedicationData.getDrugs());
				//patientMedicationData=pmDataHistory;
			}
		}
		// find suggested alternative medicine......
		//Modified By Anjani
		/*alternativeMedicine=patientMedicineService.findAlternativeMedicine(patientMedicationData.getDrugs(), new ContextUtil().getInsuranceId());*/

		alternativeMedicine=new ArrayList<String>();
		//Double drugIdValue = userService.getDrugIdByDrugName(patientMedicationData.getDrugs());

		//Integer drugId=(int)drugIdValue.doubleValue();
		String	drugConcept=Double.toString(patientMedicationData.getDrugId());
		String healtPlan=Integer.toString(new ContextUtil().getInsuranceId());
		String patientId=Integer.toString(new ContextUtil().getPatientId());
		FacesContext context = FacesContext	.getCurrentInstance();
		UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");
		//System.out.println("Othe med ::::::::"+otherMed);
		/*optimizeDPList=ncUpdate1WSBean.getFormularyAlternativeWithDrugInfoForDpOptimizer(healtPlan,patientId,patientMedicationData.getDrugs(),drugConcept,userManageBean.getProviderLocation());*/ //Commanted By Anjani 
		optimizeDPList=formulary2WSBean.convertFormularyCompositeUsingDomParser(patientId, patientMedicationData.getDrugs(),drugConcept, userManageBean.getProviderLocation(), userManageBean.getRoleSecurity());                                                                                                                                                                                     // now get value by Formulary Composite API 
		for(FormularyDetail formuDetail:optimizeDPList){

			//System.out.println(":::::::::::::::getMedicineId::::::::::"+formuDetail.getMedicineId()+"::::name::"+formuDetail.getMedicineName()+"::getAlternateMedicine::"+formuDetail.getAlternateMedicine());
			//System.out.println(":::::::::::"+formuDetail.getInsuranceId()+"::getMedStrength:::"+formuDetail.getMedStrength()+":::getPatientCopay:::"+formuDetail.getPatientCopay());
			//System.out.println("::::getPharmacyTypeDesc:::::"+formuDetail.getPharmacyTypeDesc()+"::getSaving:::"+formuDetail.getSaving());
			String alterMedicine=formuDetail.getAlternateMedicine();
			alternativeMedicine.add(alterMedicine);
		}

		doseDetailList=patientMedicineService.findDoseListOfParticularMeds(patientMedicationData.getDrugNameId(),patientMedicationData.getDosageForm());

		System.out.println("11::::::::::::::::::::changePatientMedicineBackUpdata:::"+changePatientMedicineBackUpdata.getDrugs()+"::::"+patientMedicationData.getDrugs());

	}


	/*
	 * check medicine detail when we change alternate meds
	 * @author: Gopal Krishna Jha
	 * 
	 */
	public void checkMedicinedetailForParticularMeds()
	{
		logger.info("checkMedicinedetailForParticularMeds:::::"+patientMedicationData.getAlterNateDrugs());
		WSDrug wsdrug=new WSDrug();
		wsdrug=patientMedicineService.findFullDrugDetailAccordingToThereName(patientMedicationData.getAlterNateDrugs());
		System.out.println("::::"+wsdrug.getDrugName()+"::::::::::"+wsdrug.getDrugId()+"::"+wsdrug.getDrugNameId());
		patientMedicationData.setDrugs(wsdrug.getDrugName());
		patientMedicationData.setStrengths(wsdrug.getDose());
		patientMedicationData.setDrugId(wsdrug.getDrugId());
		patientMedicationData.setDrugNameId(wsdrug.getDrugNameId());
		patientMedicationData.setDosageForm(wsdrug.getDosageForm());
		patientMedicationData.setByRoute(wsdrug.getRoute());
		if(wsdrug.getGenericName()==null)
			patientMedicationData.setGenericName(wsdrug.getDrugName());
		else
			patientMedicationData.setGenericName(wsdrug.getGenericName());


	}

	public List<String> getAlternativeMedicine() {
		return alternativeMedicine;
	}

	public void setAlternativeMedicine(List<String> alternativeMedicine) {
		this.alternativeMedicine = alternativeMedicine;
	}

	/*
	 * Add medicine then change diagnosis according to medicin name
	 * @author : gopal krishna jha
	 */
	/*public void addMedicineName()
	{
		logger.info("inside addMedicineName method in bean::"+medActionPlan.getMedicineName());
		clinicDiagnosisList=patientMedicineService.findClinicDiagnosisList(medActionPlan.getMedicineName());
	}*/

	public void afterAddNewMedicineGoToMedActionPlan()
	{
		logger.info("afterAddNewMedicineGoToMedActionPlan::::::::");
		patientMedicationData.setAlterNateDrugs(patientMedicationData.getDrugs());
		clinicDiagnosisList=patientMedicineService.findClinicDiagnosisList(patientMedicationData.getDrugs());
		setShowTabForAnticoagMeds(false);
	}

	/*
	 * click on cancel page will be refreshed on overview review page
	 * @author: Umesh Yadav
	 */

	public String submitCancelButtonforoverview()
	{
		logger.info(":::::submitCancelButton::");
		setShowTabForAnticoagMeds(false);
		subDiagnosisDetail=new String();
		return "go_to_PharmacogenomicProfile";
	}
	
	public String duplicatesubmitCancelButtonforoverviewfilter()
	{
		logger.info(":::::submitCancelButton::");
	/*	logger.info("Rconcile Meds To Be Saved Size "+reconciledMeds.size());
		
		for(PatientMedicationData reconciledMedicationData:reconciledMeds){
			patientMedicineService.saveMedicineDetail(reconciledMedicationData);
			try {
				patientMedicineService.saveReconcileInfo(reconciledMedicationData);
			} catch (HibernateException e) {
				e.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}*/
		
		setShowTabForAnticoagMeds(false);
		patientMedicationDataList=null;
		subDiagnosisDetail=new String();
		makeFilterPageRefreshData();
	//	resetReconcileInfo();
		return "go_to_ovw_filters";
	}
	/**
	 * used in overViewFilter.jsf
	 * Save Reconciled Med in Database 
	 * @return String for navigate to Overview Filter Page 
	 */
	public String saveReconcileMed(){
		logger.info("Rconcile Meds To Be Saved Size "+reconciledMeds.size());
		
		for(PatientMedicationData reconciledMedicationData:reconciledMeds){
			patientMedicineService.saveMedicineDetail(reconciledMedicationData); // Save Reconcile Med data 
			try {
				patientMedicineService.saveReconcileInfo(reconciledMedicationData); // Save Reconcile Info Data 
			} catch (HibernateException e) {
				e.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		setShowTabForAnticoagMeds(false);
		patientMedicationDataList=null;
		subDiagnosisDetail=new String();
		makeFilterPageRefreshData();
		resetReconcileInfo();
		return "go_to_ovw_filters";
	}

	public String CancelButtonforoverviewfilterForReconcile()
	{
		logger.info(":::::CancelButtonforoverviewfilterForReconcile::");
		//setShowTabForAnticoagMeds(false);
		patientMedicationDataList=null;
		//subDiagnosisDetail=new String();
		makeFilterPageRefreshData();
		return "go_to_ovw_filters";
	}


	public String submitCancelButtonforoPharmacogenomic()
	{
		logger.info(":::::submitCancelButton::");
		setShowTabForAnticoagMeds(false);
		subDiagnosisDetail=new String();
		return "go_to_PharmacogenomicProfile";
	}

	/*
	 * click on cancel page will be refreshed on Personalisedmed review page
	 * @author: Umesh Yadav
	 */

	public String submitCancelButtonforpersonalisedmedreview()
	{
		logger.info(":::::submitCancelButton::");
		setShowTabForAnticoagMeds(false);
		labDetailList=new ArrayList<LabDetail>();
		subDiagnosisDetail=new String();
		return "go_to_persionalizeMedReview";
	}


	/*
	 * click on cancel page will be refreshed on Anticoag page
	 * @author: Gopal Krishna JHa
	 */

	public String submitCancelButtonForAnticoag()
	{
		logger.info(":::::submitCancelButtonForAnticoag::");
		setShowTabForAnticoagMeds(false);
		subDiagnosisDetail=new String();
		doseAndDrugId=new ArrayList<String>();
		labDetailList=new ArrayList<LabDetail>();
		HttpServletRequest req = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
		String url = req.getRequestURL().toString();
		System.out.println(":::::::::::::::::>>>>>>>>>>>>>>>>>>>>>> url::"+url);
		String returnValue="";
		if(url.endsWith("anticoag.jsf"))
			returnValue="go_to_anticoag";

		if(url.endsWith("psychopharm.jsf"))
			returnValue="go_to_psychopharm";
		
		return returnValue;
	}
	public void yes1()
	{
		logger.info("yes1:::::::");
	}

	public void no1()
	{
		logger.info("No1:::::::");
	}
	/*
	 * change meds when clicking on view rx ...
	 * @author: Gopal Krishna Jha
	 * 
	 */
	
	
	

	public String saveMedicineChangesOnViewRx()
	{
		logger.info(changePatientMedicineBackUpdata.getGenericName()+"saveMedicineChangesOnViewRx:::::"+changePatientMedicineBackUpdata.getDrugsNotes()+
				changePatientMedicineBackUpdata.getDrugs()+":::patientMedicationData"+patientMedicationData.getId()
				+"::::::::::"+changePatientMedicineBackUpdata.getDrugId());
		getMedicalActionPlanListforgenricandnongenricmed();
		String msg="";
		FacesContext fc = FacesContext.getCurrentInstance();
		Map<String,String> params = fc.getExternalContext().getRequestParameterMap();
		//int rowid=Integer.parseInt(params.get("rowIdForMEdActionPlan"));
		String deleteMedActionPlanOrUpdate=params.get("status");
		
		//deleteMedActionPlanOrUpdate = params.get("No");
		System.out.println("><<<<<<<<<<<<<<<<<<<<<<<<<<<<::"+deleteMedActionPlanOrUpdate);
		//System.out.println("parameter for No::::::::::::"+deleteMedActionPlanOrUpdateOver);
		String drugIdDetails=String.valueOf(changePatientMedicineBackUpdata.getDrugId());
		System.out.println("drugIdDetails:::::"+drugIdDetails);

		if(changePatientMedicineBackUpdata.getGenericName().equals(WARFARIN))
		{
			//checkNotesForLab=0;
			showAnticoagMedactionPlanMessage=0;
		}
		logger.info("selectIntervention::::::"+selectIntervention);
		
		 if(selectIntervention==1)
		    {
		    changePatientMedicineBackUpdata.setMedicineStatus(DISCONTINUE_MEDS);
		    changePatientMedicineBackUpdata.setModifyDate(new DateUtil().getTodayDate());
		    patientMedicineService.deleteMedicineChanges(changePatientMedicineBackUpdata);
		    
		    msg="successfully deleted medication";
			FacesContext.getCurrentInstance().addMessage("messageUpdateForDiscountinueMeds", new FacesMessage(FacesMessage.SEVERITY_ERROR,msg,""));
			FacesContext.getCurrentInstance().getExternalContext().getFlash().setKeepMessages(true);
			System.out.println("successfully deleted medication"+msg);
			getMedactionPlanMessageBeforeLab();
			
			//medactionPlanMessageBeforeLab.remove(patientMedicationData.)
			System.out.println(":::::listsize:123::"+medactionPlanMessageBeforeLab.size());
			for(MedActionPlan medMsg: medactionPlanMessageBeforeLab)
			{
				System.out.println("medMsg::::::"+medMsg.getDrugId()+"::::"+patientMedicationData.getDrugId());
				if(medMsg.getDrugId()==patientMedicationData.getDrugId())
				{
					medactionPlanMessageBeforeLab.remove(medMsg);
					System.out.println(":::::listsize:::"+medactionPlanMessageBeforeLab.size());
					break;
				}
			}
		    }
		
		else if(selectIntervention==6)
		{
			System.out.println("send message::::"+changePatientMedicineBackUpdata.getDrugId()+"LLLL"+new ContextUtil().getLoginId()
					+"pat id::"+new ContextUtil().getPatientId()+"chan"+changePatientMedicineBackUpdata.getDrugsNotes()
					+"gsadfhj"+sendMessageEditRx.getSendMsgToDocName()+"OOOOO"+patientMedicationData.getDrugsNotes()+"ffffff"+new ContextUtil().getLoggerFirstName()+" fast:::"+new ContextUtil().getLoggerLastName());
			//changePatientMedicineBackUpdata.setMedicineStatus(SEND_MESSAGE);

			sendMessageEditRx.setLoginDoctorId(new ContextUtil().getLoginId());
			sendMessageEditRx.setMedId(changePatientMedicineBackUpdata.getDrugId());
			sendMessageEditRx.setPatientId(new ContextUtil().getPatientId());
			sendMessageEditRx.setDrugsNotes(patientMedicationData.getDrugsNotes());
			sendMessageEditRx.setMessageSentDate(new DateUtil().getTodayDate());
			sendMessageEditRx.setSendMsgToDocName(sendMessageEditRx.getSendMsgToDocName());
			sendMessageEditRx.setSendMsgFromDocname(new ContextUtil().getLoggerFirstName()+" "+new ContextUtil().getLoggerLastName());

			patientMedicineService.saveMessageDetials(sendMessageEditRx);

		}
		 
		else 
		{  
			
			System.out.println("22222>>>>>>>>>>>>>>>>>>>"+deleteMedActionPlanOrUpdate);
			logger.info("strengths for modify>>>>>>>>>>>>>>>>>>:"+patientMedicationData.getStrengths());
			patientMedicationData.setMedicineStatus(MODIFY_MEDS);
			patientMedicationData.setCauseOfAddMeds(MODIFY_MEDS);
			patientMedicationData.setStartDate(new DateUtil().getTodayDate());
			//patientMedicationData.setPrescriberName(new ContextUtil().getLoggerFirstName()+" "+new ContextUtil().getLoggerLastName());
			patientMedicationData.setPrescriberName(new ContextUtil().getLoggerFirstName()+" " +new ContextUtil().getLoggedUserMiddleName() +" "+new ContextUtil().getLoggerLastName());
			patientMedicationData.setPrescriptionStatus(PRESCRIPITION_STATUS_PENDING);
			patientMedicationData.setFlagForVisit(true);
			patientMedicationData.setPrescriptionGuid(null);
			

			for(Medicine med:getAnticoagMedList())
			{
				if(med.getMedicinName().equalsIgnoreCase(patientMedicationData.getGenericName()))
					patientMedicationData.setFlagForMedActionPlan(med.isFlagForMedActionPlan());

			}
			patientMedicineService.modifyMedicineChange(patientMedicationData,changePatientMedicineBackUpdata,deleteMedActionPlanOrUpdate);
			
		}
		//	logger.info("size:::::::::: before delet"+patientMedicationDataList.size());
		patientMedicationDataList=null;
		medicalActionPlanList=null;
		currentAntiCoagMedList=new ArrayList<PatientMedicationData>();
		currentAntiplateletMedsList=new ArrayList<PatientMedicationData>();
		resetPsychopharmClinicMessages();
		//added by nagaraj
		makeFilterPageRefreshData();
	/*	allGeneralMedPlans=null;
		auditManageBean.setInactiveMedsWithActiveMAP(null);*/
		resetMAPs();
			return returnParticularPage();

	}
	
	public String deleteSelectedRxDrug(){
		   changePatientMedicineBackUpdata.setMedicineStatus(DISCONTINUE_MEDS);
		   changePatientMedicineBackUpdata.setModifyDate(new DateUtil().getTodayDate());
		    patientMedicineService.deleteSelectedRxDrug(changePatientMedicineBackUpdata);
		    patientMedicineService.updateMedAactionPlanStatus(changePatientMedicineBackUpdata);
		    patientMedicineService.updateMAPmessage(changePatientMedicineBackUpdata);
			patientMedicationDataList=null;
			medicalActionPlanList=null;
			currentAntiCoagMedList=new ArrayList<PatientMedicationData>();
			currentAntiplateletMedsList=new ArrayList<PatientMedicationData>();
			resetPsychopharmClinicMessages();
			//added by nagaraj
			makeFilterPageRefreshData();
		/*	allGeneralMedPlans=null;
			auditManageBean.setInactiveMedsWithActiveMAP(null);*/
			resetMAPs();
		return returnParticularPage();
	}
	
	
	
	/*
	 * show/open which pop up when meds will be deleted.. by user..overviewfilter
	 * @author: Gopal K Jha
	 */
	public void checkMessageForEDITMedsHavingMedActionPlanOrNot()
	{
		
		logger.info(changePatientMedicineBackUpdata.getDrugId()+"checkMessageForEDITMedsHavingMedActionPlanOrNot method start:::"+patientMedicationData.getDrugId());
		boolean checkmedActionPlan=checkMedactionPlanOrNotOfParticularDrugs(changePatientMedicineBackUpdata.getDrugId());
		logger.info("checkmedActionPlan::::"+checkmedActionPlan);
		if(checkmedActionPlan)
		{
			RequestContext.getCurrentInstance().execute("confirmBoxShowForHavingMedActionPlan.show()");
		}  
		else
			RequestContext.getCurrentInstance().execute("confirmBoxShowForDontHavingMedActionPlan.show()");
	}

	/*
	 * show/open which pop up when meds will be deleted.. by user..
	 * @author: Gopal K Jha
	 */
	public void checkMessageForMedActionPlanOrNot()
	{
		logger.info(changePatientMedicineBackUpdata.getDrugId()+"checkMessageForMedActionPlanOrNot method start:::"+patientMedicationData.getDrugId());
		boolean checkmedActionPlan=checkMedactionPlanOrNotOfParticularDrugs(changePatientMedicineBackUpdata.getDrugId());
		logger.info("checkmedActionPlan::::"+checkmedActionPlan);
	/*	if(checkmedActionPlan)
		{
			
			RequestContext.getCurrentInstance().execute("medActionPlanMessageShowForDelete.show()");
		}
		else{
		
		RequestContext.getCurrentInstance().execute("withoutMedActionPlanMessageShowForDelete.show()");
		}*/
		RequestContext.getCurrentInstance().addCallbackParam("isMedPlanExists", checkmedActionPlan);
	}
	
	public void showConfirmMessageDialogForMAP(){
		logger.info("Selected Option In EditRx Pop up dialog Box "+selectIntervention);
		RequestContext.getCurrentInstance().addCallbackParam("isMedPlanExists", true);
	}
	
	/*
	 * check particular meds having med action plan or not..
	 * @author: Gopal Krishna Jha
	 */
	private boolean checkMedactionPlanOrNotOfParticularDrugs(double drugId) {
			boolean check = false;
			if(drugId==0)
				check=false;
			// getAllGenericMedActionPlan();
			 getMedicalActionPlanList();
			 
			 for(MedActionPlan medPlan:medicalActionPlanList)
				{
					if(drugId==medPlan.getDrugId())
					{
						return true;

					}
				}
			 getAllGenericMedActionPlan();
			 for (ParentMedActionPlan genMedActionPlan : allGenericMedActionPlan) {
				 
				 if(drugId==genMedActionPlan.getDrugId())
					{
						return true;

					}
				}
			 
			
		return check;
	}

	public void findParticularDrugId()
	{
		WSDrug wsdrugObj=new WSDrug();
		wsdrugObj=findDrugIdAccordingToStrength(doseDetailList,patientMedicationData.getStrengths());
		patientMedicationData.setDrugId(wsdrugObj.getDrugId());
		patientMedicationData.setTherapeuticCategory(wsdrugObj.getTherapeuticCategory());
		patientMedicationData.setDrugCategory(wsdrugObj.getDrugCategory());
		updateDoasgeForm();
		logger.info(":::::::::::::drug id:::+"+patientMedicationData.getDrugId());
	}

	/*
	 * add particular patient medicine data objec in list..
	 * If it is new if not then just modify or update the list..
	 * @author: Gopal Krishna jha
	 */
	/*private List<PatientMedicationData> addObjectINList(
			List<PatientMedicationData> patientMedicationList,
			PatientMedicationData patientmedicationObj) {


		boolean check = false;
		for(PatientMedicationData patData:patientMedicationList)
		{
			//System.out.println(":::::::::@@@"+patData.getDrugs()+"::::::::"+patientMedicationData.getDrugs());
			if(patData.getDrugId()==patientmedicationObj.getDrugId())
			{
				//medActionPlan.regimen
				patData.setQuantity(patientmedicationObj.getQuantity());
				patData.setDirections(patientmedicationObj.getDirections());
				patData.setStrengths(patientmedicationObj.getStrengths());
				patData.setDrugsNotes(patientmedicationObj.getDrugsNotes());
				patData.setDosageForm(patientmedicationObj.getDosageForm());
				patData.setReffils(patientmedicationObj.getReffils());
				patData.setByRoute(patientmedicationObj.getByRoute());
				patData.setUnit(patientmedicationObj.getUnit());
				patData.setDrugId(patientmedicationObj.getDrugId());

				//set drug id
				//patData.setDrugId(findDrugIdAccordingToStrength(doseDetailList,patientmedicationObj.getStrengths()));

				check=true;

			}
		}
		if(!check)
			patientMedicationList.add(patientMedicationData);

		return patientMedicationList;

	}*/

	/*
	 *  find drug id when user change strengths..
	 *  @author:Gopal Krishna jha
	 */
	private WSDrug findDrugIdAccordingToStrength(List<WSDrug> doseDetailList,
			String strengths) {
		logger.info("findDrugIdAccordingToStrength in bean::"+doseDetailList.size()+"::::strengths:"+strengths);
		//double drugid=0;
		WSDrug wsdrugObj=new WSDrug();
		for(WSDrug wsDrug:doseDetailList)
		{
			if(wsDrug.getDose().equalsIgnoreCase(strengths))
				//drugid=wsDrug.getDrugId();
				wsdrugObj=wsDrug;
		}
		//System.out.println("::::::::::drugid:::"+drugid);
		return wsdrugObj;
	}

	/*
	 * which radio button click by doctor in view Rx pop up
	 * @author: Gopal Krishna jha..
	 */
	private String findActionTakenstatus(int selectIntervention) {
		String actionstatus="";
		if(selectIntervention==1)
			actionstatus=DISCONTINUE_MEDS;
		if(selectIntervention==2)
			actionstatus=CHANGE_MEDS;
		if(selectIntervention==3)
			actionstatus=DOSE_CHANGE;
		if(selectIntervention==4)
			actionstatus=REGIMEN_CHANGE;
		if(selectIntervention==5)
			actionstatus=OTHER;
		if(selectIntervention==6)
			actionstatus=SEND_MESSAGE;

		return actionstatus;
	}

	public String getOtherMed() {
		return otherMed;
	}

	public void setOtherMed(String otherMed) {
		this.otherMed = otherMed;
	}

	public MedActionPlan getMedActionPlan() {
		return medActionPlan;
	}

	public void setMedActionPlan(MedActionPlan medActionPlan) {
		this.medActionPlan = medActionPlan;
	}

	/*
	 * ******************** for redirecting to Pharmacogenomics clinic from Pharmacogenomics profile
	 */

	public List<PatientMedicationData> getRemoveDuplicateModifyMedicationListForPatient() {
		return removeDuplicateModifyMedicationListForPatient;
	}

	public void setRemoveDuplicateModifyMedicationListForPatient(
			List<PatientMedicationData> removeDuplicateModifyMedicationListForPatient) {
		this.removeDuplicateModifyMedicationListForPatient = removeDuplicateModifyMedicationListForPatient;
	}


	public List<ClinicQuestionnaire> getClinicQuestionnaireList() {


		if(clinicQuestionnaireList==null){
			clinicQuestionnaireList=new ArrayList<ClinicQuestionnaire>();
			clinicQuestionnaireList=patientMedicineService.findClinicQuestionList(new ContextUtil().getClinicProviderId());
		}
		return clinicQuestionnaireList;
	}

	public void setClinicQuestionnaireList(List<ClinicQuestionnaire> clinicQuestionnaireList) {
		this.clinicQuestionnaireList = clinicQuestionnaireList;
	}

	/*
	 * find clinic diagnosis list according to clinic
	 * @author:Gopal Krishna Jha
	 */
	public List<ClinicDiagonsis> getClinicDiagnosisList() {
		if(clinicDiagnosisList==null)
		{
			//clinicDiagnosisList=patientMedicineService.findClinicDiagnosisList(new ContextUtil().getClinicId());
			clinicDiagnosisList=new ArrayList<ClinicDiagonsis>();
		}
		return clinicDiagnosisList;
	}

	public void setClinicDiagnosisList(List<ClinicDiagonsis> clinicDiagnosisList) {
		this.clinicDiagnosisList = clinicDiagnosisList;
	}

	public List<ClinicDiagonsisLab> getClinicDiagnosisLabList() {
		return clinicDiagnosisLabList;
	}

	public void setClinicDiagnosisLabList(
			List<ClinicDiagonsisLab> clinicDiagnosisLabList) {
		this.clinicDiagnosisLabList = clinicDiagnosisLabList;
	}



	public List<ClinicSubdiagnosis> getClinicSubDiagnosisList() {
		return clinicSubDiagnosisList;
	}

	public void setClinicSubDiagnosisList(
			List<ClinicSubdiagnosis> clinicSubDiagnosisList) {
		this.clinicSubDiagnosisList = clinicSubDiagnosisList;
	}

	/*
	 * find Lab List   according to diagnosis
	 * @author:Gopal Krishna Jha
	 */
	public void changeDiagnosis()
	{
		logger.info("inside changeDiagnosis method:::"+medActionPlan.getDiagnosis());
		for (Iterator iterator = clinicDiagnosisList.iterator(); iterator.hasNext();){
			ClinicDiagonsis clinicDiagnosis = (ClinicDiagonsis) iterator.next();
			// System.out.println(":::::::name:"+clinicDiagnosis.getDiagnosisName());
			if(clinicDiagnosis.getDiagnosisName().equals(medActionPlan.getDiagnosis()))
			{
				clinicDiagnosisLabList = clinicDiagnosis.getClinicDiagonsisLabList();

				/* for (Iterator iterator2 =clinicDiagnosisLabList.iterator(); iterator2.hasNext();){
					  ClinicDiagonsisLab labType = (ClinicDiagonsisLab) iterator2.next(); 
					 // System.out.println(":::::::::heloo 111"+labType.getId()+":::"+labType.getLabName());

				  }*/
			}
		}
		// System.out.println(">>>>>>>>>>>>"+clinicDiagnosisLabList.size()+medActionPlan.getLab());
		clinicDiagnosisLabDetailList=patientMedicineService.findLabFrequencyRange(medActionPlan.getLab());

	}

	public List<String> getClinicDiagnosisLabDetailList() {
		return clinicDiagnosisLabDetailList;
	}

	public void setClinicDiagnosisLabDetailList(
			List<String> clinicDiagnosisLabDetailList) {
		this.clinicDiagnosisLabDetailList = clinicDiagnosisLabDetailList;
	}
	/*
	 * find Acceptable range  according to lab
	 * @author:Gopal Krishna Jha
	 */
	public void changeLab()
	{
		logger.info("inside changeLab method :"+medActionPlan.getLab());
		clinicDiagnosisLabDetailList=patientMedicineService.findLabFrequencyRange(medActionPlan.getLab());

	}


	//List<String>dietList=new ArrayList<String>();
	/*
	 * LAB FREQUENCY FOR TESTING IT TAKE HARD CODEDE WHEN WE GET ACTUAL VALUE IT WILL CHANGE..
	 * @AUTHOR:GOPAL KRISHNA JHA
	 */
	public List<String> getLabFrequencyList() {
		if(labFrequencyList.isEmpty())
		{
			//labFrequencyList.add("1 Day");
			labFrequencyList.add("2 Days");
			labFrequencyList.add("3 Days");
			labFrequencyList.add("1 Week");
			labFrequencyList.add("2 Weeks");
			labFrequencyList.add("4 Weeks");
			labFrequencyList.add("6 Weeks");
		}
		return labFrequencyList;
	}

	public void setLabFrequencyList(List<String> labFrequencyList) {
		this.labFrequencyList = labFrequencyList;
	}


	public List<String> getDaySupplyList() {

		if(daySupplyList.isEmpty())
		{
			daySupplyList.add("7");
			daySupplyList.add("10");
			daySupplyList.add("14");
			daySupplyList.add("21");
			daySupplyList.add("30");
			daySupplyList.add("60");
			daySupplyList.add("90");

		}
		return daySupplyList;
	}

	public void setDaySupplyList(List<String> daySupplyList) {
		this.daySupplyList = daySupplyList;
	}

	public List<Integer> getRefillDetailsList() {

		if(refillDetailsList.isEmpty())
		{
			refillDetailsList.add(0);
			refillDetailsList.add(1);
			refillDetailsList.add(2);
			refillDetailsList.add(3);
			refillDetailsList.add(4);
			refillDetailsList.add(5);
			refillDetailsList.add(6);
			refillDetailsList.add(7);
			refillDetailsList.add(8);
			refillDetailsList.add(9);
			refillDetailsList.add(10);
			refillDetailsList.add(11);
			refillDetailsList.add(12);

		}
		return refillDetailsList;
	}

	public void setRefillDetailsList(List<Integer> refillDetailsList) {
		this.refillDetailsList = refillDetailsList;
	}

	/*
	 * add in list medication action plan after clicking DONE for further display and save in DB
	 * @author: Gopal krishna JHA..
	 */
	public String modifyMedicationActionPlan()
	{
		logger.info(patientMedicationData.getQuantity()+"inside modifyMedicationActionPlan method in PatientMedicinemanage bean:::"+patientMedicationData.getStrengths()+":::"+medActionPlan.getDose());
		System.out.println(":::medActionPlan:::::"+medActionPlan.getRegimen());
		getCurrentAntiCoagMedList();
		getAnticoagMedList();
		boolean checkStatusForMedActionPlan=false;
		boolean check = false;
		patientMedicationData.setPrescriptionStatus(PRESCRIPITION_STATUS_PENDING);
		//String formularysymbol=patientMedicineService.findFormularySymbol(new ContextUtil().getInsuranceId(),patientMedicationData.getDrugs());
		if(new ContextUtil().getInsuranceId()==0)
		{
			patientMedicationData.setFormularySymbol("");
		}
		else
		{
		//String formularyDetail=patientMedicineService.findFormularySymbol(new ContextUtil().getInsuranceId(),patientMedicationData.getDrugs());
		//patientMedicationData.setFormularySymbol(formularyDetail);
		//logger.info("2find formulary detail end::::");
		
		patientMedicationData.setFormularySymbol(patientMedicineService.findFormularySymbol(new ContextUtil().getInsuranceId(),patientMedicationData.getDrugs()));
		}
		//patientMedicationData.setFormularySymbol(formularysymbol);
		for(Medicine med:anticoagMedList)
		{
			if(med.getMedicinName().equalsIgnoreCase(patientMedicationData.getGenericName()))
				checkStatusForMedActionPlan=med.isFlagForMedActionPlan();
		}
		System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"+checkStatusForMedActionPlan);
		if(checkStatusForMedActionPlan)
		{
			if(!(patientMedicationData.getStrengths()==null))
			{

			}	
			if(patientMedicationData.getGenericName().equalsIgnoreCase("Fondaparinux")
					|| patientMedicationData.getGenericName().equalsIgnoreCase("Desirudin")
					|| patientMedicationData.getGenericName().equalsIgnoreCase("dalteparin (porcine)")
					||patientMedicationData.getGenericName().equalsIgnoreCase("Enoxaparin"))
			{
				addAllLabDetailInMEdActionPlan(medActionPlan,patientMedicationData,labDetailList);

			}
			else
			{
				MedActionPlan med=new MedActionPlan();
				med.setMedicineName(patientMedicationData.getDrugs());
				med.setNotes(patientMedicationData.getDrugsNotes());
				med.setActionDate(new DateUtil().getTodayDate());
				med.setDose(medActionPlan.getDose());
				med.setRegimen(medActionPlan.getRegimen());
				med.setDiagnosis(medActionPlan.getDiagnosis());
				med.setLab("INR");
				med.setAcceptableRange(medActionPlan.getAcceptableRange());
				med.setLabFrequency(medActionPlan.getLabFrequency());
				patientMedicationData.setStrengths(medActionPlan.getDose());
				findDrugIDAccordingToDrugNameAndDose(patientMedicationData,doseDetailList);
				med.setDrugId(patientMedicationData.getDrugId());
				med.setDrugNameId(patientMedicationData.getDrugNameId());
				System.out.println(":::::::::::<<<<<<<<<<<<<<<<<<<<<"+patientMedicationData.getDrugId()+":::::::"+patientMedicationData.getDrugNameId());
				if(!(med.getLabFrequency()==""))
				{
					int noOFdays=findNoOfdays(med.getLabFrequency());
					med.setNextLabDate(new DateUtil().AddDate(med.getActionDate(), noOFdays));
				}
				getMedicalActionPlanList();
				for(MedActionPlan medPlan:medicalActionPlanList)
				{
					if(medPlan.getMedicineName().equals(patientMedicationData.getDrugs()))
					{
						medPlan=medActionPlan;
						check=true;

					}
				}
				if(!check)
					medicalActionPlanList.add(med);
				check=false;
			}


		}
		//patientMedicationData.setPrescriberName(new ContextUtil().getLoggerFirstName()+" "+new ContextUtil().getLoggerLastName());
		patientMedicationData.setPrescriberName(new ContextUtil().getLoggerFirstName()+" " +new ContextUtil().getLoggedUserMiddleName() +" "+new ContextUtil().getLoggerLastName());
		
		patientMedicationData.setPatientId(new ContextUtil().getPatientId());
		patientMedicationData.setProviderId(new ContextUtil().getProviderId());

		patientMedicationData.setStrengths(medActionPlan.getDose());
		patientMedicationData.setDirections(medActionPlan.getRegimen());
		if(patientMedicationData.getStartDate()==null)
			patientMedicationData.setStartDate(new DateUtil().getTodayDate());
		patientMedicationData.setDoctorId(new ContextUtil().getLoginId());
		patientMedicationData.setReffils(1);//(new ContextUtil().getProviderId());
		patientMedicationData.setSelectedImageForPatient(true);
		System.out.println("add med without action plan:::for:::"+patientMedicationData.getDrugs()+"123:::::");
		findDrugIDAccordingToDrugNameAndDose(patientMedicationData,doseDetailList);
		
		patientMedicationData.setMedicineStatus(NEW_ADDED_MEDS);
		/*Date msgAfterSevenDays=new DateUtil().AddDate(patientMedicationData.getStartDate(), 7);
		
		System.out.println("msgAfterSevenDays::::::::::"+msgAfterSevenDays+":::::::::::::::::"+new DateUtil().getTodayDate());
		if(msgAfterSevenDays.b(new DateUtil().getTodayDate()))
			{
				patientMedicationData.setMedicineStatus("new meds");
			}*/
		
		patientMedicationData.setChangeMedId(1);
		patientMedicationData.setModifyDate(new DateUtil().getTodayDate());
		for(PatientMedicationData patData:currentAntiCoagMedList)
		{
			if(patData.getDrugs().equals(patientMedicationData.getDrugs()))
			{
				patData.setStrengths(medActionPlan.getDose());
				patData.setDirections(medActionPlan.getRegimen());
				check=true;

			}
		}
		if(!check)
			currentAntiCoagMedList.add(patientMedicationData);
		check=false;
		for(PatientMedicationData patData:patientMedicationDataList)
		{
			if(patData.getDrugs().equals(patientMedicationData.getDrugs()))
			{
				patData.setStrengths(medActionPlan.getDose());
				patData.setDirections(medActionPlan.getRegimen());
				patData.setQuantity(patientMedicationData.getQuantity());
				check=true;

			}
		}

		if(!check)
			patientMedicationDataList.add(patientMedicationData);

		check=false;
		for(PatientMedicationData patData:removeDuplicateModifyMedicationListForPatient)
		{
			if(patData.getDrugs().equals(patientMedicationData.getDrugs()))
			{
				patData.setStrengths(medActionPlan.getDose());
				patData.setDirections(medActionPlan.getRegimen());
				patData.setQuantity(patientMedicationData.getQuantity());
				check=true;

			}
		}

		if(!check)
			removeDuplicateModifyMedicationListForPatient.add(patientMedicationData);

		check=false;
		for(PatientMedicationData patData:addNewmedicationListForPatient)
		{
			if(patData.getDrugs().equals(patientMedicationData.getDrugs()))
			{
				patData.setStrengths(medActionPlan.getDose());
				patData.setDirections(medActionPlan.getRegimen());
				patData.setQuantity(patientMedicationData.getQuantity());
				check=true;

			}
		}

		if(!check)
			addNewmedicationListForPatient.add(patientMedicationData);

		HttpServletRequest req = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
		String url = req.getRequestURL().toString();
		System.out.println(":::::::::::::::::>>>>>>>>>>>>>>>>>>>>>> url::"+url);
		String returnValue="";
		if(url.endsWith("anticoag.jsf"))
			returnValue="go_to_anticoag";

		if(url.endsWith("personalizedMedReview.jsf"))
			returnValue="go_to_persionalizeMedReview";

		System.out.println("returnValue:::::"+returnValue);
		subDiagnosisDetail=new String();
		drugInteractionList=null;
		drugInteractionListFilterCopyList=null;
		return returnValue;
	}
	/*
	 * finding drug id and drugDataTYpe according to medicine and dose
	 * @author:Gopal Krishna Jha
	 */
	private void findDrugIDAccordingToDrugNameAndDose(
			PatientMedicationData patientMedicationData2,
			List<WSDrug> doseDetailList2) {
		System.out.println(doseDetailList.size()+"::::::::::::::::::::::::::::::::::inside check dose nad find id"+doseDetailList2.size());
		System.out.println(patientMedicationData2.getStrengths()==null);
		//System.out.println(patientMedicationData2.getStrengths().isEmpty());
		if(doseDetailList.size()==0)
		{
			doseDetailList=patientMedicineService.findDoseListOfParticularMedsNotStrength(patientMedicationData.getDrugNameId(),patientMedicationData.getDosageForm());
			System.out.println("::::::::::check::::inside for loop");
			for(WSDrug wsDrug:doseDetailList)
			{
				/*	if(patientMedicationData2.getDosageForm().equals(wsDrug.getDosageForm()))
				{*/

				patientMedicationData.setDataProvider(wsDrug.getDataProvider()+DB);
				patientMedicationData.setDrugNameId(wsDrug.getDrugNameId());
				patientMedicationData.setDrugId(wsDrug.getDrugId());
				patientMedicationData.setTherapeuticCategory(wsDrug.getTherapeuticCategory());
				patientMedicationData.setDrugCategory(wsDrug.getDrugCategory());
				//patientMedicationData.setPrescriberName("");
				System.out.println(patientMedicationData.getTherapeuticCategory()+":inside if condition when strength is null::::::::"+wsDrug.getDataProvider());
				System.out.println("::::::::::setDrugNameId:::::::::"+patientMedicationData.getDrugNameId());
				//}
			}
		}
		else{
			for(WSDrug wsDrug:doseDetailList2)
			{
				System.out.println("::::::::::::::inside for loop "+patientMedicationData2.getStrengths());
				if(patientMedicationData2.getStrengths().equalsIgnoreCase(wsDrug.getDose()))
				{
					patientMedicationData.setDrugId(wsDrug.getDrugId());
					System.out.println(":::::::::"+wsDrug.getDataProvider());
					patientMedicationData.setDataProvider(wsDrug.getDataProvider()+DB);
					patientMedicationData.setDrugNameId(wsDrug.getDrugNameId());
					patientMedicationData.setTherapeuticCategory(wsDrug.getTherapeuticCategory());
					patientMedicationData.setDrugCategory(wsDrug.getDrugCategory());
					//patientMedicationData.setPrescriberName("");
				}
			}
		}
	}



	/*
	 * add all the list in med action plan for fondaparinux meds..
	 * @author: GOpal Krishna Jha
	 * 
	 */
	private void addAllLabDetailInMEdActionPlan(MedActionPlan medActionPlan2,
			PatientMedicationData patientMedicationData2, List<LabDetail> labDetailList2) {
		logger.info("addAllLabDetailInMEdActionPlan method start in bean");
		for(LabDetail lab:labDetailList2)
		{
			if(lab.isSelected())
			{
				MedActionPlan med=new MedActionPlan();
				med.setMedicineName(patientMedicationData2.getDrugs());
				med.setNotes(patientMedicationData2.getDrugsNotes());
				med.setActionDate(new DateUtil().getTodayDate());
				med.setDose(medActionPlan2.getDose());
				med.setRegimen(medActionPlan2.getRegimen());
				med.setDiagnosis(medActionPlan2.getDiagnosis());
				med.setLab(lab.getLabName());
				med.setLabFrequency(lab.getLabfrequencyDetail());
				med.setDrugId(patientMedicationData2.getDrugId());
				med.setDrugNameId(patientMedicationData2.getDrugNameId());
				if(!(med.getLabFrequency()==""))
				{
					int noOFdays=findNoOfdays(med.getLabFrequency());
					med.setNextLabDate(new DateUtil().AddDate(med.getActionDate(), noOFdays));
				}
				getMedicalActionPlanList();
				medicalActionPlanList.add(med);
			}
		}


	}

	private boolean showMedActionPlanButton;


	public boolean isShowMedActionPlanButton() {
		return showMedActionPlanButton;
	}
	public void setShowMedActionPlanButton(boolean showMedActionPlanButton) {
		this.showMedActionPlanButton = showMedActionPlanButton;
	}
	/*
	 * for enable and disable in med action plan button only for particular medicine..
	 * @author:Gopal Krishna jha
	 */
	public void checkMedicineForMedActionPlan()
	{
		logger.info("checkMedicineForMedActionPlan:::::::::::"+patientMedicationData.getDrugs());
		getMedicineList();
		medicine=new Medicine();

		if(!(patientMedicationData.getDrugs()==null))
		{
			int count=0;
			for(PatientMedicationData pat:patientMedicationDataList)
			{
				System.out.println("::::pat.getDrugs():::::::"+pat.getDrugs()+":::"+patientMedicationData.getDrugs());
				if(pat.getDrugs().equals(patientMedicationData.getDrugs()))
				{
					System.out.println("inside if condition:::");
					count++;
					FacesContext.getCurrentInstance().addMessage(null, 
							new FacesMessage(FacesMessage.SEVERITY_WARN,patientMedicationData.getDrugs()+" is allready given ", ""));  
					patientMedicationData.setDrugs(null);
				}
			}
			if((count==0))
			{
				for(Medicine med: medicineList)
				{
					if(patientMedicationData.getDrugs().equals(med.getMedicinName()))
						medicine.setFlagForMedActionPlan(med.isFlagForMedActionPlan());
					//System.out.println("::::::::"+medicine.isFlagForMedActionPlan());
					setShowMedActionPlanButton(false);
				}
			}
		}
	}


	private int findNoOfdays(String labFrequency) {
		//String weeks="16 weeks";
		int noOfdays=1;
		int totalNoOfDays=1;
		try{
			if(!(labFrequency==""))
			{
				String totaldays= "0";
				if(labFrequency.substring(0,labFrequency.indexOf(" "))!=null||labFrequency.substring(0,labFrequency.indexOf(" "))!=""){
					totaldays = labFrequency.substring(0,labFrequency.indexOf(" "));
				}
				System.out.println("*************** totaldays::"+totaldays+":::labFrequency::"+labFrequency);
				noOfdays=Integer.parseInt(totaldays);

				//System.out.println(x);
				if(labFrequency.contains(DAYS));
				{
					totalNoOfDays=noOfdays;
				}

				if(labFrequency.contains(BASElINE))
					totalNoOfDays=1;
				if(labFrequency.contains(WEEK))
				{
					totalNoOfDays=0;
					totalNoOfDays=7;
				}
				if(labFrequency.contains(WEEKS))
				{
					totalNoOfDays=0;
					totalNoOfDays=noOfdays*7;
				}
				if(labFrequency.contains(MONTH))
				{
					totalNoOfDays=0;
					totalNoOfDays=noOfdays*30;
				}
				if(labFrequency.contains(MONTHS))
				{
					totalNoOfDays=0;
					totalNoOfDays=noOfdays*30;
				}

				if(labFrequency.contains("YEARS"))
				{
					totalNoOfDays=0;
					totalNoOfDays=noOfdays*365;
					//System.out.println(":::::::::::::::"+totalNoOfDays);
					
				}
				if(labFrequency.contains("Years"))
				{
					totalNoOfDays=0;
					totalNoOfDays=noOfdays*365;
					System.out.println(":::::::::::::::"+totalNoOfDays);
					
				}
				
				System.out.println("11:::::::::::::::"+totalNoOfDays);
			}
		}catch(IndexOutOfBoundsException ie)
		{
			ie.getMessage();
		}
		return totalNoOfDays;
	}
   /**
    * used in genralmedactionplan.jsf page 
    * @return List of MedActionPlan
    */
	public List<MedActionPlan> getMedicalActionPlanList() {
		logger.info("getMedicalActionPlanList::::");
		if(medicalActionPlanList==null)
		{
			logger.info("111getMedicalActionPlanList::::");
			medicalActionPlanList=new ArrayList<MedActionPlan>();
			medicalActionPlanList=patientMedicineService.findMedActionPlanForPatient(new ContextUtil().getPatientId(),new ContextUtil().getProviderId());// Find MedActionPlan for Anicoag   
			for(MedActionPlan med:medicalActionPlanList)
			{
				int noOFdays=findNoOfdays(med.getLabFrequency());
				med.setNextLabDate(new DateUtil().AddDate(med.getActionDate(), noOFdays));
				
				if(med.getDosageForm() == null || med.getDosageForm().equalsIgnoreCase("Add'l Sig") || med.getDosageForm().equalsIgnoreCase("Add'I Sig")){
					med.setDosageForm(" ");
				}
				if(med.getRegimen() == null || med.getRegimen().equalsIgnoreCase("Add'l Sig") || med.getRegimen().equalsIgnoreCase("Add'I Sig") ){
					med.setRegimen(" ");
				}
			}
		}
		return medicalActionPlanList;
	}

	public void setMedicalActionPlanList(List<MedActionPlan> medicalActionPlanList) {
		this.medicalActionPlanList = medicalActionPlanList;
	}

	public DataTable getMedicalActionDataTable() {
		return medicalActionDataTable;
	}

	public void setMedicalActionDataTable(DataTable medicalActionDataTable) {
		this.medicalActionDataTable = medicalActionDataTable;
	}

	/*
	 * for editing particular med action plan:::
	 * @author: Gopal Krishna jha
	 */
	public void editAnticoagMeds()
	{
		logger.info("editAnticoagMeds method start:::");
		
		setShowRxTab(false);
		//setSelectIntervention(selectIntervention)
		setSelectIntervention(1);
		patientMedicationData=(PatientMedicationData) getCurrentAnticoagDataTable().getRowData();
		
		pharmacogenomicInteractionDetailList=patientMedicineService.findPharmacogenomicsInteractionDuringAddMedicine(patientMedicationData.getDrugNameId(),patientMedicationData.getDrugs(),new ContextUtil().getPatientId());
		System.out.println(patientMedicationData.getDrugNameId()+"value of  PharmacogenomicInteractionDetail after @ 8356="+getPharmacogenomicInteractionDetail());
		drugPharmaInterectionListDetail=new ArrayList<DrugInteractionOverview>();
		getPharmacogenomicsRecomendationsListForImpactedMedicine();
		highestServityForpharmacogenomic = new String();
		String drugName=patientMedicationData.getDrugs();
		for (PharmacogenomicsRecomendations pr : pharmacogenomicInteractionDetailList) {
			DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
			System.out.println("inside onRowExpensionDrugInteraction::::::"+pr.getDrugName()+"="+drugName);
			if (drugName.equalsIgnoreCase(pr.getDrugName())) {
				System.out.println("inside if block::::::"+pr.getDrugName()+"="+drugName);
				drugInteractionOverview.setSeverityLevel(pr.getAttentionRating());
				drugInteractionOverview.setIssueType(PHARMACOGENOMIC);

				drugInteractionOverview.setConflict(pr.getPharmacogenomicsId().getGeneSymbol());
				drugInteractionOverview.setClinicalEffects(pr.getImplications());
				drugInteractionOverview.setPatientManagement(pr.getRecommendation());
				final String PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING=pr.getOvaleMessage();
				drugInteractionOverview.setSeverityLevelToolTip(pr.getOvaleMessage());
				if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), HIGH_SEVERITY_LEVEL_RATING)){
					drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL_RATING);
					drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
				}else if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), MEDIUM_SEVERITY_LEVEL_RATING)){
					drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL_RATING);
					drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
				}else if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), LOW_SEVERITY_LEVEL_RATING)){
					drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL_RATING);
					drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
				}
				if(!drugPharmaInterectionListDetail.contains(drugInteractionOverview)){
					//	drugInteractionOverview.setSeverityLevel(drugDiseaseDetail.getSeverityLevelShortText());
					drugPharmaInterectionListDetail.add(drugInteractionOverview);
				}
				for(DrugInteractionOverview dio: drugPharmaInterectionListDetail)
				{
					System.out.println("drugInterectionListDetail::PHARMACOGENOMIC:::anti::::123:::"+dio.getSeverityLevel());
					setHighestServityForpharmacogenomic(dio.getSeverityLevel());
					System.out.println("drugInterectionListDetail::PHARMACOGENOMIC::456::anti:::123:::"+dio.getSeverityLevelToolTip());
				}
			}

		}

		
		//patientMedicationData= (PatientMedicationData) getViewRxDataTable().getRowData();
		System.out.println(":::::getDrugName::"+patientMedicationData.getDrugs());
		patientMedicationData.setAlterNateDrugs(patientMedicationData.getDrugs());
		changePatientMedicineBackUpdata=new PatientMedicationData();

		changePatientMedicineBackUpdata.setId(patientMedicationData.getId());
		changePatientMedicineBackUpdata.setDrugs(patientMedicationData.getDrugs());
		changePatientMedicineBackUpdata.setStrengths(patientMedicationData.getStrengths());
		changePatientMedicineBackUpdata.setQuantity(patientMedicationData.getQuantity());
		changePatientMedicineBackUpdata.setDirections(patientMedicationData.getDirections());
		changePatientMedicineBackUpdata.setDrugId(patientMedicationData.getDrugId());
		changePatientMedicineBackUpdata.setDrugNameId(patientMedicationData.getDrugNameId());

		changePatientMedicineBackUpdata.setUnit(patientMedicationData.getUnit());
		changePatientMedicineBackUpdata.setDosageForm(patientMedicationData.getDosageForm());
		changePatientMedicineBackUpdata.setByRoute(patientMedicationData.getByRoute());
		changePatientMedicineBackUpdata.setReffils(patientMedicationData.getReffils());
		changePatientMedicineBackUpdata.setDaySupply(patientMedicationData.getDaySupply());

		changePatientMedicineBackUpdata.setPatientId(patientMedicationData.getPatientId());
		changePatientMedicineBackUpdata.setProviderId(patientMedicationData.getProviderId());
		changePatientMedicineBackUpdata.setReffils(patientMedicationData.getReffils());
		changePatientMedicineBackUpdata.setStartDate(patientMedicationData.getStartDate());
		changePatientMedicineBackUpdata.setPrescriberName(patientMedicationData.getPrescriberName());
		changePatientMedicineBackUpdata.setDoctorId(patientMedicationData.getDoctorId());
		changePatientMedicineBackUpdata.setDataProvider(patientMedicationData.getDataProvider());
		changePatientMedicineBackUpdata.setNotes(patientMedicationData.getNotes());
		changePatientMedicineBackUpdata.setPrescriptionGuid(patientMedicationData.getPrescriptionGuid());
		changePatientMedicineBackUpdata.setPrescriptionStatus(patientMedicationData.getPrescriptionStatus());
		changePatientMedicineBackUpdata.setPrescriptionSubStatus(patientMedicationData.getPrescriptionSubStatus());
		changePatientMedicineBackUpdata.setFlagForVisit(patientMedicationData.isFlagForVisit());
		changePatientMedicineBackUpdata.setGenericName(patientMedicationData.getGenericName());

		System.out.println("::::::::::::::::::::changePatientMedicineBackUpdata:::"+changePatientMedicineBackUpdata.getDrugs()+"::::"+patientMedicationData.getDrugs());
		alternativeMedicine=new ArrayList<String>();
		String	drugConcept=Double.toString(patientMedicationData.getDrugId());
		String healtPlan=Integer.toString(new ContextUtil().getInsuranceId());
		String patientId=Integer.toString(new ContextUtil().getPatientId());
		FacesContext context = FacesContext	.getCurrentInstance();
		UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");
		try {
			optimizeDPList=formulary2WSBean.convertFormularyCompositeUsingDomParser(patientId, patientMedicationData.getDrugs(),drugConcept, userManageBean.getProviderLocation(), userManageBean.getRoleSecurity());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}                                                                                                                                                                                     // now get value by Formulary Composite API 
		for(FormularyDetail formuDetail:optimizeDPList){
			String alterMedicine=formuDetail.getAlternateMedicine();
			alternativeMedicine.add(alterMedicine);
		}

		doseDetailList=patientMedicineService.findDoseListOfParticularMeds(patientMedicationData.getDrugNameId(),patientMedicationData.getDosageForm());

	}
	/*
	 * edit med action plan in anticoag...
	 * @author: Gopal krishna jha
	 */

	public void editMedActionPlan()
	{
		logger.info("editMedActionPlan method start:::");
		medActionPlan = (MedActionPlan) getMedicalActionDataTable().getRowData();
		clinicDiagnosisList=patientMedicineService.findClinicDiagnosisList(medActionPlan.getMedicineName());
		logger.info("stage::::::"+medActionPlan.getMedicineStage()+":::::::::::dosing startdate:::"+medActionPlan.getDosingStartDate());
		//checkNotesForLab=0;
		String range=medActionPlan.getAcceptableRange();
		
		if(range==null){
			range="0-0";
		}
		logger.info("range :::::"+range);
		double lowerRange = 0,higherRange = 0;
		System.out.println("::::::::::::::range::"+range);
		if((range.length()!=0))
		{
			lowerRange=Double.parseDouble((String) (range.substring(0, range.indexOf("-"))));
			higherRange=Double.parseDouble((String) (range.substring(range.indexOf("-")+1)));
			System.out.println(lowerRange+"::::"+higherRange);


		}
		medActionPlan.setLowAcceptableRange(lowerRange);
		medActionPlan.setHighAcceptableRange(higherRange);

		System.out.println(patientMedicationData.getQuantity()+"1111:::med:"+medActionPlan.getMedicineName()+":::"+medActionPlan.getDose());

	}

	/*
	 * update med action plan of particular lab...
	 * @author: Gopal Krishna Jha
	 */
	public String updateMedActionPlan()
	{
		logger.info(medActionPlan.getId()+"updateMedActionPlan method start :::"+medActionPlan.getAcceptableRange()+":::startdate::"+medActionPlan.getDosingStartDate());
		medActionPlan.setLastUpdateDate(new DateUtil().getTodayDate());
		medActionPlan.setLastupdatedby((new ContextUtil().getLoggerFirstName()+" "+new ContextUtil().getLoggedUserMiddleName()+" "+new ContextUtil().getLoggerLastName()));
		medActionPlan.setAcceptableRange(""+medActionPlan.getLowAcceptableRange()+"-"+medActionPlan.getHighAcceptableRange());
		/*if(medActionPlan.getMedicineStage().equalsIgnoreCase(INITIATION_STAGE))
			medActionPlan.setDosingStartDate(new Date());*/
		
		Date d1 = new Date();
		
		
		//	System.out.println(d1.getDate()+"1getDate:::::::::::"+d1.getMonth()+":::::::::::"+d1.getYear());
			//System.out.println(dateForLabSearch.getDate()+"2getDate:::::::::::"+dateForLabSearch.getMonth()+":::::::::::"+dateForLabSearch.getYear());
			if(d1.getDate()==medActionPlan.getDosingStartDate().getDate())
				d1=new Date();
			else
				d1=medActionPlan.getDosingStartDate();
			medActionPlan.setDosingStartDate(d1);
		patientMedicineService.updatMedActionPlanOfParticularPatient(medActionPlan);
		//checkNotesForLab=0;
		showAnticoagMedactionPlanMessage=0;
		return null;
	}


	/*
	 * edit new medicine after that it will updated all place means visit summary,anticoag,Persoinalize med 
	 * @author: Gopal Krishna jha
	 */

	public String updateEditNewMedicineDetail()
	{
		logger.info("updateEditNewMedicineDetail:started in PatientMedicineManage bean:::::::::"+patientMedicationData.getDrugs());

		//updating persionalized med review..
		for(PatientMedicationData pat:patientMedicationDataList)
		{
			//count++;
			if(pat.getDrugs().equals(patientMedicationData.getDrugs()))
			{
				pat=patientMedicationData;
			}

		}



		//updating visit summary tab added new medicine...

		for(PatientMedicationData pat:removeDuplicateModifyMedicationListForPatient)
		{
			if(pat.getDrugs().equals(patientMedicationData.getDrugs()))
			{
				pat=patientMedicationData;
			}

		}

		for(PatientMedicationData pat:addNewmedicationListForPatient)
		{
			if(pat.getDrugs().equals(patientMedicationData.getDrugs()))
			{
				pat=patientMedicationData;
			}

		}


		HttpServletRequest req = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
		String url = req.getRequestURL().toString();
		System.out.println(":::::::::::::::::>>>>>>>>>>>>>>>>>>>>>> url::"+url);
		String returnValue="";
		if(url.endsWith("anticoag.jsf"))
			returnValue="go_to_anticoag";

		if(url.endsWith("personalizedMedReview.jsf"))
			returnValue="go_to_persionalizeMedReview";

		System.out.println("returnValue:::::"+returnValue);
		return returnValue;

	}

	/*
	 * for Deleting particular row of  med action plan:::
	 * @author: Gopal Krishna jha::
	 */
	public void cancelMedActionPlan()
	{
		logger.info("cancelMedActionPlan method start:::");
		FacesContext fc = FacesContext.getCurrentInstance();
		Map<String,String> params = fc.getExternalContext().getRequestParameterMap();
		int rowid=Integer.parseInt(params.get("rowIdForMEdActionPlan"));
		System.out.println(":::::::::::row id::"+rowid+":::"+medicalActionPlanList.size());
		medicalActionPlanList.remove(rowid);
	}


	public void cancelCurntAnticoagMed()
	{

		logger.info("cancelCurntAnticoagMed:::::::::::");
		FacesContext fc = FacesContext.getCurrentInstance();
		Map<String,String> params = fc.getExternalContext().getRequestParameterMap();
		//int rowid=Integer.parseInt(params.get("rowIdForMEdActionPlan"));
		String medName=params.get("medicineName");
		//return params.get("country");
		System.out.println(":::::::::::row id:::::"+medName);

		deleteMedcineOnPMRVisitSummaryAndAnticoag(medName);

	}

	/*
	 * deleting medicine on PMR, Visit summary,anticoag if available...
	 */

	public void deleteMedcineOnPMRVisitSummaryAndAnticoag(String medName) {
		//deleting on PMR

		int count=0,check=0;
		//deleting persionalized med review..
		getMedicalActionPlanList();
		for(PatientMedicationData pat:patientMedicationDataList)
		{
			count++;
			if(pat.getDrugs().equals(medName))
			{
				check++;

				break;
			}

		}

		if(!(check==0))
			patientMedicationDataList.remove(count-1);

		//deleting medaction plan
		count=0;
		check=0;
		//List<String>medactionPlanIdList=new ArrayList<String>();

		for(MedActionPlan medPlan:medicalActionPlanList)
		{
			count++;
			if(medPlan.getMedicineName().equals(medName))
			{
				check++;
				//medactionPlanIdList.add(medPlan.getMedicineName());
				break;
			}

		}

		if(!(check==0))
		{
			Iterator<MedActionPlan> it = medicalActionPlanList.iterator();
			while (it.hasNext()) {
				if (it.next().getMedicineName().equals(medName)) {
					it.remove();
					// If you know it's unique, you could `break;` here
				}
			}

		}
		//for deleting  anticoag meds..

		count=0;
		check=0;

		for(PatientMedicationData pat:currentAntiCoagMedList)
		{
			count++;
			if(pat.getDrugs().equals(medName))
			{
				check++;

				break;
			}

		}

		if(!(check==0))
			currentAntiCoagMedList.remove(count-1);

		//for save in db

		count=0;
		check=0;

		for(PatientMedicationData pat:addNewmedicationListForPatient)
		{
			count++;
			if(pat.getDrugs().equals(medName))
			{
				check++;

				break;
			}

		}

		if(!(check==0))
			addNewmedicationListForPatient.remove(count-1);


	}

	/*
	 * deleting medicine from all place where new meds will be added 
	 * @author: Gopal Krishna jha
	 */
	public void cancelOptimizeDrugstableForUpdate(){

		logger.info("cancelOptimizeDrugstableForUpdate::::::::::");
		FacesContext fcs = FacesContext.getCurrentInstance();
		Map<String,String> params = fcs.getExternalContext().getRequestParameterMap();
		int rowid=Integer.parseInt(params.get("rowIdForMEdAction"));
		PatientMedicationData patientMedicationDataForNewMed =  (PatientMedicationData) getAddNewMedDataTable().getRowData();
		getMedicalActionPlanList();
		System.out.println("rowIdForMEdAction:::::::::"+rowid+";;;meds:"+patientMedicationDataForNewMed.getDrugs());
		//addNewmedicationListForPatient.remove(rowid);


		//for deleting the value if available in med action plan...
		int count=0,check=0;
		//deleting persionalized med review..
		for(PatientMedicationData pat:patientMedicationDataList)
		{
			count++;
			if(pat.getDrugs().equals(patientMedicationDataForNewMed.getDrugs()))
			{
				check++;
				break;
			}
		}

		if(!(check==0))
			patientMedicationDataList.remove(count-1);
		//deleting visit summary tab added new medicine...
		//removeDuplicateModifyMedicationListForPatient
		count=0;
		check=0;
		for(PatientMedicationData pat:removeDuplicateModifyMedicationListForPatient)
		{
			count++;
			if(pat.getDrugs().equals(patientMedicationDataForNewMed.getDrugs()))
			{
				check++;

				break;
			}

		}
		if(!(check==0))
			removeDuplicateModifyMedicationListForPatient.remove(count-1);

		count=0;
		check=0;
		for(PatientMedicationData pat:addNewmedicationListForPatient)
		{
			count++;
			if(pat.getDrugs().equals(patientMedicationDataForNewMed.getDrugs()))
			{
				check++;

				break;
			}

		}
		if(!(check==0))
			addNewmedicationListForPatient.remove(count-1);

		//deleting med action plan	

		count=0;
		check=0;
		for(MedActionPlan medActionPlan:medicalActionPlanList)
		{
			count++;
			if(medActionPlan.getMedicineName().equals(patientMedicationDataForNewMed.getDrugs()))
			{
				check++;
				break;
			}

		}
		if(!(check==0))
			medicalActionPlanList.remove(count-1);
		//System.out.println(count+"::::::::::::::::::::::::::>>>>"+medicalActionPlanList.size()+":::"+patientMedicationDataList.size());

	}


	/*
	 * modify medication action plan in med action plan tab
	 * @author : Gopal Krishna Jha:::
	 */

	public void afterModifyMedicationActionPlan()
	{
		logger.info("afterModifyMedicationActionPlan method::::::::");
		getMedicalActionPlanList();
		int id=0,row=0;
		for(MedActionPlan med:medicalActionPlanList)
		{
			id++;
			if(medActionPlan.getMedicineName().equals(med.getMedicineName()))
			{
				row=id-1;
			}
		}
		medicalActionPlanList.set(row, medActionPlan);
		RequestContext.getCurrentInstance().execute("editMedicalActionPlan.hide()");
	}

	/*
	 * add new medicine and save in db
	 * @author: Gopal Krishna Jha
	 */
	public String addMedicine()
	{
		logger.info("addGeneralMedicine method started");
		//findDrugIDAccordingToDrugNameAndDose(patientMedicationData, doseDetailList);
		patientMedicationData.setPrescriptionStatus(PRESCRIPITION_STATUS_PENDING);
		patientMedicationData.setPatientId(new ContextUtil().getPatientId());
		patientMedicationData.setProviderId(new ContextUtil().getProviderId());
		patientMedicationData.setCompliancePercentage(0);
		patientMedicationData.setDoctorId(new ContextUtil().getLoginId());
		patientMedicationData.setChangeMedId(1);
		patientMedicationData.setFlagForMedActionPlan(false);
		//patientMedicationData.set
		System.out.println("checkdateForMedactionplan"+checkdateForMedactionplan+"strength is"+patientMedicationData.getStrengths());
		/*if(patientMedicationData.getStrengths().contains("/"))
		{*/
			patientMedicationData.setUnit(patientMedicationData.getUnit());
			System.out.println("strength contain /"+patientMedicationData.getUnit());
		/*}*/
		if(!checkdateForMedactionplan){
				patientMedicationData.setPrescriberName(new ContextUtil().getLoggerFirstName()+" "+new ContextUtil().getLoggedUserMiddleName()+" "+new ContextUtil().getLoggerLastName());
		}
		//patientMedicationData.setMedicineStatus(NEW_ADDED_MEDS);
		patientMedicationData.setCauseOfAddMeds(NEW_ADDED_MEDS);
		//causeOfAddMeds
		//patientMedicationData.setAlterNateDrugs(patientMedicationData.getDrugs());
		patientMedicationData.setModifyDate(patientMedicationData.getStartDate());
		patientMedicationData.setSelectedImageForPatient(true);
		patientMedicationData.setFlagForVisit(true);
		//-------for saving date with time zone
		logger.info("patientMedicationData.getStartDate:"+patientMedicationData.getStartDate()+"=="+new Date());
		logger.info("setDateWithTimeZoneForCompare="+new DateUtil().convertDateFormatUsingFormat(patientMedicationData.getStartDate(), "yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
		patientMedicationData.setDateWithTimeZoneForCompare(new DateUtil().convertDateFormatUsingFormat(new DateUtil().getTodayDate(), "yyyy-MM-dd'T'HH:mm:ss.SSSZ"));  
		logger.info("1:::drug id::"+patientMedicationData.getDrugId()+"::::::::::::"+patientMedicationData.getDrugNameId());
		findDrugIDAccordingToDrugNameAndDose(patientMedicationData, doseDetailList);

		logger.info("2:1::drug id::"+patientMedicationData.getDrugId()+"::::::::::::"+patientMedicationData.getDrugNameId()+"::::therapic category:::"+patientMedicationData.getTherapeuticCategory());
		//for med action plan.....
		//getMedicalActionPlanList();
		if(patientMedicationData.getByRoute().contains(","))
		{
			String route1=patientMedicationData.getByRoute().substring(0, patientMedicationData.getByRoute().indexOf(","));
			String route2=patientMedicationData.getByRoute().substring(patientMedicationData.getByRoute().indexOf(",")+1, patientMedicationData.getByRoute().length());
			if(!route2.contains("in"))
			patientMedicationData.setByRoute("in"+" "+route2+" "+route1);
			else
				patientMedicationData.setByRoute(" "+route2+" "+route1);
		}
		getAnticoagMedList();
		boolean checkStatusForMedActionPlan=false,checkForAnticoag=false;
		for(Medicine med:anticoagMedList)
		{
			System.out.println("Medicine:::::::"+med.getMedicinName()+":::::::::"+patientMedicationData.getGenericName());
			if(med.getMedicinName().equalsIgnoreCase(patientMedicationData.getGenericName()))
				
			{
				
				checkStatusForMedActionPlan=med.isFlagForMedActionPlan();
				
				//checkStatusForMedActionPlan=med.isFlagForMedActionPlan();
				/*if(medicalActionPlanList.size()==0)
				{
						checkStatusForMedActionPlan=med.isFlagForMedActionPlan();
				}
				
				if(!(medicalActionPlanList.size()==0))
				{
				for(MedActionPlan medList: medicalActionPlanList)
				{
					System.out.println("med action plan list ::::"+medList.getMedicineName()+"KKKK"+patientMedicationData.getGenericName());
					
					if(!(medList.getMedicineName().equalsIgnoreCase(patientMedicationData.getGenericName())))
					{
						checkStatusForMedActionPlan=med.isFlagForMedActionPlan();
					}
				 }
				}*/
			}
				
			if(med.getClinicName()!=null)
			{
				if(med.getClinicName().equalsIgnoreCase("Anticoag"))
					checkForAnticoag=true;
			}
		}
		System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"+checkStatusForMedActionPlan);
		if(checkStatusForMedActionPlan)
		{
			//checkNotesForLab=0;
			showAnticoagMedactionPlanMessage=0;
			//patientMedicationData.setFlagForMedActionPlan(true);
			System.out.println(">>>>>>>>>>>>>>11111>>>>>>>>>>>>>>>>"+checkStatusForMedActionPlan);
			
			List<MedActionPlan>medactionplanListForParticularMedicine=new ArrayList<MedActionPlan>();
			
			
			for(LabDetail lab:labDetailList)
			{
				System.out.println("lab name ::::::::"+lab.getLabName());
				if(lab.isSelected())
				{
					
					System.out.println(">>>>>>>>>>>>>>12343>>>>>>>>>>>>>>>>"+checkStatusForMedActionPlan);
					MedActionPlan med=new MedActionPlan();
					med.setMedicineName(patientMedicationData.getDrugs());
					med.setDose(patientMedicationData.getStrengths());
					med.setRegimen(patientMedicationData.getDirections());
					med.setUnit(patientMedicationData.getUnit());
					med.setDosageForm(patientMedicationData.getDosageForm());
					med.setPatientId(new ContextUtil().getPatientId());
					med.setDoctorId(new ContextUtil().getLoginId());
					med.setNotes(patientMedicationData.getNotes());
					med.setActionDate(new DateUtil().getTodayDate());
					//med.setDose(patientMedicationData.getDose());
					//med.setRegimen(medActionPlan2.getRegimen());
					med.setDiagnosis(medActionPlan.getDiagnosis());
					med.setLab(lab.getLabName());
					//med.setAcceptableRange(medActionPlan.getAcceptableRange());
					med.setLabFrequency(lab.getLabfrequencyDetail());
					med.setDrugId(patientMedicationData.getDrugId());
					med.setDrugNameId(patientMedicationData.getDrugNameId());
					med.setLastUpdateDate(med.getActionDate());
					med.setAcceptableRange(medActionPlan.getAcceptableRange());
					med.setMedicineStage(medActionPlan.getMedicineStage());
					med.setSubdiagonses(subDiagnosisDetail);
					
					// SimpleDateFormat isoFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
					  //  isoFormat.setTimeZone(TimeZone.getTimeZone("EST"));
					   // Date date = new DateUtil().convertTimezone(new Date());
					
					med.setDosingStartDate(new Date());
					if(checkdateForMedactionplan){
						med.setPrescriprtiondate(patientMedicationData.getStartDate());
						med.setPrescriptionby(patientMedicationData.getPrescriberName());					
					}
					else
					{
						med.setPrescriprtiondate(med.getActionDate());
						med.setPrescriptionby(new ContextUtil().getLoggerFirstName()+" "+new ContextUtil().getLoggedUserMiddleName()+" "+new ContextUtil().getLoggerLastName());					
					}
				
					med.setCreatedby(new ContextUtil().getLoggerFirstName()+" "+new ContextUtil().getLoggedUserMiddleName()+" "+new ContextUtil().getLoggerLastName());
					med.setLastupdatedby(new ContextUtil().getLoggerFirstName()+" "+new ContextUtil().getLoggedUserMiddleName()+" "+new ContextUtil().getLoggerLastName());
					
					if(!(med.getLabFrequency()==""))
					{
						int noOFdays=findNoOfdays(med.getLabFrequency());
						//System.out.println(":::::::"+noOFdays);
						med.setNextLabDate(new DateUtil().AddDate(med.getActionDate(), noOFdays));
					}
					logger.info("dosing strt date:::::"+med.getDosingStartDate());
					medactionplanListForParticularMedicine.add(med);
				}
			}

			//saving med action plan..
			if(!medactionplanListForParticularMedicine.isEmpty())
			{
				patientMedicineService.saveMedActionPlan(medactionplanListForParticularMedicine);
				medicalActionPlanList=null;

			}
			else
				patientMedicationData.setFlagForMedActionPlan(true);

		}
		if(!doseAndDrugId.isEmpty())
		{
			double drugId=Double.parseDouble(doseAndDrugId.get(1));
			if(patientMedicationData.getDrugId()!=drugId)
			{
				//delete medicine of that drugId..
				patientMedicineService.deletePatientMedicationData(drugId,patientMedicationData.getPatientId(),patientMedicationData.getProviderId(),patientMedicationData.getDrugNameId());
			}
		}


		patientMedicineService.saveMedicineDetail(patientMedicationData);
		
			checkNotesForWarfarinDrugInteraction=0;

		patientMedicationDataList=null;
		//copyOriginalPatientMedicationList=null;
		patientMedicationData=new PatientMedicationData();

		if(checkForAnticoag)
		{
			currentAntiCoagMedList=new ArrayList<PatientMedicationData>();
		}
		currentAntiplateletMedsList=new ArrayList<PatientMedicationData>();
		doseAndDrugId=new ArrayList<String>();

		//RequestContext.getCurrentInstance().execute("addNewMedicinePopup.hide();");

		//currentAntiplateletMedsList=new ArrayList<PatientMedicationData>();
		//patientMedicineService.saveValueForIntegration(new ContextUtil().getPatientId(), true);
		FacesContext context = FacesContext	.getCurrentInstance();
		PatientManageBean patientManageBean=(PatientManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"patientManageBean");
		//dashBoardManageBean.updateLiverAndKidneyFunctionValue();
		patientManageBean.setCareTeamListForPatient(null);
		
		//added By nagaraj
		makeFilterPageRefreshData();
		setCheckdateForMedactionplan(false);

	
	
		/*if(patientMedicationData.getDrugs().toLowerCase().contains("lithium")){
		return null;
		}
		else{*/
			return returnParticularPage();
		/*}*/



	}
	
	
	
	

	private void makeFilterPageRefreshData() {
		filterPatientMedicationList=null;
		copyOriginalPatientMedicationList=null;
		//logger.info("makeFilterPageRefreshData::::::::::::"+copyOriginalPatientMedicationList);
		drugFilterList=null;
		therapeuticCategories=null;
		prescriberFilterList=null;
		copyAlertMedPlansFilter=null;
		acoPatientMeasureFilterPageList=null;
		acoMeasureSelectedOption=true;
		hedisSelectedOption=true;
		gapinSelectedOption=true;
		alertMedActionPlans=null;
		hepCAlertMedActionPlanList=null;
		
	}

	/*
	 * add meds and return particular page..
	 * @author:Gopal Krishna JHA
	 */
	public String returnParticularPage()
	{
		//RequestContext.getCurrentInstance().execute("addNewMedicinePopup.hide();");
		HttpServletRequest req = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
		String url = req.getRequestURL().toString();
		logger.info(":::::::::::::::::>>>>>>>>>>>>>>>>>>>>>> url::"+url);
		String returnValue="";
		if(url.endsWith("anticoag.jsf"))
			returnValue="go_to_anticoag";

		if(url.endsWith("personalizedMedReview.jsf"))
			returnValue="go_to_persionalizeMedReview";
		if(url.endsWith("overViewFilter.jsf"))
			returnValue="go_to_ovw_filters";
		if(url.endsWith("psychopharm.jsf"))
			returnValue = "go_to_psychopharm";
		if(url.endsWith("hepatitis.jsf"))
			returnValue = "go_to_hepatitis";
		return returnValue;
	}

	/*
	 * add new medicine and clean the object
	 * @author:Gopal Krishna jha
	 */
	/*public String addNewMedcine()
		{
			logger.info("inside addNewMedcine method");
			//medActionPlan=new MedActionPlan();
			patientMedicationData=new PatientMedicationData();
			medActionPlan=new MedActionPlan();
			return null;
		}*/
	public String afterAddNewMedicine() 
	{
		getMedicalActionPlanList();


		logger.info(patientMedicationData.getStartDate()+"afterAddNewMedicine method::::::::"+medicalActionPlanList.size()+":::"+medActionPlan.getMedicineName());
		//add medicine personalized med review....
		//User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		//patientMedicationData.setStartDate(new Date());
		patientMedicationData.setPrescriptionStatus(PRESCRIPITION_STATUS_PENDING);
		patientMedicationData.setPatientId(new ContextUtil().getPatientId());
		patientMedicationData.setProviderId(new ContextUtil().getProviderId());
		patientMedicationData.setCompliancePercentage(0);
		patientMedicationData.setDoctorId(new ContextUtil().getLoginId());
		patientMedicationData.setChangeMedId(1);
		patientMedicationData.setPrescriberName(new ContextUtil().getLoggerFirstName()+" " +new ContextUtil().getLoggedUserMiddleName() +" "+new ContextUtil().getLoggerLastName());
		patientMedicationData.setMedicineStatus(NEW_ADDED_MEDS);
		patientMedicationData.setAlterNateDrugs(patientMedicationData.getDrugs());
		patientMedicationData.setModifyDate(patientMedicationData.getStartDate());
		patientMedicationData.setSelectedImageForPatient(true);
		//setting drug id and drug type
		findDrugIDAccordingToDrugNameAndDose(patientMedicationData, doseDetailList);

		//patientMedicationData.setReffils(1);
		//System.out.println(patientMedicationData.getDrugs()+"patientMedicationData:::::::"+patientMedicationData.getStrengths());

		//String formularysymbol=patientMedicineService.findFormularySymbol(new ContextUtil().getInsuranceId(),patientMedicationData.getDrugs());
		if(new ContextUtil().getInsuranceId()==0)
		{
			patientMedicationData.setFormularySymbol("");
		}
		else
		{
		//String formularyDetail=patientMedicineService.findFormularySymbol(new ContextUtil().getInsuranceId(),patientMedicationData.getDrugs());
		//patientMedicationData.setFormularySymbol(formularyDetail);
		//logger.info("2find formulary detail end::::");
		
		patientMedicationData.setFormularySymbol(patientMedicineService.findFormularySymbol(new ContextUtil().getInsuranceId(),patientMedicationData.getDrugs()));
		}
		//System.out.println(":::::::::::::formularysymbol::::::::"+formularysymbol);
		//patientMedicationData.setFormularySymbol(formularysymbol);

		patientMedicationData.setSelectedImageForPatient(true);

		/*String iconVal=setIconformed(patientMedicationData.getDrugs());
			//patientMedicationData.setIconPath(iconVal);
			if(iconVal.equalsIgnoreCase("action"))
			{
			   patientMedicationData.setSelectedActionIconForPatient(true);
			   System.out.println("action icon will be shown");
			}
			else if(iconVal.equalsIgnoreCase("suggestion"))
			{
				patientMedicationData.setSelectedSuggestionIconForPatient(true);
				System.out.println("suggestion icon will be shown");
			}

			 System.out.println("return for icon::"+iconVal+"p:::");*/
		patientMedicationDataList.add(patientMedicationData);



		//add new medicine list ...
		/*if(!(addNewmedicationListForPatient.isEmpty()))
			{
				for(PatientMedicationData pat:addNewmedicationListForPatient)
				{
				System.out.println("*****************meds::"+pat.getDrugs()+":::"+pat.getStrengths());	
				}
			}*/

		//for checking duplicate medicine.....
		int count=0;
		for(PatientMedicationData pat:addNewmedicationListForPatient)
		{
			//System.out.println("*****************meds::"+pat.getDrugs()+":::"+pat.getStrengths());	
			if(pat.getDrugs().equals(patientMedicationData.getDrugs()))
			{
				count++;
			}
		}
		System.out.println(":::::count::::"+count);
		if(count==0)
			addNewmedicationListForPatient.add(patientMedicationData);

		/*for(PatientMedicationData pat:addNewmedicationListForPatient)
			{
			System.out.println("<<<<<<<<<*****************meds::"+pat.getDrugs()+":::"+pat.getStrengths());	
			}*/
		removeDuplicateModifyMedicationListForPatient.add(patientMedicationData);
		addNewmedicationListForPatient.add(patientMedicationData);



		System.out.println("medicine name:::::"+patientMedicationData.getDrugId()
				+"drug ID:::::"+patientMedicationData.getDrugs()+"::::"+patientMedicationData.getDrugNameId());

		/*for(DrugInteraction drg: drugInteractionList)
				{

				}*/
		/*getDrugInteractionList();
			for(DrugInteraction drugIns: getDrugInteractionList())
			{
				System.out.println("drugIns:::"+drugIns.getDrug1());
			}*/
		//drugInteractionList
		//medNcComparision=drugDetailWSBean.callDrugDrugInteraction(patientMedicationData);
		//drugInteractionList=drugDetailWSBean.callDrugDrugInteraction(patientMedicationData);



		RequestContext.getCurrentInstance().execute("addNewMedicinePopup.hide();");


		HttpServletRequest req = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
		String url = req.getRequestURL().toString();
		System.out.println(":::::::::::::::::>>>>>>>>>>>>>>>>>>>>>> url::"+url);
		String returnValue="";
		if(url.endsWith("anticoag.jsf"))
			returnValue="go_to_anticoag";

		if(url.endsWith("personalizedMedReview.jsf"))
			returnValue="go_to_persionalizeMedReview";

		System.out.println("returnValue:::::"+returnValue);
		currentAntiplateletMedsList=new ArrayList<PatientMedicationData>();

		return returnValue;
	}

	/*
	 * Add medicine in anticoag clinic without using med action plan...
	 * @author: Gopal Krishna Jha
	 */
	public String addMedicineWitoutMedActionPlan()
	{
		logger.info("start addMedicineWitoutMedActionPlan method");
		//User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		if(patientMedicationData.getStartDate()==null)
			patientMedicationData.setStartDate(new DateUtil().getTodayDate());
		patientMedicationData.setPatientId(new ContextUtil().getPatientId());
		patientMedicationData.setProviderId(new ContextUtil().getProviderId());
		patientMedicationData.setCompliancePercentage(0);
		patientMedicationData.setDoctorId(new ContextUtil().getLoginId());
		patientMedicationData.setChangeMedId(1);
		patientMedicationData.setPrescriberName(new ContextUtil().getLoggerFirstName()+" "+new ContextUtil().getLoggerLastName());
		patientMedicationData.setMedicineStatus(NEW_ADDED_MEDS);
		patientMedicationData.setAlterNateDrugs(patientMedicationData.getDrugs());
		patientMedicationData.setModifyDate(patientMedicationData.getStartDate());
		patientMedicationData.setDirections(medActionPlan.getRegimen());


		String formularysymbol=patientMedicineService.findFormularySymbol(new ContextUtil().getInsuranceId(),patientMedicationData.getDrugName());
		System.out.println(":::::::::::::::::::::"+formularysymbol);
		patientMedicationData.setFormularySymbol(formularysymbol);

		patientMedicationData.setSelectedImageForPatient(true);
		/*String iconVal=setIconformed(patientMedicationData.getDrugs());
			//patientMedicationData.setIconPath(iconVal);
			if(iconVal.equalsIgnoreCase("action"))
			{
			   patientMedicationData.setSelectedActionIconForPatient(true);
			   System.out.println("action icon will be shown");
			}
			else if(iconVal.equalsIgnoreCase("suggestion"))
			{
				patientMedicationData.setSelectedSuggestionIconForPatient(true);
				System.out.println("suggestion icon will be shown");
			}

			 System.out.println("return for icon::"+iconVal+"p:::");*/
		//patientMedicationData.setSelectedIconForPatient(true);
		addMedsPMRAndVisitSummary(patientMedicationData);

		//add in Anticoag meds List..
		boolean check = false;
		getCurrentAntiCoagMedList();
		for(PatientMedicationData patData:currentAntiCoagMedList)
		{
			if(patData.getDrugs().equals(patientMedicationData.getDrugs()))
			{
				//medActionPlan.regimen
				patData.setStrengths(patientMedicationData.getStrengths());
				patData.setDirections(medActionPlan.getRegimen());
				check=true;

			}
		}
		if(!check)
			currentAntiCoagMedList.add(patientMedicationData);
		for(PatientMedicationData patData:currentAntiCoagMedList)
		{
			System.out.println(":>>>>>>>>>>>>>>>>>>>:::"+patData.getDrugs());
		}
		setTabValue(1);
		HttpServletRequest req = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
		String url = req.getRequestURL().toString();
		System.out.println(":::::::::::::::::>>>>>>>>>>>>>>>>>>>>>> url::"+url);
		String returnValue="";
		if(url.endsWith("anticoag.jsf"))
			returnValue="go_to_anticoag";

		if(url.endsWith("personalizedMedReview.jsf"))
			returnValue="go_to_persionalizeMedReview";

		// System.out.println("returnValue:::::"+returnValue);
		return returnValue;
		//return null;
	}
	/*
	 * add medicine in PMr and visit summary table and check duplicate..
	 */
	private void addMedsPMRAndVisitSummary(
			PatientMedicationData patientMedicationData2) {


		//Add in PMR datatable..
		//check for duplicate in PMR

		boolean check=false;
		for(PatientMedicationData patData:patientMedicationDataList)
		{
			if(patData.getDrugs().equals(patientMedicationData2.getDrugs()))
			{
				//medActionPlan.regimen
				patData.setStrengths(patientMedicationData2.getStrengths());
				patData.setDirections(medActionPlan.getRegimen());
				patData.setQuantity(patientMedicationData2.getQuantity());
				check=true;

			}
		}

		if(!check)
			patientMedicationDataList.add(patientMedicationData2);


		//chek in visit summary..
		check=false;
		for(PatientMedicationData patData:removeDuplicateModifyMedicationListForPatient)
		{
			if(patData.getDrugs().equals(patientMedicationData2.getDrugs()))
			{
				//medActionPlan.regimen
				patData.setStrengths(patientMedicationData2.getStrengths());
				patData.setDirections(medActionPlan.getRegimen());
				patData.setQuantity(patientMedicationData2.getQuantity());
				check=true;

			}
		}
		if(!check)
			removeDuplicateModifyMedicationListForPatient.add(patientMedicationData);

		//addNewmedicationListForPatient
		check=false;
		for(PatientMedicationData patData:addNewmedicationListForPatient)
		{
			if(patData.getDrugs().equals(patientMedicationData2.getDrugs()))
			{
				//medActionPlan.regimen
				patData.setStrengths(patientMedicationData2.getStrengths());
				patData.setDirections(medActionPlan.getRegimen());
				patData.setQuantity(patientMedicationData2.getQuantity());
				check=true;

			}
		}
		if(!check)
			addNewmedicationListForPatient.add(patientMedicationData);

	}


	/*
	 * for getting all Anticoag med list..
	 * @author: Gopal krishna jhall
	 */


	public List<Medicine> getAnticoagMedList() {
		if(anticoagMedList.isEmpty())
			anticoagMedList=patientMedicineService.findAnticoagMedList(ANTICOAG);
		//System.out.println("::::::anticoagMedList:::"+anticoagMedList);
		return anticoagMedList;
	}

	public void setAnticoagMedList(List<Medicine> anticoagMedList) {
		this.anticoagMedList = anticoagMedList;
	}
	/*
	 * find total antiplatelate meds list..
	 * @author: Gopal Krishna Jha..
	 */
	public List<Medicine> getAntiPlateletMedList() {
		if(antiPlateletMedList.isEmpty())
			antiPlateletMedList=patientMedicineService.findAnticoagMedList(ANTI_PLATELET);
		return antiPlateletMedList;
	}

	public void setAntiPlateletMedList(List<Medicine> antiPlateletMedList) {
		this.antiPlateletMedList = antiPlateletMedList;
	}


	/*
	 * find current Anticoag medicine list of particular user
	 * @author: Gopal Krishna Jha..
	 */

	public List<PatientMedicationData> getCurrentAntiCoagMedList() {
		if(currentAntiCoagMedList.isEmpty())
		{
			List<PatientMedicationData>duplicateAntiCoagMedList=new ArrayList<PatientMedicationData>();
			getAnticoagMedList() ;
			getPatientMedicationDataList();
			getMedicalActionPlanList();
			getWeekdoselist();
			getSigCodeList();
			
			System.out.println("weekley dose list size" +getWeekdoselist().size());
			
			//currentAntiCoagMedList=patientMedicationDataList;
			for(PatientMedicationData pat:patientMedicationDataList)
			{
				for(Medicine medName:anticoagMedList)
				{

					if(pat.getGenericName().startsWith(medName.getMedicinName()))
					{ 	
						if(medName.isFlagForMedActionPlan())
						//if(true)
						{
						//showMedActionPlanCreateOrNot
						if(!pat.isFlagForMedActionPlan())
						{
							logger.info("drugs::::::"+pat.getDrugs());
							boolean checkMedActionplan=false;
							for(MedActionPlan medactionPlan:medicalActionPlanList)
							{
								if(pat.getDrugId()==medactionPlan.getDrugId())
								{
									checkMedActionplan=true;
									break;
								}
							}
							
							logger.info(checkMedActionplan+"2drugs::::::"+pat.getDrugs());
							if(!checkMedActionplan)
								pat.setShowMedActionPlanCreateOrNot(true);
							
						}
						}
						duplicateAntiCoagMedList.add(pat);
					}
					
				}
				
			}
			try
			{

			for(PatientMedicationData pat2:duplicateAntiCoagMedList)
			{
			if(!weekdoselist.isEmpty()){
			for(WeeklyDose weekdose:weekdoselist)
			{
				System.out.println("week dose for compare"+weekdose.getMedicineName()+"anticoag med name for compare"+pat2.getGenericName());
				if(weekdose.getDrugId()==pat2.getDrugId())
				{ 
					System.out.println("Inside if condition of med name match"+"weekdose drug_id"+weekdose.getDrugId()+"patient drugid"+pat2.getDrugId()+"pat123>>>>strength"+pat2.getStrengths());
					
					double sunday = 0,monday = 0,tuesday = 0,wednesday = 0,thursday = 0,friday = 0,saturday = 0,avg;
					//StringUtils.isAlphanumeric(weeklyDose.getSundayDose());
					
					if(weekdose.getSundayDose()!=null && (!weekdose.getSundayDose().isEmpty()))
						sunday=Double.parseDouble(weekdose.getSundayDose().trim());
					System.out.println("sunday::::::warfarin maintenance:::::"+sunday);

					if(weekdose.getMondayDose()!=null && (!weekdose.getMondayDose().isEmpty()))
						monday=Double.parseDouble(weekdose.getMondayDose().trim());

					if(weekdose.getTuesDay()!=null && (!weekdose.getTuesDay().isEmpty()))
						tuesday=Double.parseDouble(weekdose.getTuesDay().trim());

					if(weekdose.getWednesdayDose()!=null && (!weekdose.getWednesdayDose().isEmpty()))
						wednesday=Double.parseDouble(weekdose.getWednesdayDose().trim());

					if(weekdose.getThursdayDose()!=null && (!weekdose.getThursdayDose().isEmpty()))
						thursday=Double.parseDouble(weekdose.getThursdayDose().trim());

					if(weekdose.getFridayDose()!=null && (!weekdose.getFridayDose().isEmpty()) )
						friday=Double.parseDouble(weekdose.getFridayDose().trim());

					if(weekdose.getSaturdayDose()!=null && (!weekdose.getSaturdayDose().isEmpty()))
					{
						System.out.println("weekdose.getSaturdayDose():::::"+weekdose.getSaturdayDose());
						saturday=Double.parseDouble(weekdose.getSaturdayDose().trim());
						System.out.println("saturday deatails:::::"+saturday);
					}
					
					Double A1,A2,A3,A4,A5,A6,A7;
					A1=sunday*Double.parseDouble(pat2.getStrengths().substring(0, pat2.getStrengths().indexOf(" ")).replace(" ", "").replace(",", ""));
					A2=monday*Double.parseDouble(pat2.getStrengths().substring(0, pat2.getStrengths().indexOf(" ")).replace(" ", "").replace(",", ""));
					A3=tuesday*Double.parseDouble(pat2.getStrengths().substring(0, pat2.getStrengths().indexOf(" ")).replace(" ", "").replace(",", ""));
					A4=wednesday*Double.parseDouble(pat2.getStrengths().substring(0, pat2.getStrengths().indexOf(" ")).replace(" ", "").replace(",", ""));
					A5=thursday*Double.parseDouble(pat2.getStrengths().substring(0, pat2.getStrengths().indexOf(" ")).replace(" ", "").replace(",", ""));
					A6=friday*Double.parseDouble(pat2.getStrengths().substring(0, pat2.getStrengths().indexOf(" ")).replace(" ", "").replace(",", ""));
					A7=saturday*Double.parseDouble(pat2.getStrengths().substring(0, pat2.getStrengths().indexOf(" ")).replace(" ", "").replace(",", ""));
					logger.info("value of A1s"+A1+A2+A3+A4+A5+A6+A7);

					double avg1=A1+A2+A3+A4+A5+A6+A7;
					
					avg=avg1/7;

					avg=Math.round(avg*100.0)/100.0;
					logger.info("avarage infromation"+avg);
					
					
					
					
					
					pat2.setMondayDose(weekdose.getMondayDose());
					pat2.setTuesDay(weekdose.getTuesDay());
					pat2.setWednesdayDose(weekdose.getWednesdayDose());
					pat2.setThursdayDose(weekdose.getThursdayDose());
					pat2.setFridayDose(weekdose.getFridayDose());
					pat2.setSaturdayDose(weekdose.getSaturdayDose());
					pat2.setSundayDose(weekdose.getSundayDose());
					pat2.setAveragedose(Double.toString(avg));
					System.out.println("get monday dose"+pat2.getMondayDose()+"week dose table monday dose"+weekdose.getMondayDose());
					currentAntiCoagMedList.add(pat2);
				}
			else
				{
					for(SigCode sigcode:sigCodeList)
					{
						if(sigcode.getSigCode().equalsIgnoreCase(pat2.getDirections()))
								{
							Double A1,avg;
							A1=sigcode.getSigCodeValue()*Double.parseDouble(pat2.getStrengths().substring(0, pat2.getStrengths().indexOf(" ")).replace(" ", "").replace(",", ""));
							avg=Math.round(A1*100.0)/100.0;
							A1=Math.round(A1*100.0)/100.0;
							pat2.setMondayDose(Double.toString(A1));
							pat2.setTuesDay(Double.toString(A1));
							pat2.setWednesdayDose(Double.toString(A1));
							pat2.setThursdayDose(Double.toString(A1));
							pat2.setFridayDose(Double.toString(A1));
							pat2.setSaturdayDose(Double.toString(A1));
							pat2.setSundayDose(Double.toString(A1));
							pat2.setAveragedose(Double.toString(avg));
							currentAntiCoagMedList.add(pat2);
							
								}
						
					}
					
				}
			}
			}
			else
			{
			
			for(SigCode sigcode:sigCodeList)
			{
				if(sigcode.getSigCode().equalsIgnoreCase(pat2.getDirections()))
						{
					Double A1,avg;
					A1=sigcode.getSigCodeValue()*Double.parseDouble(pat2.getStrengths().substring(0, pat2.getStrengths().indexOf(" ")).replace(" ", "").replace(",", ""));
					avg=Math.round(A1*100.0)/100.0;
					pat2.setMondayDose(Double.toString(A1));
					pat2.setTuesDay(Double.toString(A1));
					pat2.setWednesdayDose(Double.toString(A1));
					pat2.setThursdayDose(Double.toString(A1));
					pat2.setFridayDose(Double.toString(A1));
					pat2.setSaturdayDose(Double.toString(A1));
					pat2.setSundayDose(Double.toString(A1));
					pat2.setAveragedose(Double.toString(avg));
					currentAntiCoagMedList.add(pat2);
					
						}
				
			}
			}
			currentAntiCoagMedList=new ArrayList<PatientMedicationData>();
			currentAntiCoagMedList.addAll(duplicateAntiCoagMedList);
			}
			}
			catch(NumberFormatException nfe){
				 String msg="Strength of Some Anticoag Medicine is not in Number Format";
					FacesContext.getCurrentInstance().addMessage("messageUpdateForNewAddMeds", new FacesMessage(FacesMessage.SEVERITY_ERROR,msg,""));
					nfe.printStackTrace();
				
			}
			
			logger.info("duplicate anticaog med list size"+duplicateAntiCoagMedList.size());
		}

		return currentAntiCoagMedList;
	}



	public void setCurrentAntiCoagMedList(
			List<PatientMedicationData> currentAntiCoagMedList) {
		this.currentAntiCoagMedList = currentAntiCoagMedList;
	}

	/*
	 * find current Antiplatelate medicine list of particular user
	 * @author: Gopal Krishna Jha..
	 */
	public List<PatientMedicationData> getCurrentAntiplateletMedsList() {
		if(currentAntiplateletMedsList.isEmpty())
		{
			getAntiPlateletMedList() ;
			getPatientMedicationDataList();
			//System.out.println(":::::::::::antiPlateletMedList:::::"+antiPlateletMedList.size());
			//currentAntiCoagMedList=patientMedicationDataList;
			for(PatientMedicationData pat:patientMedicationDataList)
			{
				for(Medicine medName:antiPlateletMedList)
				{
					System.out.println("::pat.getDrugs()::"+pat.getGenericName()+":::"+medName.getMedicinName()+"::::compliance:::"+pat.getCompliancePercentage());
					if(pat.getGenericName().startsWith(medName.getMedicinName()))
						//if(medName.getMedicinName().startsWith(pat.getGenericName()))
						currentAntiplateletMedsList.add(pat);
				}
			}




		}
		//System.out.println(":::::currentAntiplateletMedsList::"+currentAntiplateletMedsList.size());
		return currentAntiplateletMedsList;
	}

	public void setCurrentAntiplateletMedsList(
			List<PatientMedicationData> currentAntiplateletMedsList) {
		this.currentAntiplateletMedsList = currentAntiplateletMedsList;
	}



	public void changMEdTOCurrentMedicinforoverview()
	{
		logger.info("changMEdTOCurrentMedicin::::::::::::");

		PatientMedicationData	patientMedicationDataForReconcile=(PatientMedicationData) getReconsileMedsDataTableforoverview().getRowData();
		System.out.println(":::med:"+patientMedicationDataForReconcile.getDrugs()+":getStrengths::"+patientMedicationDataForReconcile.getStrengths());
		System.out.println("::::::::::::drug id"+patientMedicationDataForReconcile.getDrugId()+"::::::::doctor"+patientMedicationDataForReconcile.getDoctorId());
		boolean check=false;
		for(PatientMedicationData pat:patientMedicationDataList)
		{
			//if(pat.getDrugs().equalsIgnoreCase(PatientMedicationDataForReconcile.getDrugs()))
			if(pat.getDrugId()==patientMedicationDataForReconcile.getDrugId())
				check=true;
		}
		if(check)
		{
			String msg=patientMedicationDataForReconcile.getDrugs()+"  is already on patient's active medication list";
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN,msg,"")); 
		}
		else
		{
			careTeamMemberListForReconcile.add(patientMedicationDataForReconcile.getDoctorId());
			
			System.out.println("ChangedMed Status::::::::::::::"+patientMedicationDataForReconcile.isCheckReconcileMedToCurrent());
			patientMedicationDataForReconcile.setCompliancePercentage(0);
			//patientMedicationDataForReconcile.setDoctorId(new ContextUtil().getLoginId());
			patientMedicationDataForReconcile.setStartDate(patientMedicationDataForReconcile.getStartDate());
			System.out.println("StartDate :::for reconcilemedicine adding into patientmedicationdatalist:"+patientMedicationDataForReconcile.getStartDate());
			patientMedicationDataForReconcile.setModifyDate(patientMedicationDataForReconcile.getStartDate());
			//User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
			patientMedicationDataForReconcile.setCauseOfAddMeds(RECONCILE_MEDS);
			patientMedicationDataForReconcile.setCheckReconcileMedToCurrent(true); 
			System.out.println("ChangedMed Status::::::::::::::"+patientMedicationDataForReconcile.isCheckReconcileMedToCurrent());
			patientMedicationDataForReconcile.setFlagForVisit(true);
			patientMedicationDataForReconcile.setChangeMedId(1);
			//patmedData.setPrescriberName(user.getUsername());
			patientMedicationDataForReconcile.setCheckMedsForEprescribe(false);

			patientMedicationDataForReconcile.setPatientId(new ContextUtil().getPatientId());
			patientMedicationDataForReconcile.setProviderId(new ContextUtil().getProviderId());
			patientMedicationDataForReconcile.setPrescriptionStatus(PRESCRIPITION_STATUS_CURRENT);
			patientMedicationDataForReconcile.setDataProvider("FDB");

			WSDrug wsdrug=new WSDrug();
			wsdrug=patientMedicineService.findDrugDetailAccordingToDrugId(patientMedicationDataForReconcile.getDrugId());
			//patMedData.setDrugNameId(findDrugNameIdAcordingToDrugId(patMedData.getDrugId()));
			patientMedicationDataForReconcile.setDrugNameId(wsdrug.getDrugNameId());
			if(wsdrug.getGenericName()==null)
				patientMedicationDataForReconcile.setGenericName(wsdrug.getDrugName());
			else
				patientMedicationDataForReconcile.setGenericName(wsdrug.getGenericName());
			
			patientMedicationDataForReconcile.setDosageForm(wsdrug.getDosageForm());
			patientMedicationDataForReconcile.setByRoute(wsdrug.getRoute());
			System.out.println("unit for reconcile med::::::::::::");

			patientMedicationDataList.add(patientMedicationDataForReconcile);
			
			if(patientMedicationDataForReconcile.getCauseOfAddMeds() == RECONCILE_MEDS)
		        	patientMedicationDataForReconcile.setCheckReconcileMedToCurrent(true);
			 else
				 patientMedicationDataForReconcile.setCheckReconcileMedToCurrent(false);
			 System.out.println("ChangedMed Status::::::::::::::after checking:::::::::::"+patientMedicationDataForReconcile.isCheckReconcileMedToCurrent());
			patientMedicineService.saveMedicineDetail(patientMedicationDataForReconcile);
			reconcileMedsList.remove(patientMedicationDataForReconcile);
			
			lastReconcileInfo=new ArrayList<String>();
			lastReconcileInfo.add(new ContextUtil().getLoggerFirstName()+" "+new ContextUtil().getLoggerLastName());
			lastReconcileInfo.add(new DateUtil().convertDateFormatUsingFormat(new DateUtil().getTodayDate(), MM_DD_YYYY_DATE_PATTERN));

			System.out.println(":::::::::::"+careTeamMemberListForReconcile.get(0));


		}
       
	}
	
	
	public void duplicatechangMEdTOCurrentMedicinforoverviewfilter()
	{
		logger.info("duplicatechangMEdTOCurrentMedicinforoverviewfilter::::::::::::");
		//reconsileMedsForPharmacyDataTableforoverview
		PatientMedicationData	patientMedicationDataForReconcile=(PatientMedicationData) getReconsileMedsDataTableforoverviewfilter().getRowData();
		System.out.println(":::med:"+patientMedicationDataForReconcile.getDrugs()+":getStrengths::"+patientMedicationDataForReconcile.getStrengths());
		System.out.println(patientMedicationDataList.size()+"::::::::::::drug id"+patientMedicationDataForReconcile.getDrugId()+"::::::::doctor"+patientMedicationDataForReconcile.getDoctorId());
		boolean check=false;
		for(PatientMedicationData pat:patientMedicationDataList)
		{
			//if(pat.getDrugs().equalsIgnoreCase(PatientMedicationDataForReconcile.getDrugs()))
			if(pat.getDrugId()==patientMedicationDataForReconcile.getDrugId())
				check=true;
		}
		if(check)
		{
			String msg=patientMedicationDataForReconcile.getDrugs()+"  is already on patient's active medication list";
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN,msg,"")); 
		}
		else
		{
			careTeamMemberListForReconcile.add(patientMedicationDataForReconcile.getDoctorId());
			
			System.out.println("ChangedMed Status::::::::::::::"+patientMedicationDataForReconcile.isCheckReconcileMedToCurrent());
			patientMedicationDataForReconcile.setCompliancePercentage(0);
			//patientMedicationDataForReconcile.setDoctorId(new ContextUtil().getLoginId());
			patientMedicationDataForReconcile.setStartDate(patientMedicationDataForReconcile.getStartDate());
			System.out.println("StartDate :::for reconcilemedicine adding into patientmedicationdatalist:"+patientMedicationDataForReconcile.getStartDate());
			patientMedicationDataForReconcile.setModifyDate(patientMedicationDataForReconcile.getStartDate());
			//User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
			patientMedicationDataForReconcile.setCauseOfAddMeds(RECONCILE_MEDS);
			patientMedicationDataForReconcile.setCheckReconcileMedToCurrent(true); 
			System.out.println("ChangedMed Status::::::::::::::"+patientMedicationDataForReconcile.isCheckReconcileMedToCurrent());
			patientMedicationDataForReconcile.setFlagForVisit(true);
			patientMedicationDataForReconcile.setChangeMedId(1);
			//patmedData.setPrescriberName(user.getUsername());
			patientMedicationDataForReconcile.setCheckMedsForEprescribe(false);

			patientMedicationDataForReconcile.setPatientId(new ContextUtil().getPatientId());
			patientMedicationDataForReconcile.setProviderId(new ContextUtil().getProviderId());
			patientMedicationDataForReconcile.setPrescriptionStatus(PRESCRIPITION_STATUS_CURRENT);
			patientMedicationDataForReconcile.setDataProvider("FDB");

			WSDrug wsdrug=new WSDrug();
			wsdrug=patientMedicineService.findDrugDetailAccordingToDrugId(patientMedicationDataForReconcile.getDrugId());
			//patMedData.setDrugNameId(findDrugNameIdAcordingToDrugId(patMedData.getDrugId()));
			patientMedicationDataForReconcile.setDrugNameId(wsdrug.getDrugNameId());
			if(wsdrug.getGenericName()==null)
				patientMedicationDataForReconcile.setGenericName(wsdrug.getDrugName());
			else
				patientMedicationDataForReconcile.setGenericName(wsdrug.getGenericName());
			
			patientMedicationDataForReconcile.setDosageForm(wsdrug.getDosageForm());
			patientMedicationDataForReconcile.setByRoute(wsdrug.getRoute());
			//patientMedicationDataForReconcile.setQuantity(wsdrug.getDose());
			System.out.println("unit for reconcile med::::::::::::"+wsdrug.getDose());

			patientMedicationDataList.add(patientMedicationDataForReconcile);
			
			
			
			if(patientMedicationDataForReconcile.getCauseOfAddMeds() == RECONCILE_MEDS)
		        	patientMedicationDataForReconcile.setCheckReconcileMedToCurrent(true);
			 else
				 patientMedicationDataForReconcile.setCheckReconcileMedToCurrent(false);
			 System.out.println("ChangedMed Status::::::::::::::after checking:::::::::::"+patientMedicationDataForReconcile.isCheckReconcileMedToCurrent());
			patientMedicineService.saveMedicineDetail(patientMedicationDataForReconcile);
			reconcileMedsList.remove(patientMedicationDataForReconcile);
			
			//copyOriginalPatientMedicationList=null;
			
			lastReconcileInfo=new ArrayList<String>();
			lastReconcileInfo.add(new ContextUtil().getLoggerFirstName()+" "+new ContextUtil().getLoggerLastName());
			lastReconcileInfo.add(new DateUtil().convertDateFormatUsingFormat(new DateUtil().getTodayDate(), MM_DD_YYYY_DATE_PATTERN));

			System.out.println(":::::::::::"+careTeamMemberListForReconcile.get(0));

			makeFilterPageRefreshData();
		}
       
	}
	/*
	 *add medicine on current meds in reconcile pop up......
	 *@author Gopal Krishna Jha 
	 * 
	 */
	public void changMEdTOCurrentMedicin()
	{
		logger.info("changMEdTOCurrentMedicin::::::::::::");

		PatientMedicationData	patientMedicationDataForReconcile=(PatientMedicationData) getReconsileMedsDataTable().getRowData();
		System.out.println(":::med:"+patientMedicationDataForReconcile.getDrugs()+":getStrengths::"+patientMedicationDataForReconcile.getStrengths());
		System.out.println("::::::::::::drug id"+patientMedicationDataForReconcile.getDrugId());
		boolean check=false;
		for(PatientMedicationData pat:patientMedicationDataList)
		{
			//if(pat.getDrugs().equalsIgnoreCase(PatientMedicationDataForReconcile.getDrugs()))
			if(pat.getDrugId()==patientMedicationDataForReconcile.getDrugId())
				check=true;
		}
		if(check)
		{
			String msg=patientMedicationDataForReconcile.getDrugs()+"  is already on patient's active medication list";
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN,msg,"")); 
		}
		else
		{
			careTeamMemberListForReconcile.add(patientMedicationDataForReconcile.getDoctorId());

			patientMedicationDataForReconcile.setCompliancePercentage(0);
			patientMedicationDataForReconcile.setDoctorId(new ContextUtil().getLoginId());
			patientMedicationDataForReconcile.setStartDate(new DateUtil().getTodayDate());
			patientMedicationDataForReconcile.setModifyDate(patientMedicationDataForReconcile.getStartDate());
			//User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
			patientMedicationDataForReconcile.setCauseOfAddMeds(RECONCILE_MEDS);
			patientMedicationDataForReconcile.setFlagForVisit(true);
			patientMedicationDataForReconcile.setChangeMedId(1);
			//patmedData.setPrescriberName(user.getUsername());
			patientMedicationDataForReconcile.setCheckMedsForEprescribe(false);

			patientMedicationDataForReconcile.setPatientId(new ContextUtil().getPatientId());
			patientMedicationDataForReconcile.setProviderId(new ContextUtil().getProviderId());
			patientMedicationDataForReconcile.setPrescriptionStatus(PRESCRIPITION_STATUS_PENDING);
			patientMedicationDataForReconcile.setDataProvider("FDB");

			WSDrug wsdrug=new WSDrug();
			wsdrug=patientMedicineService.findDrugDetailAccordingToDrugId(patientMedicationDataForReconcile.getDrugId());
			//patMedData.setDrugNameId(findDrugNameIdAcordingToDrugId(patMedData.getDrugId()));
			patientMedicationDataForReconcile.setDrugNameId(wsdrug.getDrugNameId());
			if(wsdrug.getGenericName()==null)
				patientMedicationDataForReconcile.setGenericName(wsdrug.getDrugName());
			else
				patientMedicationDataForReconcile.setGenericName(wsdrug.getGenericName());

			patientMedicationDataList.add(patientMedicationDataForReconcile);

			patientMedicineService.saveMedicineDetail(patientMedicationDataForReconcile);
			lastReconcileInfo=new ArrayList<String>();
			lastReconcileInfo.add(new ContextUtil().getLoggerFirstName()+" "+new ContextUtil().getLoggerLastName());
			lastReconcileInfo.add(new DateUtil().convertDateFormatUsingFormat(new DateUtil().getTodayDate(), MM_DD_YYYY_DATE_PATTERN));

			System.out.println(":::::::::::"+careTeamMemberListForReconcile.get(0));


		}

	}

	public String submitReconcile()
	{

		patientMedicationDataList=null;
		patientMedicationData=new PatientMedicationData();
		return "go_to_persionalizeMedReview";
	}

	/*
	 * add meds from pharmacy history to clinakos system
	 * @autor : Gopal Krishna jha
	 */
	public void changePharmacyHistoryTOCurrentMedicinforoverview()
	{
		logger.info("changePharmacyHistoryTOCurrentMedicin::::::::::::");
		PatientMedicationData	patientMedicationDataForReconcile=new PatientMedicationData();
		patientMedicationDataForReconcile=(PatientMedicationData) getReconsileMedsForPharmacyDataTableforoverview().getRowData();
		System.out.println(patientMedicationDataForReconcile.getDrugId()+":::med:"+patientMedicationDataForReconcile.getDrugs()+":::"+patientMedicationDataForReconcile.getStrengths());
		boolean check=false;
		for(PatientMedicationData pat:patientMedicationDataList)
		{
			//if(pat.getDrugs().equalsIgnoreCase(PatientMedicationDataForReconcile.getDrugs()))
			if(pat.getDrugId()==patientMedicationDataForReconcile.getDrugId())
				check=true;
		}
		if(check)
		{
			String msg=patientMedicationDataForReconcile.getDrugs()+"  is already on patient's active medication list";
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN,msg,"")); 
		}
		else
		{
			careTeamMemberListForReconcile.add(patientMedicationDataForReconcile.getDoctorId());
			patientMedicationDataForReconcile.setCompliancePercentage(0);
			//patientMedicationDataForReconcile.setDoctorId(new ContextUtil().getLoginId());
			//patientMedicationDataForReconcile.setStartDate(patientMedicationDataForReconcile.get);
			patientMedicationDataForReconcile.setModifyDate(new DateUtil().getTodayDate());
			//User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
			patientMedicationDataForReconcile.setMedicineStatus(RECONCILE_MEDS);
			
			//patientMedicationDataForReconcile.setCauseOfAddMeds(RECONCILE_MEDS);
			patientMedicationDataForReconcile.setCheckReconcileMedToCurrent(true); // 6/9/2014 ajay
			
			patientMedicationDataForReconcile.setChangeMedId(1);
			//patmedData.setPrescriberName(user.getUsername());
			patientMedicationDataForReconcile.setCheckMedsForEprescribe(false);
			patientMedicationDataForReconcile.setPatientId(new ContextUtil().getPatientId());
			patientMedicationDataForReconcile.setProviderId(new ContextUtil().getProviderId());
			patientMedicationDataForReconcile.setPrescriptionStatus(PRESCRIPITION_STATUS_CURRENT);
			patientMedicationDataForReconcile.setDataProvider("FDB");
			
			WSDrug wsdrug=new WSDrug();
			wsdrug=patientMedicineService.findDrugDetailAccordingToDrugId(patientMedicationDataForReconcile.getDrugId());
			//patMedData.setDrugNameId(findDrugNameIdAcordingToDrugId(patMedData.getDrugId()));
			patientMedicationDataForReconcile.setDrugNameId(wsdrug.getDrugNameId());
			if(wsdrug.getGenericName()==null)
				patientMedicationDataForReconcile.setGenericName(wsdrug.getDrugName());
			else
				patientMedicationDataForReconcile.setGenericName(wsdrug.getGenericName());
			
			patientMedicationDataForReconcile.setDosageForm(wsdrug.getDosageForm());
			patientMedicationDataForReconcile.setByRoute(wsdrug.getRoute());
			
			patientMedicationDataList.add(patientMedicationDataForReconcile);
			patientMedicationDataList=null;
			//addNewmedicationListForPatient.add(patientMedicationDataForReconcile);
			
			if(patientMedicationDataForReconcile.getMedicineStatus() == RECONCILE_MEDS)// 6/9/2014 ajay
			{
				System.out.println("check RECONCILE_MEDS meds for add :::::::"+patientMedicationDataForReconcile.getMedicineStatus());
	        	patientMedicationDataForReconcile.setCheckReconcileMedToCurrent(true);
			}
		 else
		 {
			 patientMedicationDataForReconcile.setCheckReconcileMedToCurrent(false);
		 }

			patientMedicineService.saveMedicineDetail(patientMedicationDataForReconcile);
			//added med  detail for visit summary
			pharmacyMedsMedsListForReconcile.remove(patientMedicationDataForReconcile);// 6/9/2014 ajay
			removeDuplicateModifyMedicationListForPatient.add(patientMedicationDataForReconcile);
			lastReconcileInfo=new ArrayList<String>();
			lastReconcileInfo.add(new ContextUtil().getLoggerFirstName()+" "+new ContextUtil().getLoggerLastName());
			lastReconcileInfo.add(new DateUtil().convertDateFormatUsingFormat(new DateUtil().getTodayDate(), MM_DD_YYYY_DATE_PATTERN));

			System.out.println(":::::::::::"+careTeamMemberListForReconcile.get(0));


		}

	}
	
	
	private List<PatientMedicationData>reconciledMeds;
	
	
	
	
	/**
	 * used in overViewFilter.jsf
	 * Transfer Pharmacy History to current medication Data table   
	 */
	public void duplicatechangePharmacyHistoryTOCurrentMedicinforoverviewfilter()
	{
		logger.info("changePharmacyHistoryTOCurrentMedicin::::::::::::");
	//	reconsileMedsForPharmacyDataTableforoverview
		PatientMedicationData	patientMedicationDataForReconcile=new PatientMedicationData();
		patientMedicationDataForReconcile=(PatientMedicationData) getReconsileMedsForPharmacyDataTableforoverviewfilter().getRowData(); // Get Data Of Selected Row data for Transfer from Pharmacy history  to current medication 
		System.out.println(patientMedicationDataForReconcile.getDrugId()+":::med:"+patientMedicationDataForReconcile.getDrugs()+":::"+patientMedicationDataForReconcile.getStrengths());
		boolean check=false;
		List<PharmacyDetail>pharmacyHistoryList=new ArrayList<PharmacyDetail>();
		
		for(PatientMedicationData pat:patientMedicationDataList)
		{
			//if(pat.getDrugs().equalsIgnoreCase(PatientMedicationDataForReconcile.getDrugs()))
			if(pat.getDrugId()==patientMedicationDataForReconcile.getDrugId())
				check=true;
		}
		if(check)
		{
			String msg=patientMedicationDataForReconcile.getDrugs()+"  is already on patient's active medication list";
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN,msg,"")); 
		}
		else
		{
			careTeamMemberListForReconcile.add(patientMedicationDataForReconcile.getDoctorId());
			patientMedicationDataForReconcile.setCompliancePercentage(0);
			//patientMedicationDataForReconcile.setDoctorId(new ContextUtil().getLoginId());
		
			//start : modified on 12 jan 2015
			//modified on 12 jan 2015 as per #1069 for reconcile meds it should be oldest date from pharmacy history 
			
			//			patientMedicationDataForReconcile.setStartDate(new DateUtil().getTodayDate());
			pharmacyHistoryList=patientMedicineService.findPharmacyDetailHistoryListAccordingToParticularDrugId(patientMedicationDataForReconcile.getDrugId(), new ContextUtil().getPatientId());
			//as pharmacy history list comes in decreasing order of purchase date
			//then oldest date should be taken as prescription date/start date when patient actually taking medicine
			logger.info("PharmacyDetail history  size "+pharmacyHistoryList.size()+"==>for drug "+patientMedicationDataForReconcile.getDrugId());
			if(pharmacyHistoryList!=null){
			if(!(pharmacyHistoryList.isEmpty()) || (pharmacyHistoryList.size()>0)){
					logger.info("date of purachase of oldest date from pharmacy history "+pharmacyHistoryList.get(pharmacyHistoryList.size()-1).getDateOfPurchase());
					patientMedicationDataForReconcile.setLastFillDate(pharmacyHistoryList.get(pharmacyHistoryList.size()-1).getDateOfPurchase());
					patientMedicationDataForReconcile.setStartDate(pharmacyHistoryList.get(0).getDateOfPurchase());
			}
			}
		
			//ends: modification on 12 jan 2015 here
			
			patientMedicationDataForReconcile.setModifyDate(new DateUtil().getTodayDate());
			//User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
			patientMedicationDataForReconcile.setCauseOfAddMeds(RECONCILE_MEDS);
			patientMedicationDataForReconcile.setFlagForVisit(true);
			System.out.println("medicine status :::::"+patientMedicationDataForReconcile.getCauseOfAddMeds());
			patientMedicationDataForReconcile.setCheckReconcileMedToCurrent(true); 
			System.out.println("setCheckReconcileMedToCurrentForPharma:::::"+patientMedicationDataForReconcile.isCheckReconcileMedToCurrent());
			patientMedicationDataForReconcile.setChangeMedId(1);
			//patmedData.setPrescriberName(user.getUsername());
			patientMedicationDataForReconcile.setCheckMedsForEprescribe(false);
			patientMedicationDataForReconcile.setPatientId(new ContextUtil().getPatientId());
			patientMedicationDataForReconcile.setProviderId(new ContextUtil().getProviderId());
			patientMedicationDataForReconcile.setPrescriptionStatus(PRESCRIPITION_STATUS_CURRENT);
			patientMedicationDataForReconcile.setDataProvider("FDB");
			
			WSDrug wsdrug=new WSDrug();
			wsdrug=patientMedicineService.getWSdrugObj(patientMedicationDataForReconcile.getDataProvider(),patientMedicationDataForReconcile.getDrugId(),patientMedicationDataForReconcile.getDrugNameId());
			//patMedData.setDrugNameId(findDrugNameIdAcordingToDrugId(patMedData.getDrugId()));
			patientMedicationDataForReconcile.setDrugNameId(wsdrug.getDrugNameId());
			if(wsdrug.getGenericName()==null)
				patientMedicationDataForReconcile.setGenericName(wsdrug.getDrugName());
			else
				patientMedicationDataForReconcile.setGenericName(wsdrug.getGenericName());
			
			patientMedicationDataForReconcile.setDosageForm(wsdrug.getDosageForm());
			patientMedicationDataForReconcile.setByRoute(wsdrug.getRoute());
			patientMedicationDataForReconcile.setTherapeuticCategory(wsdrug.getTherapeuticCategory());
			patientMedicationDataForReconcile.setDrugCategory(wsdrug.getDrugCategory());
			
		   patientMedicationDataList.add(patientMedicationDataForReconcile);
			
			
			addNewmedicationListForPatient.add(patientMedicationDataForReconcile);
			

			/*patientMedicineService.saveMedicineDetail(patientMedicationDataForReconcile);
			try{
			patientMedicineService.saveReconcileInfo(patientMedicationDataForReconcile);
			}catch(Exception e){
				e.printStackTrace();
			}*/
			pharmacyMedsMedsListForReconcile.remove(patientMedicationDataForReconcile);
			
			reconciledMeds.add(patientMedicationDataForReconcile);
			
			//added med  detail for visit summary
			removeDuplicateModifyMedicationListForPatient.add(patientMedicationDataForReconcile);
	
			//resetReconcileInfo();

			System.out.println(":::::::::::"+careTeamMemberListForReconcile.get(0));
		
			

		}

	}

	/*
	 * add medicine Pharmacy History to current medicine
	 * @author: Gopal Krishna Jha
	 */


	public void changePharmacyHistoryTOCurrentMedicin()
	{
		logger.info("changePharmacyHistoryTOCurrentMedicin::::::::::::");
		PatientMedicationData	patientMedicationDataForReconcile=new PatientMedicationData();
		patientMedicationDataForReconcile=(PatientMedicationData) getReconsileMedsForPharmacyDataTable().getRowData();
		System.out.println(patientMedicationDataForReconcile.getDrugId()+":::med:"+patientMedicationDataForReconcile.getDrugs()+":::"+patientMedicationDataForReconcile.getStrengths());
		boolean check=false;
		for(PatientMedicationData pat:patientMedicationDataList)
		{
			//if(pat.getDrugs().equalsIgnoreCase(PatientMedicationDataForReconcile.getDrugs()))
			if(pat.getDrugId()==patientMedicationDataForReconcile.getDrugId())
				check=true;
		}
		if(check)
		{
			String msg=patientMedicationDataForReconcile.getDrugs()+"  is already on patient's active medication list";
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN,msg,"")); 
		}
		else
		{
			careTeamMemberListForReconcile.add(patientMedicationDataForReconcile.getDoctorId());
			patientMedicationDataForReconcile.setCompliancePercentage(0);
			patientMedicationDataForReconcile.setDoctorId(new ContextUtil().getLoginId());
			patientMedicationDataForReconcile.setStartDate(new DateUtil().getTodayDate());
			patientMedicationDataForReconcile.setModifyDate(patientMedicationDataForReconcile.getStartDate());
			//User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
			patientMedicationDataForReconcile.setMedicineStatus(RECONCILE_MEDS);
			patientMedicationDataForReconcile.setChangeMedId(1);
			//patmedData.setPrescriberName(user.getUsername());
			patientMedicationDataForReconcile.setCheckMedsForEprescribe(false);
			patientMedicationDataForReconcile.setPatientId(new ContextUtil().getPatientId());
			patientMedicationDataForReconcile.setProviderId(new ContextUtil().getProviderId());
			patientMedicationDataForReconcile.setPrescriptionStatus("C");
			patientMedicationDataForReconcile.setDataProvider("FDB");

			patientMedicationDataList.add(patientMedicationDataForReconcile);
			patientMedicationDataList=null;
			
			addNewmedicationListForPatient.add(patientMedicationDataForReconcile);

			//added med  detail for visit summary
			removeDuplicateModifyMedicationListForPatient.add(patientMedicationDataForReconcile);

			//ChangemedicineNAme
			//System.out.println("::::::::::::::::size ::::::::>>>"+patientMedicationDataList.size());

			//set reconsile date..
			//setLastReconcileDate(new DateUtil().convertDateFormatUsingFormat(new Date(), MM_DD_YYYY_DATE_PATTERN));
			lastReconcileInfo=new ArrayList<String>();
			lastReconcileInfo.add(new ContextUtil().getLoggerFirstName()+" "+new ContextUtil().getLoggerLastName());
			lastReconcileInfo.add(new DateUtil().convertDateFormatUsingFormat(new DateUtil().getTodayDate(), MM_DD_YYYY_DATE_PATTERN));

			System.out.println(":::::::::::"+careTeamMemberListForReconcile.get(0));


		}

	}


	List<PatientFullMedHistoryV6>patientFullDrugDetailListByWebservices=new ArrayList<PatientFullMedHistoryV6>();

	/*
	 * Fetching patient full medication data History from web services
	 * @author: Gopal Krishna jha
	 */
	public List<PatientFullMedHistoryV6> getPatientFullDrugDetailListByWebservices() throws Exception {
		logger.info("::::::::getPatientFullDrugDetailListByWebservices in bean:::::"+patientFullDrugDetailListByWebservices.isEmpty());
		if(patientFullDrugDetailListByWebservices.isEmpty())
		{
			/*String prescriptionArchiveStatus="%";*/
			String prescriptionArchiveStatus="N";

			FacesContext context = FacesContext	.getCurrentInstance();
			NcUpdate1WSBean update1ServiceClient=(NcUpdate1WSBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"update1ServiceClient");
			//List<PatientDrugDetail5>PatientDrugDetailListByWebservices=new ArrayList<PatientDrugDetail5>();
			int timePeriod=-90;
			//if(timeFrameForReconcile==null)
			//timePeriod=1;
			//else
			//timePeriod=Integer.parseInt(timeFrameForReconcile);
			//timePeriod=timePeriod*30;
			Date startDate,endDate;
			//startDate=new Date();
			startDate=new DateUtil().AddDate(new DateUtil().getTodayDate(), 1);
			endDate=new DateUtil().AddDate(startDate, timePeriod);
			//FacesContext context = FacesContext .getCurrentInstance();
			System.out.println(":::::::::::::::::::::::stare date:<><::::"+startDate+"::::::endDate:::::::::+"+endDate);
			UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");

			patientFullDrugDetailListByWebservices=update1ServiceClient.getPatientFullMedHistoryV6UsingDomParser(prescriptionArchiveStatus,startDate,endDate,userManageBean.getProviderLocation());
			//patientFullDrugDetailListByWebservices=update1ServiceClient.callFullMedicationHistoryServices(prescriptionArchiveStatus,startDate,endDate,userManageBean.getProviderLocation());
			System.out.println(":::::::::::::::::>>>>>>>>>>"+patientFullDrugDetailListByWebservices.size());

		}
		return patientFullDrugDetailListByWebservices;

	}

	/**
	 * Method for Reconsile 
	 * @param prescriptionArchiveStatus
	 * @return
	 * @throws Exception
	 */
	public List<PatientFullMedHistoryV6> getPatientFullDrugDetailListByWebservices(String prescriptionArchiveStatus) throws Exception {
		System.out.println("prescriptionArchiveStatus in pat med bean "+prescriptionArchiveStatus);

		/*if(patientFullDrugDetailListByWebservices.isEmpty()) 
			{*/
		/*String prescriptionArchiveStatus="%";*/


		FacesContext context = FacesContext	.getCurrentInstance();
		NcUpdate1WSBean update1ServiceClient=(NcUpdate1WSBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"update1ServiceClient");
		//List<PatientDrugDetail5>PatientDrugDetailListByWebservices=new ArrayList<PatientDrugDetail5>();
		int timePeriod=-90;
		//if(timeFrameForReconcile==null)
		//timePeriod=1;
		//else
		//timePeriod=Integer.parseInt(timeFrameForReconcile);
		//timePeriod=timePeriod*30;
		Date startDate,endDate;
		//startDate=new Date();
		startDate=new DateUtil().AddDate(new DateUtil().getTodayDate(), 1);
		endDate=new DateUtil().AddDate(startDate, timePeriod);
		//FacesContext context = FacesContext .getCurrentInstance();
		System.out.println(":::::::::::::::::::::::stare date:<><::::"+startDate+"::::::endDate:::::::::+"+endDate);
		UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");

		patientFullDrugDetailListByWebservices=update1ServiceClient.getPatientFullMedHistoryV6UsingDomParser(prescriptionArchiveStatus,startDate,endDate,userManageBean.getProviderLocation());
		//patientFullDrugDetailListByWebservices=update1ServiceClient.callFullMedicationHistoryServices(prescriptionArchiveStatus,startDate,endDate,userManageBean.getProviderLocation());
		System.out.println(":::::::::::::::::>>>>>>>>>>"+patientFullDrugDetailListByWebservices.size());

		/*}*/
		return patientFullDrugDetailListByWebservices;
	}

	public void setPatientFullDrugDetailListByWebservices(
			List<PatientFullMedHistoryV6> patientFullDrugDetailListByWebservices) {
		this.patientFullDrugDetailListByWebservices = patientFullDrugDetailListByWebservices;
	}
	public void changeTimeFrameForMedHistory() throws Exception
	{
		logger.info("changeTimeFrameForMedHistory::::::::::::::::");
		
		goToMedHistory();
	}
	
	public void changeTimeFrameForPharmacyHistory()
	{
		logger.info("changeTimeFrameForPharmacyHistory::::::::::::::::+++++++++");
		pharmacyMedsMedsListForReconcile=new ArrayList<PatientMedicationData>();
		goToPharmacyHistory();
	}
	public void changeTimeFrameToreconcile() throws Exception
	{
		logger.info("changeTimeFrameToreconcile:::time :::"+timeFrameForReconcile);
		showReconcileMeds();
	}

	/*
	 * used in overViewFilter.jsf
	 * show Reconcile Medicine when click on reconcile button per patient..
	 * @author: Gopal Krishna Jha
	 */
	
	public void showReconcileMeds() 
	{
		logger.info("showReconcileMeds ::::");
		try{
		reconciledMeds=new ArrayList<PatientMedicationData>();//Added By Nagaraj on 02/MAR/2015 as per #1094
		patientMedicationDataList=null;
		pharmacyMedsMedsListForReconcile=new ArrayList<PatientMedicationData>();
		getPatientMedicationDataList();
		goToPharmacyHistory();
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	/*public void showReconcileMeds() throws Exception
	{
		.
		List<PatientMedicationData>duplicateReconcileList=new ArrayList<PatientMedicationData>();
		logger.info("showReconcileMeds method start.."+timeFrameForReconcile);
		logger.info("list size::::::::::::::::"+getPatientFullDrugDetailListByWebservices().size());
		String archiveStatus="%"; //Added By Anjani
		reconcileMedsList=new ArrayList<PatientMedicationData>();
		int timePeriod;
		if(timeFrameForReconcile==null)
		{
			timePeriod=1;

			System.out.println("timeFrameForReconcile:::::"+timePeriod);
		}
		else
			timePeriod=Integer.parseInt(timeFrameForReconcile);
		timePeriod=timePeriod*-30;
		Date startDate,endDate;
		startDate=new DateUtil().AddDate(new DateUtil().getTodayDate(), 1);
		endDate=new DateUtil().AddDate(startDate, timePeriod);

		System.out.println(timePeriod+"start date for reconcile:::"+startDate+":::::::::endDate::::::"+endDate);
		

		getPatientFullDrugDetailListByWebservices(archiveStatus);
		logger.info("size of drug list return by webservices"+getPatientFullDrugDetailListByWebservices().size());

		for(PatientFullMedHistoryV6 patientDrugDetail5:getPatientFullDrugDetailListByWebservices())
		{
			System.out.println("::::::::::::::::: "+patientDrugDetail5.getPhysicianName());
			//if(patientDrugDetail5)
			if(!patientDrugDetail5.getPhysicianName().equalsIgnoreCase("NOT SENT"))
			{
				System.out.println("********************************************************************");
				System.out.println(":::getAccountName::"+patientDrugDetail5.getAccountName());
				System.out.println(":::ArchiveStatus::"+patientDrugDetail5.getArchiveStatus());
				System.out.println(":::getDateMovedToPreviousMedications::"+patientDrugDetail5.getDateMovedToPreviousMedications());
				System.out.println(":::DispenseAsWritten::"+patientDrugDetail5.getDispenseAsWritten());

				System.out.println(":::getDosageForm::"+patientDrugDetail5.getDosageForm());
				System.out.println(":::getDosageNumberDescription::"+patientDrugDetail5.getDosageNumberDescription());
				System.out.println(":::getDosageFrequencyDescription::"+patientDrugDetail5.getDosageFrequencyDescription());
				System.out.println(":::getDrugID::"+patientDrugDetail5.getDrugID());
				System.out.println(":::getDrugID::"+patientDrugDetail5.getDrugTypeID());
				System.out.println(":::getDrugName::"+patientDrugDetail5.getDrugName());

				System.out.println(":::getEncounterIdentifier::"+patientDrugDetail5.getEncounterIdentifier());
				System.out.println(":::getEpisodeIdentifier::"+patientDrugDetail5.getEpisodeIdentifier());
				System.out.println(":::getExternalAccountID::"+patientDrugDetail5.getExternalAccountID());
				System.out.println(":::getExternalPatientID::"+patientDrugDetail5.getExternalPatientID());
				System.out.println(":::getExternalPhysicianID::"+patientDrugDetail5.getExternalPhysicianID());
				System.out.println(":::getExternalPrescriptionID::"+patientDrugDetail5.getExternalPrescriptionID());
				System.out.println(":::getExternalSource::"+patientDrugDetail5.getExternalSource());
				//System.out.println(":::getExternalDrugOverride::"+patientDrugDetail5.getExternalDrugOverride());
				System.out.println(":::getEpisodeIdentifier::"+patientDrugDetail5.getEpisodeIdentifier());

				//System.out.println(":::getFormularyCoverage::"+patientDrugDetail5.getFormularyCoverage());
				//System.out.println(":::getFormularyStatus::"+patientDrugDetail5.getFormularyStatus());
				System.out.println(":::getFullName::"+patientDrugDetail5.getFullName());

				//System.out.println(":::getHealthPlanID::"+patientDrugDetail5.getHealthPlanID());
				//System.out.println(":::getHealthplanTypeID::"+patientDrugDetail5.getHealthplanTypeID());
				//System.out.println(":::getOrderGuid::"+patientDrugDetail5.getOrderGuid());

				System.out.println(":::getPatientID::"+patientDrugDetail5.getPatientID());
				System.out.println(":::getHealthplanTypeID::"+patientDrugDetail5.getPatientIDType());
				System.out.println(":::getPhysicianName::"+patientDrugDetail5.getPhysicianName());
				System.out.println(":::getPrescriptionDate::"+patientDrugDetail5.getPrescriptionDate());
				System.out.println(":::getPrescriptionGuid::"+patientDrugDetail5.getPrescriptionGuid());
				System.out.println(":::getPrescriptionNotes::"+patientDrugDetail5.getPrescriptionNotes());


				System.out.println(":::getRefills::"+patientDrugDetail5.getRefills());
				System.out.println(":::getRoute::"+patientDrugDetail5.getRoute());
				System.out.println(":::getSiteID::"+patientDrugDetail5.getSiteID());
				System.out.println(":::getStatus::"+patientDrugDetail5.getStatus());
				System.out.println(":::getStrength::"+patientDrugDetail5.getStrength());
				System.out.println(":::getStrengthUOM::"+patientDrugDetail5.getStrengthUOM());

				System.out.println(":::getSubStatus::"+patientDrugDetail5.getSubStatus());
				System.out.println(":::getTakeAsNeeded::"+patientDrugDetail5.getTakeAsNeeded());


              
				

				PatientMedicationData patMedData=new PatientMedicationData();
				patMedData.setPatientId(new ContextUtil().getPatientId());
				//patMedData.setStartDate(formatter.parse(patientDrugDetail5.getPrescriptionDate()));
				patMedData.setProviderId(new ContextUtil().getProviderId());
				//patMedData.setDoctorId(new ContextUtil().getLoginId());
				patMedData.setDrugs(patientDrugDetail5.getDrugName());
				patMedData.setDataProvider("FDB");
				patMedData.setUnit(patientDrugDetail5.getDosageNumberDescription());
				patMedData.setDosageForm(patientDrugDetail5.getDosageForm());
				//patMedData.setStartDate(patientDrugDetail5.getPrescriptionDate());
				patMedData.setStrengths(patientDrugDetail5.getStrength()+" "+patientDrugDetail5.getStrengthUOM());
				patMedData.setPrescriberName(patientDrugDetail5.getPhysicianName().trim());
				
				//commented by gopal..
				if(patientDrugDetail5.getPrescriptionNotes().isEmpty())
					patMedData.setDirections(patientDrugDetail5.getDosageFrequencyDescription());
				else
					patMedData.setDirections(patientDrugDetail5.getPrescriptionNotes());

				patMedData.setDirections(patientDrugDetail5.getDosageFrequencyDescription());
				//patMedData.setDirections(patientDrugDetail5.getPrescriptionNotes());
				patMedData.setQuantity(patientDrugDetail5.getDispense());
				//.setStartDate(new DateUtil().convertStringToDateFormat(patientAllergyFromNewCrop.getRecordedDate(),DATE_PATTERN));


				String modifiedDateFormat=changeGMTFormatForCompare(patientDrugDetail5.getPrescriptionDate());
				patMedData.setStartDate(new DateUtil().convertStringToDateFormatToCurrentTimeZone(modifiedDateFormat,"yyyy-MM-dd'T'HH:mm:ss"));

				//patMedData.setStartDate(new DateUtil().convertStringToDateFormat(patientDrugDetail5.getPrescriptionDate(),DATE_PATTERN));

				patMedData.setDrugId(Double.parseDouble(patientDrugDetail5.getDrugID()));

				if(patientDrugDetail5.getExternalPhysicianID().equalsIgnoreCase("DEMOLP1"))
					patientDrugDetail5.setExternalPhysicianID("9");

				//patMedData.setDoctorId(Integer.parseInt(patientDrugDetail5.getExternalPhysicianID()));


				reconcileMedsList.add(patMedData);
				duplicateReconcileList.add(patMedData);
				//	}
					
					
				}
			}
			Collections.sort(duplicateReconcileList,PatientMedicationData.dateComparator);
			reconcileMedsList=new ArrayList<PatientMedicationData>();
			for(PatientMedicationData patientMedicationData:duplicateReconcileList){
				if(!reconcileMedsList.contains(patientMedicationData)){
					reconcileMedsList.add(patientMedicationData);
					
				}
			}
			
		

		logger.info("end show reconcle meds:::size "+reconcileMedsList.size()+"duplicate list size "+duplicateReconcileList.size());
		//	}
	}*/


	public List<PatientMedicationData> getReconcileMedsList() {
		return reconcileMedsList;
	}

	public void setReconcileMedsList(List<PatientMedicationData> reconcileMedsList) {
		this.reconcileMedsList = reconcileMedsList;
	}

	/*
	 * save all detail of pharmacotherapy clinic after click on save in visit summary
	 * @author:Gopal krishna jha
	 */
	public void saveAllDetailOfMedActionPlan()
	{
		logger.info("saveAllDetailOfMedActionPlan method:::in bean");

	}
	public String submitCancelButtonForVisitSummary()
	{
		//setShowPatientEducation(null);
		//setShowPatientNotes(null);
		return "go_to_visitSummary_page";
	}



	/*
	 * find medicine history list for anticoag
	 */
	//medicineHistoryForAnticoag
	public List<PatientMedicationHistory> getMedicineHistoryForAnticoag() {
		if(medicineHistoryForAnticoag.isEmpty())
		{
			medicineHistoryForAnticoag=patientMedicineService.findMedicineHistoryForAnticoag(new ContextUtil().getPatientId());
		}
		return medicineHistoryForAnticoag;
	}

	public void setMedicineHistoryForAnticoag(
			List<PatientMedicationHistory> medicineHistoryForAnticoag) {
		this.medicineHistoryForAnticoag = medicineHistoryForAnticoag;
	}


	private VisitHistory visitHistory=new VisitHistory();
	private List<PatientMedicationData>patientMedicationVirtualPillBox=null;//new ArrayList<PatientMedicationData>();


	/*
	 * FINDING ALL VALUE which is required for dose calculator...
	 * @author: Gopal Krishna jha..
	 */

	public void findWarfarinDoseCalculator() {
		logger.info("*************** findWarfarinDoseCalculator start::::");
		PatientVital patientDetails=new PatientVital();
		patientDetails=patientMedicineService.findPatientDetail(new ContextUtil().getPatientId());
		//finding age 
		Map<String, String> params = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();
		//patientMedicationData.setDrugName(params.get("drugName"));
		int age=Integer.parseInt(params.get("patientAge"));
		//int age = 10;
		calculator.setAge(Integer.parseInt(params.get("patientAge")));
		System.out.println(":::::::::::::::::>>>>>>>>>>>>>>>>>>>>age==="+age);
		//convert height into double 
		String inHeight=patientDetails.getHeight();
		double doubleInHeight=Double.parseDouble(inHeight);

		calculator.setHeight(Math.round(doubleInHeight*30.48)*100/(double)100);
		calculator.setWeight(patientDetails.getWeight());
		//finding race..
		System.out.println("getRace details:::::::"+patientDetails.getRace());

		if (!(patientDetails.getRace()==null))
		{
			if(patientDetails.getRace().equalsIgnoreCase(ASIAN))
				calculator.setRace(A);
			if(patientDetails.getRace().equalsIgnoreCase(BLACK) || patientDetails.getRace().equalsIgnoreCase(AFRICAN_AMERICAN))
				calculator.setRace(B);
			if(patientDetails.getRace().equalsIgnoreCase(WHITE) || patientDetails.getRace().equalsIgnoreCase(CAUCASIAN))
				calculator.setRace(C);
		}
		else
			calculator.setRace(U);
		//System.out.println(":::height:::"+calculator.getHeight()+":::"+calculator.getWeight()+":::"+calculator.getRace());

		//System.out.println("::::::::size:::"+lab.getPharmacogenomicsUserSummaryList().size());
		List<PharmacogenomicsUserSummary> pharmacogenomicsUserSummaryListForCalculation=patientMedicineService.getPharmacogenomicsUserSummaryList(new ContextUtil().getPatientId());
		//for checking vkorc1Genotype...........
		List<String>vkorGenoType=new ArrayList<String>();
		List<String>CYP2C9GenoType=new ArrayList<String>();
		//THIS IS DUMMY DATA WE HAVE TO TAKE VALUE EITHER FROM DB OR PROPERTIES FILE IN FUTURE..
		vkorGenoType.add("A/G");
		vkorGenoType.add("A/A");

		CYP2C9GenoType.add("*1/*2");
		CYP2C9GenoType.add("*1/*3");
		CYP2C9GenoType.add("*2/*2");
		CYP2C9GenoType.add("*2/*3");
		CYP2C9GenoType.add("*3/*3");
		String vkorGenoTypeValue="";
		String CYP2C9GenoTypeValue="";
		for(PharmacogenomicsUserSummary pharmacogenomicsUserSummary:pharmacogenomicsUserSummaryListForCalculation)
		{
			//String abc=findVkorType(pharmacogenomicsUserSummary.getGenoType(),vkorGenoType);
			//System.out.println("::::::"+pharmacogenomicsUserSummary.getVkorGenoType()+"::::genotype::"+pharmacogenomicsUserSummary.getGenoType());
			for(String str:vkorGenoType)
			{
				if(str.equalsIgnoreCase(pharmacogenomicsUserSummary.getVkorGenoType()))
					vkorGenoTypeValue=pharmacogenomicsUserSummary.getVkorGenoType();
			}

			for(String str:CYP2C9GenoType)
			{
				if(str.equalsIgnoreCase(pharmacogenomicsUserSummary.getGenoType()))
					CYP2C9GenoTypeValue=pharmacogenomicsUserSummary.getGenoType();
			}
		}

		if(vkorGenoTypeValue.equals(""))
			vkorGenoTypeValue=U;

		if(CYP2C9GenoTypeValue.equals(""))
			CYP2C9GenoTypeValue=U;
		calculator.setVkorc1Genotype(vkorGenoTypeValue);
		calculator.setCyp2cGenotype(CYP2C9GenoTypeValue);
		//System.out.println(":::::::::::::::>>>>>>>>>>>>"+calculator.getVkorc1Genotype()+"::::::::"+calculator.getCyp2cGenotype());
		List<String> enzimeInduceList = new ArrayList<String>();
		//THIS IS DUMMY DATA WE HAVE TO TAKE VALUE EITHER FROM DB OR PROPERTIES FILE IN FUTURE..
		enzimeInduceList.add("carbamazepine");
		enzimeInduceList.add("phenytoin");
		enzimeInduceList.add("rifampin");
		enzimeInduceList.add("rifampicin,");

		String amiodaroneMed="amiodarone";
		for(PatientMedicationData pat:patientMedicationDataList)
		{
			//System.out.println("enzyme::::"+pat.getDrugs());
			for(String str:enzimeInduceList)
			{
				//System.out.println("pat.getDrugs():::::"+str);
				if(str.equalsIgnoreCase(pat.getDrugs()))
					calculator.setTakingEnzimeInduce(Y);
				//System.out.println("pat.getDrugs()LLLL:::::"+calculator.getTakingEnzimeInduce());
			}

			if(pat.getDrugs().equalsIgnoreCase(amiodaroneMed))
				calculator.setTakingAmiodarone(Y);
		}
		//System.out.println("::::"+calculator.getTakingAmiodarone()+"::::::::"+calculator.getTakingEnzimeInduce());
		warfarinDoseCalculator(calculator);
	}

	/**
	 * Warfarin Dose Calculator
	 * @author: Gopal Krishna jha
	 * @param calculator
	 */
	private void warfarinDoseCalculator(Calculator calculator) {
		double doseCalculation=5.6044;
		//int age=60;
		doseCalculation=doseCalculation-((calculator.getAge()/10)+1)*0.2614;
		doseCalculation=doseCalculation +calculator.getHeight()*0.0087 + calculator.getWeight()*0.0128;
		//if(calculator.getVkorc1Genotype().equalsIgnoreCase("A/G") || calculator.getVkorc1Genotype().equalsIgnoreCase("A/A"))
		if(calculator.getVkorc1Genotype().equalsIgnoreCase(U))
			doseCalculation=doseCalculation -0.4854;

		if(calculator.getCyp2cGenotype().equalsIgnoreCase(U))
			doseCalculation=doseCalculation -0.2188;
		if(calculator.getRace().equalsIgnoreCase(A))
			doseCalculation=doseCalculation -0.1092;
		if(calculator.getTakingEnzimeInduce().equalsIgnoreCase(Y))
			doseCalculation=doseCalculation+1.1816;

		if(calculator.getTakingAmiodarone().equalsIgnoreCase(Y))
			doseCalculation=doseCalculation-0.5503;
		//System.out.println(":::::::::::::::doseCalculation:::"+doseCalculation);

		setWeekStatus((int)Math.round((doseCalculation*doseCalculation/7) * 100)/(double)100);

	}
	/*
	 * ITS CALLING WHEN YOU WANT TO RECALCULATE THE DOSE CALCULATOR...
	 * @AUTHOR: GOPAL KRISHNA JHA 
	 */
	public void calculation(){
		//logger.info("calculation getHeight:::"+calculator.getHeight()+"::getWeight::"+calculator.getWeight()+":getVkorc1Genotype::"+calculator.getVkorc1Genotype());
		//logger.info("getRace:::"+calculator.getRace()+":getTakingEnzimeInduce:::"+calculator.getTakingEnzimeInduce()+":getTakingAmiodarone:"+calculator.getTakingAmiodarone());
		warfarinDoseCalculator(calculator);
	}



	public  List<String> getRegimenList() {
		if(regimenList.isEmpty())
		{
			logger.info("inside regimen getter:::");
			regimenList=patientMedicineService.findRegimenList();
		}
		return regimenList;
	}

	public static void setRegimenList(List<String> regimenList) {
		PatientMedicineManageBean.regimenList = regimenList;
	}

	/*
	 * find visit History of particular patient according to 
	 * @author:Gopal Krishna jha 
	 */
	public VisitHistory getVisitHistory() {
		if(visitHistory.getId()==0)
		{
			ContextUtil ctx=new ContextUtil();
			visitHistory=patientMedicineService.findVisitHistory(ctx.getPatientId(),ctx.getClinicProviderId(),ctx.getLoginId());
		}
		return visitHistory;
	}

	public void setVisitHistory(VisitHistory visitHistory) {
		this.visitHistory = visitHistory;
	}




	/**
	 * @return the tabValue
	 */
	public Integer getTabValue() {
		return tabValue;
	}

	/**
	 * @param tabValue the tabValue to set
	 */
	public void setTabValue(Integer tabValue) {
		this.tabValue = tabValue;
	}


	public void changeTabValue() {
		setTabValue(2);
		//System.out.println("value of tabValue===="+getTabValue());
	}

	/*	public List<String> getAmiodaroneMedList() {
			return amiodaroneMedList;
		}

		public void setAmiodaroneMedList(List<String> amiodaroneMedList) {
			this.amiodaroneMedList = amiodaroneMedList;
		}*/

	public List<PatientMedicationData> getAddNewmedicationListForPatient() {
		return addNewmedicationListForPatient;
	}

	public void setAddNewmedicationListForPatient(
			List<PatientMedicationData> addNewmedicationListForPatient) {
		this.addNewmedicationListForPatient = addNewmedicationListForPatient;
	}
	public Calculator getCalculator() {
		return calculator;
	}
	public void setCalculator(Calculator calculator) {
		this.calculator = calculator;
	}

	/**
	 * @return the medicineReminderList
	 */
	public List<PatientMedicationData> getMedicineReminderList() {
		if (medicineReminderList==null) {
			medicineReminderList=new ArrayList<PatientMedicationData>();
			//-----------------------------------method to find medicine reminder for patient
			getSigCodeList();
			getMedicationListForPatient(new ContextUtil().getLoginId());
			medicineReminderList=patientMedicineService.findRemindersForMedicine(new ContextUtil().getLoginId(),sigCodeList,medicationListForPatient);
		}
		for(PatientMedicationData patMed:medicineReminderList){
			System.out.println("Drugs Name :"+patMed.getDrugs()+"Pharmacy Name "+patMed.getPharmacyName()+"Next day of refills :::::::::"+patMed.getDateOfNextReffil());
		}
		return medicineReminderList;
	}


	/**
	 * @param medicineReminderList the medicineReminderList to set
	 */
	public void setMedicineReminderList(
			List<PatientMedicationData> medicineReminderList) {
		this.medicineReminderList = medicineReminderList;
	}
	/**
	 * @return the mymedicationList
	 */
	public List<MedActionPlan> getMymedicationList() {
		if (mymedicationList==null) {
			mymedicationList=new ArrayList<MedActionPlan>();
			//--------------------Method to find my medication goal
			mymedicationList=patientMedicineService.findMyMedicationGoal(new ContextUtil().getLoginId());
		}
		return mymedicationList;
	}
	/**
	 * @param mymedicationList the mymedicationList to set
	 */
	public void setMymedicationList(List<MedActionPlan> mymedicationList) {
		this.mymedicationList = mymedicationList;
	}
	/*
	 * find the virtual pill box  image detail  according to sig(direction detail list)
	 * @author:Gopal Krishna Jha..
	 * @return List of Patient Medication Data 
	 * @throws FileNotFoundException
	 */
	public List<PatientMedicationData> getPatientMedicationVirtualPillBox() throws FileNotFoundException {
		logger.info("::::getPatientMedicationVirtualPillBox:::::::");
		if(patientMedicationVirtualPillBox==null)
		{
			
			getMedicationListForPatient(new ContextUtil().getLoginId());
			getSigCodeList();
			
			
			patientMedicationVirtualPillBox=medicationListForPatient;
			for(PatientMedicationData pat:patientMedicationVirtualPillBox)
			{
				pat =findvirtualPillBoxDetail(sigCodeList,pat); // Get patientMedicationData based on sigCodeList and patient Medication Data  
			}

		}
		

		return patientMedicationVirtualPillBox;
	}
	/*
	 * find the virtual pill box detail according to sig(direction detail list)
	 * @author:Gopal Krishna Jha..
	 * @param sigCodeList
	 * @param patientMedicationData 
	 * @return PatientMedicationData 
	 */
	private PatientMedicationData findvirtualPillBoxDetail(List<SigCode> sigCodeList, PatientMedicationData pat) {
		logger.info("findvirtualPillBoxDetail in bean::::"+pat.getDirections()+"::::");
		for(SigCode sigCode:sigCodeList)
		{
			if(sigCode.getSigCode().equals(pat.getDirections()))
			{
				if(sigCode.isMorning())
					pat.setMorning(pat.getImageName()+IMAGE_EEXTENSION);
				if(sigCode.isNoon())
					pat.setAfternoon(pat.getImageName()+IMAGE_EEXTENSION);
				if(sigCode.isEvening())
					pat.setEvening(pat.getImageName()+IMAGE_EEXTENSION);
				if(sigCode.isBedTime())
					pat.setNight(pat.getImageName()+IMAGE_EEXTENSION);
				if(sigCode.isSpecialCase())
					pat.setOtherTime(pat.getImageName()+IMAGE_EEXTENSION);
			}
		}
		return pat;
	}
	public void setPatientMedicationVirtualPillBox(
			List<PatientMedicationData> patientMedicationVirtualPillBox) {
		this.patientMedicationVirtualPillBox = patientMedicationVirtualPillBox;
	}
	/**
	 * 
	 * @return SigCode list 
	 */
	public  List<SigCode> getSigCodeList() {
		logger.info("getSigCodeList started");
		if(sigCodeList==null)
		{
			sigCodeList=patientMedicineService.findSigCodeList();
		}
		return sigCodeList;
	}
	public  void setSigCodeList(List<SigCode> sigCodeList) {
		PatientMedicineManageBean.sigCodeList = sigCodeList;
	}


	public Date getReminderFilterEndDate() {
		return reminderFilterEndDate;
	}

	public void setReminderFilterEndDate(Date reminderFilterEndDate) {
		this.reminderFilterEndDate = reminderFilterEndDate;
	}

	public Date getReminderFilterFromDate() {
		return reminderFilterFromDate;
	}

	public void setReminderFilterFromDate(Date reminderFilterFromDate) {
		this.reminderFilterFromDate = reminderFilterFromDate;
	}
	/*
	 * Patient select drugs image for particular image
	 * @author:Gopal Krishna jha  
	 */
	public void selectDrugsImage()
	{
		logger.info("selectDrugsImage:::::::::::::::::");
		Map<String, String> params = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();
		String imageName=params.get("imageName");
		int id=Integer.parseInt(params.get("medsId"));

		//mymedicationTableObj
		PatientMedicationData selectedRowIdOfPatientMedicationData=(PatientMedicationData) getMymedicationTableObj().getRowData();
		selectedRowIdOfPatientMedicationData.setImageName(imageName);
		System.out.println("::::::::::imageName:::"+imageName+"::::::::"+id+"::"+selectedRowIdOfPatientMedicationData.getId()+"::::"+selectedRowIdOfPatientMedicationData.getImageName());
		patientMedicineService.updateSelectedImage(selectedRowIdOfPatientMedicationData);
		//setPatientMedicationVirtualPillBox(null); //Commented for Ticket # 967 by venu
		/*setpatVirtualPillBoxListForDoctor(null);*/
		//medicationListForPatient = null
		setMedicationListForPatient(null);

		//patientMedicationData.setDrugName(params.get("drugName"));

	}


	/**
	 * @return the mymedicationTableObj
	 */
	public DataTable getMymedicationTableObj() {
		return mymedicationTableObj;
	}
	/**
	 * @param mymedicationTableObj the mymedicationTableObj to set
	 */
	public void setMymedicationTableObj(DataTable mymedicationTableObj) {
		this.mymedicationTableObj = mymedicationTableObj;
	}


	public DataTable getReconsileMedsForPharmacyDataTable() {
		return reconsileMedsForPharmacyDataTable;
	}

	public void setReconsileMedsForPharmacyDataTable(
			DataTable reconsileMedsForPharmacyDataTable) {
		this.reconsileMedsForPharmacyDataTable = reconsileMedsForPharmacyDataTable;
	}

	public void  genericMedicineImage() {
		System.out.println("genericMedicineImage called in bean ::::::::");
		PatientMedicationData selectedRowId=(PatientMedicationData) getMymedicationTableObj().getRowData();
		this.patientMedicationData.setId(selectedRowId.getId());
		this.patientMedicationData.setGenericMedicine(selectedRowId.getGenericMedicine());
		System.out.println("setgenericMedicineImage value::::"+patientMedicationData.getId()+":::"+patientMedicationData.getGenericMedicine());

	}
	public DataTable getAddNewMedDataTable() {
		return addNewMedDataTable;
	}
	public void setAddNewMedDataTable(DataTable addNewMedDataTable) {
		this.addNewMedDataTable = addNewMedDataTable;
	}

	/*getPatientMedicationDataList method::::
	 * code start for  medicine pop up by gopal....
	 */

	public String afterAddNewMedicine1()
	{


		logger.info("afterAddNewMedicineGoToMedActionPlan1::::::::"+patientMedicationData.getDrugs()+"diagnosis:::::"+medActionPlan.getDiagnosis());
		System.out.println(":::getDosageForm:::::"+patientMedicationData.getDosageForm()+"::getByRoute::"+patientMedicationData.getByRoute());
		setShowTabForAnticoagMeds(false);
		medActionPlan=new MedActionPlan();

		//patientMedicationData.setQuantity("7");
		patientMedicationData.setUnit("1");
		RequestContext.getCurrentInstance().execute("addNewMedicinePopup.hide()");

		// RequestContext.getCurrentInstance().execute("medicationActionPlan.hide()");
		//warfarin
		if(patientMedicationData.getGenericName().equalsIgnoreCase(WARFARIN))
			//if(patientMedicationData.getDrugs().equalsIgnoreCase("w"))
			addWarfarinMedicine(patientMedicationData.getGenericName());
		//Dabigratan
		else if(patientMedicationData.getGenericName().equalsIgnoreCase("dabigatran etexilate"))
			//else if(patientMedicationData.getDrugs().equalsIgnoreCase("d"))
			addDabigratanMedicine(patientMedicationData.getDrugs());
		//Rivaroxaban
		else if(patientMedicationData.getGenericName().equalsIgnoreCase("Rivaroxaban"))
			//else if(patientMedicationData.getDrugs().equalsIgnoreCase("r"))
			addRivaroxabanMedicine(patientMedicationData.getGenericName());
		//Fondaparinux
		else if(patientMedicationData.getGenericName().equalsIgnoreCase("Fondaparinux"))
			//else if(patientMedicationData.getDrugs().equalsIgnoreCase("f"))
			addFondaparinuxMedicine(patientMedicationData.getGenericName());

		//LMWH
		else if(patientMedicationData.getGenericName().equalsIgnoreCase("Enoxaparin") )
			//else if(patientMedicationData.getDrugs().equalsIgnoreCase("E") || patientMedicationData.getDrugs().equalsIgnoreCase("D"))
			//else if(patientMedicationData.getDrugs().equalsIgnoreCase("l"))
			//addLMWHMedicine(patientMedicationData.getDrugs());
			addEnoxaparindicine(patientMedicationData.getGenericName());

		else if(patientMedicationData.getGenericName().equalsIgnoreCase("dalteparin (porcine)"))
			addDalteparinMedicine(patientMedicationData.getGenericName());
		//Bivalirudin
		/*else if(patientMedicationData.getGenericName().equalsIgnoreCase("Bivalirudin"))
			//else if(patientMedicationData.getDrugs().equalsIgnoreCase("b"))
			addBivalirudinMedicine(patientMedicationData.getDrugs());*/

		//Desirudin
		else if(patientMedicationData.getGenericName().equalsIgnoreCase("Desirudin"))
			//else if(patientMedicationData.getDrugs().equalsIgnoreCase("b"))
			addDesirudinMedicine(patientMedicationData.getGenericName());

		//Apixaban
		else if(patientMedicationData.getGenericName().equalsIgnoreCase("Apixaban"))
			//else if(patientMedicationData.getDrugs().equalsIgnoreCase("b"))
			addApixabanMedicine(patientMedicationData.getDrugs());

		//Heparin
		else if(patientMedicationData.getGenericName().equalsIgnoreCase("Heparin"))
			//else if(patientMedicationData.getDrugs().equalsIgnoreCase("h"))
			addHeparinMedicine(patientMedicationData.getDrugs());
		else
			RequestContext.getCurrentInstance().execute("generalMedicinePopUp.show()");


		System.out.println("::::::::::ending method:::"+patientMedicationData.getDaySupply());

		return null;

	}
	/*
	 * calculate average..
	 */
	public void calCulateDoseAverage()
	{
		logger.info("calCulateDoseAverage method "+weeklyDose.getSundayDose()+weeklyDose.getMondayDose()+weeklyDose.getTuesDay()+weeklyDose.getWednesdayDose()
						+weeklyDose.getThursdayDose()+weeklyDose.getFridayDose()+weeklyDose.getSaturdayDose());
		double sunday = 0,monday = 0,tuesday = 0,wednesday = 0,thursday = 0,friday = 0,saturday = 0,avg;
		//StringUtils.isAlphanumeric(weeklyDose.getSundayDose());
		
		System.out.println("dose:::::"+medActionPlan.getDose());
		String strengthUm = null;
		double dose = 0;
		if(medActionPlan.getDose()!=null)
		{
			dose=Double.parseDouble(medActionPlan.getDose().substring(0,medActionPlan.getDose().indexOf(" ")));
			strengthUm=medActionPlan.getDose().substring(medActionPlan.getDose().indexOf(" ")+1);
		}
		logger.info("dose::::::::::"+dose+"::::::strengthUm::"+strengthUm);
		if(weeklyDose.getSundayDose()!=null && (!weeklyDose.getSundayDose().isEmpty()))
			sunday=Double.parseDouble(weeklyDose.getSundayDose().trim());
		System.out.println("sunday::::::warfarin maintenance:::::"+sunday);

		if(weeklyDose.getMondayDose()!=null && (!weeklyDose.getMondayDose().isEmpty()))
			monday=Double.parseDouble(weeklyDose.getMondayDose().trim());

		if(weeklyDose.getTuesDay()!=null && (!weeklyDose.getTuesDay().isEmpty()))
			tuesday=Double.parseDouble(weeklyDose.getTuesDay().trim());

		if(weeklyDose.getWednesdayDose()!=null && (!weeklyDose.getWednesdayDose().isEmpty()))
			wednesday=Double.parseDouble(weeklyDose.getWednesdayDose().trim());

		if(weeklyDose.getThursdayDose()!=null && (!weeklyDose.getThursdayDose().isEmpty()))
			thursday=Double.parseDouble(weeklyDose.getThursdayDose().trim());

		if(weeklyDose.getFridayDose()!=null && (!weeklyDose.getFridayDose().isEmpty()) )
			friday=Double.parseDouble(weeklyDose.getFridayDose().trim());

		if(weeklyDose.getSaturdayDose()!=null && (!weeklyDose.getSaturdayDose().isEmpty()))
		{
			System.out.println("weeklyDose.getSaturdayDose():::::"+weeklyDose.getSaturdayDose());
			saturday=Double.parseDouble(weeklyDose.getSaturdayDose().trim());
			System.out.println("saturday deatails:::::"+saturday);
		}

		avg=(dose*sunday+dose*monday+dose*tuesday+dose*wednesday+dose*thursday+dose*friday+dose*saturday)/7;

		avg=Math.round(avg*100.0)/100.0;
		if(avg!=0)
			weeklyDose.setAverageDose(""+avg+" "+strengthUm);

	}




	/*
	 * for add new medicine Warfarin then open pop up in anticoag clinic
	 * @author:Gopal Krishna jha
	 */
	private void addWarfarinMedicine(String newDrugs) {
		/*if(newDrugs.equals("w"))
		{*/
		//patientMedicationData.setDrugs(newDrugs);
		//checkNotesForLab=0;
		showAnticoagMedactionPlanMessage=0;
		labDetailList=new ArrayList<LabDetail>();
		labDetailList=patientMedicineService.findLabDetailListAccordingToGenericname(newDrugs);
		for(LabDetail lab :labDetailList)
		{
			if(lab.getLabName().equals("INR"))
				lab.setSelected(true);
		}
		//	medActionPlan.setNextLabDate(new DateUtil().AddDate(sendingDate, noOFdays));
		//System.out.println(":::::::::::inside addWarfarinMedicine method ");
		clinicDiagnosisList=patientMedicineService.findClinicDiagnosisList(patientMedicationData.getGenericName());
		subDiagnosisDetail=new String();
		labFrequencyList=new ArrayList<String>();
		labFrequencyList.add("2 Days");
		labFrequencyList.add("3 Days");
		labFrequencyList.add("1 Week");
		labFrequencyList.add("2 Weeks");
		labFrequencyList.add("4 Weeks");

		patientMedicationData.setDaySupply("30");
		
		getMedicalActionPlanList();
		for(MedActionPlan med : medicalActionPlanList)
		{
			System.out.println("::::::::check med action list"+med.getDrugId()+patientMedicationData.getDrugId());
			if((patientMedicationData.getDrugId()== med.getDrugId()) && (patientMedicationData.getGenericName().equalsIgnoreCase("warfarin")))
			{
				System.out.println("warfarin diagnosis:::::"+patientMedicationData.getDrugId()+med.getDiagnosis());
				
				/*for(ClinicDiagonsis cld: clinicDiagnosisList)
				{
					cld.setDiagnosisName(med.getDiagnosis());
				}
				*/
			}
			
		}

		RequestContext.getCurrentInstance().execute("quickPrescribe.hide()");
		RequestContext.getCurrentInstance().execute("WarfarinPopUp.show()");


		//}
	}
	/*
	 * for add new medicine Dabigratan then open pop up in anticoag clinic
	 * @author:Gopal Krishna jha
	 */
	private void addDabigratanMedicine(String drugs) {

		//patientMedicationData.setDrugs("Dabigratan");
		calculateCrediantialOFCreatimeClearence();

		patientMedicationData.setDaySupply("30");
		calculateCreatimineClearance.setWeightUnit("(Kg)");
		//crclValue=crclValue*10;

		RequestContext.getCurrentInstance().execute("quickPrescribe.hide()");
		RequestContext.getCurrentInstance().execute("Dabigratan.show()");

	}

	/*
	 * find all detail of calculating creatine Clearence.
	 * @author: Gopal Krisna jha
	 * 
	 */
	public Double  calculateCrediantialOFCreatimeClearence() {
		calculateCreatimineClearance=new CalculateCreatimineClearance();
		FacesContext context = FacesContext	.getCurrentInstance();
		LabManageBean labManageBean=(LabManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"labManageBean");
		DashBoardManageBean dashBoardManageBean=(DashBoardManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"dashBoardManageBean");
		PatientVital patienVital=new PatientVital();
		UserLoginDetail userDetail=new UserLoginDetail();
		patienVital=dashBoardManageBean.getPatientVital();
		userDetail=dashBoardManageBean.getUserLoginDetail();

		calculateCreatimineClearance.setAge(userDetail.getAge());
		if(userDetail.getGender().equalsIgnoreCase("Male"))
			calculateCreatimineClearance.setGender("M");
		else
			calculateCreatimineClearance.setGender("F");

		//convert height into inch

		String heightInFeet,heightInInch;
		int heightInDouble=0;
		if(patienVital.getHeight()!=null)
			{
			logger.info("height of patient"+patienVital.getHeight());
			if(patienVital.getHeight().contains("."))
			{
				if(!patienVital.getHeight().substring(0, patienVital.getHeight().indexOf(".")).isEmpty())
				{
			heightInFeet=patienVital.getHeight().substring(0, patienVital.getHeight().indexOf("."));
				}
				else
				{
					heightInFeet="0";	
				}
				if(!patienVital.getHeight().substring( patienVital.getHeight().indexOf(".")+1, patienVital.getHeight().length()).isEmpty())
				{
			heightInInch=patienVital.getHeight().substring( patienVital.getHeight().indexOf(".")+1, patienVital.getHeight().length());
				}
				else
				{
					heightInInch="0";	
				}
			
			//System.out.println("::heightInFeet:"+heightInFeet+"::::heightInInch:"+heightInInch);
				patienVital.setHeight(heightInFeet+"."+heightInInch);
			 heightInDouble=Integer.parseInt(heightInFeet)*12+Integer.parseInt(heightInInch);
			}
			else
			{
				logger.info("inside if condition when height is in integer");
				heightInFeet=patienVital.getHeight();
				heightInInch="0";
				patienVital.setHeight(heightInFeet+"."+heightInInch);
				heightInDouble=Integer.parseInt(heightInFeet)*12+Integer.parseInt(heightInInch);
				logger.info("height is after convert"+patienVital.getHeight());
			}
			}
		calculateCreatimineClearance.setHeight(heightInDouble);
		calculateCreatimineClearance.setWeight(patienVital.getWeightInKG());
		calculateCreatimineClearance.setSimpleWeight(patienVital.getWeight());



		List<ProcedureResultHistory> procidureList=new ArrayList<ProcedureResultHistory>();

		procidureList=labManageBean.getProcedureResultListForCreatinine();
		System.out.println("::::::::::::::::>>>>>>>"+procidureList.size());
		//double crclValue = 0;
		for(ProcedureResultHistory procResHistory:procidureList)
		{
			if(procResHistory.getLabName().equals("Cr"))
			{
				calculateCreatimineClearance.setSerumCreatinieValue(procResHistory.getResult());
				calculateCreatimineClearance.setSerumCreatinieValueInString(""+procResHistory.getResult());
				
				SimpleDateFormat sm = new SimpleDateFormat("MM/dd/yyyy");
			    String strDate = sm.format(procResHistory.getDateResult());
				calculateCreatimineClearance.setLabDate(strDate);
				//calculateCreatimineClearance.
			}

		}
		
		logger.info(calculateCreatimineClearance.getSerumCreatinieValueInString()+"before calculation::::"+calculateCreatimineClearance.getSerumCreatinieValue());
		return 	reCalculateCreatinineClearance(calculateCreatimineClearance);


	}

	/*
	 * calculate calculateCreatimineClearance for all meds 
	 * @author: GOpal Krishan jha
	 */
	
	public Double reCalculateCreatinineClearance(
			CalculateCreatimineClearance calculateCreatimineClearance) {
		logger.info(calculateCreatimineClearance.getSerumCreatinieValue()+"!!!!ReCalculateCreatinineClearance ::::: getSerumCreatinieValueInString::"+calculateCreatimineClearance.getSerumCreatinieValueInString());
		
	//	Double scrVal=calculateCreatimineClearance.getSerumCreatinieValue();
		Double scrVal=null;
		Double  crcl = null;
		if(calculateCreatimineClearance.getSerumCreatinieValueInString()!=null )
		{
		if(!calculateCreatimineClearance.getSerumCreatinieValueInString().equals("") )
			{
		 scrVal=Double.parseDouble(calculateCreatimineClearance.getSerumCreatinieValueInString());
		int heightInInches=calculateCreatimineClearance.getHeight();
		String sex = calculateCreatimineClearance.getGender();
		double bodyweightInKg=calculateCreatimineClearance.getWeight();
		int age = calculateCreatimineClearance.getAge();
		
		
		double IBW = 0;
		double body_weight_for_calculation=0;
		Double crValue_for_calculation = scrVal;
	
		
			logger.info("11111value::crcl:::"+crcl);
			if(scrVal!=0)
				{
						if(bodyweightInKg!=0)
						{
								if(sex.equalsIgnoreCase("M"))
								{
									IBW = 50+(heightInInches-60)*2.3;
								}
								else
								{
									IBW = 45.5+(heightInInches-60)*2.3;
								}
								  
								if(heightInInches==0)
									IBW=0;
								if (bodyweightInKg < IBW )
									body_weight_for_calculation = bodyweightInKg ;
								else if ( (bodyweightInKg/IBW ) < 1.25	)
									body_weight_for_calculation = IBW;
								else 
									body_weight_for_calculation = IBW + 0.3*( bodyweightInKg - IBW); // Adjusted Body Weight
								
								if ( (age > 65) & (scrVal < 1.0) )
									crValue_for_calculation = 1.0;
						
								
								crcl=(((140-age)*body_weight_for_calculation)/(crValue_for_calculation*72));
								
								if(sex.equalsIgnoreCase("F"))
									crcl = crcl*0.85;
								
								crcl=(double)Math.round(crcl * 100) / 100;
								logger.info("333value::crcl:::"+crcl);
						}
				}
			else
				crcl=(double) 0;
		}
	}
		calculateCreatimineClearance.setCalculateCreatimineClearanceValue(crcl);
		/*List<Double>crclListInDouble=new ArrayList<Double>();
		if(crcl!=null)
		{
		crclListInDouble.add(crcl);
		calculateCreatimineClearance.setDoubleList(crclListInDouble);
		}*/
		logger.info(calculateCreatimineClearance.getSerumCreatinieValue()+"4value::crcl:::"+crcl+"String value in scr::"+calculateCreatimineClearance.getSerumCreatinieValueInString());
		return crcl;

	}

	/*
	 * calculate calculateCreatimineClearance when we click next button for anticoag meds
	 * @author: Gopal Krishna jha
	 */

	public String onFlowProcessOfAnticoagMeds(FlowEvent event) {  
		logger.info("onFlowProcessOfAnticoagMeds wizard step:" + event.getOldStep());  
		logger.info("Next step:" + event.getNewStep()+":::::"+medActionPlan.getDiagnosis()+"::::"+patientMedicationData.getDrugs()); 

		if(((event.getOldStep().equalsIgnoreCase("step1")) && (event.getNewStep().equalsIgnoreCase("Step2"))))
		{

			if(calculateCreatimineClearance.getSerumCreatinieValueInString().equals(""))
			{
				return event.getOldStep();//getNewStep(); 
			}
			else
			{
			reCalculateCreatinineClearance(calculateCreatimineClearance);

			//int crcl=(int)calculateCreatimineClearance.getCalculateCreatimineClearanceValue();
			Integer crcl=calculateCreatimineClearance.getCalculateCreatimineClearanceValue().intValue();
			//System.out.println(":::::::::::crcl value:::"+crcl);
			String dose="";

			if(crcl>30)
			{
				dose="150 mg";
				//medActionPlan.setRegimen("BID");
				patientMedicationData.setDirections("BID");
				patientMedicationData.setQuantity("60");
			}
			else if(crcl<30 && crcl>=15)
			{
				dose="75mg";
				//medActionPlan.setRegimen("BID");
				patientMedicationData.setDirections("BID");
				patientMedicationData.setQuantity("60");
			}
			else
			{
				dose=NOT_RECOMMENDED;
			}
			//patientMedicationData.setStrengths(dose);
			if(dose.equals(NOT_RECOMMENDED))
				medActionPlan.setDose("");
			else
				medActionPlan.setDose(dose);
			patientMedicationData.setRecommendedDose(dose);

		}
	}


		return event.getNewStep(); 
	}

	/*
	 * calculate calculateCreatimineClearance when we click next button for Fondaparinux meds
	 * @author: Gopal Krishna jha
	 */
	public String onFlowProcessOfFondaparinux(FlowEvent event) {  
		//logger.info("onFlowProcessOfAnticoagMeds wizard step:" + event.getOldStep());  
		//logger.info("Next step:" + event.getNewStep()+":::::"+medActionPlan.getDiagnosis()); 
		if(((event.getOldStep().equalsIgnoreCase("step2")) && (event.getNewStep().equalsIgnoreCase("Step3"))))
		{
			if(calculateCreatimineClearance.getSerumCreatinieValueInString().equals(""))
			{
				return event.getOldStep();//getNewStep(); 
			}
			else{
			reCalculateCreatinineClearance(calculateCreatimineClearance);
			//int crcl=(int) calculateCreatimineClearance.getCalculateCreatimineClearanceValue();
			int crcl= calculateCreatimineClearance.getCalculateCreatimineClearanceValue().intValue();
			String dose="";
			String regimen="";
			System.out.println(">>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<::"+calculateCreatimineClearance.getCalculateCreatimineClearanceValue());
			System.out.println("::::::::inside  condiion:::::"+calculateCreatimineClearance.getWeight()+":::::::12"+calculateCreatimineClearance.getSimpleWeight());
			if(crcl < 30)
			{
				//System.out.println("::111:::");
				dose="Contraindicated";
			}
			else if(crcl>=30 && crcl<=60)
			{
				//System.out.println("::22211:::");
				dose=NOT_RECOMMENDED;
			}//
			else if(crcl>=61)
			{
				System.out.println("::333:::");

				if(medActionPlan.getDiagnosis().equalsIgnoreCase("Full intensity anticoagulation"))
				{
					int weight=(int) calculateCreatimineClearance.getWeight();

					if(weight<50)
					{
						dose="5 mg SQ q24h";
						regimen="QOD";
					}

					if(weight>=50 && weight<100)
					{
						dose="7.5 mg SQ q24h";
						regimen="QOD";
					}

					if(weight>=100)
					{
						dose="10 mg SQ q24h";
						regimen="QOD";
					}
				}
				else 
				{
					dose="2.5 mg SQ q24h";
					regimen="QOD";
				}

				//patientMedicationData.setStrengths(dose);
				//medActionPlan.setDose(dose);


			}
			/*else
        	{
        		//patientMedicationData.setStrengths("");
				//medActionPlan.setDose("");
				patientMedicationData.setRecommendedDose("");
				patientMedicationData.setDirections("");
        	}*/
			patientMedicationData.setRecommendedDose(dose);
			patientMedicationData.setDirections(regimen);

		}
	}


		return event.getNewStep(); 
	}




	/*
	 * calculate dose for deltaparin....
	 * @author: Gopal Krishna jha
	 */
	public String onFlowProcessOfDalteparin(FlowEvent event) {  
		logger.info("onFlowProcessOfDalteparin wizard step:" + event.getOldStep());  
		logger.info("Next step:" + event.getNewStep()+":::::"+medActionPlan.getDiagnosis()); 
		System.out.println(":::::::::::subDiagnosisDetail:::"+subDiagnosisDetail);
		if((event.getOldStep().equalsIgnoreCase("step1")))
		{
			if(medActionPlan.getDiagnosis().equalsIgnoreCase("VTE Prophylaxis"))
					setSubDiagnosisDetail("Orthopedic surgery (hip/knee replacement, hip fracture)");
		
			if(medActionPlan.getDiagnosis().equalsIgnoreCase("VTE Treatment"))
				setSubDiagnosisDetail("Venous thrombosis (LMWH for a minimum of 5 days)");
			
			if(medActionPlan.getDiagnosis().equalsIgnoreCase("Acute Coronary Syndrome"))
				setSubDiagnosisDetail("Unstable angina/NQWMI");
			
			if(medActionPlan.getDiagnosis().equalsIgnoreCase("Bridge Therapy"))
				setSubDiagnosisDetail("Atrial fibrillation");
		}
		if(((event.getOldStep().equalsIgnoreCase("step2")) && (event.getNewStep().equalsIgnoreCase("Step3"))))
		{
			//reCalculateCreatinineClearance(calculateCreatimineClearance);
			String dose="";
			String regimen="";
			String dispense="";
			double calculatedDose = 0;
			if(medActionPlan.getDiagnosis().equalsIgnoreCase("VTE Prophylaxis"))
			{
				//setSubDiagnosisDetail("Trauma");
				if(subDiagnosisDetail.equalsIgnoreCase("Orthopedic surgery (hip/knee replacement, hip fracture)") ||
						subDiagnosisDetail.equalsIgnoreCase("Trauma") ||
						subDiagnosisDetail.equalsIgnoreCase("Acute spinal cord injury")||
						subDiagnosisDetail.equalsIgnoreCase("Acute medical illness") ||
						subDiagnosisDetail.equalsIgnoreCase("General surgery") ||
						subDiagnosisDetail.endsWith("30)")
						)
				{
					dose="5000 units daily";// daily
					regimen="Daily";
					//medActionPlan.setDose("5");;

				}

				if(subDiagnosisDetail.equalsIgnoreCase("Bariatric surgery") 
						|| subDiagnosisDetail.endsWith("40)"))
				{
					dose=NOT_RECOMMENDED;// daily
					regimen="";

				}

			}

			if(medActionPlan.getDiagnosis().equalsIgnoreCase("VTE Treatment"))
			{

				if(subDiagnosisDetail.equalsIgnoreCase("Venous thrombosis (LMWH for a minimum of 5 days)"))
				{
					//int dose1=(int) (200/calculateCreatimineClearance.getWeight());
					calculatedDose = 200*calculateCreatimineClearance.getWeight();
					dose="200 units/kg daily";
					regimen="Daily";
				}
				if(subDiagnosisDetail.equalsIgnoreCase("Cancer associated venous thrombosis (LMWH for a minimum of 3-6 months)"))
				{
					//int dose1=(int) (200/calculateCreatimineClearance.getWeight());
					calculatedDose = 200*calculateCreatimineClearance.getWeight();
					dose="200 units/kg daily for one month, then 150 units/kg daily";
					regimen="Daily";
				}
				if(subDiagnosisDetail.equalsIgnoreCase("Pregnancy"))
				{
					//int dose1=(int) (100/calculateCreatimineClearance.getWeight());
					calculatedDose = 100*calculateCreatimineClearance.getWeight();
					dose="100 units/kg, q12 hour";
					regimen="BID";
					dispense="60";
				}

				if(subDiagnosisDetail.endsWith("45 kg)")) 
				{
					//int dose1=(int) (200/calculateCreatimineClearance.getWeight());
					calculatedDose = 200*calculateCreatimineClearance.getWeight();
					dose="200 units/kg daily";
					regimen="Daily";
				}

				if(subDiagnosisDetail.endsWith("99 kg)")) 
				{
					//int dose1=(int) (100/calculateCreatimineClearance.getWeight());
					calculatedDose = 100*calculateCreatimineClearance.getWeight();
					dose="100 units/kg q 12h";
					regimen="BID";
					dispense="60";
				}
				if(subDiagnosisDetail.equalsIgnoreCase("Moderate renal impairment (CrCl 30-60)"))
				{
					calculatedDose = 200*calculateCreatimineClearance.getWeight();
					dose="200 units/kg daily";
					regimen="Daily";
				}
				if(subDiagnosisDetail.endsWith("30)"))
				{
					//int dose1=(int) (100/calculateCreatimineClearance.getWeight());
					dose=NOT_RECOMMENDED;
					regimen="";
				}

			}

			if(medActionPlan.getDiagnosis().equalsIgnoreCase("Acute Coronary Syndrome"))
			{
				if(subDiagnosisDetail.equalsIgnoreCase("Unstable angina/NQWMI"))
				{
					//int dose1=(int) (120/calculateCreatimineClearance.getWeight());
					calculatedDose = 120*calculateCreatimineClearance.getWeight();
					dose="120 units/kg, q 12 h";
					regimen="BID";
					dispense="60";
				}

				if(subDiagnosisDetail.endsWith("60)"))
				{
					//int dose1=(int) (100/calculateCreatimineClearance.getWeight());
					dose="UFH preferred";
					regimen="";
				}
			}

			if(medActionPlan.getDiagnosis().equalsIgnoreCase("Bridge Therapy"))
			{
				if(subDiagnosisDetail.equalsIgnoreCase("Atrial fibrillation") ||
						subDiagnosisDetail.equalsIgnoreCase("Heart valve replacement") ||
						subDiagnosisDetail.equalsIgnoreCase("Pregnancy") ||
						subDiagnosisDetail.endsWith("45 kg)") ||
						subDiagnosisDetail.endsWith(" 99 kg)") ||
						subDiagnosisDetail.equalsIgnoreCase("Moderate renal impairment (CrCl 30-60)") 
						)
				{
					//int dose1=(int) (100/calculateCreatimineClearance.getWeight());
					calculatedDose = 100*calculateCreatimineClearance.getWeight();
					dose="100 units/kg, q12 hour";
					regimen="BID";
					dispense="60";
				}

				if(subDiagnosisDetail.equalsIgnoreCase("History of VTE"))
				{
					//int dose1=(int) (200/calculateCreatimineClearance.getWeight());
					calculatedDose = 200*calculateCreatimineClearance.getWeight();
					dose="200 units/kg daily";
					regimen="Daily";
				}

				if(subDiagnosisDetail.endsWith(" 30)"))
				{
					//int dose1=(int) (200/calculateCreatimineClearance.getWeight());
					dose=NOT_RECOMMENDED;

					regimen="";
				}

			}

			patientMedicationData.setStrengths(dose);

			patientMedicationData.setRecommendedDose(dose);
			patientMedicationData.setDirections(regimen);
			patientMedicationData.setQuantity(dispense);
			patientMedicationData.setCalculatedDose(calculatedDose);


		}


		return event.getNewStep(); 
	}



	/*
	 * calculate dose for enoxaparin....
	 * @author: Gopal Krishna jha
	 */
	public String onFlowProcessOfEnoxaparin(FlowEvent event) {  
		// logger.info("onFlowProcessOfEnoxaparin wizard step:" + event.getOldStep());  
		// logger.info("Next step:" + event.getNewStep()+":::::"+medActionPlan.getDiagnosis()); 
		System.out.println(":::::::::::subDiagnosisDetail:::"+subDiagnosisDetail);
		
		if((event.getOldStep().equalsIgnoreCase("step1")))
		{
			if(medActionPlan.getDiagnosis().equalsIgnoreCase("VTE Prophylaxis"))
					setSubDiagnosisDetail("Orthopedic surgery (hip/knee replacement, hip fracture)");
		
			if(medActionPlan.getDiagnosis().equalsIgnoreCase("VTE Treatment"))
				setSubDiagnosisDetail("Venous thrombosis (LMWH for a minimum of 5 days)");
			
			if(medActionPlan.getDiagnosis().equalsIgnoreCase("Acute Coronary Syndrome"))
				setSubDiagnosisDetail("Unstable angina/NQWMI");
			
			if(medActionPlan.getDiagnosis().equalsIgnoreCase("Bridge Therapy"))
				setSubDiagnosisDetail("Atrial fibrillation");
		}
		
		
		if(((event.getOldStep().equalsIgnoreCase("step2")) && (event.getNewStep().equalsIgnoreCase("Step3"))))
		{
			//reCalculateCreatinineClearance(calculateCreatimineClearance);
			String dose="";
			String regimen="";
			double calculatedDose = 0;
			if(medActionPlan.getDiagnosis().equalsIgnoreCase("VTE Prophylaxis"))
			{
				if(subDiagnosisDetail.equalsIgnoreCase("Orthopedic surgery (hip/knee replacement, hip fracture)") ||
						subDiagnosisDetail.equalsIgnoreCase("Trauma") ||
						subDiagnosisDetail.equalsIgnoreCase("Acute spinal cord injury")	)
				{
					dose="30 mg q 12 h";// daily
					regimen="BID";

				}

				if(subDiagnosisDetail.equalsIgnoreCase("Acute medical illness") 
						|| subDiagnosisDetail.equalsIgnoreCase("General surgery")
						)
				{
					dose="40 mg daily";// daily
					regimen="Daily";

				}

				if(subDiagnosisDetail.equalsIgnoreCase("Bariatric surgery") 
						|| subDiagnosisDetail.endsWith(" 40)")
						)
				{
					dose="40 mg q 12 h";// daily
					regimen="BID";

				}

				if(subDiagnosisDetail.endsWith(" 30)"))
				{
					dose="30 mg daily";// daily
					regimen="Daily";

				}

			}

			if(medActionPlan.getDiagnosis().equalsIgnoreCase("VTE Treatment"))
			{

				if(subDiagnosisDetail.equalsIgnoreCase("Venous thrombosis (LMWH for a minimum of 5 days)"))
				{
					//double dose1= (1/calculateCreatimineClearance.getWeight());
					calculatedDose=1*calculateCreatimineClearance.getWeight();
					dose="1mg/kg sq q12h";
					regimen="BID";
				}
				if(subDiagnosisDetail.equalsIgnoreCase("Cancer associated venous thrombosis (LMWH for a minimum of 3-6 months)"))
				{
					//double dose1= (1/calculateCreatimineClearance.getWeight());
					calculatedDose=1*calculateCreatimineClearance.getWeight();
					dose="Dalteparin preferred, or enoxaparin 1 mg/kg q 12 h x 1 month, then 1.5 mg/kg daily.";
					regimen="BID";
				}
				if(subDiagnosisDetail.equalsIgnoreCase("Pregnancy"))
				{
					//double dose1= (1/calculateCreatimineClearance.getWeight());
					calculatedDose=1*calculateCreatimineClearance.getWeight();
					dose="1mg/kg ,q12h";
					regimen="BID";
				}

				if(subDiagnosisDetail.endsWith("45 kg)"))
				{
					//double dose1= (1/calculateCreatimineClearance.getWeight());
					calculatedDose=1*calculateCreatimineClearance.getWeight();
					dose="1 mg/kg q12 h";
					regimen="BID";
				}

				if(subDiagnosisDetail.endsWith("99 kg)"))
				{
					//double dose1= (1/calculateCreatimineClearance.getWeight());
					calculatedDose=1*calculateCreatimineClearance.getWeight();
					dose="1mg/kg ,q12 h";
					regimen="BID";
				}
				if(subDiagnosisDetail.equalsIgnoreCase("Moderate renal impairment (CrCl 30-60)"))
				{
					//double dose1= (.85/calculateCreatimineClearance.getWeight());
					calculatedDose=0.85*calculateCreatimineClearance.getWeight();
					dose="0.85 mg/kg q 12 h";
					regimen="BID";
				}
				if(subDiagnosisDetail.endsWith(" 30)"))
				{
					//int dose1=(int) (100/calculateCreatimineClearance.getWeight());
					calculatedDose=1*calculateCreatimineClearance.getWeight();
					dose="UFH preferred, or 1 mg/kg, daily";
					regimen="Daily";
				}

			}

			if(medActionPlan.getDiagnosis().equalsIgnoreCase("Acute Coronary Syndrome"))
			{
				if(subDiagnosisDetail.equalsIgnoreCase("Unstable angina/NQWMI"))
				{
					//double dose1= (1/calculateCreatimineClearance.getWeight());
					calculatedDose=1*calculateCreatimineClearance.getWeight();
					dose="1 mg/kg ,q 12h";
					regimen="BID";
				}

				if(subDiagnosisDetail.endsWith(" 60)"))
				{
					//double dose1=(int) (100/calculateCreatimineClearance.getWeight());
					dose="UFH preferred";
					regimen="";
				}
			}

			if(medActionPlan.getDiagnosis().equalsIgnoreCase("Bridge Therapy"))
			{
				if(subDiagnosisDetail.equalsIgnoreCase("Atrial fibrillation") ||
						subDiagnosisDetail.equalsIgnoreCase("Heart valve replacement") ||
						subDiagnosisDetail.equalsIgnoreCase("Pregnancy") ||
						subDiagnosisDetail.endsWith(" 45 kg)") ||
						subDiagnosisDetail.endsWith(" 99 kg)") ||
						subDiagnosisDetail.equalsIgnoreCase("History of VTE") 
						)
				{
					//double dose1= (1/calculateCreatimineClearance.getWeight());
					calculatedDose=1*calculateCreatimineClearance.getWeight();
					dose="1 mg/kg ,q 12h";
					regimen="BID";
				}

				if(subDiagnosisDetail.equalsIgnoreCase("Moderate renal impairment (CrCl 30-60)"))
				{
					//double dose1= (.85/calculateCreatimineClearance.getWeight());
					calculatedDose=0.85*calculateCreatimineClearance.getWeight();
					dose="0.85 mg/kg, q 12h";
					regimen="BID";
				}

				if(subDiagnosisDetail.endsWith(" 30)"))
				{
					//int dose1=(int) (200/calculateCreatimineClearance.getWeight());
					dose="UFH preferred, or 1 mg/kg daily";
					regimen="Daily";
				}

			}

			//patientMedicationData.setStrengths(dose);
			//medActionPlan.setDose(dose);;
			patientMedicationData.setRecommendedDose(dose);
			patientMedicationData.setDirections(regimen);
			patientMedicationData.setCalculatedDose(calculatedDose);


		}


		return event.getNewStep(); 
	}



	/*
	 * calculate calculateCreatimineClearance when we click next button for Desirudin meds
	 * @author: Gopal Krishna jha
	 */
	/*
	 * 
	 */

	public String onFlowProcessOfDesirudin(FlowEvent event) { 
		logger.info(calculateCreatimineClearance.getSerumCreatinieValue()+"onFlowProcessOfDesirudin method start"+calculateCreatimineClearance.getCalculateCreatimineClearanceValue());
		logger.info("serumCreatinieValueInString::::::::::::::::"+calculateCreatimineClearance.getSerumCreatinieValueInString());
		if(event.getOldStep().equalsIgnoreCase("step1")) 
		{
			if(calculateCreatimineClearance.getSerumCreatinieValueInString().equals(""))
			{
				System.out.println(">>>>>>>>>>>>>>>>>>>>>>>");
				return event.getOldStep();//getNewStep(); 
			}
			else
			{
			reCalculateCreatinineClearance(calculateCreatimineClearance);
			//logger.info(calculateCreatimineClearance.getSerumCreatinieValue()+"22onFlowProcessOfDesirudin method start"+calculateCreatimineClearance.getCalculateCreatimineClearanceValue());
			/*if(calculateCreatimineClearance.getDoubleList().size()!=0)
				logger.info("test list value::::"+calculateCreatimineClearance.getDoubleList().get(0));*/
			String dose="";
			String regimen="";
			if(calculateCreatimineClearance.getCalculateCreatimineClearanceValue()!=null)
			{
				if(calculateCreatimineClearance.getCalculateCreatimineClearanceValue()<30)
					{
					//dose="15 mg";
					dose=NOT_RECOMMENDED;
					regimen="";
					}

				else if(calculateCreatimineClearance.getCalculateCreatimineClearanceValue()>=30 && calculateCreatimineClearance.getCalculateCreatimineClearanceValue()<=80)
					{
						//dose="15 mg";
					dose="1.7-5 mg q 12 hr";
					regimen="BID";
					}
				else  if(calculateCreatimineClearance.getCalculateCreatimineClearanceValue()>=81)

				{
					//dose="1.7-5 mg";
					dose="15 mg SC, 5-15 min prior to surgery, hence q 12 hr";
					regimen="BID";	
				}
			}
			
			// patientMedicationData.setStrengths(dose);
			medActionPlan.setDose(dose);
			patientMedicationData.setRecommendedDose(dose);
			patientMedicationData.setDirections(regimen);
			}
		}
		return event.getNewStep(); 

	}

	/*
	 * calculate dose when we click next button for Apixaban meds
	 * @author: Gopal Krishna jha
	 */

	public String onFlowProcessOfApixaban(FlowEvent event) {  
		
		if(((event.getOldStep().equalsIgnoreCase("step1")) && (event.getNewStep().equalsIgnoreCase("Step2"))))
		{
		if(calculateCreatimineClearance.getSerumCreatinieValueInString().equals(""))
			{
				//System.out.println(">>>>>>>>>>>>>>>>>>>>>>>");
				return event.getOldStep();//getNewStep(); 
			}
		}
		if(((event.getOldStep().equalsIgnoreCase("step2")) && (event.getNewStep().equalsIgnoreCase("Step3"))))
		{
			reCalculateCreatinineClearance(calculateCreatimineClearance);
			String dose="";
			String regimen="";
			String dispense="";
			if( medicineListForApixaBanDoseTest.size()>=1 ||medicineListForApixaBanDoseTest2.size()>=1 || medicineListForApixaBanDoseTest3.size()>=1 )
			{
				dose="2.5 mg";
				regimen="BID";
				dispense="60";
			}
			else if(calculateCreatimineClearance.getAge()>80 && calculateCreatimineClearance.getSerumCreatinieValue()>1.5 )
			{
				dose="2.5 mg";
				regimen="BID";
				dispense="60";
			}
			else if(calculateCreatimineClearance.getAge()>80 && calculateCreatimineClearance.getWeight()<=60 )
			{
				dose="2.5 mg";
				regimen="BID";
				dispense="60";
			}
			else if(calculateCreatimineClearance.getWeight()<=60 && calculateCreatimineClearance.getSerumCreatinieValue()>1.5 )
			{
				dose="2.5 mg";
				regimen="BID";
				dispense="60";
			}
			else if(calculateCreatimineClearance.getAge()>18)
			{
				dose="5 mg ";
				regimen="BID"; 
				dispense="60";
			}

			patientMedicationData.setStrengths("");
			medActionPlan.setDose(dose);;
			patientMedicationData.setRecommendedDose(dose+" BID");
			patientMedicationData.setDirections(regimen);
			patientMedicationData.setQuantity(dispense);
		}
		return event.getNewStep(); 

	}

	/*
	 * calculate calculateCreatimineClearance when we click next button for anticoag meds
	 * @author: Gopal Krishna jha
	 */

	public String onFlowProcessOfRivaroxaban(FlowEvent event) {  
		// logger.info("onFlowProcessOfAnticoagMeds wizard step:" + event.getOldStep());  
		logger.info("Next step:" + event.getNewStep()+":::::"+medActionPlan.getDiagnosis()); 

		if(((event.getOldStep().equalsIgnoreCase("step1")) && (event.getNewStep().equalsIgnoreCase("Step2"))))
		{
			calculateCrediantialOFCreatimeClearence();
			calculateCreatimineClearance.setWeightUnit("(Kg)");
		}
		if(((event.getOldStep().equalsIgnoreCase("step2")) && (event.getNewStep().equalsIgnoreCase("Step3"))))
		{
			if(calculateCreatimineClearance.getSerumCreatinieValueInString().equals(""))
			{
				System.out.println(">>>>>>>>>>>>>>>>>>>>>>>");
				return event.getOldStep();//getNewStep(); 
			}
			else
			{
				
			calculateCreatimineClearance.setWeightUnit("(Kg)");
			reCalculateCreatinineClearance(calculateCreatimineClearance);

			//int crcl=(int)calculateCreatimineClearance.getCalculateCreatimineClearanceValue();
			int crcl=calculateCreatimineClearance.getCalculateCreatimineClearanceValue().intValue();
			// crcl= (int) ((double)Math.round(crcl * 100000) / 100000);
			System.out.println(":::::::::::crcl value:::"+crcl);
			String dose="";

			if(medActionPlan.getDiagnosis().equalsIgnoreCase("Atrial Fibrillation"))
			{
				if(crcl>50)
				{
					dose="20 mg daily";
					//medActionPlan.setRegimen("BID");
					patientMedicationData.setDirections("Daily");
				}
				else if((crcl<50 && crcl>=30))
				{
					dose="15mg daily";
					//medActionPlan.setRegimen("BID");
					patientMedicationData.setDirections("Daily");
				}
				else if((crcl<30 ))
				{
					dose=NOT_RECOMMENDED;
					//medActionPlan.setRegimen("BID");
					patientMedicationData.setDirections("");
				}
			}

			if(medActionPlan.getDiagnosis().equalsIgnoreCase("VTE prevention in ortho surgery"))
			{
				if(crcl>=30)
				{
					dose="10 mg daily";
					//medActionPlan.setRegimen("BID");
					patientMedicationData.setDirections("Daily");
				}
				else if((crcl<30 ))
				{
					dose=NOT_RECOMMENDED;
					//medActionPlan.setRegimen("BID");
					patientMedicationData.setDirections("");
				}
			}


			if(medActionPlan.getDiagnosis().equalsIgnoreCase("VTE treatment"))
			{
				if(crcl>=30)
				{
					dose="15 mg bid for 21 days, then 20mg daily for remainder of treatment course";
					//medActionPlan.setRegimen("BID");
					patientMedicationData.setDirections("Daily");
				}
				else if((crcl<30 ))
				{
					dose=NOT_RECOMMENDED;
					//medActionPlan.setRegimen("BID");
					patientMedicationData.setDirections("");
				}
			}


			System.out.println(":::::::::::dose::"+dose);

			patientMedicationData.setStrengths(dose);
			if(patientMedicationData.getStrengths().equalsIgnoreCase(NOT_RECOMMENDED))
				patientMedicationData.setStrengths("");
			medActionPlan.setDose(dose);
			patientMedicationData.setRecommendedDose(dose);
		}
	}


		return event.getNewStep(); 
	}

	/*
	 * for add new medicine Rivaroxaban then open pop up in anticoag clinic
	 * @author:Gopal Krishna jha
	 */
	private void addRivaroxabanMedicine(String drugs) {
		clinicDiagnosisList=patientMedicineService.findClinicDiagnosisList(drugs);
		System.out.println("::::::weight:::::");
		patientMedicationData.setDaySupply("30");
		calculateCreatimineClearance.setWeightUnit("(Kg)");
		System.out.println("::::::::calculateCreatimineClearance weight units::::::::::"+calculateCreatimineClearance.getWeightUnit());
		RequestContext.getCurrentInstance().execute("quickPrescribe.hide()");
		RequestContext.getCurrentInstance().execute("Rivaroxaban.show()");

	}
	/*
	 * for add new medicine Fondaparinux then open pop up in anticoag clinic
	 * @author:Gopal Krishna jha
	 */
	private void addFondaparinuxMedicine(String drugs) {
		clinicDiagnosisList=patientMedicineService.findClinicDiagnosisList(drugs);
		calculateCrediantialOFCreatimeClearence();
		labDetailList=new ArrayList<LabDetail>();
		labDetailList=patientMedicineService.findLabDetailListAccordingToGenericname(drugs);
		patientMedicationData.setDaySupply("30");
		calculateCreatimineClearance.setWeightUnit("(Kg)");
		RequestContext.getCurrentInstance().execute("quickPrescribe.hide()");
		RequestContext.getCurrentInstance().execute("Fondaparinux.show()");

	}
	/*
	 * for add new medicine Heparin then open pop up in anticoag clinic
	 * @author:Gopal Krishna jha
	 */
	private void addHeparinMedicine(String drugs) {

		patientMedicationData.setDaySupply("30");
		RequestContext.getCurrentInstance().execute("quickPrescribe.hide()");
		RequestContext.getCurrentInstance().execute("Heparin.show()");

	}
	/*
	 * for add new medicine Bivalirudin then open pop up in anticoag clinic
	 * @author:Gopal Krishna jha
	 */
	private void addBivalirudinMedicine(String drugs) {
		patientMedicationData.setDaySupply("30");
		RequestContext.getCurrentInstance().execute("quickPrescribe.hide()");
		RequestContext.getCurrentInstance().execute("Bivalirudin.show()");

	}

	private void addDesirudinMedicine(String drugs) {

		setShowDesirudinLabFrequency(false);
		labDetailList=new ArrayList<LabDetail>();
		labDetailList=patientMedicineService.findLabDetailListAccordingToGenericname(drugs);
		calculateCrediantialOFCreatimeClearence();
		patientMedicationData.setDaySupply("30");
		calculateCreatimineClearance.setWeightUnit("(Kg)");
		medicineListForApixaBanDoseTest=new ArrayList<String>();
		RequestContext.getCurrentInstance().execute("quickPrescribe.hide()");
		RequestContext.getCurrentInstance().execute("Desirudin.show()");
	}

	private void addApixabanMedicine(String drugs) {
		// TODO Auto-generated method stub
		calculateCrediantialOFCreatimeClearence();
		medicineListForApixaBanDoseTest=new ArrayList<String>();
		medicineListForApixaBanDoseTest2=new ArrayList<String>();
		medicineListForApixaBanDoseTest3=new ArrayList<String>();
		patientMedicationData.setDaySupply("30");
		calculateCreatimineClearance.setWeightUnit("(Kg)");
		//RequestContext.getCurrentInstance().execute("searchMedicinePopUp.hide();");
		//RequestContext.getCurrentInstance().execute("addNewMedicinePopup.hide();");
		RequestContext.getCurrentInstance().execute("quickPrescribe.hide()");
		RequestContext.getCurrentInstance().execute("Apixaban.show()");
	}
	/*
	 * for add new medicine LMWH then open pop up in anticoag clinic
	 * @author:Gopal Krishna jha
	 */
	/*private void addLMWHMedicine(String drugs) {
		// TODO Auto-generated method stub
		RequestContext.getCurrentInstance().execute("LMWH.show()");
		clinicDiagnosisList=patientMedicineService.findClinicDiagnosisList(drugs);
		if(!clinicDiagnosisList.isEmpty())
		{
			medActionPlan.setDiagnosis(clinicDiagnosisList.get(0).getDiagnosisName());
		}
	}*/

	/*
	 * for open Daltepar inMedicine	in anticoag meds
	 * @author: GOpal Krishna Jha
	 */
	private void addDalteparinMedicine(String drugs)
	{
		clinicDiagnosisList=patientMedicineService.findClinicDiagnosisList(drugs);
		//subDiagnosisDetailList=new ArrayList<String>();
		subDiagnosisDetail=new String();
		calculateCreatimineClearance=new CalculateCreatimineClearance();
		FacesContext context = FacesContext	.getCurrentInstance();
		DashBoardManageBean dashBoardManageBean=(DashBoardManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"dashBoardManageBean");
		PatientVital patienVital=new PatientVital();
		patienVital=dashBoardManageBean.getPatientVital();
		labDetailList=patientMedicineService.findLabDetailListAccordingToGenericname(drugs);

		calculateCreatimineClearance.setWeight(patienVital.getWeightInKG());
		calculateCreatimineClearance.setSimpleWeight(patienVital.getWeight());

		patientMedicationData.setDaySupply("30");
		calculateCreatimineClearance.setWeightUnit("(Kg)");
		RequestContext.getCurrentInstance().execute("quickPrescribe.hide()");
		RequestContext.getCurrentInstance().execute("dalteparin.show()");
	}
	/*
	 * for open Enoxaparindicine in Medicine	in anticoag meds
	 * @author: Gopal Krishna Jha
	 */
	private void addEnoxaparindicine(String drugs)
	{
		clinicDiagnosisList=patientMedicineService.findClinicDiagnosisList(drugs);
		FacesContext context = FacesContext	.getCurrentInstance();
		DashBoardManageBean dashBoardManageBean=(DashBoardManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"dashBoardManageBean");
		PatientVital patienVital=new PatientVital();
		patienVital=dashBoardManageBean.getPatientVital();
		labDetailList=new ArrayList<LabDetail>();
		labDetailList=patientMedicineService.findLabDetailListAccordingToGenericname(drugs);
		calculateCreatimineClearance.setWeight(patienVital.getWeightInKG());
		calculateCreatimineClearance.setSimpleWeight(patienVital.getWeight());
		patientMedicationData.setDaySupply("30");
		calculateCreatimineClearance.setWeightUnit("(Kg)");
		//RequestContext.getCurrentInstance().execute("dalteparin.show()");
		//subDiagnosisDetailList=new ArrayList<String>();
		subDiagnosisDetail=new String();
		RequestContext.getCurrentInstance().execute("quickPrescribe.hide()");
		RequestContext.getCurrentInstance().execute("Enoxaparin.show()");
	}

	/*
	 * change step for warfarin onFlowProcessForwarfarin
	 * @author:Gopal Krishna jha
	 */

	public String onFlowProcessForwarfarin(FlowEvent event) {  
		logger.info("onFlowProcessForwarfarin wizard step:" + event.getOldStep());  
		//  logger.info("Next step:" + event.getNewStep()+":::::"+medActionPlan.getDiagnosis()); 

		if(((event.getOldStep().equalsIgnoreCase("step1")) && (event.getNewStep().equalsIgnoreCase("Step2"))))
		{
			System.out.println("diagnosis:::::name :::"+medActionPlan.getDiagnosis());
			if(medActionPlan.getDiagnosis().equalsIgnoreCase("Atrial fibrillation (non-valvular/non-rheumatic)"))
			{
				//chad score...
				chadsScore=new ChadsScore();
				FacesContext context = FacesContext	.getCurrentInstance();
				DashBoardManageBean dashBoardManageBean=(DashBoardManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"dashBoardManageBean");
				System.out.println(dashBoardManageBean.getUserLoginDetail().getAge()>=10);
				if(dashBoardManageBean.getUserLoginDetail().getAge()>=75)
					chadsScore.setAge(true);
				submitChadsScore();
				System.out.println(":::::::::"+chadsScore.getScore());
				
				setSubDiagnosisDetail("With mitral stenosis or prosthetic heart valve");

			}
			
			if(medActionPlan.getDiagnosis().equalsIgnoreCase("Coronary Artery Disease"))
				setSubDiagnosisDetail("Primary prevention/age >= 50");
			
			
			if(medActionPlan.getDiagnosis().equalsIgnoreCase("Ischemic stroke/TIA"))
				setSubDiagnosisDetail("Non cardioembolic stroke");
			
			if(medActionPlan.getDiagnosis().equalsIgnoreCase("Left Ventricular dysfunction"))
				setSubDiagnosisDetail("No CAD-No LV thrombus");
			
			if(medActionPlan.getDiagnosis().equalsIgnoreCase("Peripheral artery disease"))
				setSubDiagnosisDetail("Asymptomatic disease");
			
			if(medActionPlan.getDiagnosis().equalsIgnoreCase("Thromboembolism (UE DVT/LE DVT/PE)"))
				setSubDiagnosisDetail("Provoked");
			
			if(medActionPlan.getDiagnosis().equalsIgnoreCase("Valvular heart disease"))
				setSubDiagnosisDetail("Rheumatic mitral valve disease-NSR/LA size <55 mm");
			
			if(medActionPlan.getDiagnosis().equalsIgnoreCase("Valve replacement - Bioprosthetic"))
				setSubDiagnosisDetail("Aortic- first 3 months/NSR");
			
			if(medActionPlan.getDiagnosis().equalsIgnoreCase("Valve replacement - Mechanical"))
				setSubDiagnosisDetail("Aortic");
		}

		if(((event.getOldStep().equalsIgnoreCase("step2")) && (event.getNewStep().equalsIgnoreCase("Step3"))))

		{
			String recommendation="";
			String targetINRRange="";
			String duration="";
			String additionalRecommendation="";
			String comments="";
			System.out.println(":::::::::::"+medActionPlan.getDiagnosis());
			//check for diagnosis..Atrial fibrillation (non-valvular/non-rheumatic)
			if(medActionPlan.getDiagnosis().equalsIgnoreCase("Atrial fibrillation (non-valvular/non-rheumatic)"))
			{

				if(chadsScore.getScore()==0)
				{
					recommendation="No antithrombotic therapy";
					if(subDiagnosisDetail.equalsIgnoreCase("With mitral stenosis or prosthetic heart valve"))
					{
						recommendation="Warfarin ";
						targetINRRange="2-3";
						duration=CHRONIC;
						comments="See AF stroke prevention guidelines summary below";
					}
					else if(subDiagnosisDetail.equalsIgnoreCase("Pre-cardioversion (AF>48 hours)"))
					{
						recommendation="Warfarin ";
						targetINRRange="2-3";
						duration="3 Weeks";
					}
					else if(subDiagnosisDetail.equalsIgnoreCase(" Pre-cardioversion (in NSR)"))
					{
						recommendation="Warfarin ";
						targetINRRange="2-3";
						duration="4 Weeks";
					}

					else if(subDiagnosisDetail.equalsIgnoreCase("None"))
					{
						//recommendation="Warfarin ";
						//targetINRRange="2-3";
						//duration="4 Weeks";
					}

				}
				else if(chadsScore.getScore()>=1)
				{
					recommendation="Warfarin ";
					targetINRRange="2-3";
					duration=CHRONIC;

				}
			}
			//Coronary Artery Disease******************

			else if(medActionPlan.getDiagnosis().equalsIgnoreCase("Coronary Artery Disease"))
			{
				if(subDiagnosisDetail.equalsIgnoreCase("Primary prevention/age >= 50"))
				{
					recommendation="Warfarin not recommended.";
					additionalRecommendation="ASA 81 mg daily";
					duration=CHRONIC;
					comments="ASA 81 mg daily in patients without symptomatic cardiovascular disease";
				}

				else if(subDiagnosisDetail.equalsIgnoreCase("CAD>12 months after PCI/stent/ACS"))
				{
					recommendation="Warfarin not recommended.";
					duration=CHRONIC;
					additionalRecommendation="ASA 81 mg daily or clopidogrel";
					comments="ASA 81 mg daily or clopidogrel";

				}

				else if(subDiagnosisDetail.equalsIgnoreCase("Elective PCI- No Stent"))
				{
					recommendation="Warfarin not recommended.";
					duration="4 weeks";
					additionalRecommendation="ASA 81-235 mg + clopidogrel";
					comments="ASA 81-235 mg + clopidogrel for 4 weeks. Then single antiplatelet therapy.";

				}

				else if(subDiagnosisDetail.equalsIgnoreCase("Elective PCI-BMS"))
				{
					recommendation="Warfarin not recommended.";
					duration="4 weeks";
					additionalRecommendation="ASA 81-235 mg + clopidogrel";
					comments="ASA 81-235 mg + clopidogrel for 4 weeks. Then ASA 81 mg + clopidogrel for 11 months, then chronic single antiplatelet therapy";
				}
				else if(subDiagnosisDetail.equalsIgnoreCase("Elective PCI-DES-sirolimus"))
				{
					recommendation="Warfarin not recommended.";
					duration="3 Months";
					additionalRecommendation="ASA 81-235 mg + clopidogrel";
					comments="ASA 81-235 mg + clopidogrel for 3 months. Then ASA 81 mg + clopidogrel for 9 months, then single antiplatelet therapy";
				}
				else if(subDiagnosisDetail.equalsIgnoreCase("Elective PCI-DES-paclitaxel"))
				{
					recommendation="Warfarin not recommended.";
					duration="6 Months";
					additionalRecommendation="ASA 81-235 mg + clopidogrel";
					comments="ASA 81-235 mg + clopidogrel for 6 months. Then ASA 81 mg + clopidogrel for 6 months, then single antiplatelet therapy";
				}

				else if(subDiagnosisDetail.equalsIgnoreCase("Anterior MI with LV thrombous or EF<40% or antero-apical wall motion abnormality- No Stent"))
				{
					recommendation="Warfarin  + ASA 81 mg";
					duration="3 Months";
					targetINRRange="2-3";
					additionalRecommendation="Add ASA 81 mg";
					comments="Warfarin  + ASA 81 mg for 3 months. Then dual antiplatelet therapy for 9 months, then single antiplatelet therapy";
				}
				else if(subDiagnosisDetail.equalsIgnoreCase("Anterior MI with LV thrombous or EF<40% or antero-apical wall motion abnormality-BMS"))
				{
					recommendation="Warfarin  + dual antiplatelet therapy";
					duration="4 weeks";
					targetINRRange="2-3";
					additionalRecommendation="Add dual antiiplatelet therapy";
					comments="Warfarin  + dual antiplatelet therapy for 4 weeks. Then warfarin + single antiplatelet therapy for 2 months, then dual antiplatelet therapy for 9 months, then single antiplatelet therapy";
				}
				else if(subDiagnosisDetail.equalsIgnoreCase("Anterior MI with LV thrombous or EF<40% or antero-apical wall motion abnormality-DES-sirolimus"))
				{
					recommendation="Warfarin  + dual antiplatelet therapy";
					duration="3 Months";
					targetINRRange="2-3";
					additionalRecommendation="Add dual antiiplatelet therapy";
					comments="Warfarin  + dual antiplatelet therapy for 3 monhts. Then dual antiplatelet therapy for 9 months, then single antiplatelet therapy";
				}
				else if(subDiagnosisDetail.equalsIgnoreCase("Anterior MI with LV thrombous or EF<40% or antero-apical wall motion abnormality- DES-paclitaxel"))
				{
					recommendation="Warfarin  + dual antiplatelet therapy";
					duration="6 Months";
					targetINRRange="2-3";
					additionalRecommendation="Add dual antiiplatelet therapy";
					comments="Warfarin  + dual antiplatelet therapy for 6 months. Then dual antiplatelet therapy for 6 months, then single antiplatelet therapy";
				}

				else if(subDiagnosisDetail.equalsIgnoreCase("Acute coronary syndrome-Without PCI"))
				{
					recommendation="Warfarin not recommended.";
					duration="12 Months";
					targetINRRange="";
					additionalRecommendation="Ticagrelor 90 mg BID + ASA 81 mg";
					comments="Ticagrelor 90 mg BID + ASA 81 mg for 12 months, or ASA + clopidogrel, then single antiplatelet therapy";
				}
				else if(subDiagnosisDetail.equalsIgnoreCase("Acute coronary syndrome-With PCI"))
				{
					recommendation="Warfarin not recommended.";
					duration="12 Months";
					targetINRRange="";
					additionalRecommendation="Dual antiplatelet therapy";
					comments="Dual antiplatelet therapy for 12 months, or stent specific recommendation for elective PCI";
				}
			}

			//Ischemic stroke/TIA diagnosis start....

			else if(medActionPlan.getDiagnosis().equalsIgnoreCase("Ischemic stroke/TIA"))
			{
				System.out.println("::::::::::::::::checking onee");
				if(subDiagnosisDetail.equalsIgnoreCase("Non cardioembolic stroke"))
				{
					//System.out.println("::::::::::::::::2checking onee11");
					recommendation="Warfarin not recommended.";
					duration=CHRONIC;
					targetINRRange="";
					additionalRecommendation="Clopidogrel or Aggrenox preferred over ASA";
					comments="Antiplatelet therapy. Clopidogrel or Aggrenox preferred over ASA";
				}
				else if(subDiagnosisDetail.equalsIgnoreCase("Cardioembolic-With atrial fibrillation"))
				{
					recommendation="Anticoagulation therapy ";
					duration=CHRONIC;
					targetINRRange="2-3";
					additionalRecommendation="Dabigratan preferred over warfarin (INR 2-3)";
					comments="dabigratan preferred over warfarin (INR 2-3)";
				}
				else if(subDiagnosisDetail.equalsIgnoreCase("Cardioembolic- Unsuitable for anticoagulation"))
				{
					recommendation="Warfarin not recommended.";
					duration=CHRONIC;
					targetINRRange="";
					additionalRecommendation="ASA + clopidogrel preferred over ASA alone";
					comments="Antiplatelet therapy. ASA + clopidogrel preferred over ASA alone";
				}

				else if(subDiagnosisDetail.equalsIgnoreCase("Cardioembolic-With PFO"))
				{
					recommendation="Warfarin not recommended.";
					duration=CHRONIC;
					targetINRRange="";
					additionalRecommendation="Clopidogrel or Aggrenox preferred over ASA";
					comments="Antiplatelet therapy. Clopidogrel or Aggrenox preferred over ASA";
				}

				else if(subDiagnosisDetail.equalsIgnoreCase("Cerebral venous sinus thrombosis-Transiet risk factors"))
				{
					recommendation="Warfarin";
					duration="3-6 Months";
					targetINRRange="2-3";
					//comments="ASA + clopidogrel preferred over ASA alone";
				}

				else if(subDiagnosisDetail.equalsIgnoreCase("Cerebral venous sinus thrombosis-Permanent risk factors"))
				{
					recommendation="Warfarin";
					duration=CHRONIC;
					targetINRRange="2-3";
				}

			}
			//Left Ventricular dysfunction .........
			else if(medActionPlan.getDiagnosis().equalsIgnoreCase("Left Ventricular dysfunction"))
			{
				if(subDiagnosisDetail.equalsIgnoreCase("No CAD-No LV thrombus"))
				{
					recommendation="No antithrombotic therapy.";
					duration="";
					targetINRRange="";
					comments="Warfarin (INR 2-3) considered for some patients";

				}
				else if(subDiagnosisDetail.equalsIgnoreCase("No CAD- LV thrombus"))
				{
					recommendation="Warfarin ";
					//duration="&ge; 3 month";
					duration="Greater than equal to 3 months";
					//logger.info("{}{}{}{}unescape duration2{}{}{}{{}{}{"+HtmlUtils.htmlUnescape(duration));
					targetINRRange="2-3";
				}

			}
			//Peripheral artery disease

			else if(medActionPlan.getDiagnosis().equalsIgnoreCase("Peripheral artery disease"))
			{
				if(subDiagnosisDetail.equalsIgnoreCase("Asymptomatic disease"))
				{
					recommendation="Warfarin not recommended.";
					duration=CHRONIC;
					targetINRRange="";
					additionalRecommendation="ASA 81 mg daily";
					comments="ASA 81 mg daily";
				}
				else if(subDiagnosisDetail.equalsIgnoreCase("symptomatic disease"))
				{
					recommendation="Warfarin not recommended.";
					duration=CHRONIC;
					targetINRRange="";
					additionalRecommendation="ASA 81 mg or clopidogrel";
					comments="ASA 81 mg or clopidogrel. Do not use dual antiplatelet therapy (or anti platelet therapy if on warfarin for another reason)";
				}

				else if(subDiagnosisDetail.equalsIgnoreCase(" s/p angioplasty +/-stenting"))
				{
					recommendation="Warfarin not recommended.";
					duration=CHRONIC;
					targetINRRange="";
					additionalRecommendation="ASA 81 mg or clopidogrel";
					comments="ASA 81 mg or clopidogrel. Do not use dual antiplatelet therapy";
				}

				else if(subDiagnosisDetail.equalsIgnoreCase("asymptomatic carotid stenosis"))
				{
					recommendation="Warfarin not recommended.";
					duration=CHRONIC;
					targetINRRange="";
					additionalRecommendation="ASA 81 mg daily";
					comments="ASA 81 mg daily";
				}
				else if(subDiagnosisDetail.equalsIgnoreCase("symptomatic carotid stenosis"))
				{
					recommendation="Warfarin not recommended.";
					duration=CHRONIC;
					targetINRRange="";
					additionalRecommendation="Clopidogrel 75 mg or Aggrenox over ASA 81 mg daily";
					comments="Clopidogrel 75 mg or Aggrenox over ASA 81 mg daily";
				}
			}
			//Thromboembolism (UE DVT/LE DVT/PE)...
			else if(medActionPlan.getDiagnosis().equalsIgnoreCase("Thromboembolism (UE DVT/LE DVT/PE)"))
			{
				if(subDiagnosisDetail.equalsIgnoreCase("Provoked"))
				{
					recommendation=WARFARIN;
					duration="3 Months";
					targetINRRange="2-3";
					//comments="Warfarin (INR 2-3)";
				}
				else if(subDiagnosisDetail.equalsIgnoreCase("Unprovoked/first event- Low/moderate bleed risk"))
				{
					recommendation=WARFARIN;
					duration="Greater than or equal to 3 Months";
					targetINRRange="2-3";
					comments="consider chronic therapy";
				}
				else if(subDiagnosisDetail.equalsIgnoreCase("Unprovoked/first event- High bleed risk"))
				{
					recommendation=WARFARIN;
					duration="3 Months";
					targetINRRange="2-3";
					//comments="consider chronic therapy";
				}

				else if(subDiagnosisDetail.equalsIgnoreCase("Unprovoked/recurrent event-Low/moderate bleed risk"))
				{
					recommendation=WARFARIN;
					duration="Greater than or equal to 3 Months";
					targetINRRange="2-3";
					comments="consider chronic therapy";
				}

				else if(subDiagnosisDetail.equalsIgnoreCase("Unprovoked/recurrent event-High bleed risk"))
				{
					recommendation=WARFARIN;
					duration="3 Months";
					targetINRRange="2-3";
				}

				else if(subDiagnosisDetail.equalsIgnoreCase("Cancer associated"))
				{
					recommendation="Warfarin not recommended";
					duration=CHRONIC;
					targetINRRange="2-3";
					additionalRecommendation="3 months LMWH, followed by chronic anticoagultion (warfarin or LMWH)";
					comments="3 months LMWH, followed by chronic anticoagultion [warfarin (INR 2-3) or LMWH]";
				}

				else if(subDiagnosisDetail.equalsIgnoreCase("Central line associated UE DVT- Line removed"))
				{
					recommendation="Anticoagulation";
					duration="3 Months";
					targetINRRange="Ask Physician ";
					comments="Same duration for cancer and non-cancer patients";
				}

				else if(subDiagnosisDetail.equalsIgnoreCase("Central line associated UE DVT-Line not removed"))
				{
					recommendation="Anticoagulation";
					duration="Greater than or equal to 3 Months";
					targetINRRange="Ask Physician";
					comments="Minimum 3 months and continue until line removed";
				}

				else if(subDiagnosisDetail.equalsIgnoreCase("Portal/mesenteric/splencic/hepatic vein thrombosis- Transient risk factors"))
				{
					recommendation="Anticoagulation";
					duration="3 Months";
					targetINRRange="2-3";
					additionalRecommendation="LMWH preferred over warfarin for cancer-associated events or if hepatic insufficiency is present";
					comments="LMWH preferred over warfarin (INR 2-3) for cancer-associated events or if hepatic insufficiency is present";
				}

				else if(subDiagnosisDetail.equalsIgnoreCase("Portal/mesenteric/splencic/hepatic vein thrombosis-Persistent risk factors"))
				{
					recommendation="Anticoagulation";
					duration="Greater than or equal to 3 Months";
					targetINRRange="2-3";
					additionalRecommendation="LMWH preferred over warfarin for cancer-associated events or if hepatic insufficiency is present";
					comments="LMWH preferred over warfarin (INR 2-3) for cancer-associated events or if hepatic insufficiency is present";
				}
			}

			//Valvular heart disease...
			else if(medActionPlan.getDiagnosis().equalsIgnoreCase("Valvular heart disease"))
			{

				if(subDiagnosisDetail.equalsIgnoreCase("Rheumatic mitral valve disease-NSR/LA size <55 mm"))
				{
					recommendation="No antithrombotic therapy";
					duration="";
					targetINRRange="";
				}
				else if(subDiagnosisDetail.equalsIgnoreCase("Rheumatic mitral valve disease- NSR/LA size >55 mm"))
				{
					recommendation=WARFARIN;
					duration=CHRONIC;
					targetINRRange="2-3";
				}
				else if(subDiagnosisDetail.equalsIgnoreCase("Rheumatic mitral valve disease-LA thrombus"))
				{
					recommendation=WARFARIN;
					duration="";
					targetINRRange="2-3";
				}
				else if(subDiagnosisDetail.equalsIgnoreCase("Rheumatic mitral valve disease- AF and/or prior systemic embolism"))
				{
					recommendation=WARFARIN;
					duration="";
					targetINRRange="2-3";
				}

				else if(subDiagnosisDetail.equalsIgnoreCase("Pre-mitral balloon valvotomy- LA thrombus or TEE"))
				{
					recommendation=WARFARIN;
					duration="to resolution";
					targetINRRange="2.5-3.5";
				}

				else if(subDiagnosisDetail.equalsIgnoreCase("PFO/atrial septal aneurysm-asymptomatic"))
				{
					recommendation="No antithrombotic therapy";
					duration="";
					targetINRRange="";
				}
				else if(subDiagnosisDetail.equalsIgnoreCase("PFO/atrial septal aneurysm-cryptogenic stroke"))
				{
					recommendation="Warfarin not recommended.";
					duration="";
					targetINRRange="";
					additionalRecommendation="ASA 81 mg daily";
					comments="ASA 81 mg daily";
				}

				else if(subDiagnosisDetail.equalsIgnoreCase("PFO/atrial septal aneurysm- recurrent stroke despite ASA"))
				{
					recommendation="Warfarin";
					duration=CHRONIC;
					targetINRRange="2-3";
					comments="consider device closure";
				}

			}

			//Valve replacement - Bioprosthetic
			else if(medActionPlan.getDiagnosis().equalsIgnoreCase("Valve replacement - Bioprosthetic"))
			{
				if(subDiagnosisDetail.equalsIgnoreCase("Aortic- first 3 months/NSR"))
				{
					recommendation="Warfarin not recommended";
					duration="3 Months";
					targetINRRange="";
					additionalRecommendation="ASA 81 mg daily";
					comments="ASA 81 mg daily";
				}
				else if(subDiagnosisDetail.equalsIgnoreCase("Aortic-first 3 months/transcatheter"))
				{
					recommendation="Warfarin not recommended";
					duration="3 Months";
					targetINRRange="";
					additionalRecommendation="ASA 81 mg + clopidogrel";
					comments="ASA 81 mg + clopidogrel";
				}
				else if(subDiagnosisDetail.equalsIgnoreCase("Aortic-after 3 months/NSR"))
				{
					recommendation="Warfarin not recommended";
					duration=CHRONIC;
					targetINRRange="";
					additionalRecommendation="ASA 81 mg daily";
					comments="ASA 81 mg daily";
				}

				else if(subDiagnosisDetail.equalsIgnoreCase("Mitral- first 3 months/NSR"))
				{
					recommendation=WARFARIN;
					duration="3 Months";
					targetINRRange="2-3";
				}

				else if(subDiagnosisDetail.equalsIgnoreCase("Mitral- after 3 months/NSR"))
				{
					recommendation="Warfarin not recommended.";
					duration=CHRONIC;
					targetINRRange="";
					additionalRecommendation="ASA 81 mg daily";
					comments="ASA 81 mg daily";
				}

			}
			//Valve replacement - Mechanical
			else if(medActionPlan.getDiagnosis().equalsIgnoreCase("Valve replacement - Mechanical"))
			{
				if(subDiagnosisDetail.equalsIgnoreCase("Aortic"))
				{
					recommendation=WARFARIN;
					duration=CHRONIC;
					targetINRRange="2-3";
					additionalRecommendation="Add ASA 81 mg daily if low bleeding risk";
					comments="Add ASA 81 mg daily if low bleeding risk";
				}


				else if(subDiagnosisDetail.equalsIgnoreCase("Mitral"))
				{
					recommendation=WARFARIN ;
					duration=CHRONIC;
					targetINRRange="2.5-3.5";
					additionalRecommendation="Add ASA 81 mg daily if low bleeding risk";
					comments="Add ASA 81 mg daily if low bleeding risk";
				}

				else if(subDiagnosisDetail.equalsIgnoreCase("Aortic + Mitral"))
				{
					recommendation=WARFARIN;
					duration=CHRONIC;
					targetINRRange="2.5-3.5";
					additionalRecommendation="Add ASA 81 mg daily if low bleeding risk";
					comments="Add ASA 81 mg daily if low bleeding risk";
				}
			}
			/*if(duration.equals("&ge; 3 month"))
        		duration="3 Months";*/
			medActionPlan.setRecommendedDurationOfTherapy(HtmlUtils.htmlUnescape(duration));

			patientMedicationData.setRecommendedDose(recommendation);
			patientMedicationData.setStrengths("5 mg");
			patientMedicationData.setAdditionalRecommendation(additionalRecommendation);
			patientMedicationData.setAllowSubstitution(true);
			patientMedicationData.setComments(comments);
			if(!doseAndDrugId.isEmpty())
				patientMedicationData.setStrengths(doseAndDrugId.get(0));
			System.out.println("inr range details duplicate value:::::::"+targetINRRange);
			medActionPlan.setRecommendedTarget(targetINRRange);
			System.out.println("inr range details duplicate value:123::::::"+targetINRRange);
			System.out.println(":::::::recommendation:::::::"+recommendation+"::::duration=:"+duration+":targetINRRange:::"+targetINRRange);

		}

		//comment bcoz first time only zero day...its 5 mg

		return event.getNewStep(); 
	}

	WeeklyDose weeklyDose=new WeeklyDose();

	/*
	 * change date when phase will change maintenance to initation
	 */
	public void changeStageOfAnticoagMeds()
	{
		logger.info("changeStageOfAnticoagMeds:::::"+medActionPlan.getMedicineStage());
		if(medActionPlan.getMedicineStage().equalsIgnoreCase(INITIATION_STAGE))
			medActionPlan.setDosingStartDate(new Date());
		logger.info("changeStageOfAnticoagMeds:::::"+medActionPlan.getDosingStartDate());
	}
	
	
	/*
	 * update medaction plan for particular meds..
	 * @author: Gopal Krishna Jha
	 */
	public String takeActionPlanForWarfarin()
	{
		logger.info("takeActionPlanForWarfarin:::"+medActionPlan.getAcceptableRange());
		weeklyDose.setPatientId(medActionPlan.getPatientId());
		weeklyDose.setProviderId(new ContextUtil().getProviderId());
		weeklyDose.setDoctorId(new ContextUtil().getLoginId());
		weeklyDose.setMedicineName(medActionPlan.getMedicineName());
		weeklyDose.setDrugId(medActionPlan.getDrugId());
		weeklyDose.setDrugNameId(medActionPlan.getDrugNameId());
		weeklyDose.setStrength(medActionPlan.getDose());

		
	
		patientMedicineService.updateTakeActionPlan(medActionPlan,weeklyDose);
		currentAntiCoagMedList=new ArrayList<PatientMedicationData>();

		for(MedActionPlan med:medicalActionPlanList)
		{
			if(med.getDrugId()==medActionPlan.getDrugId())
			{
				med.setAcceptableRange(medActionPlan.getAcceptableRange());
				med.setLastUpdateDate(new Date());
			}
		}

		return "go_to_anticoag";


	}

	public WeeklyDose getWeeklyDose() {
		return weeklyDose;
	}

	public void setWeeklyDose(WeeklyDose weeklyDose) {
		this.weeklyDose = weeklyDose;
	}
	List<String>doseAndDrugId=new ArrayList<String>();
	//private boolean showNotesForINRLab;
	private MedActionPlan latestMedActionPlanForINR=new MedActionPlan();
	private boolean showNotesMsgINRLab;

	public boolean isShowNotesMsgINRLab() {
		showNotesMsgINRLab=false;
		for(MedActionPlan med :getMedicalActionPlanList())
		{
			if(med.getLab().equalsIgnoreCase("INR"))
				showNotesMsgINRLab=true;
		}
		return showNotesMsgINRLab;
	}

	public void setShowNotesMsgINRLab(boolean showNotesMsgINRLab) {
		this.showNotesMsgINRLab = showNotesMsgINRLab;
	}


	public List<String> getDoseAndDrugId() {
		return doseAndDrugId;
	}
	//private int checkNotesForLab=0;

	/*public int getCheckNotesForLab() {
		logger.info("checkNotesForLab::::::"+checkNotesForLab);
		if(checkNotesForLab==0)
		{
			showNotesForINRLab=false;
			latestMedActionPlanForINR=new MedActionPlan();
			getMedicalActionPlanList();
			Date medactionDateForcompare = null;
			checkNotesForLab=1;
			List<Date> medactionDateForcompareList=new ArrayList<Date>();

			for(MedActionPlan med :medicalActionPlanList)
			{

				if(med.getLab().equalsIgnoreCase("INR"))
					medactionDateForcompareList.add(med.getDosingStartDate());
			}
			if (medactionDateForcompareList.size()>=1) {
				Collections.sort(medactionDateForcompareList);
				medactionDateForcompare=Collections.max(medactionDateForcompareList);
			}

			System.out.println(":::::::medactionDateForcompare::"+medactionDateForcompare);
			if(medactionDateForcompare!=null)
				showNotesForINRLab=checkINRLabAfterMedActionPlan(medactionDateForcompare);
			
			//showMsgForINRLabResult=checkDate;
			System.out.println("::::::::::showNotesForINRLab:::"+showNotesForINRLab);
			if(!showNotesForINRLab)
			{
				for(MedActionPlan med :medicalActionPlanList)
				{

					if(med.getLab().equalsIgnoreCase("INR") && med.getDosingStartDate()==medactionDateForcompare)
						latestMedActionPlanForINR=med;
				}
				//for setting Image...

				FacesContext context = FacesContext	.getCurrentInstance();
				LabManageBean labManageBean=(LabManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"labManageBean");
				ProcedureResultHistory procedureResultHistory=new ProcedureResultHistory();
				procedureResultHistory=labManageBean.getCurrentLabValue();

				double lowerRange = 0,higherRange=0;
				if(procedureResultHistory.getResult()!=null && latestMedActionPlanForINR.getAcceptableRange()!=null)
				{
					//System.out.println(latestMedActionPlanForINR.getAcceptableRange().isEmpty());
					//System.out.println(latestMedActionPlanForINR.getAcceptableRange().length());
					if(latestMedActionPlanForINR.getAcceptableRange().length()!=0)
						//if(latestMedActionPlanForINR.getAcceptableRange()!=null || !latestMedActionPlanForINR.getAcceptableRange().isEmpty())
					{
						lowerRange=Double.parseDouble(latestMedActionPlanForINR.getAcceptableRange().substring(0, latestMedActionPlanForINR.getAcceptableRange().indexOf("-")));
						higherRange=Double.parseDouble(latestMedActionPlanForINR.getAcceptableRange().substring(latestMedActionPlanForINR.getAcceptableRange().indexOf("-")+1));
					}
					System.out.println(procedureResultHistory.getResult()+"::::::::lowerRange:::::"+lowerRange+":::::::::HigherRange::"+higherRange);
					//String stage="Initiation";
					//latestMedActionPlanForINR.setNoOfDaysStartingFromMedActionPlan((new DateUtil().findNumberOfDays(latestMedActionPlanForINR.getDosingStartDate(),new Date()) +1));
					latestMedActionPlanForINR.setNoOfDaysStartingFromMedActionPlan((new DateUtil().findNumberOfDays(latestMedActionPlanForINR.getDosingStartDate(),procedureResultHistory.getDateResult()) +1)); //for day difference instead of today's date used lab date by venu on 16th september
					String message=findlabMessageForINR(latestMedActionPlanForINR.getNoOfDaysStartingFromMedActionPlan(),latestMedActionPlanForINR.getMedicineStage(),procedureResultHistory.getResult(),
							latestMedActionPlanForINR.getDosingStartDate(),lowerRange,higherRange);
					latestMedActionPlanForINR.setLabImageStatusForINR(message);
					
				}

			}

		}
		return checkNotesForLab;
	} */
	
	private int showAnticoagMedactionPlanMessage;
	private List<MedActionPlan>medactionPlanMessageBeforeLab=new ArrayList<MedActionPlan>();
	private List<MedActionPlan>medactionPlanMessageAfterLab=new ArrayList<MedActionPlan>();
	
	
	
	
	public int getShowAnticoagMedactionPlanMessage() {
		logger.info("getShowAnticoagMedactionPlanMessage:::"+showAnticoagMedactionPlanMessage);
		if(showAnticoagMedactionPlanMessage==0)
		{
			medactionPlanMessageBeforeLab=new ArrayList<MedActionPlan>();
		medactionPlanMessageAfterLab=new ArrayList<MedActionPlan>();
			
			FacesContext context = FacesContext	.getCurrentInstance();
			LabManageBean labManageBean=(LabManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"labManageBean");
			//ProcedureResultHistory procedureResultHistory=new ProcedureResultHistory();
			List<ProcedureResultHistory> procedureResultListForCurrentLabList=new ArrayList<ProcedureResultHistory>();
			procedureResultListForCurrentLabList=labManageBean.getProcedureResultListForCurrentLab();
			logger.info("med action plan size::::"+getMedicalActionPlanList().size());
			for(MedActionPlan medactionPlan:getMedicalActionPlanList())
			{
				boolean check=false;
				String labName=medactionPlan.getLab();
				for(ProcedureResultHistory procHistory:procedureResultListForCurrentLabList)
				{
				//	logger.info(medactionPlan.getDosingStartDate()+"111<><><><>::labName:::"+labName+"::::procHistory.getLabName()"+procHistory.getLabName()+procHistory.getDateResult());
					if(labName.equalsIgnoreCase(procHistory.getLabName()) 
							&& ((medactionPlan.getDosingStartDate().before(procHistory.getDateResult())) ||(medactionPlan.getDosingStartDate().equals(procHistory.getDateResult()))))
					{
						medactionPlan.setLabResult(procHistory.getResult());
						medactionPlan.setLabDate(procHistory.getDateResult());
						logger.info("medactionPlan.getLab():::::::::::::::"+medactionPlan.getLab());
						logger.info(medactionPlan.getLab().equalsIgnoreCase("INR"));
						if(medactionPlan.getLab().equalsIgnoreCase("INR"))
								{
						
							double lowerRange = 0,higherRange=0;
							lowerRange=Double.parseDouble(medactionPlan.getAcceptableRange().substring(0, medactionPlan.getAcceptableRange().indexOf("-")));
							higherRange=Double.parseDouble(medactionPlan.getAcceptableRange().substring(medactionPlan.getAcceptableRange().indexOf("-")+1));
							
								//medactionPlan.setNoOfDaysStartingFromMedActionPlan((new DateUtil().findNumberOfDays(medactionPlan.getDosingStartDate(),new Date())+1));
								medactionPlan.setNoOfDaysStartingFromMedActionPlan((new DateUtil().findNumberOfDays(medactionPlan.getDosingStartDate(),procHistory.getDateResult()))); //for day difference instead of today's date used lab date by venu on 16th september
								
								logger.info(medactionPlan.getNoOfDaysStartingFromMedActionPlan()+"lowerRange:::::::::::::::::::::::::::+"+lowerRange+"::::higherRange:::::::"+higherRange);
								//int noOFdays=findNoOfdays(medactionPlan.getLabFrequency());
								String message=findlabMessageForINR(medactionPlan.getNoOfDaysStartingFromMedActionPlan(),medactionPlan.getMedicineStage(),medactionPlan.getLabResult(),
										medactionPlan.getDosingStartDate(),lowerRange,higherRange);
								logger.info("message:::::::::::::::::"+message);
								medactionPlan.setLabImageStatusForINR(message);
								medactionPlan.setShowNotesForINRLab(true);
								}
						
						check=true;
					}
				}
				
				if(check)
					medactionPlanMessageAfterLab.add(medactionPlan);
				else
				{
					//check dosing startdate and date of next lab and compare to today date.
					
					
					int noOFdays=findNoOfdays(medactionPlan.getLabFrequency());
					
					//int noOFdays=findNoOfdays(medlist.getLabFrequency());
					System.out.println("MedActionListForINRLabMessage :::noOFdays:::::89:::"+noOFdays);
					
					//medlist.setNextLabDate(new DateUtil().AddDate(medlist.getDosingStartDate(), noOFdays));
					Date labDate=new DateUtil().AddDate(medactionPlan.getDosingStartDate(), noOFdays);
					System.out.println("medactionPlan.getDosingStartDate()::"+labDate+":::"+medactionPlan.getDosingStartDate()+":::"+noOFdays);
					if(labDate.before(new DateUtil().getTodayDate()))
					{
						System.out.println(":::::::::labDate::before::");
						medactionPlanMessageBeforeLab.add(medactionPlan);
					}
					//Date comapreForLab=
				}
				
			}
			
			logger.info("size 1:::"+medactionPlanMessageAfterLab.size()+"::::::v2:::::"+medactionPlanMessageBeforeLab.size());
			showAnticoagMedactionPlanMessage++;
		}
		return showAnticoagMedactionPlanMessage;
	}
	public void setShowAnticoagMedactionPlanMessage(
			int showAnticoagMedactionPlanMessage) {
		this.showAnticoagMedactionPlanMessage = showAnticoagMedactionPlanMessage;
	}
	public List<MedActionPlan> getMedactionPlanMessageBeforeLab() {
		return medactionPlanMessageBeforeLab;
	}
	public void setMedactionPlanMessageBeforeLab(
			List<MedActionPlan> medactionPlanMessageBeforeLab) {
		this.medactionPlanMessageBeforeLab = medactionPlanMessageBeforeLab;
	}
	public List<MedActionPlan> getMedactionPlanMessageAfterLab() {
		return medactionPlanMessageAfterLab;
	}
	public void setMedactionPlanMessageAfterLab(
			List<MedActionPlan> medactionPlanMessageAfterLab) {
		this.medactionPlanMessageAfterLab = medactionPlanMessageAfterLab;
	}
		/*
	 * @author: Gopal
	 */
		private String findlabMessageForINR(int noOfdays, String stage, Double result, Date dosingStartDate, double lowerRange, double higherRange) {
		//String message="";
		
		//int noOfdays=new DateUtil().findNumberOfDays(dosingStartDate,new Date());
		logger.info(result+"findlabMessageForINR:::noOfdays:"+noOfdays+":::::::::::stage:::"+stage);
		noOfdays=noOfdays+1;
		if(stage.equalsIgnoreCase(INITIATION_STAGE) )			
			{
			//System.out.println("inside if condition");
				if(noOfdays==1)
				{
					System.out.println("1inside if condition");
					if(result>1)
						return RED;
					else
						return GREEN;
				}
				
				 if(noOfdays==2)
				{
					 System.out.println("2inside if condition");
					if(result>2.5)
						return RED;
					else if(result< 1.5)
					{
						return GREEN;
					}
					
					else
						return AMBER;
				}
				
				if(noOfdays>=3 )
				{
					System.out.println("3inside if condition");
					if(result>3)
						return RED;
					else
						return AMBER;
				}
		
			}
	
			else
				{
				logger.info(result+"findlabMessageForINR:::noOfdays:"+noOfdays+":::::::::::stage:::"+higherRange+":::lowerRange::"+lowerRange);
					if(result>higherRange)	
						return RED;
					else if(result < lowerRange)	
						return AMBER;
					//if(result>=lowerRange && result<=higherRange)
					else
						return GREEN;
					
				}
		
			return "";
		//	return message;
		}
/*	public void setCheckNotesForLab(int checkNotesForLab) {
		this.checkNotesForLab = checkNotesForLab;
	}
	public boolean isShowNotesForINRLab() {
		logger.info("isShowNotesForINRLab method start");
		//System.out.println("::::::::::::::::::med name::"+latestMedActionPlanForINR.getMedicineName());
		return showNotesForINRLab;
	}

	public void setShowNotesForINRLab(boolean showNotesForINRLab) {
		this.showNotesForINRLab = showNotesForINRLab;
	}*/

	public MedActionPlan getLatestMedActionPlanForINR() {
		return latestMedActionPlanForINR;
	}

	public void setLatestMedActionPlanForINR(MedActionPlan latestMedActionPlanForINR) {
		this.latestMedActionPlanForINR = latestMedActionPlanForINR;
	}

	public void setDoseAndDrugId(List<String> doseAndDrugId) {
		this.doseAndDrugId = doseAndDrugId;
	}
	private boolean showMsgForINRLabResult;


	public boolean isShowMsgForINRLabResult() {
		return showMsgForINRLabResult;
	}

	public void setShowMsgForINRLabResult(boolean showMsgForINRLabResult) {
		this.showMsgForINRLabResult = showMsgForINRLabResult;
	}
	private int  calculateNoOfDaysForWarfarin=0;
	public int getCalculateNoOfDaysForWarfarin() {
		return calculateNoOfDaysForWarfarin;
	}

	public void setCalculateNoOfDaysForWarfarin(int calculateNoOfDaysForWarfarin) {
		this.calculateNoOfDaysForWarfarin = calculateNoOfDaysForWarfarin;
	}


	public Date getWarfarinStartDate() {
		return warfarinStartDate;
	}

	public void setWarfarinStartDate(Date warfarinStartDate) {
		this.warfarinStartDate = warfarinStartDate;
	}
	/*
	 * edit warfarin maintenance..
	 * @author: Gopal Krishna Jha
	 * 
	 */


	public void editMaintenenace()
	{
		logger.info("editMaintenenace method start");
		
		showMsgForINRLabResult=false;
		//questionList=new ArrayList<String>();
		//questionForMAintenance=new String();
		calculateNoOfDaysForWarfarin=0;
		medActionPlan = (MedActionPlan) getMedicalActionDataTable().getRowData();
		System.out.println(medActionPlan.getLabFrequency()+":::::::::::::::medActionPlan:::::"+medActionPlan.getAcceptableRange());
		/*if(medActionPlan.getMedicineStage().equals(MAINTAINENCE_STAGE))
			medActionPlan.setConfirmDayForMaintenance("More Than 7 Days");*/
		//getCurrentAntiCoagMedList();
		/*for(PatientMedicationData pat:getCurrentAntiCoagMedList())
		{
			if(pat.getDrugId()==medActionPlan.getDrugId())
				warfarinStartDate=pat.getStartDate();

		}
		if(warfarinStartDate!=null)*/
			calculateNoOfDaysForWarfarin=new DateUtil().findNumberOfDays(medActionPlan.getDosingStartDate(),new Date());
			logger.info("calculateNoOfDaysForWarfarin::::"+calculateNoOfDaysForWarfarin);
		calculateNoOfDaysForWarfarin++;



		if(calculateNoOfDaysForWarfarin==1)
		{
			medActionPlan.setShowConfirmDayMsg(calculateNoOfDaysForWarfarin +" Day");
			medActionPlan.setValueConfirmDaysMsg(""+calculateNoOfDaysForWarfarin);

		}
		else if(calculateNoOfDaysForWarfarin>=2 && calculateNoOfDaysForWarfarin<=5)
		{
			medActionPlan.setShowConfirmDayMsg(calculateNoOfDaysForWarfarin +" Days");
			medActionPlan.setValueConfirmDaysMsg(""+calculateNoOfDaysForWarfarin);
		}
		else
		{
			medActionPlan.setShowConfirmDayMsg("More Than 7 Days");
			medActionPlan.setValueConfirmDaysMsg(""+7);
		}

		doseDetailList=new ArrayList<WSDrug>();
		doseDetailList=patientMedicineService.findDoseListOfParticularMeds(medActionPlan.getDrugNameId(),null);
		weeklyDose=new WeeklyDose();
		weeklyDose=patientMedicineService.findWeeklyDoseOfParticularPatient(medActionPlan.getPatientId(),medActionPlan.getDoctorId(),medActionPlan.getDrugId());
		boolean checkDate=checkINRLabAfterMedActionPlan(medActionPlan.getDosingStartDate());
		calCulateDoseAverage();

		showMsgForINRLabResult=checkDate;
		//checkNotesForLab=0;
		showAnticoagMedactionPlanMessage=0;
		int noOFdays=findNoOfdays(medActionPlan.getLabFrequency());
		
		medActionPlan.setNextLabDate(new DateUtil().AddDate(new DateUtil().getTodayDate(), noOFdays));
		//medActionPlan.setNoOfDaysStartingFromMedActionPlan((new DateUtil().findNumberOfDays(medActionPlan.getDosingStartDate())) +1)); //for day difference instead of today's date used lab date by venu on 16th september
		medActionPlan.setNoOfDaysStartingFromMedActionPlan((new DateUtil().findNumberOfDays(medActionPlan.getDosingStartDate(),new Date())+1));
		
		logger.info(noOFdays+"next lab date::::"+medActionPlan.getNextLabDate());
		
		/*FacesContext context = FacesContext	.getCurrentInstance();
		LabManageBean labManageBean=(LabManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"labManageBean");
		ProcedureResultHistory procedureResultHistory=new ProcedureResultHistory();
		procedureResultHistory=labManageBean.getCurrentLabValue();

		System.out.println("::::::getLastUpdateDate:::"+medActionPlan.getLastUpdateDate()+":::::::getDateResult::"+procedureResultHistory.getDateResult());
		if(procedureResultHistory.getDateResult()!=null)
		{
			if(medActionPlan.getLastUpdateDate().after(procedureResultHistory.getDateResult()))
			{
				System.out.println("inside if condition:::::::::");
				showMsgForINRLabResult=true;
			}
			else
			{
				System.out.println("inside else condition><><><><><");
			}
		}
		else
			showMsgForINRLabResult=true;


	}
		 */
	}
	/*
	 * @author: Gopal Krishna jha
	 */
	private boolean checkINRLabAfterMedActionPlan(Date lastUpdateDate) {
		FacesContext context = FacesContext	.getCurrentInstance();
		LabManageBean labManageBean=(LabManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"labManageBean");
		ProcedureResultHistory procedureResultHistory=new ProcedureResultHistory();
		procedureResultHistory=labManageBean.getCurrentLabValue();
		boolean showMsgForINRLabResult = false;
		System.out.println("::::::getLastUpdateDate:::"+medActionPlan.getLastUpdateDate()+":::::::getDateResult::"+procedureResultHistory.getDateResult());
		if(procedureResultHistory.getDateResult()!=null)
		{

			if(lastUpdateDate.after(procedureResultHistory.getDateResult()))
			{
				System.out.println("inside if condition:::::::::");
				showMsgForINRLabResult=true;
			}
			else
			{
				System.out.println("inside else condition><><><><><");
			}
		}
		else
			showMsgForINRLabResult=true;

		return showMsgForINRLabResult;
	}

	//public<String>confirmDayListForWarfarinmaintenance = new 
	/*
	 * on flow process of warfarin maintenance..
	 * @author: Gopal Krishna Jha
	 */
	public String onFlowProcessForwarfarinMaintenance(FlowEvent event)
	{
		logger.info("startted :: onFlowProcessForwarfarinMaintenance");
		
		if(((event.getOldStep().equalsIgnoreCase("step1")) && (event.getNewStep().equalsIgnoreCase("Step2"))))
		{
			/*if(medActionPlan.isShowNotesForINRLab())
			{
				return "step1";
			}*/
			FacesContext context = FacesContext	.getCurrentInstance();

			LabManageBean labManageBean=(LabManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"labManageBean");
			//LabManageBean lab=(LabManageBean)context.getBean("labManageBean");
			ProcedureResultHistory procedureResultHistory=new ProcedureResultHistory();
			/*if(!(labManageBean.getLabHistoryListForAntiCoag().isEmpty()))
			  procedureResultHistory =(ProcedureResultHistory)labManageBean.getLabHistoryListForAntiCoag().get(0);*/
			procedureResultHistory=labManageBean.getCurrentLabValue();
			double inrValue=0.0;
			//if(labManageBean.getLabHistoryListForAntiCoag().size()>0)

			if(procedureResultHistory.getDateResult()!=null)
			{
				if(medActionPlan.getDosingStartDate().after(procedureResultHistory.getDateResult()))
				{
					System.out.println("inside if condition:::::::::"+procedureResultHistory.getResult());
					//showMsgForINRLabResult=true;
				}
				else
				{
					inrValue=procedureResultHistory.getResult();
					System.out.println("inside else condition><><><><><"+procedureResultHistory.getResult());
				}
			}
			//	else
			//showMsgForINRLabResult=true;


			System.out.println("::::::::::::::::::::"+medActionPlan.getAcceptableRange());
			double lowerRange = 0,higherRange=0;

			if(medActionPlan.getAcceptableRange()!=null)
			{
				lowerRange=Double.parseDouble(medActionPlan.getAcceptableRange().substring(0, medActionPlan.getAcceptableRange().indexOf("-")).trim());
				higherRange=Double.parseDouble(medActionPlan.getAcceptableRange().substring(medActionPlan.getAcceptableRange().indexOf("-")+1).trim());
			}


			String dose="";
			showQuestionarieFormaintenance=0;
			System.out.println(higherRange+"::::::::::::::::::><><>inrValue<> "+inrValue+"::::::::::::calculateNoOfDaysForWarfarin::"+calculateNoOfDaysForWarfarin);
			questionForMaintenanceList=new ArrayList<QuestionForMaintenance>();
			if(medActionPlan.getMedicineStage().equalsIgnoreCase(INITIATION_STAGE))		
			//if(medActionPlan.getMedicineStage().equals(INITIATION_STAGE))
			{
				medActionPlan.setNoOfDaysStartingFromMedActionPlan((new DateUtil().findNumberOfDays(medActionPlan.getDosingStartDate(),new Date())+1));
				
				 String color= findlabMessageForINR(medActionPlan.getNoOfDaysStartingFromMedActionPlan(),INITIATION_STAGE, inrValue,medActionPlan.getDosingStartDate(),  lowerRange,  higherRange);
				 logger.info("color:::::::::::::::::"+color);
				 
				 if(!color.equals(GREEN))
				 {
					 questionForMaintenanceList=findQuestionListForMaintenance("Lower",INITIATION_STAGE);
					 showQuestionarieFormaintenance=1;
				 }
				
			}
			
			else
			{
				if(inrValue<lowerRange && inrValue!=0)
					{
					//lower
					questionForMaintenanceList=findQuestionListForMaintenance("Lower",MAINTAINENCE_STAGE);
					showQuestionarieFormaintenance=2;
				
					}
				if(inrValue>higherRange)
						{
					//higher
							showQuestionarieFormaintenance=2;
							questionForMaintenanceList=findQuestionListForMaintenance("Higher",MAINTAINENCE_STAGE);
				
						}
			}
			logger.info("size::::::::::::::::"+questionForMaintenanceList.size()+":::::::::");
			logger.info("showQuestionarieFormaintenance::::"+showQuestionarieFormaintenance);
		}
		if(((event.getOldStep().equalsIgnoreCase("step2")) && (event.getNewStep().equalsIgnoreCase("Step3"))))

		{
			System.out.println(":::::::::::::"+medActionPlan.getConfirmDayForMaintenance()+"::::::::::::"+medActionPlan.getMedicineStage());
			//System.out.println(questionList.isEmpty());
			System.out.println(medActionPlan.getAcceptableRange().equals("2-3"));
			System.out.println(medActionPlan.getAcceptableRange().equalsIgnoreCase("2-3"));
			
			doseCalculationOfWarfarin(medActionPlan);
			
			setCheckForInrQuestion(false);
			System.out.println("1111111111111111111>>>>>>>:::"+checkForInrQuestion);
			
			for(QuestionForMaintenance ques:questionForMaintenanceList)
			{
				System.out.println(":::::::::::::ans::::"+ques.getSelectAns());
				
				if(ques.getSelectAns().equalsIgnoreCase(YES) && (!ques.getQuestion().equalsIgnoreCase("Are you taking the warfarin (Coumadin) as prescribed?")) )
				{
					System.out.println(":::::::::::::::"+ques.getSelectAns());
					setCheckForInrQuestion(true);
					break;
				}
				
				if(ques.getSelectAns().equalsIgnoreCase("No") && (ques.getQuestion().equalsIgnoreCase("Are you taking the warfarin (Coumadin) as prescribed?")) )
				{
					System.out.println(":::::::::::::::"+ques.getSelectAns());
					setCheckForInrQuestion(true);
					break;
				}
				
			}
			System.out.println("setCheckForInrQuestion:::::::::::::"+checkForInrQuestion);

		}
		logger.info("next Lab Date::::::::::::::"+medActionPlan.getNextLabDate());
		
		return event.getNewStep();
	}
	private QuestionForMaintenance questionForMaintenance=new QuestionForMaintenance();
	private List<QuestionForMaintenance> findQuestionListForMaintenance(
			String range, String stage) {
	logger.info(stage+"findQuestionListForMaintenance::::::"+range);
	questionForMaintenanceList=new ArrayList<QuestionForMaintenance>();
	
	if(stage.equals(INITIATION_STAGE))
	{
		QuestionForMaintenance questionForMaintenance=new QuestionForMaintenance();
		
		//questionForMaintenance.setSelectAns("");
		questionForMaintenance.setQuestion("Are you taking the warfarin (Coumadin) as prescribed?");
		questionForMaintenanceList.add(questionForMaintenance);
		
		 questionForMaintenance=new QuestionForMaintenance();
		questionForMaintenance.setQuestion("Have you been admitted into a hospital or seen at another clinic? ");
		questionForMaintenanceList.add(questionForMaintenance);
		
		 questionForMaintenance=new QuestionForMaintenance();
		questionForMaintenance.setQuestion("If the answer to prior question is yes ask.  Was your warfarin (coumadin) dose adjusted in that visit?");
		questionForMaintenanceList.add(questionForMaintenance);
			
		questionForMaintenance=new QuestionForMaintenance();
		questionForMaintenance.setQuestion("Has any other health care provider adjusted your dose? ");
		questionForMaintenanceList.add(questionForMaintenance);
				
		questionForMaintenance=new QuestionForMaintenance();
		questionForMaintenance.setQuestion("Have you had changes in your diet? ");
		questionForMaintenanceList.add(questionForMaintenance);
					
		questionForMaintenance=new QuestionForMaintenance();
		questionForMaintenance.setQuestion("Are you going to continue on this new diet?");
		questionForMaintenanceList.add(questionForMaintenance);
		
		questionForMaintenance=new QuestionForMaintenance();
		questionForMaintenance.setQuestion("Have you had any significant changes in the amount of alcohol that you drink? ");
		questionForMaintenanceList.add(questionForMaintenance);
		
		//high inr
		
		questionForMaintenance=new QuestionForMaintenance();
		questionForMaintenance.setQuestion("Have you taken any extra doses of warfarin (Coumadin)?");
		questionForMaintenanceList.add(questionForMaintenance);
					
		questionForMaintenance=new QuestionForMaintenance();
		questionForMaintenance.setQuestion("Have you significantly decreased the amount of food you eat recently?");
		questionForMaintenanceList.add(questionForMaintenance);
		
		questionForMaintenance=new QuestionForMaintenance();
		questionForMaintenance.setQuestion("Have you started taking new medications? ");
		questionForMaintenanceList.add(questionForMaintenance);
		questionForMaintenance=new QuestionForMaintenance();
		questionForMaintenance.setQuestion("Have you notice any signs of active bleeding recently?");
		questionForMaintenanceList.add(questionForMaintenance);
		//low inr
		questionForMaintenance=new QuestionForMaintenance();
		questionForMaintenance.setQuestion("Have you missed any doses of warfarin (Coumadin)?");
		questionForMaintenanceList.add(questionForMaintenance);
		
		questionForMaintenance=new QuestionForMaintenance();
		questionForMaintenance.setQuestion("Have you significantly increased the amount of food you eat recently?");
		questionForMaintenanceList.add(questionForMaintenance);
		questionForMaintenance=new QuestionForMaintenance();
		questionForMaintenance.setQuestion("Have you recently stopped or decreased the dose of any medications?");
		questionForMaintenanceList.add(questionForMaintenance);
		
		
		
		
	}
	
	else
	{
			if(range.equalsIgnoreCase("Higher"))
			{
				QuestionForMaintenance questionForMaintenance=new QuestionForMaintenance();
				
				//questionForMaintenance.setSelectAns("");
				questionForMaintenance.setQuestion("Are you taking the warfarin (Coumadin) as prescribed?");
				questionForMaintenanceList.add(questionForMaintenance);
				
				 questionForMaintenance=new QuestionForMaintenance();
				questionForMaintenance.setQuestion("Have you taken any extra doses of warfarin (coumadin)");
				questionForMaintenanceList.add(questionForMaintenance);
				
				 questionForMaintenance=new QuestionForMaintenance();
				questionForMaintenance.setQuestion("Have you been admitted into a hospital or seen at another clinic?");
				questionForMaintenanceList.add(questionForMaintenance);
				
				 questionForMaintenance=new QuestionForMaintenance();
				questionForMaintenance.setQuestion("Was your warfarin (coumadin) dose adjusted in that visit?");
				questionForMaintenanceList.add(questionForMaintenance);
				 
				questionForMaintenance=new QuestionForMaintenance();
				questionForMaintenance.setQuestion("Has any other health care provider adjusted your dose?");
				questionForMaintenanceList.add(questionForMaintenance);
				
				 questionForMaintenance=new QuestionForMaintenance();
				questionForMaintenance.setQuestion("Have you significantly decreased the amount of food you eat recently?");
				questionForMaintenanceList.add(questionForMaintenance);
				
				 questionForMaintenance=new QuestionForMaintenance();
				questionForMaintenance.setQuestion("Have you had changes in your diet? Taking too little of foods that have Vit K.");
				questionForMaintenanceList.add(questionForMaintenance);
				
				 questionForMaintenance=new QuestionForMaintenance();
				questionForMaintenance.setQuestion("Are you going to continue on this new diet?");
				questionForMaintenanceList.add(questionForMaintenance);
				
			}
			else 
				if(range.equalsIgnoreCase("Lower"))
				{
					QuestionForMaintenance questionForMaintenance=new QuestionForMaintenance();
					questionForMaintenance.setQuestion("Are you taking the warfarin (Coumadin) as prescribed?");
					questionForMaintenanceList.add(questionForMaintenance);
					
					
					 questionForMaintenance=new QuestionForMaintenance();
					 questionForMaintenance.setQuestion("Have you missed any doses?");
					questionForMaintenanceList.add(questionForMaintenance);
					
					 questionForMaintenance=new QuestionForMaintenance();
					 questionForMaintenance.setQuestion("Have you been admitted into a hospital or seen at another clinic?");
					questionForMaintenanceList.add(questionForMaintenance);
					
					 questionForMaintenance=new QuestionForMaintenance();
					 questionForMaintenance.setQuestion("If the answer to prior question is yes ask.  Was your warfarin (coumadin) dose adjusted in that visit?");
					questionForMaintenanceList.add(questionForMaintenance);
					
					 questionForMaintenance=new QuestionForMaintenance();
					 questionForMaintenance.setQuestion("Has any other health care provider adjusted your dose?");
					questionForMaintenanceList.add(questionForMaintenance);
					
					 questionForMaintenance=new QuestionForMaintenance();
					 questionForMaintenance.setQuestion("Have you significantly increased the amount of food you eat recently?");
					questionForMaintenanceList.add(questionForMaintenance);
					
					 questionForMaintenance=new QuestionForMaintenance();
					 questionForMaintenance.setQuestion("Have you had changes in your diet? Taking too much of foods that have Vit K.");
					questionForMaintenanceList.add(questionForMaintenance);
					
					 questionForMaintenance=new QuestionForMaintenance();
					 questionForMaintenance.setQuestion("Have you recently stopped or decreased the dose of any medication?");
					questionForMaintenanceList.add(questionForMaintenance);
					
				}
		}
		return questionForMaintenanceList;
	}

private List<QuestionForMaintenance>questionForMaintenanceList=new ArrayList<QuestionForMaintenance>();
private boolean checkForInrQuestion;

	public List<QuestionForMaintenance> getQuestionForMaintenanceList() {
	return questionForMaintenanceList;
}
public void setQuestionForMaintenanceList(
		List<QuestionForMaintenance> questionForMaintenanceList) {
	this.questionForMaintenanceList = questionForMaintenanceList;
}
	/* doseCalculation Of Warfarin maintenance and initiation 
	 * @author: Gopal Krishna Jha
	 */
	private void doseCalculationOfWarfarin(MedActionPlan medActionPlan) {
		logger.info("doseCalculationOfWarfarin method start:::"+medActionPlan.getDosingStartDate());
		int differenceOfDate=new DateUtil().findNumberOfDays(medActionPlan.getDosingStartDate(),new Date());
		
		System.out.println("differenceOfDate::::::::::::::"+differenceOfDate);

		double inrValue=0.0;
		FacesContext context = FacesContext	.getCurrentInstance();
		LabManageBean labManageBean=(LabManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"labManageBean");
		ProcedureResultHistory procedureResultHistory=new ProcedureResultHistory();
		procedureResultHistory=labManageBean.getCurrentLabValue();
	
		if(procedureResultHistory.getDateResult()!=null)
		{
			//if(medActionPlan.getDosingStartDate().after(procedureResultHistory.getDateResult()))
			if(procedureResultHistory.getDateResult().before(medActionPlan.getDosingStartDate()))
			{
				inrValue=procedureResultHistory.getResult();
				System.out.println("inside if condition:::::::::"+procedureResultHistory.getResult());
				//showMsgForINRLabResult=true;
			}
			else
			{
				inrValue=procedureResultHistory.getResult();
				System.out.println("inside else condition><><><><><"+procedureResultHistory.getResult());
			}
		}
		System.out.println(":111::::::size::::::inr value:::"+inrValue);
		
		String dose="";
		
		//if(medActionPlan.getMedicineStage().equalsIgnoreCase(INITIATION_STAGE) && differenceOfDate<=5)	
		if(medActionPlan.getMedicineStage().equalsIgnoreCase(INITIATION_STAGE) )	
		{
		
			if(differenceOfDate==0)
				{
				//System.out.println("::::::::::111");
				dose="5 mg";
				}
			else if(differenceOfDate==1)
			{
			//System.out.println("::::::::::122222221");
				if(inrValue <1.5  && inrValue!=0)
					dose="5 mg";
	
				if(inrValue >=1.5 && inrValue<2 )
					dose="2.5 mg";
	
				if(inrValue >=2.0 && inrValue<=2.5 )
					dose="1.0-2.5 mg";
	
				if(inrValue >2.5 )
					dose="0.0 mg";
			}

					else if(differenceOfDate==2)
					{
						//System.out.println("::::::::::122222221");
						if(inrValue <1.5  && inrValue!=0)
							dose="5.0 - 10.0  mg";
			
						if(inrValue >=1.5 && inrValue<2 )
							dose="2.5 - 5.0 mg";
			
						if(inrValue >=2.0 && inrValue<=2.5 )
							dose="0 - 2.5 mg";
			
						if(inrValue >2.5 && inrValue<=3.0  )
							dose="0 - 2.5 mg";
			
						if(inrValue >3.0  )
							dose="0.0 mg";
			
			
					}
			
					else if(differenceOfDate==3)
					{
						//System.out.println("::::::::::122222221");
						if(inrValue <1.5  && inrValue!=0)
							dose="10 mg";
			
						if(inrValue >=1.5 && inrValue<2 )
							dose="5 - 7.5 mg";
			
						if(inrValue >=2.0 && inrValue<=3 )
							dose="0 - 5 mg";
			
						if(inrValue >3 )
							dose="0.0 mg";
			
			
					}
			
					else if(differenceOfDate==4)
					{
						System.out.println("::differenceOfDate 4::::::::122222221");
						if(inrValue <1.5  && inrValue!=0)
							dose="10 mg";
			
						if(inrValue >=1.5 && inrValue<2 )
							dose="7.5 - 10 mg";
			
						if(inrValue >=2.0 && inrValue<=3 )
							dose="0 - 5 mg";
			
						if(inrValue >3 )
							dose="0.0 mg";
			
			
					}
			
					else if(differenceOfDate>=5)
					{
						//System.out.println("::::::::::122222221");
						if(inrValue <1.5  && inrValue!=0)
							dose="7.5 - 12.5 mg";
			
						if(inrValue >=1.5 && inrValue<2 )
							dose="5 - 10 mg";
			
						if(inrValue >=2.0 && inrValue<=3 )
							dose="0 - 7.5 mg";
			
						if(inrValue >3 )
							dose="0.0 mg";
			
			
					}
			
		}


		//for maintenance
		else 
		{
			if(medActionPlan.getAcceptableRange().equalsIgnoreCase("2-3") || medActionPlan.getAcceptableRange().equalsIgnoreCase("2.0-3.0"))
			{
				//dose=dose+"<br/>";
				if(inrValue<1.5  && inrValue!=0)
				{
					dose="<br/>1. Consider a booster dose of 1.5-2 times daily maintenance dose. <br/>"+
							"2. Consider resumption of prior maintenance dose if factor causing decreaseed INR is transient (eg missed dose). <br/>"+
							"3. If dosage adjustment is needed, increase maintenance dose by 10-20%.";

				}

				else if(inrValue>=1.5 && inrValue < 1.8 )
				{
					dose="<br/>1. Consider a booster dose of 1.5-2 times daily maintenance dose <br/>."+
							"2. Consider resumption of prior maintenance dose if factor causing decreaseed INR is transient (eg missed dose). <br/>"+
							"3. If dosage adjustment is needed, increase maintenance dose by 5-15%.";

				}

				else if(inrValue>=1.8 && inrValue < 2 )
				{
					dose="<br/>1. No dosage adjustment may be necessary if the last two INRs were in range, if there is no clear explanation for the INR to be out of range," +
							" and if in the judgement of the physician, the INR does not represent an increased risk of thromboembolism. <br/> "+
							"2. Consider a booster dose of 1.5-2 times daily maintenance dose. <br/>" +
							"3. Consider resumption of prior maintenance dose if factor causing decreaseed INR is transient (eg missed dose). <br/>" +
							"4. If dosage adjustment is needed, increase maintenance dose by 5-15%. <br/>";

				}

				else if(inrValue>=2 && inrValue <=3 )
				{
					dose="No change";

				}

				else if(inrValue>=3.1 && inrValue <3.3)
				{
					dose="<br/>1.No dosage adjustment may be necessary if the last two INRs were in range, if there is no clear explanation for the INR to be out of range, " +
							"and if in the judgement of the physician, the INR does not represent an increased risk of hemorrhage. <br/>"+
							"2. Consider continuation of prior maintenance dose if factor causing elevated INR is transient (eg acute alcohol ingestion). <br/>" +
							"3.If dose adjustment is needed, decrease maintenance dose by 5-10%.";

				}

				else if(inrValue>=3.3 && inrValue < 3.5)
				{
					dose="<br/>1. Consider holding 0.5 to 1 dose. <br/>" +
							"2. Consider continuation of prior maintenance dose if factor causing elevated INR is transient (eg acute alcohol ingestion). <br/>" +
							"3. If dose adjustment is needed, decrease maintenance dose by 5-10%.";

				}


				else if(inrValue>=3.5 && inrValue < 4)
				{
					dose="<br/>1. Consider holding 1 dose. <br/>" +
							"2. Consider continuation of prior maintenance dose if factor causing elevated INR is transient (eg acute alcohol ingestion). <br/>" +
							"3. If dose adjustment is needed, decrease maintenance dose by 5-15%.";

				}

				else if(inrValue>=4)
				{
					dose="<br/>1. Hold until INR <upper limit of therapeutic range. <br/>" +
							"2. Consider use of minidose oral vitamin K. <br/>" +
							"3. Consider continuation of prior maintenance dose if factor causing elevated INR is transient (eg acute alcohol ingestion). <br/>" +
							"4. If dose adjustment is needed, decrease maintenance dose by 5-15%. ";

				}

			}


			else if(medActionPlan.getAcceptableRange().equalsIgnoreCase("2.5-3.5"))
			{
				if(inrValue<2  && inrValue!=0)
				{
					dose="<br/>1. Consider a booster dose of 1.5-2 times daily maintenance dose. <br/> "+
							"2. Consider resumption of prior maintenance dose if factor causing decreaseed INR is transient (eg missed dose). <br/>" +
							"3. If dosage adjustment is needed, increase maintenance dose by 5-15%.";

				}

				else if(inrValue>=2 && inrValue < 2.3 )
				{
					dose="<br/>1. Consider a booster dose of 1.5-2 times daily maintenance dose. <br/>" +
							"2. Consider resumption of prior maintenance dose if factor causing decreaseed INR is transient (eg missed dose). <br/>" +
							"3. If dosage adjustment is needed, increase maintenance dose by 5-15%.";

				}

				else if(inrValue>=2.3 && inrValue < 2.5)
				{
					dose="<br/>1. No dosage adjustment may be necessary if the last two INRs were in range, if there is no clear explanation for the INR to be out of range," +
							" and if in the judgement of the physician, the INR does not represent an increased risk of thromboembolism.  <br/>"+
							"2. Consider a booster dose of 1.5-2 times daily maintenance dose. <br/>" +
							"3. If dosage adjustment is needed, increase maintenance dose by 5-15%.";

				}

				else if(inrValue>=2.5 && inrValue <3.6 )
				{
					dose="No change";

				}

				else if(inrValue>=3.6 && inrValue <3.8)
				{
					dose="<br/>1. No dosage adjustment may be necessary if the last two INRs were in range, if there is no clear explanation for the INR to be out of range, " +
							"and if in the judgement of the physician, the INR does not represent an increased risk of hemorrhage. <br/>" +

				"2. Consider continuation of prior maintenance dose if factor causing elevated INR is transient (eg acute alcohol ingestion). <br/>" +
				"3. If dose adjustment is needed, decrease maintenance dose by 5-10%.";

				}

				else if(inrValue>=3.8 && inrValue < 4)
				{
					dose="<br/>1. Consider holding 0.5 to 1 dose. <br/>" +
							"2. Consider continuation of prior maintenance dose if factor causing elevated INR is transient (eg acute alcohol ingestion). <br/>" +
							"3. If dose adjustment is needed, decrease maintenance dose by 5-10%. ";

				}


				else if(inrValue>=4 && inrValue < 4.5)
				{
					dose="<br/>1. Consider holding 1 dose. <br/>" +
							"2. Consider continuation of prior maintenance dose if factor causing elevated INR is transient (eg acute alcohol ingestion). <br/>" +
							"3. If dose adjustment is needed, decrease maintenance dose by 5-15%.";

				}

				else if(inrValue>=4.5)
				{
					dose="<br/>1. Hold until INR upper limit of therapeutic range. <br/>" +
							"2. Consider use of minidose oral vitamin K. <br/>" +
							"3. Consider continuation of prior maintenance dose if factor causing elevated INR is transient (eg acute alcohol ingestion). <br/>" +
							"4. If dose adjustment is needed, decrease maintenance dose by 5-15%.";

				}

			}

		}
		System.out.println(";;;;;;;;;;;;;;;;dose::::"+dose);
		patientMedicationData.setRecommendedDose(dose);

	}


	/*
	 * change date to utc
	 * @author: Gopal
	 */
/*
	public void changeDateToUtc()
	{
		logger.info("changeDateToUtc:::::::::::"+medActionPlan.getDosingStartDate());
	}*/

	public String onFlowProcess(FlowEvent event) {  
		logger.info("onFlowProcess wizard step:" + event.getOldStep());  
		//  logger.info("Next step:" + event.getNewStep()+":::::"+medActionPlan.getDiagnosis()); 

		if((!(medActionPlan.getDiagnosis().equalsIgnoreCase("Atrial fibrillation (non-valvular/non-rheumatic)")) &&(event.getOldStep().equalsIgnoreCase("step1"))))
		{
			return "Step3";

		}

		if((!(medActionPlan.getDiagnosis().equalsIgnoreCase("Atrial fibrillation (non-valvular/non-rheumatic)")) &&
				((event.getOldStep().equalsIgnoreCase("Step3") &&(event.getNewStep().equalsIgnoreCase("Step2"))))))
		{
			System.out.println("inside step 1::::");
			return "step1";
		}



		return event.getNewStep(); 
	}
	public ChadsScore getChadsScore() {
		return chadsScore;
	}
	public void setChadsScore(ChadsScore chadsScore) {
		this.chadsScore = chadsScore;
	}  
	public List<InrRange> getInrRangeList() {
		return inrRangeList;
	}
	public void setInrRangeList(List<InrRange> inrRangeList) {
		this.inrRangeList = inrRangeList;
	}
	public InrRange getInrRange() {
		return inrRange;
	}
	public void setInrRange(InrRange inrRange) {
		this.inrRange = inrRange;
	}

	/*
	 * submiting chads score by doctor for Anticog clinic for warfarin medicine
	 * @author: Gopal Krishna Jha..
	 * 
	 */
	public void submitChadsScore()
	{
		logger.info("submitChadsScore method started..."+chadsScore.isAge()+":::>>>"+chadsScore.isHeartFailure());
		int gettingScore=0;
		if(chadsScore.isHeartFailure())
			gettingScore++;
		if(chadsScore.isHyperTension())
			gettingScore++;

		if(chadsScore.isAge())
			gettingScore++;

		if(chadsScore.isDiabetes())
			gettingScore++;
		if(chadsScore.isStroke())
			gettingScore=gettingScore+2;

		chadsScore.setScore(gettingScore);
		System.out.println(":::::::gettingScore:::::::"+gettingScore);
		//changediagnosisForWarfarin();


	}
	private boolean showMessageForNewAddMeds;
	/*
	 * check start date from particular medicine...
	 * @author: Gopal Krishna Jha
	 */
	public void checkStartDateMedicine(String genericName)
	{
		logger.info("checkStartDateMedicine method start in bean:::"+patientMedicationData.getDrugs());
		//find particular medicine is belonging anticoag or not..
		getAnticoagMedList();
		setShowTabForAnticoagMeds(false);
		for(Medicine medName:anticoagMedList)
		{
			if(medName.getMedicinName().equalsIgnoreCase(genericName))
				setShowTabForAnticoagMeds(true);
		}


		//Date date=new Date();
		boolean checkMEds = false;
		for(PatientMedicationData pat:patientMedicationDataList)
		{
			if(pat.getDrugs().equalsIgnoreCase(patientMedicationData.getDrugs()))
			{
				//date=pat.getStartDate();
				checkMEds=true;
			}
		}
		System.out.println(":::::checkMEds::"+checkMEds);
		patientMedicationData.setStartDate(new DateUtil().getTodayDate());
		if(checkMEds)
		{
			String msg=patientMedicationData.getDrugs()+"  is already on patient's active medication list";
			System.out.println(":::::::::::>>>>>>>>>"+msg);
			FacesContext.getCurrentInstance().addMessage("messageUpdateForNewAddMeds", new FacesMessage(FacesMessage.SEVERITY_WARN,msg,"")); 
			// patientMedicationData=new PatientMedicationData();
			//setShowTabForAnticoagMeds(false);
			setShowMessageForNewAddMeds(true);
		}

	}

	/*
	 * getting sub diagnosis for change diagnosis..
	 * @author:Gopal Krishna Jha
	 */
	public void changediagnosisForSubdiagnosis()

	{
		logger.info("changediagnosisForSubdiagnosis method start::::"+medActionPlan.getDiagnosis());
		clinicSubDiagnosisList=new ArrayList<ClinicSubdiagnosis>();
		//find clinic diagnosis id..
		int clinicDiagnosisId=0;

		for(ClinicDiagonsis clinicdiagnosis:clinicDiagnosisList)
		{
			if(clinicdiagnosis.getDiagnosisName().equals(medActionPlan.getDiagnosis()))
				clinicDiagnosisId=clinicdiagnosis.getId();
		}

		System.out.println("::::::::::::::"+clinicDiagnosisId);
		//find clinic subdiagnosis list...
		clinicSubDiagnosisList=patientMedicineService.findClinicSubDiagnosisList(clinicDiagnosisId);
		System.out.println("::::::::::"+clinicSubDiagnosisList.size());

	}

	/*
	 * when we add new meds in PMR and click send to anticoag Button it goes to anticoag tab
	 * 
	 */
	//
	public String sendToAnticoagTab()
	{
		logger.info("sendToAntocoagTab method start:::"+patientMedicationData.getDrugs()+patientMedicationData.getDrugId());

		//getCurrentAntiCoagMedList();


		patientMedicationData.setDrugId(0.0);
		patientMedicationData.setUnit("");
		patientMedicationData.setDaySupply("");


		patientMedicationData.setPatientId(new ContextUtil().getPatientId());
		patientMedicationData.setProviderId(new ContextUtil().getProviderId());
		patientMedicationData.setFlagForVisit(true);
		patientMedicationData.setPrescriptionStatus(PRESCRIPITION_STATUS_PENDING);
		System.out.println("add med without action plan:::for:::"+patientMedicationData.getDrugs()+"123:::::");

		setTabValue(1);
		//RequestContext.getCurrentInstance().execute("addNewMedicinePopup.hide()");
		setShowTabForAnticoagMeds(false);

		patientMedicationData.setPrescriberName(new ContextUtil().getLoggerFirstName()+" "+new ContextUtil().getLoggedUserMiddleName()+" "+new ContextUtil().getLoggerLastName());
		patientMedicationData.setDoctorId(new ContextUtil().getLoginId());
		//patientMedicationData.setSelectedImageForPatient(true);
		//	patientMedicationData.setMedicineStatus(NEW_ADDED_MEDS);
		patientMedicationData.setCauseOfAddMeds(NEW_ADDED_MEDS);
		patientMedicationData.setChangeMedId(1);
		patientMedicationData.setModifyDate(new DateUtil().getTodayDate());

		for(Medicine med:getAnticoagMedList())
		{
			if(med.getMedicinName().equalsIgnoreCase(patientMedicationData.getGenericName()))
				patientMedicationData.setFlagForMedActionPlan(med.isFlagForMedActionPlan());

		}
		//patientMedicationData.setFlagForMedActionPlan(true);

		patientMedicineService.saveMedicineDetail(patientMedicationData);

		patientMedicationDataList=null;
		patientMedicationData=new PatientMedicationData();

		currentAntiCoagMedList=new ArrayList<PatientMedicationData>();
		currentAntiplateletMedsList=new ArrayList<PatientMedicationData>();

		/*HttpServletRequest req = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
		String url = req.getRequestURL().toString();
		System.out.println(":::::::::::::::::>>>>>>>>>>>>>>>>>>>>>> url::"+url);
		String returnValue="";
		if(url.endsWith("overview.jsf"))
			returnValue="go_to_overview";
		if(url.endsWith("overViewFilter.jsf"))
			returnValue="go_to_ovw_filters";
		if(url.endsWith("personalizedMedReview.jsf"))
			returnValue="go_to_persionalizeMedReview";*/
		makeFilterPageRefreshData();
		return returnParticularPage();

	}
	public List<PatientMedicationData> getMedicineListForEprescribe() {
		medicineListForEprescribe=new ArrayList<PatientMedicationData>();
		medicineListGetDataBeforeEprescribe = new ArrayList<PatientMedicationData>();

		//for(PatientMedicationData pat:addedOrChangedMedicationListForPatient)
		getPatientMedicationDataList();
		for(PatientMedicationData pat:patientMedicationDataList)
		{
			//System.out.println("11::::::check med s:"+pat.getMedicineStatus());
			//if(pat.isCheckMedsForEprescribe())

			if(StringUtils.isBlank(pat.getPrescriberName())|| pat.getPrescriberName().equals("NOT SENT") || pat.getPrescriberName().equals("N/A"))
			{
				pat.setPrescriberName("NOT SENT");
			}else{
				if(pat.getPrescriberName().contains("Dr ")){

					pat.setPrescriberName(pat.getPrescriberName());

				}else{

					pat.setPrescriberName("Dr "+pat.getPrescriberName());
				}
			}

			if(!pat.getMedicineStatus().equals(DISCONTINUE_MEDS))
			{

				PatientMedicationData patMed=new PatientMedicationData();
				patMed=pat;
				medicineListForEprescribe.add(patMed);
				medicineListGetDataBeforeEprescribe.add(patMed);
				System.out.println("medicineListGetDataBeforeEprescribe::::::::"+medicineListGetDataBeforeEprescribe.size());
				for(PatientMedicationData patMed1 : medicineListGetDataBeforeEprescribe)
				{
					System.out.println("medicineListGetDataBeforeEprescribe:::::!:::::"+patMed1.getPrescriberName());
				}
			}
		}

		return medicineListForEprescribe;
	}
	public void setMedicineListForEprescribe(
			List<PatientMedicationData> medicineListForEprescribe) {
		this.medicineListForEprescribe = medicineListForEprescribe;
	}
	public boolean isShowTabForAnticoagMeds() {
		return showTabForAnticoagMeds;
	}
	public void setShowTabForAnticoagMeds(boolean showTabForAnticoagMeds) {
		this.showTabForAnticoagMeds = showTabForAnticoagMeds;
	}
	public List<String> getLabFrequencyListForQuickPrescribe() {
		if(labFrequencyListForQuickPrescribe.isEmpty())
		{
			labFrequencyListForQuickPrescribe.add("1 Month");
			//labFrequencyListForQuickPrescribe.add("7 Weeks");
			//labFrequencyListForQuickPrescribe.add("8 Weeks");
			labFrequencyListForQuickPrescribe.add("3 Months");
			labFrequencyListForQuickPrescribe.add("6 Months");
			//labFrequencyListForQuickPrescribe.add("9 Months");
			labFrequencyListForQuickPrescribe.add("1 Years");

		}
		return labFrequencyListForQuickPrescribe;
	}
	public void setLabFrequencyListForQuickPrescribe(
			List<String> labFrequencyListForQuickPrescribe) {
		this.labFrequencyListForQuickPrescribe = labFrequencyListForQuickPrescribe;
	}

	private boolean showLabChartForAnticoag;

	/*
	 * lab chart and Inr chart for Anticoag Tab
	 * @author: Gopal krishna jha
	 */
	public CartesianChartModel getLabChartForAnticoag() {
		logger.info("getLabChartForAnticoag method start:::");

		if(labChartForAnticoag==null)
		{
			/*logger.info("getLabChartForAnticoag method start:::");*/
			labChartForAnticoag=new CartesianChartModel();
			ChartSeries dose = new ChartSeries(); 

			ChartSeries inr = new ChartSeries(); 
			dose.setLabel("Dose");
			inr.setLabel("Inr");

			FacesContext context = FacesContext.getCurrentInstance();
			LabManageBean labManageBean=(LabManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"labManageBean");
			List<ProcedureResultHistory> labHistoryListForAntiCoag=labManageBean.getLabHistoryListForAntiCoag();
			int size=0;

			System.out.println("::::::::::::::::::labHistoryListForAntiCoag"+labHistoryListForAntiCoag.size());
			for(ProcedureResultHistory proc:labHistoryListForAntiCoag)
				//for(int i=0;i<4; proc:labHistoryListForAntiCoag)
			{
				size++;
				Date date=proc.getDateResult();
				String month = new SimpleDateFormat("dd-MMM-yy").format(date);
				inr.set(month,proc.getResult()); 


				logger.info(":proc.getDate():::"+proc.getDateResult()+"::::"+proc.getResult());
				if(size>3)
					break;
			}
			String medicineName="";
			for( PatientMedicationData pdata :currentAntiplateletMedsList)
			{
				medicineName=pdata.getGenericName();
				System.out.println(":::medicine name:::"+medicineName);
			}

			fetchMedicationHistoryList = patientMedicineService.fetchMedicationHistoryList(new ContextUtil().getPatientId(),medicineName);
			size=0;	
			// getFetchMedicationHistoryList();
			// System.out.println("::::::::::::::::::::::::::fetchMedicationHistoryList:::"+fetchMedicationHistoryList.size());
			for(PatientMedicationHistory patHistory:fetchMedicationHistoryList)
			{
				double actualDose;

				if(!(((patHistory.getStrength()==null)) || (patHistory.getStrength().isEmpty())))
				{
					String fullDose=patHistory.getStrength();
					int length=0;
					if(fullDose.contains("m"))
					{
						length=fullDose.indexOf('m');
					}
					if(fullDose.contains("M"))
					{
						length=fullDose.indexOf('M');
					}
					fullDose=fullDose.substring(0, length);
					actualDose=Double.parseDouble(fullDose);
					LabLineBarChart lineBarChart1=new LabLineBarChart();

					Date date=patHistory.getStartDate();
					String month = new SimpleDateFormat("dd-MMM-yy").format(date);

					dose.set(month,actualDose);
					System.out.println("::patHistory.getStartDate():"+patHistory.getStartDate()+":actualDose:"+actualDose);
				}
				size++;
				if(size>3)
					break;
			}

			if((!(labManageBean.getLabHistoryListForAntiCoag().isEmpty()) &&(!fetchMedicationHistoryList.isEmpty())))
			{
				setShowLabChartForAnticoag(true);
			}
			else
				setShowLabChartForAnticoag(false);
			labChartForAnticoag.addSeries(dose);  
			labChartForAnticoag.addSeries(inr);  

		}
		return labChartForAnticoag;
	}


	public void setLabChartForAnticoag(CartesianChartModel labChartForAnticoag) {
		this.labChartForAnticoag = labChartForAnticoag;
	}


	public List<PatientMedicationHistory> getDoseInrlinearGraphList() {
		if(doseInrlinearGraphList==null)
		{
			doseInrlinearGraphList=patientMedicineService.findIndiviualDose(new ContextUtil().getPatientId(),new ContextUtil().getProviderId());

		}

		return doseInrlinearGraphList;
	}



	public void setDoseInrlinearGraphList(List<PatientMedicationHistory> doseInrlinearGraphList) {
		this.doseInrlinearGraphList = doseInrlinearGraphList;
	}

	public DataTable getCurrentAnticoagDataTable() {
		return currentAnticoagDataTable;
	}

	public void setCurrentAnticoagDataTable(DataTable currentAnticoagDataTable) {
		this.currentAnticoagDataTable = currentAnticoagDataTable;
	}
	private CartesianChartModel labChartForAnticoag=null;//=new CartesianChartModel();  
	public void changeDiagnosisForLMWH()
	{
		logger.info("changeDiagnosisForLMWH start:::"+medActionPlan.getDiagnosis());
		if("VTE Prophylaxis".equals(medActionPlan.getDiagnosis()))
			System.out.println("inside if:::");
		else
			System.out.println("inside else");
	}

	public boolean isShowLabChartForAnticoag() {
		return showLabChartForAnticoag;
	}

	public void setShowLabChartForAnticoag(boolean showLabChartForAnticoag) {
		this.showLabChartForAnticoag = showLabChartForAnticoag;
	}

	private String fullEprescribeXmlSummary=new String();

	public String getFullEprescribeXmlSummary() throws IOException

	{
		
		fullEprescribeXmlSummary="";
		getLoggedDoctorId();
		System.out.println(":::::::::::DoctorId:::::::"+loggedDoctorId);
		Properties properties = new Properties();
		try {
			properties.load(NcDrugDetailWSBean.class.getClassLoader().getResourceAsStream("/com/clinakos/properties/webservices.properties"));	
			//input = new FileInputStream("/com/clinakos/properties/webservices.properties");

			//properties.load(input);


			fullEprescribeXmlSummary = fullEprescribeXmlSummary+
					"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n"  +
					"<NCScript xmlns=\"http://secure.newcropaccounts.com/interfaceV7\" \n"+
					"\t xmlns:NCStandard=\"http://secure.newcropaccounts.com/interfaceV7:NCStandard\"\n "+
					"\t xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\n"+
					"<Credentials>\n"+
					"\t<partnerName>"+properties.getProperty("partnerName")+"</partnerName>\n"+
					"\t<name>"+properties.getProperty("name")+"</name>\n"+
					"\t<password>"+properties.getProperty("password")+"</password>\n"+
					"\t<productName>"+properties.getProperty("productName")+"</productName>\n"+
					"\t<productVersion>"+properties.getProperty("productVersion")+"</productVersion>\n"+
					"</Credentials>\n\n";

			//	//System.out.println("properties::::::::"+properties.getProperty("partnerName"));
			//System.out.println("properties:::1234:::::"+properties.getProperty("name"));

			//System.out.println("properties:::123456:::::"+fullEprescribeXmlSummary.length());

		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}


		getExitLocationForEPrescribe();
		
		FacesContext context = FacesContext	.getCurrentInstance();
		UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");
		userManageBean.setLogedFirstName("");
		userManageBean.setLogedLastName("");
		
		
		
		/* Map<String,String> params =FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();
	               
		 labIntegrationValue = params.get("labIntegration");*/
		/* String value = FacesContext.getCurrentInstance().
					getExternalContext().getRequestParameterMap().get("labIntegration");*/
		

		//System.out.println(":::::FirstName::::::::"+userManageBean.getLogedFirstName());
		//System.out.println("dddddddd::::"+userManageBean.getRoleSecurity().getRoleType());
		//System.out.println("dddddddd:1234:::"+userManageBean.getRoleSecurity().getNewCropRole());

		fullEprescribeXmlSummary = fullEprescribeXmlSummary+
				"<UserRole>\n" +
				"\t<user>"+userManageBean.getRoleSecurity().getRoleType()+"</user>\n"+
				"\t<role>"+userManageBean.getRoleSecurity().getNewCropRole()+"</role>\n"+
				"</UserRole>\n\n";	
		fullEprescribeXmlSummary = fullEprescribeXmlSummary+
				"<Destination>\n" +
				
					"\t<requestedPage>compose</requestedPage>\n" +
				
				
					
				
				
				"\t<logoutPage>"+exitLocationForEPrescribe+"</logoutPage>\n" +
				"</Destination>\n\n";


		//System.out.println("userManageBean.providerLocation.accountId::::::"+userManageBean.getProviderLocation().getAccountId());
		//getProviderLocation();
		//ProviderLocation providerLocation =new ProviderLocation();

		//System.out.println("getProviderLocation::::::::"+userManageBean.getProviderLocation().getAccountId()+userManageBean.getProviderLocation().getCity());

		fullEprescribeXmlSummary = fullEprescribeXmlSummary+
				"<Account ID=\""+userManageBean.getProviderLocation().getAccountId()+"\">\n" +
				"\t<accountName>"+userManageBean.getProviderLocation().getLocation()+"</accountName>\n"+
				"\t<siteID>"+userManageBean.getProviderLocation().getSiteId()+"</siteID>\n"+
				"\t<AccountAddress>\n"+
				"\t\t<address1>"+userManageBean.getProviderLocation().getAddressLine1()+"</address1>\n"+
				"\t\t<address2>"+userManageBean.getProviderLocation().getAddressLine2()+"</address2>\n"+
				"\t\t<city>"+userManageBean.getProviderLocation().getCity()+"</city>\n"+
				"\t\t<state>"+userManageBean.getProviderLocation().getState()+"</state>\n"+
				"\t\t<zip>"+userManageBean.getProviderLocation().getZipCode()+"</zip>\n"+
				"\t\t<country>"+userManageBean.getProviderLocation().getCountry()+"</country>\n"+
				"\t</AccountAddress>\n"+
				"\t<accountPrimaryPhoneNumber>"+userManageBean.getProviderLocation().getPrimaryPhoneNumber()+"</accountPrimaryPhoneNumber>\n"+
				"\t<accountPrimaryFaxNumber>"+userManageBean.getProviderLocation().getFaxNumber()+"</accountPrimaryFaxNumber>\n"+
				"</Account>\n\n";


		fullEprescribeXmlSummary = fullEprescribeXmlSummary+
				"<Location ID=\""+userManageBean.getProviderLocation().getId()+"\">\n" +
				"\t<locationName>"+userManageBean.getProviderLocation().getLocation()+"</locationName>\n"+
				"\t<LocationAddress>\n"+
				"\t\t<address1>"+userManageBean.getProviderLocation().getAddressLine1()+"</address1>\n"+
				"\t\t<address2>"+userManageBean.getProviderLocation().getAddressLine2()+"</address2>\n"+
				"\t\t<city>"+userManageBean.getProviderLocation().getCity()+"</city>\n"+
				"\t\t<state>"+userManageBean.getProviderLocation().getState()+"</state>\n"+
				"\t\t<zip>"+userManageBean.getProviderLocation().getZipCode()+"</zip>\n"+
				"\t\t<country>"+userManageBean.getProviderLocation().getCountry()+"</country>\n"+
				"\t</LocationAddress>\n"+
				"\t<primaryPhoneNumber>"+userManageBean.getProviderLocation().getPrimaryPhoneNumber()+"</primaryPhoneNumber>\n"+
				"\t<primaryFaxNumber>"+userManageBean.getProviderLocation().getFaxNumber()+"</primaryFaxNumber>\n"+
				"\t<pharmacyContactNumber>"+userManageBean.getProviderLocation().getPrimaryContactNumber()+"</pharmacyContactNumber>\n"+
				"</Location>\n\n";


		if(userManageBean.getRoleSecurity().getRoleType().equalsIgnoreCase("LicensedPrescriber"))
		{
			fullEprescribeXmlSummary=fullEprescribeXmlSummary+
					"<LicensedPrescriber ID=\""+loggedDoctorId+"\">\n" +
					"\t<LicensedPrescriberName>\n"+
					"\t\t<last>"+userManageBean.getLogedLastName().trim()+"</last>\n"+
					"\t\t<first>"+userManageBean.getLogedFirstName().trim()+"</first>\n"+
					"\t\t<middle>"+userManageBean.getLogeMiddleName()+"</middle>\n"+
					"\t</LicensedPrescriberName>\n"+
					"\t<dea>"+userManageBean.getDoctorDetailData().getDea()+"</dea>\n"+
					"\t<upin>"+userManageBean.getDoctorDetailData().getUpin()+"</upin>\n"+
					"\t<licenseState>"+userManageBean.getDoctorDetailData().getDocLicenseState()+"</licenseState>\n"+
					"\t<licenseNumber>"+userManageBean.getDoctorDetailData().getDocLicenseNumber()+"</licenseNumber>\n"+
					"\t<npi>"+userManageBean.getDoctorDetailData().getNpi().trim()+"</npi>\n"+
					"</LicensedPrescriber>\n\n";

		}

		else if(userManageBean.getRoleSecurity().getRoleType().equalsIgnoreCase("Staff"))
		{
			fullEprescribeXmlSummary=fullEprescribeXmlSummary+
					"<Staff  ID=\""+loggedDoctorId+"\">\n"+
					"\t<StaffName>\n"+
					"\t\t<last>"+userManageBean.getLogedLastName().trim()+"</last>\n"+
					"\t\t<first>"+userManageBean.getLogedFirstName().trim()+"</first>\n"+
					"\t\t<middle>"+userManageBean.getLogeMiddleName()+"</middle>\n"+
					"\t\t<prefix>Mr.</prefix>\n"+
					"\t\t<suffix>Jr</suffix>\n"+
					"\t</StaffName>\n"+
					"<\tlicense>"+userManageBean.getDoctorDetailData().getDocLicenseNumber()+"</license>\n"+
					"</Staff>\n\n";

		}

		else if(userManageBean.getRoleSecurity().getRoleType().equalsIgnoreCase("MidlevelPrescriber"))
		{
			fullEprescribeXmlSummary=fullEprescribeXmlSummary+
					"<MidlevelPrescriber ID=\""+loggedDoctorId+"\">\n"+
					"\t<LicensedPrescriberName>\n"+
					"\t\t<last>"+userManageBean.getLogedLastName().trim()+"</last>\n"+
					"\t\t<first>"+userManageBean.getLogedFirstName().trim()+"</first>\n"+
					"\t\t<middle>"+userManageBean.getLogeMiddleName()+"</middle>\n"+
					"\t</LicensedPrescriberName>\n"+
					"\t<dea>"+userManageBean.getDoctorDetailData().getDea()+"</dea>\n"+
					"\t<upin>"+userManageBean.getDoctorDetailData().getUpin()+"</upin>\n"+
					"\t<licenseState>"+userManageBean.getDoctorDetailData().getDocLicenseState()+"</licenseState>\n"+
					"\t<licenseNumber>"+userManageBean.getDoctorDetailData().getDocLicenseNumber()+"</licenseNumber>\n"+
					"</MidlevelPrescriber>\n\n";



		}

		else if(userManageBean.getRoleSecurity().getRoleType().equalsIgnoreCase("supervisingDoctor"))
		{
			fullEprescribeXmlSummary=fullEprescribeXmlSummary+
					"<SupervisingDoctor ID=\""+loggedDoctorId+"\">\n"+
					"\t<LicensedPrescriberName>\n"+
					"\t\t<last>"+userManageBean.getLogedLastName().trim()+"</last>\n"+
					"\t\t<first>"+userManageBean.getLogedFirstName().trim()+"</first>\n"+
					"\t\t<middle>"+userManageBean.getLogeMiddleName().trim()+"</middle>\n"+
					"\t</LicensedPrescriberName>"+
					"\t<dea>"+userManageBean.getDoctorDetailData().getDea()+"</dea>\n"+
					"\t<upin>"+userManageBean.getDoctorDetailData().getUpin()+"</upin>\n"+
					"\t<licenseState>"+userManageBean.getDoctorDetailData().getDocLicenseState()+"</licenseState>\n"+
					"\t<licenseNumber>"+userManageBean.getDoctorDetailData().getDocLicenseNumber()+"</licenseNumber>\n"+
					"</SupervisingDoctor>\n";
		}


		getSearchPatientId();
		FacesContext context2 = FacesContext	.getCurrentInstance();
		DashBoardManageBean dashBoardManageBean= (DashBoardManageBean) context2.getApplication().getELResolver().getValue(context2.getELContext(), null, "dashBoardManageBean");

		System.out.println("ajaysearchPatientId:::::::"+getSearchPatientId());
		System.out.println("ranasearchPatientId:::::::"+dashBoardManageBean.getUserLoginDetail().getLastName());

//--------------modified by saurabh for removing white spaces from xml
		
				String patientXmlDoorNo= new String();
				String patientXmlStreet= new String();
				String patientXmlCity= new String();
				String patientXmlState= new String();
				String patientXmlPincode= new String();
				String patientXmlCountry= new String();
				String patientXmlPhoneNumber= new String();
				
				if (StringUtils.isNotBlank(dashBoardManageBean.getUserLoginDetail().getDoorNo())) {
					patientXmlDoorNo=dashBoardManageBean.getUserLoginDetail().getDoorNo();
				}
				else {
					patientXmlDoorNo="";
				}
				if (StringUtils.isNotBlank(dashBoardManageBean.getUserLoginDetail().getStreet())) {
					patientXmlStreet=dashBoardManageBean.getUserLoginDetail().getStreet();
				}
				else {
					patientXmlStreet="";
				}
				if (StringUtils.isNotBlank(dashBoardManageBean.getUserLoginDetail().getCity())) {
					patientXmlCity=dashBoardManageBean.getUserLoginDetail().getCity();
				}
				else {
					patientXmlCity="";
				}
				if (StringUtils.isNotBlank(dashBoardManageBean.getUserLoginDetail().getState())) {
					patientXmlState=dashBoardManageBean.getUserLoginDetail().getState();
				}
				else {
					patientXmlState="";
				}
				if (StringUtils.isNotBlank(dashBoardManageBean.getUserLoginDetail().getPincode())) {
					patientXmlPincode=dashBoardManageBean.getUserLoginDetail().getPincode();
				}
				else {
					patientXmlPincode="";
				}
				if (StringUtils.isNotBlank(dashBoardManageBean.getUserLoginDetail().getCountry())) {
					patientXmlCountry=dashBoardManageBean.getUserLoginDetail().getCountry();
				}
				else {
					patientXmlCountry="";
				}
				if (StringUtils.isNotBlank(dashBoardManageBean.getUserLoginDetail().getPhoneNumber())) {
					patientXmlPhoneNumber=dashBoardManageBean.getUserLoginDetail().getPhoneNumber();
				}
				else {
					patientXmlPhoneNumber="";
				}
		        logger.info("<<<<<<<<<<<<<<<<<<<<patientXmlDoorNo="+patientXmlDoorNo+"<<<<patientXmlStreet="+patientXmlStreet+"<<<<patientXmlCity="+patientXmlCity+
		        		"<<<patientXmlState="+patientXmlState+"<<<patientXmlPincode="+"<<<<patientXmlPincode="+patientXmlPincode+"<<<<patientXmlCountry="+patientXmlCountry+
		        		"<<<<<patientXmlPhoneNumber="+patientXmlPhoneNumber);
				fullEprescribeXmlSummary=fullEprescribeXmlSummary+
						"<Patient  ID=\""+searchPatientId+"\">\n" +
						"\t<PatientName>\n"+
						"\t\t<last>"+dashBoardManageBean.getUserLoginDetail().getLastName().trim()+"</last>\n"+
						"\t\t<first>"+dashBoardManageBean.getUserLoginDetail().getFirstName().trim()+"</first>\n"+
						"\t\t<middle>"+dashBoardManageBean.getUserLoginDetail().getMiddleName().trim()+"</middle>\n"+
						"\t</PatientName>\n"+
						"\t<medicalRecordNumber>"+searchPatientId+"</medicalRecordNumber>\n"+
						"\t<memo></memo>\n"+
						"\t<PatientAddress>\n"+
						"\t\t<address1>"+patientXmlDoorNo+"</address1>\n"+
						"\t\t<address2>"+patientXmlStreet+"</address2>\n"+
						"\t\t<city>"+patientXmlCity+"</city>\n"+
						"\t\t<state>"+patientXmlState+"</state>\n"+
						"\t\t<zip>"+patientXmlPincode+"</zip>\n"+
						"\t\t<country>"+patientXmlCountry+"</country>\n"+
						"\t</PatientAddress>\n"+
						"\t<PatientContact>\n"+
						"\t\t<homeTelephone>"+patientXmlPhoneNumber+"</homeTelephone>\n"+
						"\t</PatientContact>\n";

		String genderDetails="";					 
			if(dashBoardManageBean.getUserLoginDetail().getGender().equalsIgnoreCase("Male"))
			{
				genderDetails ="M";
			}
			else if (dashBoardManageBean.getUserLoginDetail().getGender().equalsIgnoreCase("others")) {
				genderDetails ="U";
			}
			else
			{
				genderDetails="F";
			}
		String dateDetails =new SimpleDateFormat("yyyyMMdd").format(dashBoardManageBean.getUserLoginDetail().getDateOfBirth());

		System.out.println("date formate ::::::"+dateDetails);

		fullEprescribeXmlSummary=fullEprescribeXmlSummary+
				"\t<PatientCharacteristics>\n"+
				"\t\t<dob>"+dateDetails+"</dob>\n"+
				"\t\t<gender>"+genderDetails+"</gender>\n"+
				"\t</PatientCharacteristics>\n";
		// Added for Lab Integration 
		
		 
		
		/*	fullEprescribeXmlSummary=fullEprescribeXmlSummary+
					"<PatientGuarantor ID=\""+1+"\">\n"+ //<!--Assign a unique ID for each PatientGuarantor-->
				      "<GuarantorName>\n"+				        "<last>Warbucks</last>\n"+
				        "<first>Daddy</first>\n"+
				        "<middle>Money</middle>\n"+
				      "</GuarantorName>\n"+
				      "<guarantorDob>19550102</guarantorDob>\n"+
				      "<guarantorGender>M</guarantorGender>\n"+
				      "<GuarantorAddress>\n"+
				        "<address1>123 Somestreet</address1>\n"+
				        "<address2>Suite 123</address2>\n"+
				        "<city>Somerville</city>\n"+
				        "<state>TX</state>\n"+
				        "<zip>77089</zip>\n"+
				        "<zip4>1234</zip4>\n"+
				        "<country>US</country>\n"+
				      "</GuarantorAddress>\n"+
				      "<GuarantorContact>\n"+
				        "<homeTelephone>2815551212</homeTelephone>\n"+
				        "<workTelephone>2814441234</workTelephone>\n"+
				      "</GuarantorContact>\n"+
				      "<guarantorRelationship>Unknown</guarantorRelationship>\n"+ // <!--Self, Spouse, Child, Employer, Unknown-->
				    "</PatientGuarantor>\n"+
				    "<PatientPayorAndInsured ID=\""+"hsi-555"+"\">\n"+ //<!--ID is the HSI number-->
				     "<payor>\n"+
				        "<payorName>Medicare</payorName>\n"+
				        "<PayorAddress>\n"+
				          "<address1>7500 Security Boulevard</address1>\n"+
				          "<address2>Suite 1</address2>\n"+
				          "<city>Baltimore</city>\n"+
				          "<state>MD</state>\n"+
				          "<zip>21244</zip>\n"+
				          "<zip4>1234</zip4>\n"+
				          "<country>US</country>\n"+
				        "</PayorAddress>\n"+
				        "<insuranceServiceProvider>Medicare</insuranceServiceProvider>\n"+ // <!--Medicare, Medicaid, BCBS, Other-->
				       " <payorGroupNumber>123</payorGroupNumber>\n"+
				      "</payor>\n"+
				      "<insured>\n"+
				        "<patientRelationship>Spouse</patientRelationship>\n"+
				        "<priorityCode>Primary</priorityCode>\n"+ // <!--Primary, Secondary, Tertirary-->
				        "<policyNumber>123456789</policyNumber>\n"+
				        "<groupNumber>123D</groupNumber>\n"+
				        "<InsuredName>\n"+
				         "<last>Daniels</last>\n"+
				          "<first>John</first>\n"+
				          "<middle>Henry</middle>\n"+
				        "</InsuredName>\n"+
				       "<InsuredAddress>\n"+
				         "<address1>123 Somewhere</address1>\n"+
				          "<address2>Apt 555</address2>\n"+
				          "<city>Houston</city>\n"+
				          "<state>TX</state>\n"+
				          "<zip>77002</zip>\n"+
				          "<zip4>1234</zip4>\n"+
				          "<country>US</country>\n"+
				        "</InsuredAddress>\n"+
				        "<insuredDob>19600102</insuredDob>\n"+
				        "<insuredGender>F</insuredGender>\n"+
				        "<InsuredContact>\n"+
				          "<homeTelephone>7135551212</homeTelephone>\n"+
				        "</InsuredContact>\n"+
				      "</insured>\n"+
				   "</PatientPayorAndInsured>\n"+
				    "<PatientPayorAndInsured ID=\""+"hsi-666"+"\">\n"+
				      "<payor>\n"+
				        "<payorName>Blue Cross Blue Shield of Texas</payorName>\n"+
				        "<PayorAddress>\n"+
				          "<address1>1001 E. Lookout Drive</address1>\n"+
				          "<address2>Suite 2</address2>\n"+
				          "<city>Richardson</city>\n"+
				          "<state>TX</state>\n"+
				          "<zip>75082</zip>\n"+
				          "<zip4>4321</zip4>\n"+
				          "<country>US</country>\n"+
				        "</PayorAddress>\n"+
				       "<insuranceServiceProvider>BCBS</insuranceServiceProvider>\n"+
				        "<payorGroupNumber>321</payorGroupNumber>\n"+
				     "</payor>\n"+
				      "<insured>\n"+
				        "<patientRelationship>Self</patientRelationship>\n"+
				        "<priorityCode>Secondary</priorityCode>\n"+
				        "<policyNumber>987654321</policyNumber>\n"+
				       "<groupNumber>9991</groupNumber>\n"+
				        "<InsuredName>\n"+
				         "<last>Pugh</last>\n"+
				          "<first>Daniel</first>\n"+
				          "<middle>P</middle>\n"+
				       "</InsuredName>\n"+
				        "<InsuredAddress>\n"+
				         "<address1>123 Anystreet</address1>\n"+
				          "<address2>Apt 123</address2>\n"+
				          "<city>Houston</city>\n"+
				         "<state>TX</state>\n"+
				         "<zip>77002</zip>\n"+
				         "<zip4>1234</zip4>\n"+
				         "<country>US</country>\n"+
				        "</InsuredAddress>\n"+
				        "<insuredDob>19560525</insuredDob>\n"+
				        "<insuredGender>F</insuredGender>\n"+
				        "<InsuredContact>\n"+
				          "<homeTelephone>2815551212</homeTelephone>\n"+
				        "</InsuredContact>\n"+
				     "</insured>\n"+
				   "</PatientPayorAndInsured>\n"+
				  "<PatientPayorAndInsured ID=\""+"hsi-777"+"\">\n"+
				      "<payor>\n"+
				       "<payorName>My Insurance</payorName>\n"+
				       "<PayorAddress>\n"+
				        "<address1>321 Broadway</address1>\n"+
				        "<address2>Suite 16877</address2>\n"+
				        "<city>Pearland</city>\n"+
				          "<state>TX</state>\n"+
				          "<zip>75081</zip>\n"+
				         " <zip4>4321</zip4>\n"+
				         "<country>US</country>\n"+
				        "</PayorAddress>\n"+
				        "<insuranceServiceProvider>Other</insuranceServiceProvider>\n"+
				        "<payorGroupNumber>744</payorGroupNumber>\n"+
				      "</payor>\n"+
				      "<insured>\n"+
				        "<patientRelationship>Employer</patientRelationship>\n"+
				        "<priorityCode>Tertiary</priorityCode>\n"+
				        "<policyNumber>5477114</policyNumber>\n"+
				        "<groupNumber>3662</groupNumber>\n"+
				        "<InsuredName>\n"+
				          "<last>Pearland Steel</last>\n"+
				          "<first>NULL</first>\n"+
				        "</InsuredName>\n"+
				        "<InsuredAddress>\n"+
				          "<address1>1621 Walnut</address1>\n"+
				          "<city>Pearland</city>\n"+
				          "<state>TX</state>\n"+
				          "<zip>77084</zip>\n"+
				          "<zip4>1234</zip4>\n"+
				          "<country>US</country>\n"+
				        "</InsuredAddress>\n"+
				        "<InsuredContact>\n"+
				          "<homeTelephone>8325551212</homeTelephone>\n"+
				        "</InsuredContact>\n"+
				      "</insured>\n"+
				    "</PatientPayorAndInsured>\n";*/
		   /*}
		 }*/

		for(PatientAllergy patAllergy:getPatientAllergyList())
		{

			System.out.println("patAllergy.getAllergySeverity():::::"+patAllergy.getAllergySeverity());

			String onsetdate="";
			if(!(patAllergy.getOnSetDate()==null))
			{
				onsetdate=new DateUtil().convertDateFormatUsingFormat(patAllergy.getOnSetDate(),DATE_PATTERN);
			}

			if(patAllergy.getCompositeAllergyId()==0)
			{

				System.out.println(":::::::::::::::::!!!!!!1234!!!!!!!!!!!"+patAllergy.getAllergyName()+":::"+patAllergy.getAllergySeverity()+":::"+patAllergy.getCompositeAllergyId()
						+"pff"+patAllergy.getAllergySource()+"hero"+patAllergy.getAllergytype()+"htr"+patAllergy.getAlergyConceptId()+"hhh"+patAllergy.getAllergySeverity()
						+"fff"+patAllergy.getAllergyNotes()+"dd"+onsetdate+"getAllergyConceptTypeId::::"+patAllergy.getAllergyConceptTypeId());


				fullEprescribeXmlSummary=fullEprescribeXmlSummary+
						"\t<PatientAllergies>\n"+
						"\t\t<allergyID>"+patAllergy.getAllergySource()+":"+patAllergy.getAlergyConceptId()+":"+patAllergy.getAllergyConceptTypeId()+"</allergyID>\n"+
						"\t\t<allergyTypeID>"+"Y"+"</allergyTypeID>\n";

				if(!(patAllergy.getAllergySeverity().equals("")))
					fullEprescribeXmlSummary=fullEprescribeXmlSummary+
					"\t\t<allergySeverityTypeID>"+patAllergy.getAllergySeverity()+"</allergySeverityTypeID>\n";

				fullEprescribeXmlSummary=fullEprescribeXmlSummary+
						"\t\t<allergyComment>"+patAllergy.getAllergyNotes()+"</allergyComment>\n"+
						"\t\t<onsetDate>" +onsetdate+"</onsetDate>\n"+
						"\t\t</PatientAllergies>\n\n";

			}
			else
			{
				System.out.println(":::::::::::::::::!!!!!!PatientAllergies!!!!!!!!!!!"+patAllergy.getAllergyName());
				fullEprescribeXmlSummary=fullEprescribeXmlSummary+
						"\t<PatientAllergies>\n"+
						"\t\t<allergyID>"+patAllergy.getCompositeAllergyId()+"</allergyID>\n"+	
						"\t\t<allergyTypeID>"+"FDB"+"</allergyTypeID>\n";

				if(!(patAllergy.getAllergySeverity().equals("")))

					fullEprescribeXmlSummary=fullEprescribeXmlSummary+
					"\t\t<allergySeverityTypeID>"+patAllergy.getAllergySeverity()+"</allergySeverityTypeID>\n";

				fullEprescribeXmlSummary=fullEprescribeXmlSummary+
						"\t\t<allergyComment>"+patAllergy.getAllergyNotes()+"</allergyComment>\n"+
						"\t\t<onsetDate>" +onsetdate+"</onsetDate>\n"+
						"\t</PatientAllergies>\n\n";

			}


		} 
		fullEprescribeXmlSummary=fullEprescribeXmlSummary+			
				"</Patient>\n\n\n";
		//   String medicineDetail="";
		int medCheck=0;
		//fullEprescribeXmlSummary=fullEprescribeXmlSummary+


		String exernalId;//=userManageBean.getLogedFirstName()+"_";
		//int i=0;
		for(PatientMedicationData pat:medicineListForEprescribe)
		{
			if(pat.getDrugId()!=0)
			{
				medCheck++;
				Date date;
				if(!(pat.getStartDate()==null))
					date=pat.getStartDate();
				else
					date=pat.getModifyDate();

				//RandomCharacter randomCharacter =new RandomCharacter();
				//exernalId=""+(int)pat.getDrugId()+randomCharacter.generateRandomString();
				//System.out.println(":::exernalId::"+exernalId+":::::::::date::"+date+"::::!!!"+pat.getStartDate());

				int daySupply=0;
				/*if(pat.getDaySupply()!=null)
				{
					daySupply=Integer.parseInt(pat.getDaySupply().substring(0,pat.getDaySupply().indexOf(" ")));
				}*/
				int numberTypeId=findNumberTypeIDForParticularMedicine(pat.getUnit());	
				int formTypeID=findFormTypeIDForParticularMedicine(pat.getDosageForm());
				int routeTypeId=findRouteTypeIDForParticularMedicine(pat.getByRoute());
				int frequencyTypeID=findFrequencyTypeIDForParticularMedicine(pat.getDirections());
				
				String prnDetails="";
				System.out.println("prn details:::::"+pat.isPrn()+":::::"+prnDetails);
				if(pat.isPrn())
					prnDetails="Yes";
				else
					prnDetails="No";

				String allowSubstitution="";
				System.out.println("allowSubstitution details:::::"+pat.isAllowSubstitution()+":::::"+allowSubstitution);
				if(pat.isAllowSubstitution())
					allowSubstitution="DispenseAsWritten";
				else
					allowSubstitution="SubstitutionAllowed";	
				System.out.println("allowSubstitution:::::"+allowSubstitution);



				System.out.println(":::::::::::numberTypeId:"+numberTypeId+":::::::formTypeID:"+formTypeID+":::::::::routeTypeId::"+routeTypeId+":::frequencyTypeID::"+frequencyTypeID);
				if(pat.getPrescriptionStatus()!=null && pat.getPrescriptionStatus().equals("P"))
				{
					// "<LicensedPrescriber ID=\""+loggedDoctorId+"\">" +
					if(pat.getPrescriptionGuid()!=null)
					{
						fullEprescribeXmlSummary=fullEprescribeXmlSummary+
								"<OutsidePrescription ID=\""+pat.getPrescriptionGuid()+"\">\n";
					}
					else
					{
						fullEprescribeXmlSummary=fullEprescribeXmlSummary+
								"<OutsidePrescription>\n";
					}
					System.out.println("allowSubstitution:::::"+allowSubstitution);

					fullEprescribeXmlSummary=fullEprescribeXmlSummary+
							/*"<externalId>"+exernalId+"</externalId>"+*/
							"\t<externalId>"+pat.getId()+"</externalId>\n"+
							"\t<date>"+new DateUtil().convertDateFormatUsingFormat(date,DATE_PATTERN) +"</date>\n"+
							"\t<doctorName>NOT SENT</doctorName>\n"+
							"\t<dispenseNumber>"+pat.getQuantity()+"</dispenseNumber>\n"+
							"\t<sig>"+pat.getAdditionalSig()+"</sig>\n"+
							//"\t<daysSupply>"+pat.getDaySupply()+"</daysSupply>\n"+
							//"\t<prn>"+prnDetails+"</prn>\n"+

					    				    	"\t<refillCount>"+pat.getReffils()+"</refillCount>\n"+

					    				    	"\t<substitution>"+allowSubstitution+"</substitution>\n"+


					    				    	"\t<drugIdentifier>"+(int)pat.getDrugId()+"</drugIdentifier>\n"+
					    				    	"\t<drugIdentifierType>"+pat.getDataProvider()+"</drugIdentifierType>\n" +
					    				    	"\t<prescriptionType>reconcile</prescriptionType>\n"+
					    				    	"\t<codifiedSigType>\n"+
					    				    	"\t\t<ActionType>0</ActionType>\n"+
					    				    	"\t\t<NumberType>"+numberTypeId+"</NumberType>\n"+
					    				    	"\t\t<FormType>"+formTypeID+"</FormType>\n"+
					    				    	"\t\t<RouteType>"+routeTypeId+"</RouteType>\n"+
					    				    	"\t\t<FrequencyType>"+frequencyTypeID+"</FrequencyType>\n"+
					    				    	"\t</codifiedSigType>\n"+
					    				    	"\t<prn>"+prnDetails+"</prn>\n";
					
											if(pat.getDaySupply()!=null)
											{
												
												daySupply=Integer.parseInt(pat.getDaySupply());
												
											
											fullEprescribeXmlSummary=fullEprescribeXmlSummary+
											    				    	
											    				    	"\t<daysSupply>"+daySupply+"</daysSupply>\n";
											}
					fullEprescribeXmlSummary=fullEprescribeXmlSummary+
					    				   " </OutsidePrescription>\n\n";
				}

				else{

					if(pat.getPrescriptionGuid()!=null)
					{
						fullEprescribeXmlSummary=fullEprescribeXmlSummary+
								"<OutsidePrescription ID=\""+pat.getPrescriptionGuid()+"\">\n";
					}
					else
					{
						fullEprescribeXmlSummary=fullEprescribeXmlSummary+
								"<OutsidePrescription>\n";
					}



					fullEprescribeXmlSummary=fullEprescribeXmlSummary+
							"\t<externalId>"+pat.getId()+"</externalId>\n"+
							"\t<date>"+new DateUtil().convertDateFormatUsingFormat(date,DATE_PATTERN) +"</date>\n"+
							"\t<doctorName>"+pat.getPrescriberName() +"</doctorName>\n"+
							"\t<dispenseNumber>"+pat.getQuantity()+"</dispenseNumber>\n"+
							"\t<sig>"+pat.getAdditionalSig()+"</sig>\n"+
							//"\t<daysSupply>"+pat.getDaySupply()+"</daysSupply>\n"+
							//"\t<takeAsNeeded>"+prnDetails+"</takeAsNeeded>\n"+
							//"\t<prn>"+prnDetails+"</prn>\n"+

									    	"\t<refillCount>"+pat.getReffils()+"</refillCount>\n"+

									    	"\t<substitution>"+allowSubstitution+"</substitution>\n"+


									    	"\t<drugIdentifier>"+(int)pat.getDrugId()+"</drugIdentifier>\n"+
									    	"\t<drugIdentifierType>"+pat.getDataProvider()+"</drugIdentifierType>\n" +
									    	"\t<prescriptionType>reconcile</prescriptionType>\n"+
									    	"\t<codifiedSigType>\n"+
									    	"\t\t<ActionType>0</ActionType>\n"+
									    	"\t\t<NumberType>"+numberTypeId+"</NumberType>\n"+
									    	"\t\t<FormType>"+formTypeID+"</FormType>\n"+
									    	"\t\t<RouteType>"+routeTypeId+"</RouteType>\n"+
									    	"\t\t<FrequencyType>"+frequencyTypeID+"</FrequencyType>\n"+
									    	"\t</codifiedSigType>\n"+
									    	"\t<prn>"+prnDetails+"</prn>\n";
									    	
												
												if(pat.getDaySupply()!=null)
												{
													daySupply=Integer.parseInt(pat.getDaySupply());
												fullEprescribeXmlSummary=fullEprescribeXmlSummary+
												 "\t<daysSupply>"+daySupply+"</daysSupply>\n";
												}
												fullEprescribeXmlSummary=fullEprescribeXmlSummary+
												    				   "</OutsidePrescription>\n\n";
									    

				}//close if
			}//close for loop


			//i++;

		}
		if(medCheck==0)
		{
			fullEprescribeXmlSummary=fullEprescribeXmlSummary+"<OutsidePrescription><prescriptionType>NoCurrentMeds</prescriptionType></OutsidePrescription>\n\n";
		}

		fullEprescribeXmlSummary=fullEprescribeXmlSummary+"</NCScript>";

		try {
			boolean check = validate(fullEprescribeXmlSummary,"https://preproduction.newcropaccounts.com/InterfaceV7/NCScript.xsd");
			//boolean check=false;
			if(!check)
			{
				fullEprescribeXmlSummary="";
				patientMedicineService.saveValueForIntegration(new ContextUtil().getPatientId(), true);
			}
			System.out.println("::::::::::::::::::check:::"+check);
		} catch (SAXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		//fullEprescribeXmlSummary=fullEprescribeXmlSummary.trim();	


		System.out.println("fullEprescribeXmlSummary:::::::::::::"+fullEprescribeXmlSummary);
		return fullEprescribeXmlSummary.trim();

	}

	public void setFullEprescribeXmlSummary(String fullEprescribeXmlSummary) {
		this.fullEprescribeXmlSummary = fullEprescribeXmlSummary;
	}	

	/*
	 * schema validation for eprescribe
	 * @author: Gopal Krishna Jha
	 */
	public boolean validate(String inputXml, String schemaLocation) throws IOException, SAXException {
		logger.info("validate xml::::::::::::: method start:::"+inputXml);

		// build the schema
		SchemaFactory factory = SchemaFactory.newInstance("http://www.w3.org/2001/XMLSchema");
		//File schemaFile = new File(schemaLocation);
		java.net.URL schemaFile= new URL(schemaLocation);
		Schema schema = factory.newSchema(schemaFile);
		javax.xml.validation.Validator validator =  schema.newValidator();

		// create a source from a string
		Source source = new StreamSource(new StringReader(inputXml));

		// check input
		boolean isValid = true;
		try {
			validator.validate(source);
		} catch (Exception e) {
			fullEprescribeXmlSummary=e.getMessage();
			System.out.println("Not valid"+e.getMessage());
			isValid = false;
		}

		return isValid;
	}
	private String fullEPrescribeDetail=new String();
	public String getFullEPrescribeDetail() {
		fullEPrescribeDetail="";
		getLoggedDoctorId();

		System.out.println("::::::::::::::::><><><><><loggedDoctorId::"+loggedDoctorId);

		//fullEPrescribeDetail=
		FacesContext context = FacesContext	.getCurrentInstance();
		UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");
		userManageBean.setLogedFirstName("");
		userManageBean.setLogedLastName("");
		userManageBean.setLogedLastName("");
		System.out.println(":::::::::::::"+userManageBean.getLogedFirstName());
		if(userManageBean.getRoleSecurity().getRoleType().equalsIgnoreCase("LicensedPrescriber"))
		{
			fullEPrescribeDetail=fullEPrescribeDetail+
					"<LicensedPrescriber ID=\""+loggedDoctorId+"\">" +
					"<LicensedPrescriberName>"+
					"<last>"+userManageBean.getLogedLastName().trim()+"</last>"+
					"<first>"+userManageBean.getLogedFirstName().trim()+"</first>"+
					"<middle>"+userManageBean.getLogeMiddleName()+"</middle>"+
					"</LicensedPrescriberName>"+
					"<dea>"+userManageBean.getDoctorDetailData().getDea()+"</dea>"+
					"<upin>"+userManageBean.getDoctorDetailData().getUpin()+"</upin>"+
					"<licenseState>"+userManageBean.getDoctorDetailData().getDocLicenseState()+"</licenseState>"+
					"<licenseNumber>"+userManageBean.getDoctorDetailData().getDocLicenseNumber()+"</licenseNumber>"+
					"<npi>"+userManageBean.getDoctorDetailData().getNpi()+"</npi>"+
					"</LicensedPrescriber>";

		}

		else if(userManageBean.getRoleSecurity().getRoleType().equalsIgnoreCase("Staff"))
		{
			fullEPrescribeDetail=fullEPrescribeDetail+
					"<Staff  ID=\""+loggedDoctorId+"\">"+
					"<StaffName>"+
					"<last>"+userManageBean.getLogedLastName().trim()+"</last>"+
					"<first>"+userManageBean.getLogedFirstName().trim()+"</first>"+
					"<middle>"+userManageBean.getLogeMiddleName()+"</middle>"+
					"<prefix>Mr.</prefix>"+
					"<suffix>Jr</suffix>"+
					"</StaffName>"+
					"<license>"+userManageBean.getDoctorDetailData().getDocLicenseNumber()+"</license>"+
					"</Staff>";

		}

		else if(userManageBean.getRoleSecurity().getRoleType().equalsIgnoreCase("MidlevelPrescriber"))
		{
			fullEPrescribeDetail=fullEPrescribeDetail+
					"<MidlevelPrescriber ID=\""+loggedDoctorId+"\">"+
					"<LicensedPrescriberName>"+
					"<last>"+userManageBean.getLogedLastName().trim()+"</last>"+
					"<first>"+userManageBean.getLogedFirstName().trim()+"</first>"+
					"<middle>"+userManageBean.getLogeMiddleName()+"</middle>"+
					"</LicensedPrescriberName>"+
					"<dea>"+userManageBean.getDoctorDetailData().getDea()+"</dea>"+
					"<upin>"+userManageBean.getDoctorDetailData().getUpin()+"</upin>"+
					"<licenseState>"+userManageBean.getDoctorDetailData().getDocLicenseState()+"</licenseState>"+
					"<licenseNumber>"+userManageBean.getDoctorDetailData().getDocLicenseNumber()+"</licenseNumber>"+
					"</MidlevelPrescriber>";



		}

		else if(userManageBean.getRoleSecurity().getRoleType().equalsIgnoreCase("supervisingDoctor"))
		{
			fullEPrescribeDetail=fullEPrescribeDetail+
					"<SupervisingDoctor ID=\""+loggedDoctorId+"\">"+
					"<LicensedPrescriberName>"+
					"<last>"+userManageBean.getLogedLastName().trim()+"</last>"+
					"<first>"+userManageBean.getLogedFirstName().trim()+"</first>"+
					"<middle>"+userManageBean.getLogeMiddleName()+"</middle>"+
					"</LicensedPrescriberName>"+
					"<dea>"+userManageBean.getDoctorDetailData().getDea()+"</dea>"+
					"<upin>"+userManageBean.getDoctorDetailData().getUpin()+"</upin>"+
					"<licenseState>"+userManageBean.getDoctorDetailData().getDocLicenseState()+"</licenseState>"+
					"<licenseNumber>"+userManageBean.getDoctorDetailData().getDocLicenseNumber()+"</licenseNumber>"+
					"</SupervisingDoctor>";
		}

		fullEPrescribeDetail=fullEPrescribeDetail.trim();

		return fullEPrescribeDetail;
	}

	public void setFullEPrescribeDetail(String fullEPrescribeDetail) {
		this.fullEPrescribeDetail = fullEPrescribeDetail;
	}
	public String getEprescribeDetailForPatient() {
		logger.info("getEprescribeDetailForPatient method start " ); 
		patientMedicineService.saveValueForIntegration(new ContextUtil().getPatientId(), true);
		eprescribeDetailForPatient="";
		//convertDateFormatUsingFormat
		FacesContext context = FacesContext	.getCurrentInstance();
		UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");

		//String exernalId;//=userManageBean.getLogedFirstName()+"_";
		//int i=0;
		for(PatientMedicationData pat:medicineListForEprescribe)
		{
			Date date;
			if(!(pat.getStartDate()==null))
				date=pat.getStartDate();
			else
				date=pat.getModifyDate();

			//RandomCharacter randomCharacter =new RandomCharacter();
			//exernalId=""+(int)pat.getDrugId()+randomCharacter.generateRandomString();
			//System.out.println(":::exernalId::"+exernalId+":::::::::date::"+date+"::::!!!"+pat.getStartDate());

			int numberTypeId=findNumberTypeIDForParticularMedicine(pat.getUnit());	
			int formTypeID=findFormTypeIDForParticularMedicine(pat.getDosageForm());
			int routeTypeId=findRouteTypeIDForParticularMedicine(pat.getByRoute());
			int frequencyTypeID=findFrequencyTypeIDForParticularMedicine(pat.getDirections());

			System.out.println(":::::::::::numberTypeId:"+numberTypeId+":::::::formTypeID:"+formTypeID+":::::::::routeTypeId::"+routeTypeId+":::frequencyTypeID::"+frequencyTypeID);
			if(pat.getPrescriptionStatus()!=null && pat.getPrescriptionStatus().equals("P"))
			{
				// "<LicensedPrescriber ID=\""+loggedDoctorId+"\">" +
				if(pat.getPrescriptionGuid()!=null)
				{
					eprescribeDetailForPatient=eprescribeDetailForPatient+
							"<OutsidePrescription ID=\""+pat.getPrescriptionGuid()+"\">";
				}
				else
				{
					eprescribeDetailForPatient=eprescribeDetailForPatient+
							"<OutsidePrescription>";
				}

				eprescribeDetailForPatient=eprescribeDetailForPatient+
						/*"<externalId>"+exernalId+"</externalId>"+*/
						"<externalId>"+pat.getId()+"</externalId>"+
						"<date>"+new DateUtil().convertDateFormatUsingFormat(date,DATE_PATTERN) +"</date>"+

	    				    	"<doctorName>NOT SENT</doctorName>"+
	    				    	"<dispenseNumber>"+pat.getQuantity()+"</dispenseNumber>"+
	    				    	//"\t<prescriptionNotes>"+pat.getAdditionalSig()+"</prescriptionNotes>\n"+
	    				    	/*"<sig>"+pat.getDirections()+"</sig>"+*/
	    				    	"<refillCount>"+pat.getReffils()+"</refillCount>"+
	    				    	"<drugIdentifier>"+(int)pat.getDrugId()+"</drugIdentifier>"+
	    				    	"<drugIdentifierType>"+pat.getDataProvider()+"</drugIdentifierType>" +
	    				    	"<prescriptionType>reconcile</prescriptionType>"+
	    				    	"<codifiedSigType>"+
	    				    	"<ActionType>0</ActionType>"+
	    				    	"<NumberType>"+numberTypeId+"</NumberType>"+
	    				    	"<FormType>"+formTypeID+"</FormType>"+
	    				    	"<RouteType>"+routeTypeId+"</RouteType>"+
	    				    	"<FrequencyType>"+frequencyTypeID+"</FrequencyType>"+
	    				    	"</codifiedSigType>"+



	    				   " </OutsidePrescription>";
			}

			else{

				if(pat.getPrescriptionGuid()!=null)
				{
					eprescribeDetailForPatient=eprescribeDetailForPatient+
							"<OutsidePrescription ID=\""+pat.getPrescriptionGuid()+"\">";
				}
				else
				{
					eprescribeDetailForPatient=eprescribeDetailForPatient+
							"<OutsidePrescription>";
				}

				eprescribeDetailForPatient=eprescribeDetailForPatient+
						/*"<externalId>"+exernalId+"</externalId>"+*/
						"<externalId>"+pat.getId()+"</externalId>"+
						"<date>"+new DateUtil().convertDateFormatUsingFormat(date,DATE_PATTERN) +"</date>"+
						/* 	"<doctorName>" +userManageBean.getLogedFirstName()+" "+userManageBean.getLogedLastName() +"</doctorName>"+*/
						/* "<doctorName>" +userManageBean.getLogedFirstName()+" "+userManageBean.getLogedLastName() +"</doctorName>"+*/
						"<doctorName>" +pat.getPrescriberName() +"</doctorName>"+
						/*	"<NOT_SENT>" +userManageBean.getLogedFirstName()+" "+userManageBean.getLogedLastName() +"</NOT_SENT>"+*/
						"<dispenseNumber>"+pat.getQuantity()+"</dispenseNumber>"+
						//"\t<prescriptionNotes>"+pat.getAdditionalSig()+"</prescriptionNotes>\n"+
						/*"<sig>"+pat.getDirections()+"</sig>"+*/
						"<refillCount>"+pat.getReffils()+"</refillCount>"+
						"<drugIdentifier>"+(int)pat.getDrugId()+"</drugIdentifier>"+
						"<drugIdentifierType>"+pat.getDataProvider()+"</drugIdentifierType>" +
						"<prescriptionType>reconcile</prescriptionType>"+
						"<codifiedSigType>"+
						"<ActionType>0</ActionType>"+
						"<NumberType>"+numberTypeId+"</NumberType>"+
						"<FormType>"+formTypeID+"</FormType>"+
						"<RouteType>"+routeTypeId+"</RouteType>"+
						"<FrequencyType>"+frequencyTypeID+"</FrequencyType>"+
						"</codifiedSigType>"+

		   " </OutsidePrescription>";

			}


			//i++;

		}
		if(eprescribeDetailForPatient.equals(""))
		{
			eprescribeDetailForPatient="<OutsidePrescription><prescriptionType>NoCurrentMeds</prescriptionType></OutsidePrescription>";
		}

		System.out.println(">>>>>>>>:::"+eprescribeDetailForPatient);
		return eprescribeDetailForPatient.trim();
	}
	/*
	 * find Frequency descri[tion id according to Frequency type value for eprescribe..
	 * @author: Gopal Krishna Jha
	 */
	private int findFrequencyTypeIDForParticularMedicine(String directions) {
		int frequencyTypeId=0;
		getSigCodeList();
		if(directions==null)
			frequencyTypeId=0;
		else
		{
			for(SigCode sigCode:sigCodeList)
			{
				if(sigCode.getSigCode().equalsIgnoreCase(directions))
					frequencyTypeId=sigCode.getNewCropId();
			}
		}

		return frequencyTypeId;
	}
	/*
	 * find Route type id according to Route type value for eprescribe..
	 * @author: Gopal Krishna Jha
	 */
	private int findRouteTypeIDForParticularMedicine(String byRoute) {
		//System.out.println(":::::::::::::::::"+byRoute);
		int routeId=0;
		getRouteDetailsList();
		if(byRoute==null)
			routeId=0;
		else
		{
			for(RouteDetails routeDetail:routeDetailsList)
			{
				//System.out.println("::::::::::::::::::12132"+routeDetail.getRouteName());
				if(routeDetail.getRouteName().equalsIgnoreCase(byRoute))
					routeId=routeDetail.getNewCropId();

			}
		}
		return routeId;
	}
	/*
	 * find form type id according to form type value for eprescribe..
	 * @author: Gopal Krishna Jha
	 */
	private int findFormTypeIDForParticularMedicine(String dosageForm) {
		int formTypeId=0;
		if(dosageForm==null)
			formTypeId=0;
		else
		{
			for(DosageFrom dosageForm1:getDosageDetailsList())
			{
				if(dosageForm1.getDosageFrom().equalsIgnoreCase(dosageForm))
					formTypeId=dosageForm1.getNewCropId();

			}
		}

		return formTypeId;
	}
	/*
	 * find Number type id according to Number type value for eprescribe..
	 * @author: Gopal Krishna Jha
	 */
	private int findNumberTypeIDForParticularMedicine(String unit) {
		getUnitSummaryList();
		int unitid=0;
		if(unit==null)
			unitid=0;
		else
		{
			for(MedUnitSummary medUnitSummary:unitSummaryList)
			{
				if(medUnitSummary.getUnit().equalsIgnoreCase(unit))
					unitid=medUnitSummary.getNewCropId();
			}

		}
		return unitid;
	}

	public void setEprescribeDetailForPatient(String eprescribeDetailForPatient) {
		this.eprescribeDetailForPatient = eprescribeDetailForPatient;
	}
	private String eprescribeDetailForPatient;


	/*
	 * find anticoag clinic start date particular user..
	 * @author: Gopal Krishna Jha
	 */
	public Date getAnticoagClinicStartDate() {
		if(anticoagClinicStartDate==null)
		{
			getAnticoagMedList();
			//anticoagClinicStartDate=new Date
			anticoagClinicStartDate=patientMedicineService.findAnticoagClinicStartDate(anticoagMedList,new ContextUtil().getPatientId(),new ContextUtil().getProviderId());
			System.out.println("::anticoagClinicStartDate::"+anticoagClinicStartDate);
		}
		return anticoagClinicStartDate;
	}

	public void setAnticoagClinicStartDate(Date anticoagClinicStartDate) {
		this.anticoagClinicStartDate = anticoagClinicStartDate;
	}

	public Date getAnticoagDate() {
		if(anticoagDate==null)
		{
			getAnticoagMedList();
			//anticoagDate=new Date();
			anticoagDate=patientMedicineService.findAnticoagDate(anticoagMedList,new ContextUtil().getPatientId(),new ContextUtil().getProviderId());
			System.out.println(":::anticoagDate::::"+anticoagDate);
		}
		return anticoagDate;
	}

	public void setAnticoagDate(Date anticoagDate) {
		this.anticoagDate = anticoagDate;
	}

	public DataTable getReconsileMedsDataTable() {
		return reconsileMedsDataTable;
	}

	public void setReconsileMedsDataTable(DataTable reconsileMedsDataTable) {
		this.reconsileMedsDataTable = reconsileMedsDataTable;
	}


	/*
	 * modify medicine in anticoag clinic..
	 * @author: Gopal Krishna jha
	 */
	/*public String editMedicineForAnticoag()
	{
		logger.info("editMedicineForAnticoag method start::::"+patientMedicationData.getDrugs());

		patientMedicationData.setMedicineStatus(MODIFY_MEDS);
		patientMedicationData.setCauseOfAddMeds(MODIFY_MEDS);
		patientMedicationData.setStartDate(new DateUtil().getTodayDate());
		patientMedicationData.setPrescriberName(new ContextUtil().getLoggerFirstName()+" " +new ContextUtil().getLoggedUserMiddleName() +" "+new ContextUtil().getLoggerLastName());
		patientMedicationData.setPrescriptionStatus(PRESCRIPITION_STATUS_PENDING);
		patientMedicationData.setFlagForVisit(true);
		patientMedicationData.setPrescriptionGuid(null);
		patientMedicineService.modifyMedicineChange(patientMedicationData,changePatientMedicineBackUpdata);
		System.out.println("::::::::::::::::::"+changePatientMedicineBackUpdata.getStrengths()+"::::new"+patientMedicationData.getStrengths());

//	logger.info("size:::::::::: before delet"+patientMedicationDataList.size());
	patientMedicationDataList=null;
	medicalActionPlanList=null;
	currentAntiCoagMedList=new ArrayList<PatientMedicationData>();
	currentAntiplateletMedsList=new ArrayList<PatientMedicationData>();
	//patientMedicineService.saveValueForIntegration(new ContextUtil().getPatientId(), true);
		return "go_to_anticoag";
	}
	 */

	/*
	 * after click on dose calculator dose will be updated in field..
	 * @author: Gopal Krishna Jha
	 */
	public void afterDoseCalculation()
	{
		logger.info("afterDoseCalculation :::: method in bean:::"+weekStatus);
		double doseInDouble=weekStatus;
		doseInDouble=doseInDouble*10;
		int calculatedDose=(int) doseInDouble;
		medActionPlan.setValue(1);
		//String dose1=Double.toString(weekStatus);
		getWarfarinDoseList();

		for(WSDrug wsdrug:doseDetailList)
		{			
			String newDose=wsdrug.getDose().replaceAll("[^\\d.]", "");
			//System.out.println(newDose);
			double d=Double.parseDouble(newDose);
			d=d*10;
			int doseInInt=(int) d;
			//System.out.println(doseInInt);
			if(calculatedDose<=doseInInt)
			{

				double cals=doseInInt/10;
				String doseInString=cals+" mg";
				System.out.println(":::::::::::::"+doseInString);
				medActionPlan.setDose(doseInString);
				break;
			}
		}

		//medActionPlan.setDose(dose);


		RequestContext.getCurrentInstance().execute("warfarinDoseCalculator.hide();");
		RequestContext.getCurrentInstance().execute("quickPrescribe.show();");
	}
	/*
	 * Showing last reconcilse date
	 * @author: Gopal Krishna Jha
	 */
	public List<String> getLastReconcileInfo() {
		if(lastReconcileInfo.isEmpty())
		{
			lastReconcileInfo=patientMedicineService.findLastReconcileDate(new ContextUtil().getPatientId(),new ContextUtil().getProviderId());
			if(lastReconcileInfo.isEmpty())
			{
				lastReconcileInfo.add("NA");
				lastReconcileInfo.add("NA");
			}
		}
		return lastReconcileInfo;
	}

	public void setLastReconcileInfo(List<String> lastReconcileInfo) {
		this.lastReconcileInfo = lastReconcileInfo;
	}

	/*public String getLastReconcileDate() {
		if(lastReconcileDate.equals(""))
		{
			Date reconciledate=patientMedicineService.findLastReconcileDate(new ContextUtil().getPatientId(),new ContextUtil().getProviderId());
			if(!(reconciledate==null))
					lastReconcileDate=new DateUtil().convertDateFormatUsingFormat(reconciledate, MM_DD_YYYY_DATE_PATTERN);
		}
		return lastReconcileDate;
	}

	public void setLastReconcileDate(String lastReconcileDate) {
		this.lastReconcileDate = lastReconcileDate;
	}*/
	public List<String> getWarfarinDoseList() {
		if(warfarinDoseList.isEmpty())
		{
			warfarinDoseList.add("1 mg");
			warfarinDoseList.add("2 mg");
			warfarinDoseList.add("2.5 mg");
			warfarinDoseList.add("3 mg");

			warfarinDoseList.add("4 mg");
			warfarinDoseList.add("5 mg");
			warfarinDoseList.add("6 mg");
			warfarinDoseList.add("7.5 mg");
			warfarinDoseList.add("10 mg");


		}
		return warfarinDoseList;
	}

	public void setWarfarinDoseList(List<String> warfarinDoseList) {
		this.warfarinDoseList = warfarinDoseList;
	}
	public List<String> getInrRangeInString() {
		if(inrRangeInString.isEmpty())
		{
			inrRangeInString.add("None");
			inrRangeInString.add("2.5(2-3)");
			inrRangeInString.add("3.5(3-4)");
			inrRangeInString.add("4.5(4-5)");
		}
		return inrRangeInString;
	}

	public void setInrRangeInString(List<String> inrRangeInString) {
		this.inrRangeInString = inrRangeInString;
	}
	//dose for warfarin..
	private List<String>warfarinDoseList=new ArrayList<String>();
	private List<String>inrRangeInString=new ArrayList<String>();
	private List<WSDrug>SearchMedicineList=new ArrayList<WSDrug>(); 
	//med list for testing
	//private List<String>medList=new ArrayList<String>();
	private List<WSDrug>webservicesDrugList=new ArrayList<WSDrug>();
	/*
	 * used in overViewFilter.jsf
	 * Click on Add Medicine Button Search Med based on user request 
	 * searching meds for add new meds..
	 * @author: Gopal Krishna Jha
	 */
	public void searchMedicine()
	{
		logger.info("searchMedicine start in bean::::"+patientMedicationData.getDrugs());
		patientMedicationData=new PatientMedicationData();
		//patientMedicationData=new PatientMedicationData();
		medActionPlan=new MedActionPlan();
		webservicesDrugList=new ArrayList<WSDrug>();
		//medList=new ArrayList<String>();
		drugInteractions= new ArrayList<DrugInteraction>();
		drugAllergyInteractions=new ArrayList<DrugAllergyDetail>();
		drugDiseaseDetailsInteractions=new ArrayList<DrugDiseaseDetail>();
		setPharmacogenomicInteractionDetail(null);
		RequestContext.getCurrentInstance().execute("searchMedicinePopUp.show();");
	}

	public void searchMedicine1()
	{
		logger.info("searchMedicine1s start in bean::::"+patientMedicationData.getDrugs());
		webservicesDrugList=new ArrayList<WSDrug>();
		webservicesDrugList=patientMedicineService.findSearchMedicineDetailIst(patientMedicationData.getDrugs());

	}

	/*
	 * select search medicine..
	 * @author: Gopal Krishna Jha
	 */
	public void selectedSearchMeds() throws Exception
	{
		logger.info("selectedSearchMeds method start");
		setShowMessageForNewAddMeds(false);
		//PatientMedicationData	PatientMedicationDataForReconcile=(PatientMedicationData) getReconsileMedsDataTable().getRowData();
		WSDrug wsDrugObj=(WSDrug)getSearchMedicineDataTable().getRowData();
		System.out.println(wsDrugObj.getGenericName()+":::::::::::::::: meds::"+wsDrugObj.getDrugName()+"id:::::::::::"+wsDrugObj.getDrugNameId());
		//RequestContext.getCurrentInstance().reset("medicinename");
		patientMedicationData.setDrugs(wsDrugObj.getDrugName());
		patientMedicationData.setDrugNameId(wsDrugObj.getDrugNameId());
		patientMedicationData.setDosageForm(wsDrugObj.getDosageForm());
		patientMedicationData.setByRoute(wsDrugObj.getRoute());

		//getting dose list...for selected meds
		doseDetailList=new ArrayList<WSDrug>();
		doseDetailList=patientMedicineService.findDoseListOfParticularMeds(wsDrugObj.getDrugNameId(),wsDrugObj.getDosageForm());

		//UnitDetails unitDetails = new UnitDetails();

		if(!((wsDrugObj.getDosageForm().equalsIgnoreCase("capsule")) || (wsDrugObj.getDosageForm().equalsIgnoreCase("tablet"))
				||(wsDrugObj.getDosageForm().equalsIgnoreCase("Lozenge"))
				||(wsDrugObj.getDosageForm().equalsIgnoreCase("pill"))||(wsDrugObj.getDosageForm().equalsIgnoreCase("patch"))
				||(wsDrugObj.getDosageForm().equalsIgnoreCase("suppository"))))
			patientMedicationData.setQuantity("");
		String genericName;
		if(wsDrugObj.getGenericName() == null)
		{
			genericName=wsDrugObj.getDrugName();

		}

		else
		{
			genericName=wsDrugObj.getGenericName();
		}
		//genericName=wsDrugObj.getDrugName();
		System.out.println("::::::::::::::::genericName::"+genericName+"drug name:::"+patientMedicationData.getDrugs());
		patientMedicationData.setGenericName(genericName);
		checkStartDateMedicine(genericName);
		//afterAddNewMedicine1();
		findDrugIDAccordingToDrugName(doseDetailList);

		System.out.println("medicine name:::::"+patientMedicationData.getDrugId()+"drug ID:::::"+patientMedicationData.getDrugs()+
				"::::"+patientMedicationData.getDrugNameId());



		//String msg1="";
		System.out.println("medicine name:::::"+patientMedicationData.getDrugId()+"drug ID:::::"+patientMedicationData.getDrugs()+"::::"+patientMedicationData.getDrugNameId());


		selectedDrugId= patientMedicationData.getDrugId();

		FacesContext context = FacesContext	.getCurrentInstance();UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");	

		System.out.println("selectedDrugId:::::::"+selectedDrugId);
		if(!(selectedDrugId==0.0))
		{
			drugInteractions=drugDetailWSBean.callDrugDrugInteraction(patientMedicationDataList, userManageBean.getProviderLocation(),selectedDrugId);
		}




		List<DrugInteraction> drugInteractionsList=new ArrayList<DrugInteraction>();

		for (DrugInteraction dr : drugInteractions) {
			System.out.println("DrugInteraction list:dr.getDrug1::"+dr.getDrug1());
			if (!(String.valueOf(selectedDrugId)).equals(dr.getDrug2ID()+".0")) {
				drugInteractionsList.add(dr);
			}

		}
		drugInteractions.removeAll(drugInteractionsList);



		System.out.println("patientMedicationData::::::::::"+patientMedicationData.getGenericName()+":::::::"
				+patientMedicationData.getDrugName()+"dsfhgjsd"+patientMedicationData.getDrugs()+patientMedicationData.getDrugNameId());

		//getPharmacogenomicsRecomendationsListForImpactedMedicine();
		System.out.println("value of PharmacogenomicInteractionDetail @ 8139="+getPharmacogenomicInteractionDetail());
		//setPharmacogenomicInteractionDetail(patientMedicineService.findPharmacogenomicsInteractionDuringAddMedicine(patientMedicationData.getGenericName(),patientMedicationData.getDrugs(),new ContextUtil().getPatientId()));
		pharmacogenomicInteractionDetailList=patientMedicineService.findPharmacogenomicsInteractionDuringAddMedicine(patientMedicationData.getDrugNameId(),patientMedicationData.getDrugs(),new ContextUtil().getPatientId());

		for(PharmacogenomicsRecomendations pharRec : pharmacogenomicInteractionDetailList)
		{
			System.out.println("pharRec.getRecommendation()::::::::"+pharRec.getRecommendation()+"test::::"+pharRec.getImplications()
					+"::::::::"+pharRec.getGenericDrugName());
		}

		//System.out.println("value of  PharmacogenomicInteractionDetail after @ 8139="+getPharmacogenomicInteractionDetail());
		//List<PharmacogenomicsRecomendations>pharmacogenomicsRecomendationsList=new ArrayList<PharmacogenomicsRecomendations>();
		//System.out.println("pharmacogenomicsDetails value before clean======"+pharmacogenomicsDetails);
		//setPharmacogenomicsDetails(null);
		//System.out.println("pharmacogenomicsDetails value after clean======="+pharmacogenomicsDetails);
		/*for (PharmacogenomicsRecomendations pr : pharmacogenomicsRecomendationsListForImpactedMedicine) {
				System.out.println("pharmacogenomicsRecomendationsListForImpactedMedicine::::::"+pr.getDrugName());
				System.out.println("patientMedicationData.getDrugs()"+patientMedicationData.getDrugs());
				if(patientMedicationData.getDrugs().equalsIgnoreCase(pr.getDrugName())){
					System.out.println("inside if block::::"+pr.getDrugName());
					pharmacogenomicsDetails=pr.getDrugName()+" "+pr.getRecommendation()+" "+pr.getDose();
					//Pharmacogenomics=;
					//pharmacogenomicsRecomendationsList.add(pr);

					break;
				}


			}*/
		System.out.println("value of s======"+pharmacogenomicsDetails);
		//pharmacogenomicsRecomendationsListForImpactedMedicine.remove(pharmacogenomicsRecomendationsList);

		String patientId=Integer.toString(new ContextUtil().getPatientId());		

		if(!(selectedDrugId==0.0))
		{
			drugAllergyInteractions=drugDetailWSBean.getDrugAllergyInteraction(patientId,getPatientAllergyList(),getPatientMedicationDataList(),userManageBean.getProviderLocation(),selectedDrugId);
		}

		if(!(selectedDrugId==0.0))
		{
			drugDiseaseDetailsInteractions=ncUpdate1WSBean.callDrugDiseaseInteraction(patientId,getPatientMedicationDataList(),getPatientDiagnosesDetailList(),userManageBean.getProviderLocation(),selectedDrugId);
		}
		
		//Start
		//Added on 16/Feb/2015 by Nagaraj for Paedatric and Geriatric Precaution
		//Get patient Age 
		//As per #1088,if patient age >=65 then call to geriatric precaution
		if (!(selectedDrugId == 0.0)) {
			//precautionsBasedOnDrugId
			precautionsBasedOnDrugId(selectedDrugId);
			
		}
		//end 
		
		if((patientMedicationData.getGenericName().equalsIgnoreCase("Apixaban")) || (patientMedicationData.getGenericName().equalsIgnoreCase("Enoxaparin"))
				|| (patientMedicationData.getGenericName().equalsIgnoreCase("Rivaroxaban")) || (patientMedicationData.getGenericName().equalsIgnoreCase("dabigatran etexilate"))
				|| (patientMedicationData.getGenericName().equalsIgnoreCase("dalteparin (porcine)")) || (patientMedicationData.getGenericName().equalsIgnoreCase("WARFARIN"))
				|| (patientMedicationData.getGenericName().equalsIgnoreCase("Fondaparinux")) 
				|| (patientMedicationData.getGenericName().equalsIgnoreCase("Desirudin")) || (patientMedicationData.getGenericName().equalsIgnoreCase("Apixaban")))
		{
			System.out.println("Apixaban::::::::"+patientMedicationData.getGenericName());

			RequestContext.getCurrentInstance().execute("searchMedicinePopUp.hide();");

			patientMedicationData.setDaySupply("30");
			patientMedicationData.setAllowSubstitution(true);
			RequestContext.getCurrentInstance().execute("quickPrescribe.show();");
		}
		else 
		{
			System.out.println("generalMedicinePopUp:::::::"+patientMedicationData.getGenericName());


			RequestContext.getCurrentInstance().execute("searchMedicinePopUp.hide();");

			RequestContext.getCurrentInstance().execute("addNewMedicinePopup.hide();");
			patientMedicationData.setDaySupply("30");
			patientMedicationData.setAllowSubstitution(true);
			RequestContext.getCurrentInstance().execute("generalMedicinePopUp.show();");	 
		}
	}

	List<GeriatricPrecaution> geriatricPrecautions=null;
	
	List<PaediatricPrecaution> paediatricPrecautions=null;

	private Integer patientAgeInDays() {
		Integer patientAgeInDays=null;
		FacesContext context = FacesContext.getCurrentInstance();
		DashBoardManageBean dashBoardManageBean=(DashBoardManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"dashBoardManageBean");
		UserLoginDetail userDetail=new UserLoginDetail();
		try{
		userDetail=dashBoardManageBean.getUserLoginDetail();
		logger.info("Patient Date of Birth in Java API "+userDetail.getDateOfBirth());
		LocalDate birthDate=new DateTime(userDetail.getDateOfBirth()).toLocalDate();
		logger.info("Patient Date of Birth in Joda API "+birthDate);
		Days days=Days.daysBetween(birthDate, new LocalDate());
		patientAgeInDays=days.getDays();

		}catch(Exception e){
			patientAgeInDays=null;
			e.printStackTrace();
		}
		return patientAgeInDays;
	}

	private Integer patientAgeInYears() {
		Integer patientAgeInYears=null;
		FacesContext context = FacesContext.getCurrentInstance();
		DashBoardManageBean dashBoardManageBean=(DashBoardManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"dashBoardManageBean");
		UserLoginDetail userDetail=new UserLoginDetail();
		try{
		userDetail=dashBoardManageBean.getUserLoginDetail();
		patientAgeInYears=userDetail.getAge();
		}catch(Exception e){
			patientAgeInYears=null;
			e.printStackTrace();
		}
		return patientAgeInYears;
	}

	private void findDrugIDAccordingToDrugName(List<WSDrug> doseDetailList2) {
		// TODO Auto-generated method stub
		for(WSDrug wsDrug:doseDetailList2)
		{

			patientMedicationData.setDrugId(wsDrug.getDrugId());
			System.out.println(":::::::::"+wsDrug.getDataProvider());
			patientMedicationData.setDataProvider(wsDrug.getDataProvider()+DB);
			patientMedicationData.setDrugNameId(wsDrug.getDrugNameId());

		}
	}

	private int drugDiseaseDetailsInteractionsSize=0;
	//.drugDiseaseDetailsInteractions
	public int getDrugDiseaseDetailsInteractionsSize() {

		if(drugDiseaseDetailsInteractionsSize==0)

		{
			if(drugDiseaseDetailsInteractions.size()<=1)
				drugDiseaseDetailsInteractionsSize=drugDiseaseDetailsInteractions.size();	

			else
				drugDiseaseDetailsInteractionsSize=1;
		}

		return drugDiseaseDetailsInteractionsSize;
	}

	public void setDrugDiseaseDetailsInteractionsSize(
			int drugDiseaseDetailsInteractionsSize) {
		this.drugDiseaseDetailsInteractionsSize = drugDiseaseDetailsInteractionsSize;
	}


	private int drugAllergyInteractionsSize=0;

	public int getDrugAllergyInteractionsSize() {

		System.out.println("drugAllergyInteractionsSize::::::");

		if(drugAllergyInteractionsSize==0)
		{

			if(drugAllergyInteractions.size()<=1)
				drugAllergyInteractionsSize=drugAllergyInteractions.size();

			else
				drugAllergyInteractionsSize=1;	
		}

		return drugAllergyInteractionsSize;
	}

	public void setDrugAllergyInteractionsSize(int drugAllergyInteractionsSize) {
		this.drugAllergyInteractionsSize = drugAllergyInteractionsSize;
	}


	private int drugInteractionsSize=0;

	public int getDrugInteractionsSize() {

		if(drugInteractionsSize==0)
		{
			if(drugInteractions.size()<=1)
				drugInteractionsSize=drugInteractions.size();

			else
				drugInteractionsSize=1;	
		}

		return drugInteractionsSize;
	}

	public void setDrugInteractionsSize(int drugInteractionsSize) {
		this.drugInteractionsSize = drugInteractionsSize;
	}



	public void selectedSearchMedsForoverview() throws Exception
	{
		logger.info("selectedSearchMedsForoverview method start");
		setShowMessageForNewAddMeds(false);
		setShowMedActionPlanForWarfarin(false);
		//PatientMedicationData	PatientMedicationDataForReconcile=(PatientMedicationData) getReconsileMedsDataTable().getRowData();
		WSDrug wsDrugObj=(WSDrug)getSearchMedicineDataTableforoverview().getRowData();
		System.out.println(":::::::::::::::: meds::"+wsDrugObj.getDrugName()+"id:::::::::::"+wsDrugObj.getDrugNameId());
		//RequestContext.getCurrentInstance().reset("medicinename");
		patientMedicationData.setDrugs(wsDrugObj.getDrugName());
		patientMedicationData.setDrugNameId(wsDrugObj.getDrugNameId());
		patientMedicationData.setDosageForm(wsDrugObj.getDosageFormoverride());
		patientMedicationData.setByRoute(wsDrugObj.getRoute());
		System.out.println(":::::::::::::::::::>>>>>"+patientMedicationData.getDrugNameId());
		//getting dose list...for selected meds
		doseDetailList=new ArrayList<WSDrug>();
		doseDetailList=patientMedicineService.findDoseListOfParticularMeds(wsDrugObj.getDrugNameId(),wsDrugObj.getDosageForm());

		if(!((wsDrugObj.getDosageForm().equalsIgnoreCase("capsule")) || (wsDrugObj.getDosageForm().equalsIgnoreCase("tablet"))
				||(wsDrugObj.getDosageForm().equalsIgnoreCase("Lozenge"))
				||(wsDrugObj.getDosageForm().equalsIgnoreCase("pill"))||(wsDrugObj.getDosageForm().equalsIgnoreCase("patch"))
				||(wsDrugObj.getDosageForm().equalsIgnoreCase("suppository"))))
			patientMedicationData.setQuantity("");


		String genericName;
		if(wsDrugObj.getGenericName() != null)

			genericName=wsDrugObj.getGenericName();
		else
			genericName=wsDrugObj.getDrugName();
		System.out.println("::::::::::::::::genericName::"+genericName);
		patientMedicationData.setGenericName(genericName);
		checkStartDateMedicine(genericName);

		findDrugIDAccordingToDrugName(doseDetailList);

		System.out.println("medicine name:::::"+patientMedicationData.getDrugId()+"drug ID:::::"+patientMedicationData.getDrugs()+
				"::::"+patientMedicationData.getDrugNameId());



		//String msg1="";
		System.out.println("medicine name:::::"+patientMedicationData.getDrugId()+"drug ID:::::"+patientMedicationData.getDrugs()+"::::"+patientMedicationData.getDrugNameId());


		selectedDrugId= patientMedicationData.getDrugId();

		FacesContext context = FacesContext	.getCurrentInstance();UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");	

		if(!(selectedDrugId==0.0))
		{
			drugInteractions=drugDetailWSBean.callDrugDrugInteraction(patientMedicationDataList, userManageBean.getProviderLocation(),selectedDrugId);
		}

		List<DrugInteraction> drugInteractionsList=new ArrayList<DrugInteraction>();

		for (DrugInteraction dr : drugInteractions) {
			System.out.println("DrugInteraction list:dr.getDrug1::"+dr.getDrug1());
			if (!(String.valueOf(selectedDrugId)).equals(dr.getDrug2ID()+".0")) {
				drugInteractionsList.add(dr);
			}

		}
		drugInteractions.removeAll(drugInteractionsList);


		drugInterectionListDetail=new ArrayList<DrugInteractionOverview>();
		for(DrugInteraction drugInteractionData:drugInteractions){
			System.out.println("setSeverityLevel:::::::"+drugInteractionData.getSeverityLevel());
			DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
			drugInteractionOverview.setClinicalEffects(drugInteractionData.getClinicalEffects());
			drugInteractionOverview.setPatientManagement(drugInteractionData.getPatientManagement());
			drugInteractionOverview.setIssueType(DRUG_DRUG_INTERECTION);
			drugInteractionOverview.setDrugId(drugInteractionData.getDrug1ID());
			drugInteractionOverview.setConflict(drugInteractionData.getDrug1());

			if(StringUtils.contains(StringUtils.lowerCase(drugInteractionData.getSeverityLevel()), DRUG_SEVERITY_LEVEL_SEARCH_STR)){
				drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
				drugInteractionOverview.setSeverityLevelToolTip(DRUG_SEVERITY_TOOLTIP);
			}else if(StringUtils.contains(StringUtils.lowerCase(drugInteractionData.getSeverityLevel()), DRUG_SEVERITY_LEVEL_SEARCH_STR_CONTRAINDICATED)){
				drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
				drugInteractionOverview.setSeverityLevelToolTip(DRUG_SEVERITY_TOOLTIP_CONTRAINDICATED);
			}else if(StringUtils.contains(StringUtils.lowerCase(drugInteractionData.getSeverityLevel()), DRUG_SEVERITY_LEVEL_SEARCH_STR_MODERATE)){
				drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL);
				drugInteractionOverview.setSeverityLevelToolTip(DRUG_SEVERITY_TOOLTIP_MODERATE);
			}
			System.out.println("drugId is=="+drugInteractionOverview.getDrugId());
			if(!drugInterectionListDetail.contains(drugInteractionOverview)){
				drugInterectionListDetail.add(drugInteractionOverview);

				//Iterator<DrugInteractionOverview>iterator=drugInterectionListDetail.iterator();
				//while(iterator.hasNext())
				//System.out.println("iterator::::::"+iterator.next());
				highestServity=new String();

				for (Iterator iterator = drugInterectionListDetail.iterator(); iterator.hasNext();){
					DrugInteractionOverview drugInteraction = (DrugInteractionOverview) iterator.next();
					// System.out.println(":::::::name:"+clinicDiagnosis.getDiagnosisName());
					if(drugInteraction.getSeverityLevel().equalsIgnoreCase(HIGH_SEVERITY_LEVEL))
					{
						//System.out.println("getSeverityLevel::::"+drugInteraction.getSeverityLevel());
						setHighestServity(HIGH_SEVERITY_LEVEL);
						// System.out.println("getSeverityLevel::444::"+highestServity);
						break;
					}

					else if(drugInteraction.getSeverityLevel().equalsIgnoreCase(MEDIUM_SEVERITY_LEVEL))
					{	
						// System.out.println("MEDIUM_SEVERITY_LEVEL::::"+drugInteraction.getSeverityLevel());
						setHighestServity(MEDIUM_SEVERITY_LEVEL);
						//System.out.println("MEDIUM_SEVERITY_LEVEL::444::"+highestServity);
						break;
					} 	

					else if(drugInteraction.getSeverityLevel().equalsIgnoreCase(LOW_SEVERITY_LEVEL))
					{
						//System.out.println("LOW_SEVERITY_LEVEL::::"+drugInteraction.getSeverityLevel());
						setHighestServity(LOW_SEVERITY_LEVEL);
						// System.out.println("LOW_SEVERITY_LEVEL::444::"+highestServity);
						break;
					}
				}



			}
		}


		System.out.println("patientMedicationData:overview:::::::::"+patientMedicationData.getGenericName()+":::::::"
				+patientMedicationData.getDrugName()+"dsfhgjsd"+patientMedicationData.getDrugs());

		System.out.println("value of PharmacogenomicInteractionDetail @ 8356="+getPharmacogenomicInteractionDetail());
		pharmacogenomicInteractionDetailList=patientMedicineService.findPharmacogenomicsInteractionDuringAddMedicine(patientMedicationData.getDrugNameId(),patientMedicationData.getDrugs(),new ContextUtil().getPatientId());
		System.out.println(patientMedicationData.getDrugNameId()+"value of  PharmacogenomicInteractionDetail after @ 8356="+getPharmacogenomicInteractionDetail());


		drugPharmaInterectionListDetail=new ArrayList<DrugInteractionOverview>();
		highestServityForpharmacogenomic= new String();
		getPharmacogenomicsRecomendationsListForImpactedMedicine();
		String drugName=patientMedicationData.getDrugs();
		for (PharmacogenomicsRecomendations pr : pharmacogenomicInteractionDetailList) {
			DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
			System.out.println("inside onRowExpensionDrugInteraction::::::"+pr.getDrugName()+"="+drugName);
			if (drugName.equalsIgnoreCase(pr.getDrugName())) {
				System.out.println("inside if block::::::"+pr.getDrugName()+"="+drugName);
				drugInteractionOverview.setSeverityLevel(pr.getAttentionRating());
				drugInteractionOverview.setIssueType(PHARMACOGENOMIC);

				drugInteractionOverview.setConflict(pr.getPharmacogenomicsId().getGeneSymbol());
				drugInteractionOverview.setClinicalEffects(pr.getImplications());
				drugInteractionOverview.setPatientManagement(pr.getRecommendation());
				final String PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING=pr.getOvaleMessage();
				drugInteractionOverview.setSeverityLevelToolTip(pr.getOvaleMessage());
				if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), HIGH_SEVERITY_LEVEL_RATING)){
					drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL_RATING);
					drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
				}else if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), MEDIUM_SEVERITY_LEVEL_RATING)){
					drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL_RATING);
					drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
				}else if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), LOW_SEVERITY_LEVEL_RATING)){
					drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL_RATING);
					drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
				}
				if(!drugPharmaInterectionListDetail.contains(drugInteractionOverview)){
					//	drugInteractionOverview.setSeverityLevel(drugDiseaseDetail.getSeverityLevelShortText());
					drugPharmaInterectionListDetail.add(drugInteractionOverview);
				}
				for(DrugInteractionOverview dio: drugPharmaInterectionListDetail)
				{
					System.out.println("drugInterectionListDetail::PHARMACOGENOMIC:::::::123:::"+dio.getSeverityLevel());
					setHighestServityForpharmacogenomic(dio.getSeverityLevel());
					System.out.println("drugInterectionListDetail::PHARMACOGENOMIC::456:::::123:::"+dio.getSeverityLevelToolTip());
				}
			}

		}


		String patientId=Integer.toString(new ContextUtil().getPatientId());		
		if(!(selectedDrugId==0.0))
		{	
			drugAllergyInteractions=drugDetailWSBean.getDrugAllergyInteraction(patientId,getPatientAllergyList(),getPatientMedicationDataList(),userManageBean.getProviderLocation(),selectedDrugId);
		}

		drugAlleryInterectionListDetail=new ArrayList<DrugInteractionOverview>();
		String [] allergySeverity=new String[2];
		String allergySeverityLevel="";
		for(DrugAllergyDetail drugAllergyDetail:drugAllergyInteractions){
			DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
			drugInteractionOverview.setClinicalEffects("");
			drugInteractionOverview.setConflict(drugAllergyDetail.getInteractionText());
			drugInteractionOverview.setIssueType(DRUG_ALLERGY_INTERACTION);
			if(StringUtils.contains(drugAllergyDetail.getInteractionText(), "with")){
				allergySeverity=StringUtils.split(drugAllergyDetail.getInteractionText(), "with");
				//logger.info("medicine after spiltting "+allergySeverity[0]);
				//	logger.info("allergy after spiltting "+allergySeverity[1]);
			}
			for(PatientAllergy patAllergy:getPatientAllergyList()){
				if(patAllergy.getAllergyName().equals(allergySeverity[1])){
					allergySeverityLevel=patAllergy.getAllergySeverity();
					break;
				}
			}
			if(StringUtils.isNotEmpty(allergySeverityLevel)){
				if(StringUtils.equals(allergySeverityLevel, DRUG_SEVERITY_TOOLTIP)){
					drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(allergySeverityLevel);
				}else if(StringUtils.equals(allergySeverityLevel, DRUG_SEVERITY_TOOLTIP_MODERATE)){
					drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(allergySeverityLevel);
				}else if(StringUtils.equals(allergySeverityLevel, MILD_LEVEL)){
					drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(allergySeverityLevel);
				}
			}else {
				drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL);
				drugInteractionOverview.setSeverityLevelToolTip(MILD_LEVEL);
			}
			//if(!drugAlleryInterectionListDetail.contains(drugInteractionOverview)){
				//	drugInteractionOverview.setSeverityLevel(drugDiseaseDetail.getSeverityLevelShortText());
				drugAlleryInterectionListDetail.add(drugInteractionOverview);
			//}

			//drugInterectionListDetail.add(drugInteractionOverview);
			highestServityForAllergy = new String();
			for (Iterator iterator = drugAlleryInterectionListDetail.iterator(); iterator.hasNext();){
				DrugInteractionOverview drugInteraction = (DrugInteractionOverview) iterator.next();
				// System.out.println(":::::::name:"+clinicDiagnosis.getDiagnosisName());
				if(drugInteraction.getSeverityLevel().equalsIgnoreCase(HIGH_SEVERITY_LEVEL))
				{
					// System.out.println("getSeverityLevel::Allergy::"+drugInteraction.getSeverityLevel());
					setHighestServityForAllergy(HIGH_SEVERITY_LEVEL);
					// System.out.println("getSeverityLevel::444::"+highestServity);
					break;
				}

				else if(drugInteraction.getSeverityLevel().equalsIgnoreCase(MEDIUM_SEVERITY_LEVEL))
				{	
					// System.out.println("MEDIUM_SEVERITY_LEVEL::Allergy1::"+drugInteraction.getSeverityLevel());
					setHighestServityForAllergy(MEDIUM_SEVERITY_LEVEL);
					// System.out.println("MEDIUM_SEVERITY_LEVEL::444::"+highestServity);
					break;
				} 	

				else if(drugInteraction.getSeverityLevel().equalsIgnoreCase(LOW_SEVERITY_LEVEL))
				{
					//System.out.println("LOW_SEVERITY_LEVEL::Allergy12::"+drugInteraction.getSeverityLevel());
					setHighestServityForAllergy(LOW_SEVERITY_LEVEL);
					// System.out.println("LOW_SEVERITY_LEVEL::444::"+highestServityForAllergy);
					break;
				}
			}
		}

		//System.out.println("drugAllergyDetailList:::::::::"+drugAllergyDetailList.size());



		if(!(selectedDrugId==0.0))
		{
			drugDiseaseDetailsInteractions=ncUpdate1WSBean.callDrugDiseaseInteraction(patientId,getPatientMedicationDataList(),getPatientDiagnosesDetailList(),userManageBean.getProviderLocation(),selectedDrugId);
		}


		drugDiseaseInterectionListDetail=new ArrayList<DrugInteractionOverview>();
		for(DrugDiseaseDetail drugDiseaseDetail:drugDiseaseDetailsInteractions){
			DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
			drugInteractionOverview.setClinicalEffects("");
			drugInteractionOverview.setConflict(drugDiseaseDetail.getDirectCondition());
			drugInteractionOverview.setIssueType(DRUG_DISEASE_INTERACTION);

			drugInteractionOverview.setPatientManagement(drugDiseaseDetail.getSeverityLevelText());
			if((StringUtils.equals(drugDiseaseDetail.getSeverityLevelShortText(), DRUG_SEVERITY_LEVEL_SEARCH_STR_DISEASE))||
					(StringUtils.equals(drugDiseaseDetail.getSeverityLevelShortText(), DRUG_SEVERITY_LEVEL_SEARCH_STR_RELATIVE))){
				drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
				drugInteractionOverview.setSeverityLevelToolTip(drugDiseaseDetail.getSeverityLevelShortText());
			}else if((StringUtils.equals(drugDiseaseDetail.getSeverityLevelShortText(), DRUG_SEVERITY_LEVEL_SEARCH_STR_CONTRADICATION))){
				drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL);
				drugInteractionOverview.setSeverityLevelToolTip(drugDiseaseDetail.getSeverityLevelShortText());
			}
			//if(!drugDiseaseInterectionListDetail.contains(drugInteractionOverview)){
				//	drugInteractionOverview.setSeverityLevel(drugDiseaseDetail.getSeverityLevelShortText());
				drugDiseaseInterectionListDetail.add(drugInteractionOverview);
			//}

			highestServityForDisease = new String();
			for (Iterator iterator = drugDiseaseInterectionListDetail.iterator(); iterator.hasNext();){
				DrugInteractionOverview drugInteraction = (DrugInteractionOverview) iterator.next();
				// System.out.println(":::::::name:"+clinicDiagnosis.getDiagnosisName());
				if(drugInteraction.getSeverityLevel().equalsIgnoreCase(HIGH_SEVERITY_LEVEL))
				{
					//System.out.println("getSeverityLevel::Disease:1:"+drugInteraction.getSeverityLevel());
					setHighestServityForDisease(HIGH_SEVERITY_LEVEL);
					//System.out.println("getSeverityLevel::444:Disease1:"+highestServity);
					break;
				}

				else if(drugInteraction.getSeverityLevel().equalsIgnoreCase(MEDIUM_SEVERITY_LEVEL))
				{	
					// System.out.println("MEDIUM_SEVERITY_LEVEL::Disease:2:"+drugInteraction.getSeverityLevel());
					setHighestServityForDisease(MEDIUM_SEVERITY_LEVEL);
					// System.out.println("MEDIUM_SEVERITY_LEVEL::444:2:"+highestServity);
					break;
				} 	

				else if(drugInteraction.getSeverityLevel().equalsIgnoreCase(LOW_SEVERITY_LEVEL))
				{
					// System.out.println("LOW_SEVERITY_LEVEL::Disease3::"+drugInteraction.getSeverityLevel());
					setHighestServityForDisease(LOW_SEVERITY_LEVEL);
					//System.out.println("LOW_SEVERITY_LEVEL::444:Disease3:"+highestServity);
					break;
				}
			}
		}
		
		if (!(selectedDrugId == 0.0)) {
			//precautionsBasedOnDrugId
			precautionsBasedOnDrugId(selectedDrugId);
			
		}
		//System.out.println("drugDiseaseDetailList:::::::::"+drugDiseaseDetailList.size());

		//System.out.println("drugDiseaseDetailList:::::::::"+drugDiseaseDetailList.size());

		//System.out.println("drugDiseaseDetailList:::::::::"+drugDiseaseDetailList.size());


		if(patientMedicationData.getGenericName().equalsIgnoreCase("warfarin"))
		{
			clinicDiagnosisList=patientMedicineService.findClinicDiagnosisList(patientMedicationData.getGenericName());
			clinicSubDiagnosisList=new ArrayList<ClinicSubdiagnosis>();
			labDetailList=new ArrayList<LabDetail>();
			LabDetail labDetail=new LabDetail();
			labDetail.setLabName("INR");
			//labDetail.setSelected(true);
			labDetailList.add(labDetail);
			//labDetailList=patientMedicineService.findLabDetailListAccordingToGenericname(patientMedicationData.getGenericName());

		}

		//for Formulary alert should come when med being added  added by gopal
		logger.info("find formulary detail start::::"+new ContextUtil().getInsuranceId());
		String formularyDetail=patientMedicineService.findFormularySymbol(new ContextUtil().getInsuranceId(),patientMedicationData.getDrugs());
		patientMedicationData.setFormularySymbol(formularyDetail);
		logger.info("find formulary detail end::::");
		//patientMedicationData.setFormularySymbol(patientMedicineService.findFormularySymbol(new ContextUtil().getInsuranceId(),patientMedicationData.getDrugs()));
		//logger.info("formularyDetail::::::::::::::::+"+formularyDetail);

		//afterAddNewMedicine1();
		if((patientMedicationData.getGenericName().equalsIgnoreCase("Apixaban")) || (patientMedicationData.getGenericName().equalsIgnoreCase("Enoxaparin"))
				|| (patientMedicationData.getGenericName().equalsIgnoreCase("Rivaroxaban")) || (patientMedicationData.getGenericName().equalsIgnoreCase("dabigatran etexilate"))
				|| (patientMedicationData.getGenericName().equalsIgnoreCase("dalteparin (porcine)")) || (patientMedicationData.getGenericName().equalsIgnoreCase("WARFARIN"))
				|| (patientMedicationData.getGenericName().equalsIgnoreCase("Fondaparinux")) 
				|| (patientMedicationData.getGenericName().equalsIgnoreCase("Desirudin")) || (patientMedicationData.getGenericName().equalsIgnoreCase("Apixaban")))
		{
			System.out.println("Apixaban::::::::"+patientMedicationData.getGenericName());
			RequestContext.getCurrentInstance().execute("searchMedicinePopUp.hide();");
			patientMedicationData.setDaySupply("30");
			patientMedicationData.setAllowSubstitution(true);
			RequestContext.getCurrentInstance().execute("quickPrescribe.show();");
		}
		else 
		{
			System.out.println("generalMedicinePopUp:::::::"+patientMedicationData.getGenericName());
			RequestContext.getCurrentInstance().execute("searchMedicinePopUp.hide();");

			RequestContext.getCurrentInstance().execute("addNewMedicinePopup.hide();");
			patientMedicationData.setDaySupply("30");
			patientMedicationData.setAllowSubstitution(true);
			RequestContext.getCurrentInstance().execute("generalMedicinePopUp.show();");	 
		}
	}
	
	private Map<String,DrugCategoryFilter>dosageMap;
	
	/*select search med for overviewfilter page
	 * * @author: umesh
	 * */
	public void selectedSearchMedsduplicateForoverviewfilter() throws Exception
	{
		logger.info("selectedSearchMedsForoverview method start");
		setShowMessageForNewAddMeds(false);
		setShowMedActionPlanForWarfarin(false);
		//PatientMedicationData	PatientMedicationDataForReconcile=(PatientMedicationData) getReconsileMedsDataTable().getRowData();
		WSDrug wsDrugObj=(WSDrug)getSearchMedicineDataTableforoverviewfilter().getRowData();
		System.out.println(":::::::::::::::: meds::"+wsDrugObj.getDrugName()+"id:::::::::::"+wsDrugObj.getDrugNameId());
		//RequestContext.getCurrentInstance().reset("medicinename");
		patientMedicationData.setDrugs(wsDrugObj.getDrugName());
		patientMedicationData.setDrugNameId(wsDrugObj.getDrugNameId());
		patientMedicationData.setDosageForm(wsDrugObj.getDosageFormoverride());
		patientMedicationData.setByRoute(wsDrugObj.getRoute());
		patientMedicationData.setTherapeuticCategory(wsDrugObj.getTherapeuticCategory());
		patientMedicationData.setDrugCategory(wsDrugObj.getDrugCategory());
		//patientMedicationData.setStrengths(wsDrugObj.getDose());
		System.out.println(":::::::::::::::::::>>>>>"+patientMedicationData.getDrugNameId());
		//getting dose list...for selected meds
		doseDetailList=new ArrayList<WSDrug>();
		doseDetailList=patientMedicineService.findDoseListOfParticularMeds(wsDrugObj.getDrugNameId(),wsDrugObj.getDosageForm()); 
		
		
		
		if(doseDetailList.size()>0){
			createDrugDosageMap(doseDetailList);
			initializeDosageForm(doseDetailList.get(0).getDose());
		}else{
			doseDetailList=prepareWSdrugObj(patientMedicationData);
			dosageForms=new ArrayList<String>();
			dosageForms.add(patientMedicationData.getDosageForm().trim());
			
		}

		if(!((wsDrugObj.getDosageForm().equalsIgnoreCase("capsule")) || (wsDrugObj.getDosageForm().equalsIgnoreCase("tablet"))
				||(wsDrugObj.getDosageForm().equalsIgnoreCase("Lozenge"))
				||(wsDrugObj.getDosageForm().equalsIgnoreCase("pill"))||(wsDrugObj.getDosageForm().equalsIgnoreCase("patch"))
				||(wsDrugObj.getDosageForm().equalsIgnoreCase("suppository"))))
			patientMedicationData.setQuantity("");
		
		/*if(((wsDrugObj.getDosageForm().equalsIgnoreCase("drops")) || (wsDrugObj.getDosageForm().equalsIgnoreCase("oral liquids"))
				||(wsDrugObj.getDosageForm().equalsIgnoreCase("suspensions"))
				||(wsDrugObj.getDosageForm().equalsIgnoreCase("nasal"))||(wsDrugObj.getDosageForm().equalsIgnoreCase("eye"))
				||(wsDrugObj.getDosageForm().equalsIgnoreCase("ear drops"))))
		{
			patientMedicationData.setUnit("20");
		}*/


		String genericName;
		if(wsDrugObj.getGenericName() != null)

			genericName=wsDrugObj.getGenericName();
		else
			genericName=wsDrugObj.getDrugName();
		System.out.println("::::::::::::::::genericName::"+genericName);
		patientMedicationData.setGenericName(genericName);
		checkStartDateMedicine(genericName);

		findDrugIDAccordingToDrugName(doseDetailList);

		System.out.println("medicine name:::::"+patientMedicationData.getDrugId()+"drug ID:::::"+patientMedicationData.getDrugs()+
				"::::"+patientMedicationData.getDrugNameId());



		//String msg1="";
		System.out.println("medicine name:::::"+patientMedicationData.getDrugId()+"drug ID:::::"+patientMedicationData.getDrugs()+"::::"+patientMedicationData.getDrugNameId());


		selectedDrugId= patientMedicationData.getDrugId();

		FacesContext context = FacesContext	.getCurrentInstance();UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");	

		if(!(selectedDrugId==0.0))
		{
			drugInteractions=drugDetailWSBean.callDrugDrugInteraction(patientMedicationDataList, userManageBean.getProviderLocation(),selectedDrugId);
		}

		List<DrugInteraction> drugInteractionsList=new ArrayList<DrugInteraction>();

		for (DrugInteraction dr : drugInteractions) {
			System.out.println("DrugInteraction list:dr.getDrug1::"+dr.getDrug1());
			if (!(String.valueOf(selectedDrugId)).equals(dr.getDrug2ID()+".0")) {
				drugInteractionsList.add(dr);
			}

		}
		drugInteractions.removeAll(drugInteractionsList);


		drugInterectionListDetail=new ArrayList<DrugInteractionOverview>();
		for(DrugInteraction drugInteractionData:drugInteractions){
			System.out.println("setSeverityLevel:::::::"+drugInteractionData.getSeverityLevel());
			DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
			drugInteractionOverview.setClinicalEffects(drugInteractionData.getClinicalEffects());
			drugInteractionOverview.setPatientManagement(drugInteractionData.getPatientManagement());
			drugInteractionOverview.setIssueType(DRUG_DRUG_INTERECTION);
			drugInteractionOverview.setDrugId(drugInteractionData.getDrug1ID());
			drugInteractionOverview.setConflict(drugInteractionData.getDrug1());

			if(StringUtils.contains(StringUtils.lowerCase(drugInteractionData.getSeverityLevel()), DRUG_SEVERITY_LEVEL_SEARCH_STR)){
				drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
				drugInteractionOverview.setSeverityLevelToolTip(DRUG_SEVERITY_TOOLTIP);
			}else if(StringUtils.contains(StringUtils.lowerCase(drugInteractionData.getSeverityLevel()), DRUG_SEVERITY_LEVEL_SEARCH_STR_CONTRAINDICATED)){
				drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
				drugInteractionOverview.setSeverityLevelToolTip(DRUG_SEVERITY_TOOLTIP_CONTRAINDICATED);
			}else if(StringUtils.contains(StringUtils.lowerCase(drugInteractionData.getSeverityLevel()), DRUG_SEVERITY_LEVEL_SEARCH_STR_MODERATE)){
				drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL);
				drugInteractionOverview.setSeverityLevelToolTip(DRUG_SEVERITY_TOOLTIP_MODERATE);
			}
			System.out.println("drugId is=="+drugInteractionOverview.getDrugId());
			if(!drugInterectionListDetail.contains(drugInteractionOverview)){
				drugInterectionListDetail.add(drugInteractionOverview);

				//Iterator<DrugInteractionOverview>iterator=drugInterectionListDetail.iterator();
				//while(iterator.hasNext())
				//System.out.println("iterator::::::"+iterator.next());
				highestServity=new String();

				for (Iterator iterator = drugInterectionListDetail.iterator(); iterator.hasNext();){
					DrugInteractionOverview drugInteraction = (DrugInteractionOverview) iterator.next();
					// System.out.println(":::::::name:"+clinicDiagnosis.getDiagnosisName());
					if(drugInteraction.getSeverityLevel().equalsIgnoreCase(HIGH_SEVERITY_LEVEL))
					{
						//System.out.println("getSeverityLevel::::"+drugInteraction.getSeverityLevel());
						setHighestServity(HIGH_SEVERITY_LEVEL);
						// System.out.println("getSeverityLevel::444::"+highestServity);
						break;
					}

					else if(drugInteraction.getSeverityLevel().equalsIgnoreCase(MEDIUM_SEVERITY_LEVEL))
					{	
						// System.out.println("MEDIUM_SEVERITY_LEVEL::::"+drugInteraction.getSeverityLevel());
						setHighestServity(MEDIUM_SEVERITY_LEVEL);
						//System.out.println("MEDIUM_SEVERITY_LEVEL::444::"+highestServity);
						break;
					} 	

					else if(drugInteraction.getSeverityLevel().equalsIgnoreCase(LOW_SEVERITY_LEVEL))
					{
						//System.out.println("LOW_SEVERITY_LEVEL::::"+drugInteraction.getSeverityLevel());
						setHighestServity(LOW_SEVERITY_LEVEL);
						// System.out.println("LOW_SEVERITY_LEVEL::444::"+highestServity);
						break;
					}
				}



			}
		}


		System.out.println("patientMedicationData:overview:::::::::"+patientMedicationData.getGenericName()+":::::::"
				+patientMedicationData.getDrugName()+"dsfhgjsd"+patientMedicationData.getDrugs()+wsDrugObj.getDrugNameId()+patientMedicationData.getDrugNameId());

		System.out.println("value of PharmacogenomicInteractionDetail @ 8356="+getPharmacogenomicInteractionDetail());
		pharmacogenomicInteractionDetailList=patientMedicineService.findPharmacogenomicsInteractionDuringAddMedicine(patientMedicationData.getDrugNameId(),patientMedicationData.getDrugs(),new ContextUtil().getPatientId());
		System.out.println("value of  PharmacogenomicInteractionDetail after @ 8356="+getPharmacogenomicInteractionDetail());


		drugPharmaInterectionListDetail=new ArrayList<DrugInteractionOverview>();
		highestServityForpharmacogenomic= new String();
		getPharmacogenomicsRecomendationsListForImpactedMedicine();
		String drugName=patientMedicationData.getDrugs();
		for (PharmacogenomicsRecomendations pr : pharmacogenomicInteractionDetailList) {
			DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
			System.out.println("inside onRowExpensionDrugInteraction::::::"+pr.getDrugName()+"="+drugName);
			if (drugName.equalsIgnoreCase(pr.getDrugName())) {
				System.out.println("inside if block::::::"+pr.getDrugName()+"="+drugName);
				drugInteractionOverview.setSeverityLevel(pr.getAttentionRating());
				drugInteractionOverview.setIssueType(PHARMACOGENOMIC);

				drugInteractionOverview.setConflict(pr.getPharmacogenomicsId().getGeneSymbol());
				drugInteractionOverview.setClinicalEffects(pr.getImplications());
				drugInteractionOverview.setPatientManagement(pr.getRecommendation());
				final String PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING=pr.getOvaleMessage();
				drugInteractionOverview.setSeverityLevelToolTip(pr.getOvaleMessage());
				if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), HIGH_SEVERITY_LEVEL_RATING)){
					drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL_RATING);
					drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
				}else if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), MEDIUM_SEVERITY_LEVEL_RATING)){
					drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL_RATING);
					drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
				}else if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), LOW_SEVERITY_LEVEL_RATING)){
					drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL_RATING);
					drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
				}
				drugPharmaInterectionListDetail.add(drugInteractionOverview);
				/*if(!drugPharmaInterectionListDetail.contains(drugInteractionOverview)){
					//	drugInteractionOverview.setSeverityLevel(drugDiseaseDetail.getSeverityLevelShortText());
					drugPharmaInterectionListDetail.add(drugInteractionOverview);
				}*/
				for(DrugInteractionOverview dio: drugPharmaInterectionListDetail)
				{
					System.out.println("drugInterectionListDetail::PHARMACOGENOMIC:::::::123:::"+dio.getSeverityLevel());
					setHighestServityForpharmacogenomic(dio.getSeverityLevel());
					System.out.println("drugInterectionListDetail::PHARMACOGENOMIC::456:::::123:::"+dio.getSeverityLevelToolTip());
				}
			}

		}


		String patientId=Integer.toString(new ContextUtil().getPatientId());		
		if(!(selectedDrugId==0.0))
		{	
			drugAllergyInteractions=drugDetailWSBean.getDrugAllergyInteraction(patientId,getPatientAllergyList(),getPatientMedicationDataList(),userManageBean.getProviderLocation(),selectedDrugId);
		}

		drugAlleryInterectionListDetail=new ArrayList<DrugInteractionOverview>();
		String [] allergySeverity=new String[2];
		String allergySeverityLevel="";
		for(DrugAllergyDetail drugAllergyDetail:drugAllergyInteractions){
			DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
			drugInteractionOverview.setClinicalEffects("");
			drugInteractionOverview.setConflict(drugAllergyDetail.getInteractionText());
			drugInteractionOverview.setIssueType(DRUG_ALLERGY_INTERACTION);
			if(StringUtils.contains(drugAllergyDetail.getInteractionText(), "with")){
				allergySeverity=StringUtils.split(drugAllergyDetail.getInteractionText(), "with");
				//logger.info("medicine after spiltting "+allergySeverity[0]);
				//	logger.info("allergy after spiltting "+allergySeverity[1]);
			}
			for(PatientAllergy patAllergy:getPatientAllergyList()){
				if(patAllergy.getAllergyName().equals(allergySeverity[1])){
					allergySeverityLevel=patAllergy.getAllergySeverity();
					break;
				}
			}
			if(StringUtils.isNotEmpty(allergySeverityLevel)){
				if(StringUtils.equals(allergySeverityLevel, DRUG_SEVERITY_TOOLTIP)){
					drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(allergySeverityLevel);
				}else if(StringUtils.equals(allergySeverityLevel, DRUG_SEVERITY_TOOLTIP_MODERATE)){
					drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(allergySeverityLevel);
				}else if(StringUtils.equals(allergySeverityLevel, MILD_LEVEL)){
					drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(allergySeverityLevel);
				}
			}else {
				drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL);
				drugInteractionOverview.setSeverityLevelToolTip(MILD_LEVEL);
			}
			//if(!drugAlleryInterectionListDetail.contains(drugInteractionOverview)){
				//	drugInteractionOverview.setSeverityLevel(drugDiseaseDetail.getSeverityLevelShortText());
				drugAlleryInterectionListDetail.add(drugInteractionOverview);
			//}

			//drugInterectionListDetail.add(drugInteractionOverview);
			highestServityForAllergy = new String();
			for (Iterator iterator = drugAlleryInterectionListDetail.iterator(); iterator.hasNext();){
				DrugInteractionOverview drugInteraction = (DrugInteractionOverview) iterator.next();
				// System.out.println(":::::::name:"+clinicDiagnosis.getDiagnosisName());
				if(drugInteraction.getSeverityLevel().equalsIgnoreCase(HIGH_SEVERITY_LEVEL))
				{
					// System.out.println("getSeverityLevel::Allergy::"+drugInteraction.getSeverityLevel());
					setHighestServityForAllergy(HIGH_SEVERITY_LEVEL);
					// System.out.println("getSeverityLevel::444::"+highestServity);
					break;
				}

				else if(drugInteraction.getSeverityLevel().equalsIgnoreCase(MEDIUM_SEVERITY_LEVEL))
				{	
					// System.out.println("MEDIUM_SEVERITY_LEVEL::Allergy1::"+drugInteraction.getSeverityLevel());
					setHighestServityForAllergy(MEDIUM_SEVERITY_LEVEL);
					// System.out.println("MEDIUM_SEVERITY_LEVEL::444::"+highestServity);
					break;
				} 	

				else if(drugInteraction.getSeverityLevel().equalsIgnoreCase(LOW_SEVERITY_LEVEL))
				{
					//System.out.println("LOW_SEVERITY_LEVEL::Allergy12::"+drugInteraction.getSeverityLevel());
					setHighestServityForAllergy(LOW_SEVERITY_LEVEL);
					// System.out.println("LOW_SEVERITY_LEVEL::444::"+highestServityForAllergy);
					break;
				}
			}
		}

		//System.out.println("drugAllergyDetailList:::::::::"+drugAllergyDetailList.size());



		if(!(selectedDrugId==0.0))
		{
			drugDiseaseDetailsInteractions=ncUpdate1WSBean.callDrugDiseaseInteraction(patientId,getPatientMedicationDataList(),getPatientDiagnosesDetailList(),userManageBean.getProviderLocation(),selectedDrugId);
		}


		drugDiseaseInterectionListDetail=new ArrayList<DrugInteractionOverview>();
		for(DrugDiseaseDetail drugDiseaseDetail:drugDiseaseDetailsInteractions){
			DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
			drugInteractionOverview.setClinicalEffects("");
			drugInteractionOverview.setConflict(drugDiseaseDetail.getDirectCondition());
			drugInteractionOverview.setIssueType(DRUG_DISEASE_INTERACTION);

			drugInteractionOverview.setPatientManagement(drugDiseaseDetail.getSeverityLevelText());
			if((StringUtils.equals(drugDiseaseDetail.getSeverityLevelShortText(), DRUG_SEVERITY_LEVEL_SEARCH_STR_DISEASE))||
					(StringUtils.equals(drugDiseaseDetail.getSeverityLevelShortText(), DRUG_SEVERITY_LEVEL_SEARCH_STR_RELATIVE))){
				drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
				drugInteractionOverview.setSeverityLevelToolTip(drugDiseaseDetail.getSeverityLevelShortText());
			}else if((StringUtils.equals(drugDiseaseDetail.getSeverityLevelShortText(), DRUG_SEVERITY_LEVEL_SEARCH_STR_CONTRADICATION))){
				drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL);
				drugInteractionOverview.setSeverityLevelToolTip(drugDiseaseDetail.getSeverityLevelShortText());
			}
			//if(!drugDiseaseInterectionListDetail.contains(drugInteractionOverview)){
				//	drugInteractionOverview.setSeverityLevel(drugDiseaseDetail.getSeverityLevelShortText());
				drugDiseaseInterectionListDetail.add(drugInteractionOverview);
			//}

			highestServityForDisease = new String();
			for (Iterator iterator = drugDiseaseInterectionListDetail.iterator(); iterator.hasNext();){
				DrugInteractionOverview drugInteraction = (DrugInteractionOverview) iterator.next();
				// System.out.println(":::::::name:"+clinicDiagnosis.getDiagnosisName());
				if(drugInteraction.getSeverityLevel().equalsIgnoreCase(HIGH_SEVERITY_LEVEL))
				{
					//System.out.println("getSeverityLevel::Disease:1:"+drugInteraction.getSeverityLevel());
					setHighestServityForDisease(HIGH_SEVERITY_LEVEL);
					//System.out.println("getSeverityLevel::444:Disease1:"+highestServity);
					break;
				}

				else if(drugInteraction.getSeverityLevel().equalsIgnoreCase(MEDIUM_SEVERITY_LEVEL))
				{	
					// System.out.println("MEDIUM_SEVERITY_LEVEL::Disease:2:"+drugInteraction.getSeverityLevel());
					setHighestServityForDisease(MEDIUM_SEVERITY_LEVEL);
					// System.out.println("MEDIUM_SEVERITY_LEVEL::444:2:"+highestServity);
					break;
				} 	

				else if(drugInteraction.getSeverityLevel().equalsIgnoreCase(LOW_SEVERITY_LEVEL))
				{
					// System.out.println("LOW_SEVERITY_LEVEL::Disease3::"+drugInteraction.getSeverityLevel());
					setHighestServityForDisease(LOW_SEVERITY_LEVEL);
					//System.out.println("LOW_SEVERITY_LEVEL::444:Disease3:"+highestServity);
					break;
				}
			}
		}
		
		//Start
				//Added on 16/Feb/2015 by Nagaraj for Paedatric and Geriatric Precaution
				//Get patient Age 
				//As per #1088,if patient age >=65 then call to geriatric precaution
				//Else If patient age < =18 then call to paedatric preacation.
				if (!(selectedDrugId == 0.0)) {
					//precautionsBasedOnDrugId
					precautionsBasedOnDrugId(selectedDrugId);
					
				}
				//end 
		
		//System.out.println("drugDiseaseDetailList:::::::::"+drugDiseaseDetailList.size());

		//System.out.println("drugDiseaseDetailList:::::::::"+drugDiseaseDetailList.size());

		//System.out.println("drugDiseaseDetailList:::::::::"+drugDiseaseDetailList.size());


		if(patientMedicationData.getGenericName().equalsIgnoreCase("warfarin")||patientMedicationData.getGenericName().equalsIgnoreCase("sofosbuvir"))
		{
			System.out.println("Here it is loading ......"+patientMedicationData.getGenericName());
			clinicDiagnosisList=patientMedicineService.findClinicDiagnosisList(patientMedicationData.getGenericName());
			clinicSubDiagnosisList=new ArrayList<ClinicSubdiagnosis>();
			labDetailList=new ArrayList<LabDetail>();
			LabDetail labDetail=new LabDetail();
			labDetail.setLabName("INR");
			//labDetail.setSelected(true);
			labDetailList.add(labDetail);
			//labDetailList=patientMedicineService.findLabDetailListAccordingToGenericname(patientMedicationData.getGenericName());

		}

	/*	logger.info("2find formulary detail start::::"+new ContextUtil().getInsuranceId());
		if(new ContextUtil().getInsuranceId()==0)
		{
			patientMedicationData.setFormularySymbol("");
		}
		else
		{*/
		
		String formularySymbolText=new String();
		/*String drugId=String.valueOf(patientMedicationData.getDrugId());*/
		Double drugIdForFormulary=patientMedicationData.getDrugId();
		Integer drugId=(int) drugIdForFormulary.doubleValue();
		logger.info("pat Med bean in double form"+drugIdForFormulary +" drug id in int form "+drugId);
		
		formularySymbolText=patientMedicineService.findFormularySymbol(new ContextUtil().getInsuranceId(),Integer.toString(drugId));
		Map<String,String>formularyMAP=patientMedicineService.formularyMAPtoOldText();
		if(StringUtils.isNotBlank(formularySymbolText)){
			patientMedicationData.setFormularyText(formularyMAP.get(formularySymbolText));
			patientMedicationData.setFormularySymbol(formularySymbolText);
		}else{
			patientMedicationData.setFormularyText("");
			patientMedicationData.setFormularySymbol("");
		}
		
		//}
		logger.info("2find formulary detail end::::"+patientMedicationData.getFormularySymbol());
		//afterAddNewMedicine1();
		if((patientMedicationData.getGenericName().equalsIgnoreCase("Apixaban")) || (patientMedicationData.getGenericName().equalsIgnoreCase("Enoxaparin"))
				|| (patientMedicationData.getGenericName().equalsIgnoreCase("Rivaroxaban")) || (patientMedicationData.getGenericName().equalsIgnoreCase("dabigatran etexilate"))
				|| (patientMedicationData.getGenericName().equalsIgnoreCase("dalteparin (porcine)")) || (patientMedicationData.getGenericName().equalsIgnoreCase("WARFARIN"))
				|| (patientMedicationData.getGenericName().equalsIgnoreCase("Fondaparinux")) 
				|| (patientMedicationData.getGenericName().equalsIgnoreCase("Desirudin")) || (patientMedicationData.getGenericName().equalsIgnoreCase("Apixaban")))
		{
			System.out.println("Apixaban::::::::"+patientMedicationData.getGenericName());
			RequestContext.getCurrentInstance().execute("searchMedicinePopUp.hide();");
			patientMedicationData.setDaySupply("30");
			patientMedicationData.setAllowSubstitution(true);
			RequestContext.getCurrentInstance().execute("quickPrescribe.show();");
		}else if((StringUtils.lowerCase(patientMedicationData.getDrugs()).contains("lithium"))||(StringUtils.lowerCase(patientMedicationData.getGenericName()).contains("lithium"))){
			logger.info("Inside Lithium med condion ");
			patientMedicationData.setDaySupply("30");
			patientMedicationData.setAllowSubstitution(true);
			viewName=returnParticularView();
			logger.info("view that should be returned after submit "+viewName);
			String drugNameCapitialized=StringUtils.capitalize(patientMedicationData.getDrugs());
			patientMedicationData.setDrugs(drugNameCapitialized);

			//Set the properties for Dialog box
			Map<String,Object> options = patientMedicineService.getDialogProperties();
			RequestContext.getCurrentInstance().execute("searchMedicinePopUp.hide();");
			RequestContext.getCurrentInstance().openDialog(PSYCHOPHARM_LITHIUM_QUICK_PRESCRIBE_VIEW,options,null);
		}
		else if ((patientMedicationData.getGenericName().equalsIgnoreCase("sofosbuvir"))){
			hepatitisC= new HepatitisC();
			viewName=returnParticularView();
			patientMedicationData.setDaySupply("30");
			patientMedicationData.setAllowSubstitution(true);
			System.out.println("Hepatits C::::::::"+patientMedicationData.getGenericName());
			Map<String,Object> options = patientMedicineService.getDialogProperties();
			RequestContext.getCurrentInstance().execute("searchMedicinePopUp.hide();");
			RequestContext.getCurrentInstance().openDialog(HEPATITIS_C_VIEW,options,null);
			resetHepatitisCAcord();
			getHepatitisCDefaultMedParameters();
			
			
			
		}
		else 
		{
			System.out.println("generalMedicinePopUp:::::::"+patientMedicationData.getGenericName());
			RequestContext.getCurrentInstance().execute("searchMedicinePopUp.hide();");

			RequestContext.getCurrentInstance().execute("addNewMedicinePopup.hide();");
			patientMedicationData.setDaySupply("30");
			patientMedicationData.setAllowSubstitution(true);
			RequestContext.getCurrentInstance().execute("generalMedicinePopUp.show();");	 
		}
	}
	
	
	
	private void createDrugDosageMap(List<WSDrug> doseDetailList2) {
		dosageMap=new HashMap<String, DrugCategoryFilter>();
		try{
		for(WSDrug drugObj:doseDetailList2){
			if(drugObj.getDose()!=null){
			dosageMap.put(drugObj.getDose(), new DrugCategoryFilter(drugObj.getDrugId(),drugObj.getDrugNameId(),drugObj.getDosageForm()));
		}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		
	}
	private List<String>dosageForms;
	public void updateDoasgeForm(){
		logger.info("Event Change listener has been called for change in Strength ");
		String strength=patientMedicationData.getStrengths();
		initializeDosageForm(strength);
		
		
	}

	private void initializeDosageForm(String strength) {
		dosageForms=new ArrayList<String>();
		try{
		if(strength!=null ){
			DrugCategoryFilter drugObj=dosageMap.get(strength);
			dosageForms.add(drugObj.getDosageForm());
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		
	}

	private void precautionsBasedOnDrugId(double selectedDrugId2) {
		Integer patientAgeInYearsVal = patientAgeInYears();
		logger.info("Patient Age In Years "+patientAgeInYearsVal);
		geriatricPrecautions=new ArrayList<GeriatricPrecaution>();
		paediatricPrecautions=new ArrayList<PaediatricPrecaution>();
		if (patientAgeInYearsVal != null) {
			
			if (patientAgeInYearsVal >= GERIATRIC_MINIMUM_AGE) {
				 geriatricPrecautions = patientMedicineService
						.getGeriatricPrecautions(selectedDrugId2);
				logger.info("Geriatric Precautions size "+geriatricPrecautions.size() +" based on DrugId "+selectedDrugId2);
			} else if (patientAgeInYearsVal <= PAEDIATRIC_MAXIMUM_AGE) {
				Integer patientAgeInDaysVal=patientAgeInDays();
		//		paediatricPrecautions=new ArrayList<PaediatricPrecaution>();
				logger.info("Patient Age In Days "+patientAgeInDaysVal);
				if(patientAgeInDaysVal!=null){
				 paediatricPrecautions = patientMedicineService
						.getPaediatricPrecautions(selectedDrugId2,
								patientAgeInDaysVal);
				logger.info("Paedatric Precautions size "+paediatricPrecautions.size() +" based on DrugId "+selectedDrugId2);
				}
			}
		}
		
	}

	public HepatitisC getHepatitisC() {
		return hepatitisC;
	}
	public void setHepatitisC(HepatitisC hepatitisC) {
		this.hepatitisC = hepatitisC;
	}
	public void score_calculation(){
		float encephalopathyScore =0;
		float ascitesScore =0;
		float serumBillirubinScore =0;
		float serumAlbuminScore =0;
		float inrScore = 0;
		float Totalscore = 0;
		String interpretation = "";
		
		if(hepatitisC.getEncephalopathy()!=null){
		if(hepatitisC.getEncephalopathy().equals("none")){
			encephalopathyScore = 1;
		}else if (hepatitisC.getEncephalopathy().equals("min")){
			encephalopathyScore = 2;
		}else if(hepatitisC.getEncephalopathy().equals("Ad_coma")){
			encephalopathyScore = 3;
		}
		}
		
		if(hepatitisC.getAscites()!=null){
		if(hepatitisC.getAscites().equals("none")){
			ascitesScore = 1 ;
		} 
		else if(hepatitisC.getAscites().equals("easy_cont")){
			ascitesScore = 2 ;
		}
		else if(hepatitisC.getAscites().equals("poorly_cont")){
			ascitesScore = 3 ;
		}
		
		}
		
		if(hepatitisC.getSerumBillirubin() < 2){
			serumBillirubinScore = 1 ;
		} 
		else if(hepatitisC.getSerumBillirubin() >=2 && hepatitisC.getSerumBillirubin() <=3){
			serumBillirubinScore = 2 ;
		}
		else if(hepatitisC.getSerumBillirubin() >3 ){
			serumBillirubinScore = 3 ;
		}
		
		if(hepatitisC.getSerumAlbumin() > 3.5){
			serumAlbuminScore = 1 ;
		} 
		else if(hepatitisC.getSerumAlbumin() >=2.8 && hepatitisC.getSerumAlbumin() <=3.5){
			serumAlbuminScore = 2 ;
		}
		else if(hepatitisC.getSerumAlbumin() <2.8 ){
			serumAlbuminScore = 3 ;
		}
		
		if(hepatitisC.getInr()< 1.7){
			 inrScore = 1 ;
		} 
		else if(hepatitisC.getInr() >=1.7 && hepatitisC.getInr() <=2.3){
			inrScore = 2 ;
		}
		else if(hepatitisC.getInr() >2.3 ){
			inrScore = 3 ;
		}
		
		//System.out.println("Here we have the details ---"+encephalopathyScore+" " + ascitesScore+" "+ serumBillirubinScore+" " + serumAlbuminScore+" " + inrScore );
		
		Totalscore = encephalopathyScore + ascitesScore  + serumBillirubinScore + serumAlbuminScore + inrScore ;
		if(Totalscore>=5 && Totalscore<=6){
			interpretation ="Class A: Well compensated liver disease";
		}else if(Totalscore>=7 && Totalscore<=9){
			interpretation ="Class B: Significant functional compromise";
		}else if(Totalscore>=10 && Totalscore<=15){
			interpretation ="Class C: Uncompensated liver disease";
		}
		
		hepatitisC.setScore(Totalscore);
		hepatitisC.setInterpretation(interpretation);
			
		
	}

	/*
	 * select search medicine..
	 * @author: Gopal Krishna Jha
	 */
	public void selectedSearchMedsForAnticoag() throws Exception
	{
		logger.info("selectedSearchMedsForAnticoag method start");
		setShowMedActionPlanForWarfarin(false);
		setShowMessageForNewAddMeds(false);
		//PatientMedicationData	PatientMedicationDataForReconcile=(PatientMedicationData) getReconsileMedsDataTable().getRowData();
		WSDrug wsDrugObj=(WSDrug)getSearchMedicineDataTableForAnticoag().getRowData();
		System.out.println(":::::::::::::::: meds::"+wsDrugObj.getDrugName()+"id:::::::::::"+wsDrugObj.getDrugNameId());
		//RequestContext.getCurrentInstance().reset("medicinename");
		patientMedicationData.setDrugs(wsDrugObj.getDrugName());
		patientMedicationData.setDrugNameId(wsDrugObj.getDrugNameId());
		patientMedicationData.setDosageForm(wsDrugObj.getDosageForm());
		patientMedicationData.setByRoute(wsDrugObj.getRoute());
		System.out.println(":::::::::::::::::::>>>>>"+patientMedicationData.getDrugNameId());
		//getting dose list...for selected meds
		doseDetailList=new ArrayList<WSDrug>();
		doseDetailList=patientMedicineService.findDoseListOfParticularMeds(wsDrugObj.getDrugNameId(),wsDrugObj.getDosageForm());
	
		
		if(doseDetailList.size()>0){
			createDrugDosageMap(doseDetailList);
			initializeDosageForm(doseDetailList.get(0).getDose());
		}else{
			doseDetailList=prepareWSdrugObj(patientMedicationData);
			dosageForms=new ArrayList<String>();
			dosageForms.add(patientMedicationData.getDosageForm().trim());
			
		}
		
		if(!((wsDrugObj.getDosageForm().equalsIgnoreCase("capsule")) || (wsDrugObj.getDosageForm().equalsIgnoreCase("tablet"))
				||(wsDrugObj.getDosageForm().equalsIgnoreCase("Lozenge"))
				||(wsDrugObj.getDosageForm().equalsIgnoreCase("pill"))||(wsDrugObj.getDosageForm().equalsIgnoreCase("patch"))
				||(wsDrugObj.getDosageForm().equalsIgnoreCase("suppository"))))
			patientMedicationData.setQuantity("");


		String genericName;
		if(wsDrugObj.getGenericName() != null)

			genericName=wsDrugObj.getGenericName();
		else
			genericName=wsDrugObj.getDrugName();
		System.out.println(":::::::::anticoag:::::::genericName::"+genericName);
		patientMedicationData.setGenericName(genericName);
		checkStartDateMedicine(genericName);
		findDrugIDAccordingToDrugName(doseDetailList);
		selectedDrugId= patientMedicationData.getDrugId();
		FacesContext context = FacesContext	.getCurrentInstance();UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");	

		if(!(selectedDrugId==0.0))
		{
			drugInteractions=drugDetailWSBean.callDrugDrugInteraction(patientMedicationDataList, userManageBean.getProviderLocation(),selectedDrugId);
		}
		List<DrugInteraction> drugInteractionsList=new ArrayList<DrugInteraction>();

		for (DrugInteraction dr : drugInteractions) {
			System.out.println("DrugInteraction list:dr.getDrug1::"+dr.getDrug1());
			if (!(String.valueOf(selectedDrugId)).equals(dr.getDrug2ID()+".0")) {
				drugInteractionsList.add(dr);
			}

		}
		drugInteractions.removeAll(drugInteractionsList);

		drugInterectionListDetail=new ArrayList<DrugInteractionOverview>();
		for(DrugInteraction drugInteractionData:drugInteractions){
			System.out.println("setSeverityLevel:::::::"+drugInteractionData.getSeverityLevel());
			DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
			drugInteractionOverview.setClinicalEffects(drugInteractionData.getClinicalEffects());
			drugInteractionOverview.setPatientManagement(drugInteractionData.getPatientManagement());
			drugInteractionOverview.setIssueType(DRUG_DRUG_INTERECTION);
			drugInteractionOverview.setDrugId(drugInteractionData.getDrug1ID());
			drugInteractionOverview.setConflict(drugInteractionData.getDrug1());

			if(StringUtils.contains(StringUtils.lowerCase(drugInteractionData.getSeverityLevel()), DRUG_SEVERITY_LEVEL_SEARCH_STR)){
				drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
				drugInteractionOverview.setSeverityLevelToolTip(DRUG_SEVERITY_TOOLTIP);
			}else if(StringUtils.contains(StringUtils.lowerCase(drugInteractionData.getSeverityLevel()), DRUG_SEVERITY_LEVEL_SEARCH_STR_CONTRAINDICATED)){
				drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
				drugInteractionOverview.setSeverityLevelToolTip(DRUG_SEVERITY_TOOLTIP_CONTRAINDICATED);
			}else if(StringUtils.contains(StringUtils.lowerCase(drugInteractionData.getSeverityLevel()), DRUG_SEVERITY_LEVEL_SEARCH_STR_MODERATE)){
				drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL);
				drugInteractionOverview.setSeverityLevelToolTip(DRUG_SEVERITY_TOOLTIP_MODERATE);
			}
			System.out.println("drugId is=="+drugInteractionOverview.getDrugId());
			if(!drugInterectionListDetail.contains(drugInteractionOverview)){
				drugInterectionListDetail.add(drugInteractionOverview);

				highestServity=new String();

				for (Iterator iterator = drugInterectionListDetail.iterator(); iterator.hasNext();){
					DrugInteractionOverview drugInteraction = (DrugInteractionOverview) iterator.next();
					// System.out.println(":::::::name:"+clinicDiagnosis.getDiagnosisName());
					if(drugInteraction.getSeverityLevel().equalsIgnoreCase(HIGH_SEVERITY_LEVEL))
					{
						// System.out.println("getSeverityLevel::o::"+drugInteraction.getSeverityLevel());
						setHighestServity(HIGH_SEVERITY_LEVEL);
						// System.out.println("getSeverityLevel::444:o:"+highestServity);
						break;
					}

					else if(drugInteraction.getSeverityLevel().equalsIgnoreCase(MEDIUM_SEVERITY_LEVEL))
					{	
						// System.out.println("MEDIUM_SEVERITY_LEVEL:o:::"+drugInteraction.getSeverityLevel());
						setHighestServity(MEDIUM_SEVERITY_LEVEL);
						// System.out.println("MEDIUM_SEVERITY_LEVEL::444:o:"+highestServity);
						break;
					} 	

					else if(drugInteraction.getSeverityLevel().equalsIgnoreCase(LOW_SEVERITY_LEVEL))
					{
						// System.out.println("LOW_SEVERITY_LEVEL::o::"+drugInteraction.getSeverityLevel());
						setHighestServity(LOW_SEVERITY_LEVEL);
						//System.out.println("LOW_SEVERITY_LEVEL::444:o:"+highestServity);
						break;
					}
				}
			}
		}


		System.out.println("patientMedicationData:anticoag:::::::::"+patientMedicationData.getGenericName()+":::::::"
				+patientMedicationData.getDrugName()+"dsfhgjsd"+patientMedicationData.getDrugs());

		System.out.println("value of PharmacogenomicInteractionDetail @ 8497="+getPharmacogenomicInteractionDetail());
		pharmacogenomicInteractionDetailList=patientMedicineService.findPharmacogenomicsInteractionDuringAddMedicine(patientMedicationData.getDrugNameId(),patientMedicationData.getDrugs(),new ContextUtil().getPatientId());
		System.out.println(patientMedicationData.getDrugNameId()+"value of  PharmacogenomicInteractionDetail after @ 8497="+getPharmacogenomicInteractionDetail());

		drugPharmaInterectionListDetail=new ArrayList<DrugInteractionOverview>();
		getPharmacogenomicsRecomendationsListForImpactedMedicine();
		highestServityForpharmacogenomic = new String();
		String drugName=patientMedicationData.getDrugs();
		for (PharmacogenomicsRecomendations pr : pharmacogenomicInteractionDetailList) {
			DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
			System.out.println("inside onRowExpensionDrugInteraction::::::"+pr.getDrugName()+"="+drugName);
			if (drugName.equalsIgnoreCase(pr.getDrugName())) {
				System.out.println("inside if block::::::"+pr.getDrugName()+"="+drugName);
				drugInteractionOverview.setSeverityLevel(pr.getAttentionRating());
				drugInteractionOverview.setIssueType(PHARMACOGENOMIC);

				drugInteractionOverview.setConflict(pr.getPharmacogenomicsId().getGeneSymbol());
				drugInteractionOverview.setClinicalEffects(pr.getImplications());
				drugInteractionOverview.setPatientManagement(pr.getRecommendation());
				final String PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING=pr.getOvaleMessage();
				drugInteractionOverview.setSeverityLevelToolTip(pr.getOvaleMessage());
				if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), HIGH_SEVERITY_LEVEL_RATING)){
					drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL_RATING);
					drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
				}else if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), MEDIUM_SEVERITY_LEVEL_RATING)){
					drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL_RATING);
					drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
				}else if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), LOW_SEVERITY_LEVEL_RATING)){
					drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL_RATING);
					drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
				}
				if(!drugPharmaInterectionListDetail.contains(drugInteractionOverview)){
					//	drugInteractionOverview.setSeverityLevel(drugDiseaseDetail.getSeverityLevelShortText());
					drugPharmaInterectionListDetail.add(drugInteractionOverview);
				}
				for(DrugInteractionOverview dio: drugPharmaInterectionListDetail)
				{
					System.out.println("drugInterectionListDetail::PHARMACOGENOMIC:::anti::::123:::"+dio.getSeverityLevel());
					setHighestServityForpharmacogenomic(dio.getSeverityLevel());
					System.out.println("drugInterectionListDetail::PHARMACOGENOMIC::456::anti:::123:::"+dio.getSeverityLevelToolTip());
				}
			}

		}
		//getPharmacogenomicsRecomendationsListForImpactedMedicine();

		//List<PharmacogenomicsRecomendations>pharmacogenomicsRecomendationsList=new ArrayList<PharmacogenomicsRecomendations>();
		//System.out.println("pharmacogenomicsDetails value before clean==anticoag===="+pharmacogenomicsDetails);
		//setPharmacogenomicsDetails(null);
		//System.out.println("pharmacogenomicsDetails value after clean==anticoag====="+pharmacogenomicsDetails);
		/*for (PharmacogenomicsRecomendations pr : pharmacogenomicsRecomendationsListForImpactedMedicine) {
					System.out.println("pharmacogenomicsRecomendationsListForImpactedMedicine::::::"+pr.getDrugName());
					System.out.println("patientMedicationData.getDrugs()"+patientMedicationData.getDrugs());
					if(patientMedicationData.getDrugs().equalsIgnoreCase(pr.getDrugName())){
						System.out.println("inside if block::::"+pr.getDrugName());
						pharmacogenomicsDetails=pr.getDrugName()+" "+pr.getRecommendation()+" "+pr.getDose();
						//Pharmacogenomics=;
						//pharmacogenomicsRecomendationsList.add(pr);

						break;
					}


				}*/
		//System.out.println("value of s===anticoag==="+pharmacogenomicsDetails);



		String patientId=Integer.toString(new ContextUtil().getPatientId());		
		if(!(selectedDrugId==0.0))
		{
			drugAllergyInteractions=drugDetailWSBean.getDrugAllergyInteraction(patientId,getPatientAllergyList(),getPatientMedicationDataList(),userManageBean.getProviderLocation(),selectedDrugId);
		}
		drugAlleryInterectionListDetail= new ArrayList<DrugInteractionOverview>();
		String [] allergySeverity=new String[2];
		String allergySeverityLevel="";
		for(DrugAllergyDetail drugAllergyDetail:drugAllergyInteractions){
			DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
			drugInteractionOverview.setClinicalEffects("");
			drugInteractionOverview.setConflict(drugAllergyDetail.getInteractionText());
			drugInteractionOverview.setIssueType(DRUG_ALLERGY_INTERACTION);
			if(StringUtils.contains(drugAllergyDetail.getInteractionText(), "with")){
				allergySeverity=StringUtils.split(drugAllergyDetail.getInteractionText(), "with");
				//logger.info("medicine after spiltting "+allergySeverity[0]);
				//	logger.info("allergy after spiltting "+allergySeverity[1]);
			}
			for(PatientAllergy patAllergy:getPatientAllergyList()){
				if(patAllergy.getAllergyName().equals(allergySeverity[1])){
					allergySeverityLevel=patAllergy.getAllergySeverity();
					break;
				}
			}
			if(StringUtils.isNotEmpty(allergySeverityLevel)){
				if(StringUtils.equals(allergySeverityLevel, DRUG_SEVERITY_TOOLTIP)){
					drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(allergySeverityLevel);
				}else if(StringUtils.equals(allergySeverityLevel, DRUG_SEVERITY_TOOLTIP_MODERATE)){
					drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(allergySeverityLevel);
				}else if(StringUtils.equals(allergySeverityLevel, MILD_LEVEL)){
					drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(allergySeverityLevel);
				}
			}else {
				drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL);
				drugInteractionOverview.setSeverityLevelToolTip(MILD_LEVEL);
			}
			//if(!drugAlleryInterectionListDetail.contains(drugInteractionOverview)){
				//	drugInteractionOverview.setSeverityLevel(drugDiseaseDetail.getSeverityLevelShortText());
				drugAlleryInterectionListDetail.add(drugInteractionOverview);
			//}

			//drugInterectionListDetail.add(drugInteractionOverview);
			highestServityForAllergy = new String();
			for (Iterator iterator = drugAlleryInterectionListDetail.iterator(); iterator.hasNext();){
				DrugInteractionOverview drugInteraction = (DrugInteractionOverview) iterator.next();
				// System.out.println(":::::::name:"+clinicDiagnosis.getDiagnosisName());
				if(drugInteraction.getSeverityLevel().equalsIgnoreCase(HIGH_SEVERITY_LEVEL))
				{
					// System.out.println("getSeverityLevel::Allergy:o:"+drugInteraction.getSeverityLevel());
					setHighestServityForAllergy(HIGH_SEVERITY_LEVEL);
					// System.out.println("getSeverityLevel::444:o:"+highestServity);
					break;
				}

				else if(drugInteraction.getSeverityLevel().equalsIgnoreCase(MEDIUM_SEVERITY_LEVEL))
				{	
					//System.out.println("MEDIUM_SEVERITY_LEVEL::Allergy1:o:"+drugInteraction.getSeverityLevel());
					setHighestServityForAllergy(MEDIUM_SEVERITY_LEVEL);
					// System.out.println("MEDIUM_SEVERITY_LEVEL::444:o:"+highestServity);
					break;
				} 	

				else if(drugInteraction.getSeverityLevel().equalsIgnoreCase(LOW_SEVERITY_LEVEL))
				{
					// System.out.println("LOW_SEVERITY_LEVEL::Allergy12::"+drugInteraction.getSeverityLevel());
					setHighestServityForAllergy(LOW_SEVERITY_LEVEL);
					//System.out.println("LOW_SEVERITY_LEVEL::444::"+highestServityForAllergy);
					break;
				}
			}


		}

		if(!(selectedDrugId==0.0))
		{
			drugDiseaseDetailsInteractions=ncUpdate1WSBean.callDrugDiseaseInteraction(patientId,getPatientMedicationDataList(),getPatientDiagnosesDetailList(),userManageBean.getProviderLocation(),selectedDrugId);
		}
		drugDiseaseInterectionListDetail= new ArrayList<DrugInteractionOverview>();	
		for(DrugDiseaseDetail drugDiseaseDetail:drugDiseaseDetailsInteractions){
			DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
			drugInteractionOverview.setClinicalEffects("");
			drugInteractionOverview.setConflict(drugDiseaseDetail.getDirectCondition());
			drugInteractionOverview.setIssueType(DRUG_DISEASE_INTERACTION);

			drugInteractionOverview.setPatientManagement(drugDiseaseDetail.getSeverityLevelText());
			if((StringUtils.equals(drugDiseaseDetail.getSeverityLevelShortText(), DRUG_SEVERITY_LEVEL_SEARCH_STR_DISEASE))||
					(StringUtils.equals(drugDiseaseDetail.getSeverityLevelShortText(), DRUG_SEVERITY_LEVEL_SEARCH_STR_RELATIVE))){
				drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
				drugInteractionOverview.setSeverityLevelToolTip(drugDiseaseDetail.getSeverityLevelShortText());
			}else if((StringUtils.equals(drugDiseaseDetail.getSeverityLevelShortText(), DRUG_SEVERITY_LEVEL_SEARCH_STR_CONTRADICATION))){
				drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL);
				drugInteractionOverview.setSeverityLevelToolTip(drugDiseaseDetail.getSeverityLevelShortText());
			}
			//if(!drugDiseaseInterectionListDetail.contains(drugInteractionOverview)){
				//	drugInteractionOverview.setSeverityLevel(drugDiseaseDetail.getSeverityLevelShortText());
				drugDiseaseInterectionListDetail.add(drugInteractionOverview);
			//}
			highestServityForDisease = new String();
			for (Iterator iterator = drugDiseaseInterectionListDetail.iterator(); iterator.hasNext();){
				DrugInteractionOverview drugInteraction = (DrugInteractionOverview) iterator.next();
				// System.out.println(":::::::name:"+clinicDiagnosis.getDiagnosisName());
				if(drugInteraction.getSeverityLevel().equalsIgnoreCase(HIGH_SEVERITY_LEVEL))
				{
					//System.out.println("getSeverityLevel::Disease:1:o"+drugInteraction.getSeverityLevel());
					setHighestServityForDisease(HIGH_SEVERITY_LEVEL);
					//System.out.println("getSeverityLevel::444:Disease1:"+highestServity);
					break;
				}

				else if(drugInteraction.getSeverityLevel().equalsIgnoreCase(MEDIUM_SEVERITY_LEVEL))
				{	
					//System.out.println("MEDIUM_SEVERITY_LEVEL::Disease:2o:"+drugInteraction.getSeverityLevel());
					setHighestServityForDisease(MEDIUM_SEVERITY_LEVEL);
					// System.out.println("MEDIUM_SEVERITY_LEVEL::444:2o:"+highestServity);
					break;
				} 	

				else if(drugInteraction.getSeverityLevel().equalsIgnoreCase(LOW_SEVERITY_LEVEL))
				{
					//System.out.println("LOW_SEVERITY_LEVEL::Disease3:o:"+drugInteraction.getSeverityLevel());
					setHighestServityForDisease(LOW_SEVERITY_LEVEL);
					// System.out.println("LOW_SEVERITY_LEVEL::444:Disease3:o"+highestServity);
					break;
				}
			}
		}

		if (!(selectedDrugId == 0.0)) {
			//precautionsBasedOnDrugId
			precautionsBasedOnDrugId(selectedDrugId);
			
		}
		
		//for setting medactionplan for warfarin...

		if(patientMedicationData.getGenericName().equalsIgnoreCase("warfarin"))
		{
			clinicDiagnosisList=patientMedicineService.findClinicDiagnosisList(patientMedicationData.getGenericName());
			clinicSubDiagnosisList=new ArrayList<ClinicSubdiagnosis>();
			labDetailList=new ArrayList<LabDetail>();
			LabDetail labDetail=new LabDetail();
			labDetail.setLabName("INR");
			//labDetail.setSelected(true);
			labDetailList.add(labDetail);
			//labDetailList=patientMedicineService.findLabDetailListAccordingToGenericname(patientMedicationData.getGenericName());


		}

	//for Formulary alert should come when med being added  added by gopal
		
		/*if(new ContextUtil().getInsuranceId()==0)
		{
			patientMedicationData.setFormularySymbol("");
		}
		else
		{
	
		
		patientMedicationData.setFormularySymbol(patientMedicineService.findFormularySymbol(new ContextUtil().getInsuranceId(),patientMedicationData.getDrugs()));
		}*/
		
	//added by Nagaraj on 30/Jan/2015
		String formularySymbolText=new String();
		/*String drugId=String.valueOf(patientMedicationData.getDrugId());*/
		Double drugIdForFormulary=patientMedicationData.getDrugId();
		Integer drugId=(int) drugIdForFormulary.doubleValue();
		logger.info("pat Med bean in double form"+drugIdForFormulary +" drug id in int form "+drugId);
		
		formularySymbolText=patientMedicineService.findFormularySymbol(new ContextUtil().getInsuranceId(),Integer.toString(drugId));
		Map<String,String>formularyMAP=patientMedicineService.formularyMAPtoOldText();
		if(StringUtils.isNotBlank(formularySymbolText)){
			patientMedicationData.setFormularyText(formularyMAP.get(formularySymbolText));
			patientMedicationData.setFormularySymbol(formularySymbolText);
		}else{
			patientMedicationData.setFormularyText("");
			patientMedicationData.setFormularySymbol("");
		}
		
		//}
		logger.info("2find formulary detail end::::"+patientMedicationData.getFormularySymbol());
	
		//String formularyDetail=patientMedicineService.findFormularySymbol(new ContextUtil().getInsuranceId(),patientMedicationData.getDrugs());
		//patientMedicationData.setFormularySymbol(patientMedicineService.findFormularySymbol(new ContextUtil().getInsuranceId(),patientMedicationData.getDrugs()));
		//logger.info("formularyDetail::::::::::::::::+"+formularyDetail);
		
		//afterAddNewMedicine1();
		if((patientMedicationData.getGenericName().equalsIgnoreCase("Apixaban")) || (patientMedicationData.getGenericName().equalsIgnoreCase("Enoxaparin"))
				|| (patientMedicationData.getGenericName().equalsIgnoreCase("Rivaroxaban")) || (patientMedicationData.getGenericName().equalsIgnoreCase("dabigatran etexilate"))
				|| (patientMedicationData.getGenericName().equalsIgnoreCase("dalteparin (porcine)")) || (patientMedicationData.getGenericName().equalsIgnoreCase("WARFARIN"))
				|| (patientMedicationData.getGenericName().equalsIgnoreCase("Fondaparinux")) 
				|| (patientMedicationData.getGenericName().equalsIgnoreCase("Desirudin")) || (patientMedicationData.getGenericName().equalsIgnoreCase("Apixaban")))
		{
			System.out.println("Apixaban::::::::"+patientMedicationData.getGenericName());
			RequestContext.getCurrentInstance().execute("searchMedicinePopUp.hide();");
			patientMedicationData.setDaySupply("30");
			patientMedicationData.setAllowSubstitution(true);
			RequestContext.getCurrentInstance().execute("quickPrescribe.show();");
		}else if((StringUtils.lowerCase(patientMedicationData.getDrugs()).contains("lithium"))||(StringUtils.lowerCase(patientMedicationData.getGenericName()).contains("lithium"))){
			logger.info("Inside Lithium med condion ");
			patientMedicationData.setDaySupply("30");
			patientMedicationData.setAllowSubstitution(true);
			String drugNameCapitialized=StringUtils.capitalize(patientMedicationData.getDrugs());
			patientMedicationData.setDrugs(drugNameCapitialized);

			//Set the properties for Dialog box
			Map<String,Object> options = patientMedicineService.getDialogProperties();
			RequestContext.getCurrentInstance().execute("searchMedicinePopUp.hide();");
			RequestContext.getCurrentInstance().openDialog(PSYCHOPHARM_LITHIUM_QUICK_PRESCRIBE_VIEW,options,null);
		}
		else if((StringUtils.lowerCase(patientMedicationData.getDrugs()).contains("sovaldi"))||(StringUtils.lowerCase(patientMedicationData.getGenericName()).contains("sovaldi"))){
			logger.info("Inside sovaldi med condion ");
			hepatitisC= new HepatitisC();
			System.out.println("Hepatits C::::::::"+patientMedicationData.getGenericName());
			Map<String,Object> options = patientMedicineService.getDialogProperties();
			RequestContext.getCurrentInstance().execute("searchMedicinePopUp.hide();");
			RequestContext.getCurrentInstance().openDialog(HEPATITIS_C_VIEW,options,null);
			resetHepatitisCAcord();
			getHepatitisCDefaultMedParameters();
		}
		else 
		{
			System.out.println("generalMedicinePopUp:::::::"+patientMedicationData.getGenericName());
			RequestContext.getCurrentInstance().execute("searchMedicinePopUp.hide();");

			RequestContext.getCurrentInstance().execute("addNewMedicinePopup.hide();");
			patientMedicationData.setDaySupply("30");
			patientMedicationData.setAllowSubstitution(true);
			RequestContext.getCurrentInstance().execute("generalMedicinePopUp.show();");	 
		}
	}

	private boolean showMedActionPlanForWarfarin;
	public boolean isShowMedActionPlanForWarfarin() {
		return showMedActionPlanForWarfarin;
	}

	public void setShowMedActionPlanForWarfarin(boolean showMedActionPlanForWarfarin) {
		this.showMedActionPlanForWarfarin = showMedActionPlanForWarfarin;
	}

	/*
	 * change for med action plan for warfarin... in quick prescribe..
	 * @author: Gopal Krishna jha
	 */



	public void checkMedActionPlanForWarfarin()
	{
		logger.info("checkMedActionPlanForWarfarin::::::::::::"+showMedActionPlanForWarfarin);
		for(LabDetail lab:labDetailList)
		{
			lab.setSelected(showMedActionPlanForWarfarin);
		}

	}
	public List<WSDrug> getSearchMedicineList() {

		return SearchMedicineList;
	}

	public void setSearchMedicineList(List<WSDrug> searchMedicineList) {
		SearchMedicineList = searchMedicineList;
	}

	public DataTable getSearchMedicineDataTable() {
		return searchMedicineDataTable;
	}

	public void setSearchMedicineDataTable(DataTable searchMedicineDataTable) {
		this.searchMedicineDataTable = searchMedicineDataTable;
	}

	public boolean isShowMedHistoryForReconcile() {
		return showMedHistoryForReconcile;
	}

	public void setShowMedHistoryForReconcile(boolean showMedHistoryForReconcile) {
		this.showMedHistoryForReconcile = showMedHistoryForReconcile;
	}
	public void goToMedHistory() throws Exception
	{
		logger.info("goToMedHistory method:::::::::::"+timeFrameForReconcile);
		List<PatientMedicationData>duplicateReconcileList=new ArrayList<PatientMedicationData>();
	//	logger.info("showReconcileMeds method start.."+timeFrameForReconcile);
		logger.info("list size::::::::::::::::"+getPatientFullDrugDetailListByWebservices().size());
	
		
		String archiveStatus="%"; //Added By Anjani
		
		reconcileMedsList=new ArrayList<PatientMedicationData>();
		int timePeriod;
		if(timeFrameForReconcile==null)
		{
			timePeriod=1;

			System.out.println("timeFrameForReconcile:::::"+timePeriod);
		}
		else
			timePeriod=Integer.parseInt(timeFrameForReconcile);
		timePeriod=timePeriod*-30;
		Date startDate,endDate;
		startDate=new DateUtil().AddDate(new DateUtil().getTodayDate(), 1);
		endDate=new DateUtil().AddDate(startDate, timePeriod);

		System.out.println(timePeriod+"start date for reconcile:::"+startDate+":::::::::endDate::::::"+endDate);
		

		getPatientFullDrugDetailListByWebservices(archiveStatus);
		logger.info("size of drug list return by webservices"+getPatientFullDrugDetailListByWebservices().size());

		for(PatientFullMedHistoryV6 patientDrugDetail5:getPatientFullDrugDetailListByWebservices())
		{
			System.out.println("::::::::::::::::: "+patientDrugDetail5.getPhysicianName());
			//if(patientDrugDetail5)
			if(!patientDrugDetail5.getPhysicianName().equalsIgnoreCase("NOT SENT"))
			{
				System.out.println("********************************************************************");
				System.out.println(":::getAccountName::"+patientDrugDetail5.getAccountName());
				System.out.println(":::ArchiveStatus::"+patientDrugDetail5.getArchiveStatus());
				System.out.println(":::getDateMovedToPreviousMedications::"+patientDrugDetail5.getDateMovedToPreviousMedications());
				System.out.println(":::DispenseAsWritten::"+patientDrugDetail5.getDispenseAsWritten());

				System.out.println(":::getDosageForm::"+patientDrugDetail5.getDosageForm());
				System.out.println(":::getDosageNumberDescription::"+patientDrugDetail5.getDosageNumberDescription());
				System.out.println(":::getDosageFrequencyDescription::"+patientDrugDetail5.getDosageFrequencyDescription());
				System.out.println(":::getDrugID::"+patientDrugDetail5.getDrugID());
				System.out.println(":::getDrugID::"+patientDrugDetail5.getDrugTypeID());
				System.out.println(":::getDrugName::"+patientDrugDetail5.getDrugName());

				System.out.println(":::getEncounterIdentifier::"+patientDrugDetail5.getEncounterIdentifier());
				System.out.println(":::getEpisodeIdentifier::"+patientDrugDetail5.getEpisodeIdentifier());
				System.out.println(":::getExternalAccountID::"+patientDrugDetail5.getExternalAccountID());
				System.out.println(":::getExternalPatientID::"+patientDrugDetail5.getExternalPatientID());
				System.out.println(":::getExternalPhysicianID::"+patientDrugDetail5.getExternalPhysicianID());
				System.out.println(":::getExternalPrescriptionID::"+patientDrugDetail5.getExternalPrescriptionID());
				System.out.println(":::getExternalSource::"+patientDrugDetail5.getExternalSource());
				//System.out.println(":::getExternalDrugOverride::"+patientDrugDetail5.getExternalDrugOverride());
				System.out.println(":::getEpisodeIdentifier::"+patientDrugDetail5.getEpisodeIdentifier());

				//System.out.println(":::getFormularyCoverage::"+patientDrugDetail5.getFormularyCoverage());
				//System.out.println(":::getFormularyStatus::"+patientDrugDetail5.getFormularyStatus());
				System.out.println(":::getFullName::"+patientDrugDetail5.getFullName());

				//System.out.println(":::getHealthPlanID::"+patientDrugDetail5.getHealthPlanID());
				//System.out.println(":::getHealthplanTypeID::"+patientDrugDetail5.getHealthplanTypeID());
				//System.out.println(":::getOrderGuid::"+patientDrugDetail5.getOrderGuid());

				System.out.println(":::getPatientID::"+patientDrugDetail5.getPatientID());
				System.out.println(":::getHealthplanTypeID::"+patientDrugDetail5.getPatientIDType());
				System.out.println(":::getPhysicianName::"+patientDrugDetail5.getPhysicianName());
				System.out.println(":::getPrescriptionDate::"+patientDrugDetail5.getPrescriptionDate());
				System.out.println(":::getPrescriptionGuid::"+patientDrugDetail5.getPrescriptionGuid());
				System.out.println(":::getPrescriptionNotes::"+patientDrugDetail5.getPrescriptionNotes());


				System.out.println(":::getRefills::"+patientDrugDetail5.getRefills());
				System.out.println(":::getRoute::"+patientDrugDetail5.getRoute());
				System.out.println(":::getSiteID::"+patientDrugDetail5.getSiteID());
				System.out.println(":::getStatus::"+patientDrugDetail5.getStatus());
				System.out.println(":::getStrength::"+patientDrugDetail5.getStrength());
				System.out.println(":::getStrengthUOM::"+patientDrugDetail5.getStrengthUOM());

				System.out.println(":::getSubStatus::"+patientDrugDetail5.getSubStatus());
				System.out.println(":::getTakeAsNeeded::"+patientDrugDetail5.getTakeAsNeeded());


              
				

				PatientMedicationData patMedData=new PatientMedicationData();
				patMedData.setPatientId(new ContextUtil().getPatientId());
				//patMedData.setStartDate(formatter.parse(patientDrugDetail5.getPrescriptionDate()));
				patMedData.setProviderId(new ContextUtil().getProviderId());
				//patMedData.setDoctorId(new ContextUtil().getLoginId());
				patMedData.setDrugs(patientDrugDetail5.getDrugName());
				patMedData.setDataProvider("FDB");
				patMedData.setUnit(patientDrugDetail5.getDosageNumberDescription());
				patMedData.setDosageForm(patientDrugDetail5.getDosageForm());
				//patMedData.setStartDate(patientDrugDetail5.getPrescriptionDate());
				patMedData.setStrengths(patientDrugDetail5.getStrength()+" "+patientDrugDetail5.getStrengthUOM());
				patMedData.setPrescriberName(patientDrugDetail5.getPhysicianName().trim());
				
				//commented by gopal..
				if(patientDrugDetail5.getPrescriptionNotes().isEmpty())
					patMedData.setDirections(patientDrugDetail5.getDosageFrequencyDescription());
				else
					patMedData.setDirections(patientDrugDetail5.getPrescriptionNotes());

				patMedData.setDirections(patientDrugDetail5.getDosageFrequencyDescription());
				//patMedData.setDirections(patientDrugDetail5.getPrescriptionNotes());
				patMedData.setQuantity(patientDrugDetail5.getDispense());
				//.setStartDate(new DateUtil().convertStringToDateFormat(patientAllergyFromNewCrop.getRecordedDate(),DATE_PATTERN));


				String modifiedDateFormat=changeGMTFormatForCompare(patientDrugDetail5.getPrescriptionDate());
				patMedData.setStartDate(new DateUtil().convertStringToDateFormatToCurrentTimeZone(modifiedDateFormat,"yyyy-MM-dd'T'HH:mm:ss"));

				//patMedData.setStartDate(new DateUtil().convertStringToDateFormat(patientDrugDetail5.getPrescriptionDate(),DATE_PATTERN));

				patMedData.setDrugId(Double.parseDouble(patientDrugDetail5.getDrugID()));

				if(patientDrugDetail5.getExternalPhysicianID().equalsIgnoreCase("DEMOLP1"))
					patientDrugDetail5.setExternalPhysicianID("9");

				//patMedData.setDoctorId(Integer.parseInt(patientDrugDetail5.getExternalPhysicianID()));


				reconcileMedsList.add(patMedData);
				duplicateReconcileList.add(patMedData);
				//	}
					
					
				}
			}
			Collections.sort(duplicateReconcileList,PatientMedicationData.dateComparator);
			reconcileMedsList=new ArrayList<PatientMedicationData>();
			for(PatientMedicationData patientMedicationData:duplicateReconcileList){
				if(!reconcileMedsList.contains(patientMedicationData)){
					reconcileMedsList.add(patientMedicationData);
					
				}
			}
			
		

		logger.info("end show reconcle meds:::size "+reconcileMedsList.size()+"duplicate list size "+duplicateReconcileList.size());
		setShowMedHistoryForReconcile(true);
		//showReconcileMeds();
	}

	public void goToPharmacyHistory() 
	{
		try{
		logger.info("goToPharmacyHistory method:::::::::::"+timeFrameForReconcile);
		List<PatientMedicationData>duplicateReconcilePharmacyList=new ArrayList<PatientMedicationData>();
		setShowMedHistoryForReconcile(false);
		//String timePeriod="6 Months";
		int timePeriod;
		if(timeFrameForReconcile==null)
			timePeriod=12;
		else if(timeFrameForReconcile.equals(""))
			timePeriod=12;
		else 
			timePeriod=Integer.parseInt(timeFrameForReconcile);
		logger.info("goToPharmacyHistory method:::::::::timePeriod::"+timePeriod);
		if(pharmacyMedsMedsListForReconcile.isEmpty())
		{
			List<PharmacyDetail> pharmacyDetailList=patientMedicineService.getPharmacyDetailData(timePeriod,new ContextUtil().getPatientId());
			System.out.println("pharmacyMedsMedsListForReconcile.size()"+pharmacyDetailList.size());
			for(PharmacyDetail patientDrugDetail5:pharmacyDetailList){
				PatientMedicationData patMedData=new PatientMedicationData();
				patMedData.setDrugs(patientDrugDetail5.getDrugInfo());
				//patMedData.setStrengths(patientDrugDetail5.getStrength()+" "+patientDrugDetail5.getStrengthUOM());
				/*patMedData.setPrescriberName(patientDrugDetail5.getDoctorFirstName()+" "+patientDrugDetail5.getDoctorLastName());*/ //Commented By Anjani
				if(!(((patientDrugDetail5.getDoctorName()==null)) || (patientDrugDetail5.getDoctorName().isEmpty())))
				{
					String firstprescribename;
					String lastprescribename;
					char first;
					char second;
					String prescribe_name1 = new String();
					String prescriber_name2= new String();
					String prescribename=patientDrugDetail5.getDoctorName();
					String[] split = prescribename.split(" ");
					if(split.length>0){
						if (((StringUtils.isNotBlank(split[0]))))
						{
							 firstprescribename=split[0];
							 first=firstprescribename.charAt(0);
							 prescribe_name1=first+firstprescribename.substring(1).toLowerCase();
						}
					}
					if(split.length>=2){
						if ((StringUtils.isNotBlank(split[1])))
						{
							 lastprescribename=split[1];
							 second=lastprescribename.charAt(0);
							 prescriber_name2=second+lastprescribename.substring(1).toLowerCase();
						}
						}
					String prescriber_Name=prescribe_name1+" "+prescriber_name2;
					patMedData.setPrescriberName(prescriber_Name);
				}
				else
				{
					patMedData.setPrescriberName("N/A");	
				}
				//patMedData.setDirections("qPM");
				if(!(patientDrugDetail5.getDrugId()==0.0))
					patMedData.setDrugId((patientDrugDetail5.getDrugId()));
				System.out.println("patientDrugDetail5.getDrugId():::::"+patientDrugDetail5.getDrugId()+patientDrugDetail5.getDrugInfo());
				patMedData.setQuantity(Integer.toString(patientDrugDetail5.getQuantity()));
				/*patMedData.setStartDate(new DateUtil().convertStringToDateFormat(patientDrugDetail5.getFillDate(),DATE_PATTERN));*/ //Commented By Anjani
				patMedData.setStartDate(patientDrugDetail5.getDateOfPurchase());
				
				patMedData.setStrengths(patientDrugDetail5.getDosage());
				patMedData.setDaySupply(patientDrugDetail5.getDaysOfSupply());
				
				//pharmacyMedsMedsListForReconcile.add(patMedData);
				//System.out.println("pharmacyMedsMedsListForReconcile.size()"+pharmacyMedsMedsListForReconcile.size());
				duplicateReconcilePharmacyList.add(patMedData);
			}
		
		//getPatientMedicationDataList();
		Collections.sort(duplicateReconcilePharmacyList,PatientMedicationData.dateComparator);
		logger.info("before size:::::"+duplicateReconcilePharmacyList.size());
		pharmacyMedsMedsListForReconcile=new ArrayList<PatientMedicationData>();
		for(PatientMedicationData patientMedicationData:duplicateReconcilePharmacyList){
			if(!pharmacyMedsMedsListForReconcile.contains(patientMedicationData)){
				//System.out.println("11111111111111::: drugname::"+patientMedicationData.getDrugId());
				pharmacyMedsMedsListForReconcile.add(patientMedicationData);
			
			}
		}
		
		for(PatientMedicationData patiedata:patientMedicationDataList){	
			if(pharmacyMedsMedsListForReconcile.contains(patiedata)){
				System.out.println("::::::::::drug name::"+patiedata.getDrugName());
				pharmacyMedsMedsListForReconcile.remove(patiedata);
			}
		}
		logger.info("after size:::::"+pharmacyMedsMedsListForReconcile.size());
	}
		}catch(Exception e){
			e.printStackTrace();
		}
			
	}		
	private List<PharmacyDetail>pharmacyDetailList=new ArrayList<PharmacyDetail>();


	/*
	 * used in  overViewFilter.jsf 
	 * update pharmacy history...from reconcile
	 * @author:Gopal Krishna jha
	 */
	public void updatePharmacyHistory() throws Exception
	{
		logger.info("updatePharmacyHistory:::::::::::on Reconsile test :::::::");
		
		int timePeriod;
		if(timeFrameForReconcile==null)
			timePeriod=12;
		else if(timeFrameForReconcile.equals(""))
			timePeriod=12;
		else 
			timePeriod=Integer.parseInt(timeFrameForReconcile);
		logger.info("in update pharmacy history time period "+timePeriod);
		//List<PharmacyDetail>pharmacyDetailListForUpdate=new ArrayList<PharmacyDetail>();
		FacesContext context = FacesContext	.getCurrentInstance();
	//	NcUpdate1WSBean update1ServiceClient=(NcUpdate1WSBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"update1ServiceClient");
	//	int timePeriod=3;
	//	List<DrugHistoryDetail>PatientDrugHistoryDetailListByWebservices=new ArrayList<DrugHistoryDetail>();

		UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");
		/*PatientDrugHistoryDetailListByWebservices=update1ServiceClient.convertPBMDrugHistoryXMLToSaxParser(timePeriod, userManageBean.getProviderLocation(),userManageBean.getRoleSecurity());*/ //Commented By Anjani
		userManageBean.callPatientPbmDrugHistoryDataPullingOnReconsile(timePeriod);
		pharmacyMedsMedsListForReconcile=new ArrayList<PatientMedicationData>();
		goToPharmacyHistory();
		logger.info("end upload from reconcile:::"+pharmacyMedsMedsListForReconcile.size());

		
	}
	public List<PatientMedicationData> getPharmacyMedsMedsListForReconcile() {
		return pharmacyMedsMedsListForReconcile;
	}

	public void setPharmacyMedsMedsListForReconcile(
			List<PatientMedicationData> pharmacyMedsMedsListForReconcile) {
		this.pharmacyMedsMedsListForReconcile = pharmacyMedsMedsListForReconcile;
	}

	public CalculateCreatimineClearance getCalculateCreatimineClearance() {
		return calculateCreatimineClearance;
	}

	public void setCalculateCreatimineClearance(
			CalculateCreatimineClearance calculateCreatimineClearance) {
		this.calculateCreatimineClearance = calculateCreatimineClearance;
	}


	/*public List<String> getLabFrequencyListForFondaParinux() {
		if(labFrequencyListForFondaParinux.isEmpty())
		{
			labFrequencyListForFondaParinux.add("1 Month");
			labFrequencyListForFondaParinux.add("2 Month");
			labFrequencyListForFondaParinux.add("3 Month");

		}
		return labFrequencyListForFondaParinux;
	}

	public void setLabFrequencyListForFondaParinux(
			List<String> labFrequencyListForFondaParinux) {
		this.labFrequencyListForFondaParinux = labFrequencyListForFondaParinux;
	}
*/

	public List<String> getMedicineListForApixaBanDoseTest() {
		return medicineListForApixaBanDoseTest;
	}

	public void setMedicineListForApixaBanDoseTest(
			List<String> medicineListForApixaBanDoseTest) {
		this.medicineListForApixaBanDoseTest = medicineListForApixaBanDoseTest;
	}

	public List<String> getMedicineListForApixaBanDoseTest2() {
		return medicineListForApixaBanDoseTest2;
	}

	public void setMedicineListForApixaBanDoseTest2(
			List<String> medicineListForApixaBanDoseTest2) {
		this.medicineListForApixaBanDoseTest2 = medicineListForApixaBanDoseTest2;
	}

	public List<String> getMedicineListForApixaBanDoseTest3() {
		return medicineListForApixaBanDoseTest3;
	}

	public void setMedicineListForApixaBanDoseTest3(
			List<String> medicineListForApixaBanDoseTest3) {
		this.medicineListForApixaBanDoseTest3 = medicineListForApixaBanDoseTest3;
	}
	public String getSubDiagnosisDetail() {
		return subDiagnosisDetail;
	}

	public void setSubDiagnosisDetail(String subDiagnosisDetail) {
		this.subDiagnosisDetail = subDiagnosisDetail;
	}

	public List<String> getlMWHFrequencyList() {
		if(lMWHFrequencyList.isEmpty())
		{
			lMWHFrequencyList.add("Baseline");
			lMWHFrequencyList.add("3 Days");
			lMWHFrequencyList.add("5 Days");
			lMWHFrequencyList.add("2 Weeks");
			lMWHFrequencyList.add("1 Month");
			lMWHFrequencyList.add("2 Month");
			lMWHFrequencyList.add("3 Month");


		}
		return lMWHFrequencyList;
	}

	public void setlMWHFrequencyList(List<String> lMWHFrequencyList) {
		this.lMWHFrequencyList = lMWHFrequencyList;
	}

	public String getExitLocationForEPrescribe() {
		if(exitLocationForEPrescribe.isEmpty())
		{
			HttpServletRequest req = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
			String url = req.getRequestURL().toString();
			url=url.replace("modelcontent", "redirectToPMR");
			//String url="http://localhost:8082/clinakos/page/Doctor/redirectToPMR.jsf";
			System.out.println(url+":::::::::::::::::>>>>>>>>>>>>>>>>>>>>>> url::"+url+"::::");
			exitLocationForEPrescribe=url;
			//exitLocationForEPrescribe=exitLocationForEPrescribe;
		}
		return exitLocationForEPrescribe;
	}

	public List<WSDrug> getWebservicesDrugList() {
		return webservicesDrugList;
	}

	public void setWebservicesDrugList(List<WSDrug> webservicesDrugList) {
		this.webservicesDrugList = webservicesDrugList;
	}

	public boolean isShowMessageForNewAddMeds() {
		return showMessageForNewAddMeds;
	}

	public void setShowMessageForNewAddMeds(boolean showMessageForNewAddMeds) {
		this.showMessageForNewAddMeds = showMessageForNewAddMeds;
	}

	public void setExitLocationForEPrescribe(String exitLocationForEPrescribe) {
		this.exitLocationForEPrescribe = exitLocationForEPrescribe;
	}

	public int getSearchPatientId() {
		searchPatientId=new ContextUtil().getPatientId();
		System.out.println("::::searchPatientId:"+searchPatientId);
		return searchPatientId;
	}

	public void setSearchPatientId(int searchPatientId) {
		this.searchPatientId = searchPatientId;
	}


	public void findDoctorDetails()
	{

		System.out.println("findDoctorDetails::::");

		//UserLoginDetail userLoginDetail=new UserLoginDetail();
		userLoginDetail=patientMedicineService.findDoctorDetail(new ContextUtil().getLoginId());
		System.out.println("drDetails::::::::"+userLoginDetail.getFirstName());
	}

	public UserLoginDetail getUserLoginDetail() {
		return userLoginDetail;
	}

	public void setUserLoginDetail(UserLoginDetail userLoginDetail) {
		this.userLoginDetail = userLoginDetail;
	}

	public DataTable getSearchMedicineDataTableForAnticoag() {
		return searchMedicineDataTableForAnticoag;
	}

	public void setSearchMedicineDataTableForAnticoag(
			DataTable searchMedicineDataTableForAnticoag) {
		this.searchMedicineDataTableForAnticoag = searchMedicineDataTableForAnticoag;
	}

	private List<Integer>careTeamMemberListForReconcile=new ArrayList<Integer>();
	public int getLoggedDoctorId() {
		if(loggedDoctorId==0)
		{
			loggedDoctorId=new ContextUtil().getLoginId();
		}
		return loggedDoctorId;
	}


	/**
	 * @return the formularyDetailWSBean
	 */
	public NcFormulary2WSBean getFormularyDetailWSBean() {
		return formulary2WSBean;
	}

	/**
	 * @param formularyDetailWSBean the formularyDetailWSBean to set
	 */
	public void setFormularyDetailWSBean(NcFormulary2WSBean formulary2WSBean) {
		this.formulary2WSBean = formulary2WSBean;
	}


	public void setLoggedDoctorId(int loggedDoctorId) {
		this.loggedDoctorId = loggedDoctorId;
	}

	public List<Integer> getCareTeamMemberListForReconcile() {
		return careTeamMemberListForReconcile;
	}

	public void setCareTeamMemberListForReconcile(
			List<Integer> careTeamMemberListForReconcile) {
		this.careTeamMemberListForReconcile = careTeamMemberListForReconcile;
	}

	/**
	 * @return the formulary1WsBean
	 */
	public NcFormulary1WSBean getFormulary1WsBean() {
		return formulary1WsBean;
	}

	/**
	 * @param formulary1WsBean the formulary1WsBean to set
	 */
	public void setFormulary1WsBean(NcFormulary1WSBean formulary1WsBean) {
		this.formulary1WsBean = formulary1WsBean;
	}



	//to delete row data with confirmation msg by Anand S Jha
	//int rowIdno;
	//String medicineName;
	public void setidtodeleteMedActionPlan()
	{
		logger.info("cancelMedActionPlan method start:::");
		medActionPlan=new MedActionPlan();
		medActionPlan = (MedActionPlan) getMedicalActionDataTable().getRowData();

	}

	public void deleteMedActionPlan()
	{
		logger.info("Delete method start:::::::::::::");

		//System.out.println(":::::::::::row id:asdel:"+rowIdno+":::"+medicalActionPlanList.size());
		patientMedicineService.deleteParticularMedactionPlan(medActionPlan);
		medActionPlan=new MedActionPlan();
		medicalActionPlanList=null;
		//medicalActionPlanList.remove(rowIdno);
		//System.out.println("::::::::::::::::::::medicalActionPlanList"+medicalActionPlanList.size());
		//rowIdForMEdActionPlan

	}

	//to delete row data with confirmation for allergy
	int rowIdnumber;
	
	/**
	 * Select Allergy Id from for Deleiting/Editing purpose From Datatable 
	 */
	public void setidtodeletePatientAllergy()
	{

		logger.info("setidtodeletePatientAllergy method start:::");

		patientAllergy =new PatientAllergy();

		patientAllergy = (PatientAllergy) getAllergyDataTableBinding().getRowData();

		FacesContext fc = FacesContext.getCurrentInstance();
		Map<String,String> params = fc.getExternalContext().getRequestParameterMap();
		rowIdnumber=Integer.parseInt(params.get("rowIdForAllergyList"));

		System.out.println("::::::::::::::::::::::::>>>"+patientAllergy.getAllergyName());
		//String medName=params.get("medicineName");
		//return params.get("country");
		//patientAllergy.setAllergyId((params.get("allergyId")));
		//patientAllergy.setPatientId(new ContextUtil().getPatientId());
		patientAllergy.setAllergyName(params.get("allergy"));
		//System.out.println(":::::::::::row id:as:"+rowIdnumber+":::"+patientAllergyList.size()+"::::"+patientAllergy.getAllergyId());
		//System.out.println("allergy name:::"+patientAllergy.getAllergy());
		//medicalActionPlanList.remove(rowIdno);
		//rowIdForMEdActionPlan

	}
    /**
     * diagonoses.jsf
     * Delete Selected Patient Allergy Data 
     */
	public void deleteAllergyRow()
	{
		logger.info("Delete method start:::::::::::::");
		allergySize=0;
		System.out.println(":::::::::::row id:asdel:"+rowIdnumber+":::"+patientAllergyList.size());
		patientAllergyList.remove(rowIdnumber);
		System.out.println("::::::::::::::::::::patientAllergyList"+patientAllergyList.size());
		patientMedicineService.deleteAllergyDetails(patientAllergy); // Delete Allergy Data From Patient Allergy 
		patientAllergy=new PatientAllergy();
		FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_INFO, "Allergy Deleted Successfully",  "");  
		FacesContext.getCurrentInstance().addMessage(null, message);  

	}


	public void setidtodeleteCurntAnticoagMed()
	{

		logger.info("cancelCurntAnticoagMed:::::::::::");
		//FacesContext fc = FacesContext.getCurrentInstance();
		//Map<String,String> params = fc.getExternalContext().getRequestParameterMap();
		changePatientMedicineBackUpdata=new PatientMedicationData();
		changePatientMedicineBackUpdata = (PatientMedicationData) getCurrentAnticoagDataTable().getRowData();

		//medicineName=params.get("medicineName");
		//return params.get("country");
		//System.out.println(":::::::::::row id:::::"+medicineName+"::::::::size:::");

	}

	public void deleteCurntAnticoagMed()
	{
		logger.info("deleteCurntAnticoagMed::::::id::"+changePatientMedicineBackUpdata.getId());

		//System.out.println(":::::::::::row id:asdel:"+medicineName+":::"+removeDuplicateModifyMedicationListForPatient.size());

		patientMedicineService.deleteMedicineChanges(changePatientMedicineBackUpdata);
		patientMedicationDataList=null;
		medicalActionPlanList=null;
		currentAntiCoagMedList=new ArrayList<PatientMedicationData>();
		currentAntiplateletMedsList=new ArrayList<PatientMedicationData>();
		//patientMedicineService.saveValueForIntegration(new ContextUtil().getPatientId(), true);
		changePatientMedicineBackUpdata=null;

	}

	public List<PatientMedicationData> getAddedOrChangedMedicationListForPatient() {
		addedOrChangedMedicationListForPatient= new ArrayList<PatientMedicationData>();
		for(PatientMedicationData pat:patientMedicationDataList)
		{
			//if(!(pat.getMedicineStatus().equalsIgnoreCase(DISCONTINUE_MEDS)))
			if(pat.isFlagForVisit())
				addedOrChangedMedicationListForPatient.add(pat);
		}

		return addedOrChangedMedicationListForPatient;
	}

	public void setAddedOrChangedMedicationListForPatient(
			List<PatientMedicationData> addedOrChangedMedicationListForPatient) {
		this.addedOrChangedMedicationListForPatient = addedOrChangedMedicationListForPatient;
	}
	List<WSDrug>doseDetailList=new ArrayList<WSDrug>();



	public List<WSDrug> getDoseDetailList() {
		return doseDetailList;
	}

	public void setDoseDetailList(List<WSDrug> doseDetailList) {
		this.doseDetailList = doseDetailList;
	}

	public List<String> getDurationOfTherapy() {
		if(durationOfTherapy.isEmpty())
		{
			durationOfTherapy.add("3 Weeks");
			durationOfTherapy.add("4 weeks");
			durationOfTherapy.add("3 Months");
			durationOfTherapy.add("4 Months");
			durationOfTherapy.add("5 Months");
			durationOfTherapy.add("6 Months");
			durationOfTherapy.add("1 Year");
			durationOfTherapy.add(CHRONIC);

		}
		return durationOfTherapy;
	}

	public void setDurationOfTherapy(List<String> durationOfTherapy) {
		this.durationOfTherapy = durationOfTherapy;
	}

	public List<String> getInrGoalTargetList() {
		if(inrGoalTargetList.isEmpty())
		{
			inrGoalTargetList.add("2-3");
			inrGoalTargetList.add("2.5-3.5");
			//inrGoalTargetList.add("3");
			//inrGoalTargetList.add("4.5");
			

		}
		return inrGoalTargetList;
	}

	public void setInrGoalTargetList(List<String> inrGoalTargetList) {
		this.inrGoalTargetList = inrGoalTargetList;
	}

	/**
	 * @return the drugDetailWSBean
	 */
	public NcDrugDetailWSBean getDrugDetailWSBean() {
		return drugDetailWSBean;
	}

	/**
	 * @param drugDetailWSBean the drugDetailWSBean to set
	 */
	public void setDrugDetailWSBean(NcDrugDetailWSBean drugDetailWSBean) {
		this.drugDetailWSBean = drugDetailWSBean;
	}

	/**
	 * Get the value of drug drug Interaction 
	 * @return the drugInteractionList
	 * @throws Exception 
	 */
	public List<DrugDrugInteractionData> getDrugInteractionList() throws Exception {
		List<DrugDrugInteractionData>drugDrugInteractionDataList=new ArrayList<DrugDrugInteractionData>();
		List<DrugInteraction>drugInteractionListData=new ArrayList<DrugInteraction>();
		if(drugInteractionList==null){
			drugInteractionList=new ArrayList<DrugDrugInteractionData>();
			//drugInteractionListData=new ArrayList<DrugInteraction>();
			FacesContext context = FacesContext	.getCurrentInstance();
			UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");
			//userManageBean.getProviderLocation();
			//providerLocation

			drugInteractionListData=drugDetailWSBean.callDrugDrugInteraction(getPatientMedicationDataList(),userManageBean.getProviderLocation(),selectedDrugId);
			logger.info("{--}{--}{--}{--}{--}Start Integration to Database{Save drug drug interaction to database}{--}{--}{--}{--}{--}");
			patientMedicineService.integrateDrugInteractionToDatabase(drugInteractionListData);
			logger.info("{--}{--}{--}{--}{--}end Integration to Database{Save drug drug interaction to database}{--}{--}{--}{--}{--}");
			List<PatientDrugMapping>uniquePatientDrugRecordsList=patientMedicineService.getAllUniqueDrugRecords();
			//drugInteractionListData=new ArrayList<DrugInteraction>();
			for(PatientDrugMapping patientDrugMappingObj:uniquePatientDrugRecordsList){
				/*DrugInteraction drugInteraction=new DrugInteraction();
			drugInteraction.setDrug1ID(patientDrugMappingObj.getMasterDrugDrugInteractionId().getDrug1ID());
			drugInteraction.setDrug2ID(patientDrugMappingObj.getMasterDrugDrugInteractionId().getDrug2ID());
			drugInteraction.setDrug1(patientDrugMappingObj.getMasterDrugDrugInteractionId().getDrug1Name());
			drugInteraction.setDrug2(patientDrugMappingObj.getMasterDrugDrugInteractionId().getDrug2Name());
			drugInteraction.setClinicalEffects(patientDrugMappingObj.getMasterDrugDrugInteractionId().getClinicalEffects());
			drugInteraction.setSeverityLevel(patientDrugMappingObj.getMasterDrugDrugInteractionId().getSeverityLevels());
			drugInteractionList.add(drugInteraction);*/

				DrugDrugInteractionData drugDrugInteractionData=new DrugDrugInteractionData();
				drugDrugInteractionData.setStatus(patientDrugMappingObj.isStatus());
				drugDrugInteractionData.setId(patientDrugMappingObj.getId());
				drugDrugInteractionData.setMasterDrugDbId(patientDrugMappingObj.getMasterDrugDrugInteractionId().getId());
				drugDrugInteractionData.setDrug1ID(patientDrugMappingObj.getMasterDrugDrugInteractionId().getDrug1ID());
				drugDrugInteractionData.setDrug2ID(patientDrugMappingObj.getMasterDrugDrugInteractionId().getDrug2ID());
				drugDrugInteractionData.setDrug1(patientDrugMappingObj.getMasterDrugDrugInteractionId().getDrug1Name());
				drugDrugInteractionData.setDrug2(patientDrugMappingObj.getMasterDrugDrugInteractionId().getDrug2Name());
				drugDrugInteractionData.setClinicalEffects(patientDrugMappingObj.getMasterDrugDrugInteractionId().getClinicalEffects());
				if(StringUtils.contains(StringUtils.lowerCase(patientDrugMappingObj.getMasterDrugDrugInteractionId().getSeverityLevels()), HIGH_FILTER)){
					drugDrugInteractionData.setSeverityLevel(HIGH_FILTER);
				}else if(StringUtils.contains(StringUtils.lowerCase(patientDrugMappingObj.getMasterDrugDrugInteractionId().getSeverityLevels()), HIGH_FILTER_CONTRAINDICATED)){
					drugDrugInteractionData.setSeverityLevel(HIGH_FILTER_CONTRAINDICATED);
				}else if(StringUtils.contains(StringUtils.lowerCase(patientDrugMappingObj.getMasterDrugDrugInteractionId().getSeverityLevels()), MEDIUM_FILTER)){
					drugDrugInteractionData.setSeverityLevel(MEDIUM_FILTER);
				}else if(StringUtils.contains(StringUtils.lowerCase(patientDrugMappingObj.getMasterDrugDrugInteractionId().getSeverityLevels()), LOW_FILTER)){
					drugDrugInteractionData.setSeverityLevel(LOW_FILTER);
				}else{
					//do nothing
				}
				drugDrugInteractionData.setPatientManagement(patientDrugMappingObj.getMasterDrugDrugInteractionId().getPatientManagement());
				drugInteractionList.add(drugDrugInteractionData);
			}
			drugInteractionListFilterCopyList=drugInteractionList;
		}
		return drugInteractionList;
	}

	/**
	 * @param drugInteractionList the drugInteractionList to set
	 */
	public void setDrugInteractionList(List<DrugDrugInteractionData> drugInteractionList) {
		this.drugInteractionList = drugInteractionList;
	}

	/**
	 * @return the alternativeFormularyDetailMap
	 */
	public Map<String, List<FormularyDetail>> getAlternativeFormularyDetailMap() {
		if(alternativeFormularyDetailMap==null){
			alternativeFormularyDetailMap=new HashMap<String, List<FormularyDetail>>();
		}
		return alternativeFormularyDetailMap;
	}

	/**
	 * @param alternativeFormularyDetailMap the alternativeFormularyDetailMap to set
	 */
	public void setAlternativeFormularyDetailMap(
			Map<String, List<FormularyDetail>> alternativeFormularyDetailMap) {
		this.alternativeFormularyDetailMap = alternativeFormularyDetailMap;
	}

	/**
	 * @return the alternativeDrugDetailListForOptimizedDrug
	 */
	public List<FormularyDetail> getAlternativeDrugDetailListForOptimizedDrug() {
		if(alternativeDrugDetailListForOptimizedDrug==null){
			alternativeDrugDetailListForOptimizedDrug=new ArrayList<FormularyDetail>();
		}
		return alternativeDrugDetailListForOptimizedDrug;
	}

	/**
	 * @param alternativeDrugDetailListForOptimizedDrug the alternativeDrugDetailListForOptimizedDrug to set
	 */
	public void setAlternativeDrugDetailListForOptimizedDrug(
			List<FormularyDetail> alternativeDrugDetailListForOptimizedDrug) {
		this.alternativeDrugDetailListForOptimizedDrug = alternativeDrugDetailListForOptimizedDrug;
	}

	/**
	 * @return the showAlternativeDrug
	 */
	public boolean isShowAlternativeDrug() {
		return showAlternativeDrug;
	}

	/**
	 * @param showAlternativeDrug the showAlternativeDrug to set
	 */
	public void setShowAlternativeDrug(boolean showAlternativeDrug) {
		this.showAlternativeDrug = showAlternativeDrug;
	}

	/**
	 * diagonoses.jsf
	 * Search Master Allergy Data for add Allergy 
	 */
	public void searchMasterAllergyData(){
		//AllergyMaster allergyMaster = new AllergyMaster();
		System.out.println("searchMasterAllergyData::::::"+getAllergyNameForAddingNew());
		if(allergyNameForAddingNew == null ){
			allergyNameForAddingNew ="";
		}
		allergyMasterList=new ArrayList<AllergyMaster>();
		allergyMasterList=patientMedicineService.findMasterAllergyData(getAllergyNameForAddingNew()); // Find allergy From Master allergy Table based on request 
		for(AllergyMaster alMast:allergyMasterList){
			System.out.println("Allergy NameallergyMasterList:::::: "+alMast.getAllergyName());
		}
		//	allergyNameForAddingNew = new String();
		//RequestContext.getCurrentInstance().execute("masterAllergy.show();");
		//setAllergyNameForAddingNew(null);
	}



	/**
	 * @return the allergyMasterList
	 */
	public List<AllergyMaster> getAllergyMasterList() {
		if(allergyMasterList==null){
			allergyMasterList=new ArrayList<AllergyMaster>();
		}
		return allergyMasterList;
	}

	/**
	 * @param allergyMasterList the allergyMasterList to set
	 */
	public void setAllergyMasterList(List<AllergyMaster> allergyMasterList) {
		this.allergyMasterList = allergyMasterList;
	}

	/**
	 * Get All Patient Allergy Detail  List 
	 * @return the patientAllergyList
	 */
	public List<PatientAllergy> getPatientAllergyList() {
		if(patientAllergyList==null){
			patientAllergyList=new ArrayList<PatientAllergy>();

			patientAllergyList=patientMedicineService.getAllPatientAllergy(new ContextUtil().getPatientId()); // Patient Allergy Detail List Based on Patient Id 
			
			
			
		}
		return patientAllergyList;
	}

	/**
	 * @param patientAllergyList the patientAllergyList to set
	 */
	public void setPatientAllergyList(List<PatientAllergy> patientAllergyList) {
		this.patientAllergyList = patientAllergyList;
	}

	/**
	 * @return the newCropPatientAllergy
	 */
	/*public String getNewCropPatientAllergy() {
		newCropPatientAllergy="";
		for(PatientAllergy patAllergy:getPatientAllergyList()){


			System.out.println("patAllergy.getAllergySeverity():::::"+patAllergy.getAllergySeverity());
			String onsetdate="";
			if(!(patAllergy.getOnSetDate()==null))
			{
				onsetdate=new DateUtil().convertDateFormatUsingFormat(patAllergy.getOnSetDate(),DATE_PATTERN);
			}

			if(!(patAllergy.getAllergySeverity().equals("")))
			{
			if(patAllergy.getCompositeAllergyId()==0)
			{

				newCropPatientAllergy=newCropPatientAllergy+
						"<PatientAllergies>"+
					//	 "<allergyID>"+patAllergy.getAllergySource()+":"+patAllergy.getAllergytype()+":"+patAllergy.getAlergyConceptId()+"</allergyID>"+	
					       "<allergyID>"+patAllergy.getAllergySource()+":"+patAllergy.getAlergyConceptId()+":"+patAllergy.getAllergyConceptTypeId()+"</allergyID>"+
					      "<allergyTypeID>"+"Y"+"</allergyTypeID>";

				if(!(patAllergy.getAllergySeverity().equals("")))
					newCropPatientAllergy=newCropPatientAllergy+
								"<allergySeverityTypeID>"+patAllergy.getAllergySeverity()+"</allergySeverityTypeID>";

				newCropPatientAllergy=newCropPatientAllergy+
					      "<allergyComment>"+patAllergy.getAllergyNotes()+"</allergyComment>"+
					    "<onsetDate>" +onsetdate+"</onsetDate>"+
					    "</PatientAllergies>";
			}
			else
			{
				System.out.println(":::::::::::::::::!!!!!!PatientAllergies!!!!!!!!!!!"+patAllergy.getAllergyName());
				newCropPatientAllergy=newCropPatientAllergy+
			"<PatientAllergies>"+
			 "<allergyID>"+patAllergy.getCompositeAllergyId()+"</allergyID>"+	
		      "<allergyTypeID>"+"FDB"+"</allergyTypeID>";

				if(!(patAllergy.getAllergySeverity().equals("")))
					newCropPatientAllergy=newCropPatientAllergy+
		      "<allergySeverityTypeID>"+patAllergy.getAllergySeverity()+"</allergySeverityTypeID>";

	newCropPatientAllergy=newCropPatientAllergy+
		      "<allergyComment>"+patAllergy.getAllergyNotes()+"</allergyComment>"+
		      "<onsetDate>" +onsetdate+"</onsetDate>"+
		    "</PatientAllergies>";
			}
		} 
		//System.out.println(":::::::::::::::::::newCropPatientAllergy::::"+newCropPatientAllergy);
		return newCropPatientAllergy.trim();
	}

	 *//**
	 * @param newCropPatientAllergy the newCropPatientAllergy to set
	 *//*
	public void setNewCropPatientAllergy(String newCropPatientAllergy) {
		this.newCropPatientAllergy = newCropPatientAllergy;
	}
	  */


	public List<RouteDetails> getRouteDetailsList() {
		if(routeDetailsList.isEmpty())
		{
			routeDetailsList = new ArrayList<RouteDetails>();
			routeDetailsList=patientMedicineService.findRouteNameDetailList();
			//System.out.println("findRouteDetailsList:::::::"+routeDetailsList.size());


		}

		return routeDetailsList;
	}

	public void setRouteDetailsList(List<RouteDetails> routeDetailsList) {
		this.routeDetailsList = routeDetailsList;
	}

	public List<UnitDetails> getUnitDetailsList() {
		if(unitDetailsList.isEmpty())
		{
			unitDetailsList = new ArrayList<UnitDetails>();
			unitDetailsList=patientMedicineService.findUnitNameDetailsList();
			System.out.println("findUnitNameDetailsList::::::"+unitDetailsList.size());

		}
		return unitDetailsList;
	}

	public void setUnitDetailsList(List<UnitDetails> unitDetailsList) {
		this.unitDetailsList = unitDetailsList;
	}

	public List<DosageFrom> getDosageDetailsList() {
		if(dosageDetailsList.isEmpty())
		{
			dosageDetailsList = new ArrayList<DosageFrom>();
			dosageDetailsList=patientMedicineService.findDosageNameDetailsList();
			System.out.println("findDosageDetailsList::::"+dosageDetailsList.size());
		}
		return dosageDetailsList;
	}

	public void setDosageDetailsList(List<DosageFrom> dosageDetailsList) {
		this.dosageDetailsList = dosageDetailsList;
	}

   /**
    * diagonoses.jsf
    * Set All Patient Allergy detail in Patient Allergy Object 
    */
	public void searchPatientAllergyDetail()
	{
		logger.info("getAllergyMasterDatatable::::::::::::::::::::::");
		//AllergyMaster allergyMaster=(AllergyMaster)getAllergyMasterDatatable().getRowData();

		//System.out.println(":::::::::::::::: meds::"+allergyMaster.getAllergyName()+"id:::::::::::"+allergyMaster.getAllergyConceptId());
		//patientAllergy.setAllergy(allergyMaster.getAllergyName());
		//patientAllergy.setPatientId(new ContextUtil().getPatientId());
		//patientAllergy.setAllergyId(allergyMaster.getCompositeAllergyId());

		System.out.println(getAllergyNameForAddingNew()+":::savePatientAllergy::::::::"+patientAllergy.getAllergyName()+"dsf"+patientAllergy.getAllergyName()+"fasdfsdf"+patientAllergy.getPatientId());

		boolean check=false;
		for(PatientAllergy patAllergy:patientAllergyList)
		{
			if(patAllergy.getAllergyName().equals(getAllergyNameForAddingNew()))
				check=true;

			System.out.println("check:::"+check);
		}

		if(!(allergyNameForAddingNew.isEmpty())){	
			logger.info("allergyNameForAddingNew:::::::::::"+allergyNameForAddingNew);

			if (checkAllergyValidName) {
				System.out.println("checkAllergyValidName::"+checkAllergyValidName);

				if(!check)
				{

					System.out.println("check inside if block of::"+check);
					//allergyMaster
					patientAllergy.setPatientId(new ContextUtil().getPatientId());
					//patientAllergy.setAllergytype(allergytype);
					patientAllergy.setAllergyName(getAllergyNameForAddingNew());
					//patientAllergy.setal
					//patientAllergy.setAllergySeverity(allergySeverity);

					patientAllergy.setAllergySource(allergyMaster.getAllergySourceId());
					patientAllergy.setCompositeAllergyId(Integer.parseInt(allergyMaster.getCompositeAllergyId()));
					patientAllergy.setAlergyConceptId(Integer.parseInt(allergyMaster.getAllergyConceptId()));
					patientAllergy.setAllergyConceptType(allergyMaster.getConceptType());
					patientAllergy.setStartDate(new DateUtil().getTodayDate());
					patientAllergy.setModifyDate(new DateUtil().getTodayDate());
					patientAllergy.setDateTimeForcompareAllergy(new DateUtil().convertDateFormatUsingFormat(new DateUtil().getTodayDate(),"yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
					logger.info("setDateTimeForcompareAllergy :::"+patientAllergy.getDateTimeForcompareAllergy());
					/*if(!(allergyMaster.getAllergyType()==null))
					{
						patientAllergy.setAllergytype(Integer.parseInt(allergyMaster.getAllergyType()));
						System.out.println("patientAllergy:::::"+patientAllergy.getAllergytype());
					}*/

					//patientAllergy.setOnSetDate(new Date());
					//System.out.println("date::::"+patientAllergy.getOnSetDate());

					System.out.println("::::::::::::::::><><><>> notes::"+patientAllergy.getAllergyNotes());

					if(!(patientAllergy.getAllergyName().equals("")))
					{
						patientMedicineService.savePatientAllergy(patientAllergy); // Save  Patient Allergy 
						patientAllergyList.add(patientAllergy);

					}

					//patientAllergy=new PatientAllergy();
					//patientAllergyList=null;

					FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO,"Allergy Saved Successfully", ""));
					 FacesContext.getCurrentInstance().getExternalContext().getFlash().setKeepMessages(true);
					//patientMedicineService.saveValueForIntegration(new ContextUtil().getPatientId(), true);
				}
				else
				{
					FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO,"Data Already There", "")); 
					FacesContext.getCurrentInstance().getExternalContext().getFlash().setKeepMessages(true);
				}
			}
			else {
				System.out.println("inside else checkAllergyValidName:"+checkAllergyValidName);
				FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO,"Use Valid Allergy Name", ""));
				 FacesContext.getCurrentInstance().getExternalContext().getFlash().setKeepMessages(true);
			}
		}

		// for validation error on add allergy dialog by vinod
		else{
			RequestContext context = RequestContext.getCurrentInstance();  
			context.addCallbackParam("validationFailed", false);  
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Please Enter Allergy Name", ""));
		}
		setCheckAllergyValidName(false);
		patientAllergy=new PatientAllergy();
		setAllergyNameForAddingNew(null);
		drugAllergyDetailList=null;
		drugAllergyCopyList=null;
	}


    /**
     * diagonoses.jsf
     * select Allergy name After Search From master Allergy and set allery name for saving 
     */
	public void findAllergyName()
	{
		logger.info("findAllergyName::::::::::::::::::::::");
		allergyMaster=new AllergyMaster();
		allergyMaster=(AllergyMaster)getAllergyMasterDatatable().getRowData(); // Get Allergy row data 
		setAllergyNameForAddingNew(allergyMaster.getAllergyName()); // Set Allergy Name 
		System.out.println(patientAllergy.getAllergyName()+"::::selected allergy name::"+getAllergyNameForAddingNew()+"::allergy from master:::"+allergyMaster.getAllergyName());
		setCheckAllergyValidName(true);
		/*patientAllergy.setPatientId(new ContextUtil().getPatientId());
		//patientAllergy.setAllergytype(allergytype)
		patientAllergy.setAllergyName(allergyMaster.getAllergyName());
		patientAllergy.setal


		patientAllergy.setAllergy(allergyMaster.getAllergyName());

		patientAllergy.setAllergyId(allergyMaster.getCompositeAllergyId());*/

		RequestContext.getCurrentInstance().execute("masterAllergy.hide()");

		RequestContext.getCurrentInstance().execute("masterAllergy.show()");
		//return null;

	}

	public DataTable getAllergyMasterDatatable() {
		return allergyMasterDatatable;
	}

	public void setAllergyMasterDatatable(DataTable allergyMasterDatatable) {
		this.allergyMasterDatatable = allergyMasterDatatable;
	}

	public AllergyMaster getAllergyMaster() {
		return allergyMaster;
	}

	public void setAllergyMaster(AllergyMaster allergyMaster) {
		this.allergyMaster = allergyMaster;
	}

	public PatientAllergy getPatientAllergy() {
		return patientAllergy;
	}

	public void setPatientAllergy(PatientAllergy patientAllergy) {
		this.patientAllergy = patientAllergy;
	}

	/*
	 * @author: Gopal Krishna Jha
	 */
	public List<String> getConfirmDayListForWarfarinmaintenance() {
		if(confirmDayListForWarfarinmaintenance.isEmpty())
		{
			confirmDayListForWarfarinmaintenance.add("1 Day");
			confirmDayListForWarfarinmaintenance.add("2 Day");
			confirmDayListForWarfarinmaintenance.add("3 Day");
			confirmDayListForWarfarinmaintenance.add("4 Day");
			confirmDayListForWarfarinmaintenance.add("5 Day");
			confirmDayListForWarfarinmaintenance.add("6 Day");
			confirmDayListForWarfarinmaintenance.add("7 Day");
			confirmDayListForWarfarinmaintenance.add("More than 7 Day");

		}
		return confirmDayListForWarfarinmaintenance;
	}

	public void setConfirmDayListForWarfarinmaintenance(
			List<String> confirmDayListForWarfarinmaintenance) {
		this.confirmDayListForWarfarinmaintenance = confirmDayListForWarfarinmaintenance;
	}
	/*
	 * find next lab date for warfarin Maintenance..
	 * @author: Gopal Krishna Jha
	 */
	public void findNextlabDateforTakeAction()
	{
		
		int noOFdays=findNoOfdays(medActionPlan.getLabFrequency());
		logger.info(noOFdays+"findNextlabDateforTakeAction"+medActionPlan.getLabFrequency());
		medActionPlan.setNextLabDate(new DateUtil().AddDate(new DateUtil().getTodayDate(), noOFdays));
		System.out.println(">>>>>>>>>>>>>>>"+medActionPlan.getNextLabDate());
	}

	/*
	 * @author Gopal Krishna Jha
	 */
	public void findNextlabDate()
	{

		logger.info("findNextlabDate method"+labDetailList.size());


		for(LabDetail lab:labDetailList)
		{
			if(lab.isSelected())
			{
				boolean check=patientMedicationData.getStartDate().after(new DateUtil().getTodayDate());
				System.out.println(patientMedicationData.getStartDate()+":::::::::check::"+check);
				Date sendingDate;
				if(check)
					sendingDate=patientMedicationData.getStartDate();
				else
					sendingDate=new DateUtil().getTodayDate();
				int noOFdays=findNoOfdays(lab.getLabfrequencyDetail());
				System.out.println(":::::::"+noOFdays);
				medActionPlan.setNextLabDate(new DateUtil().AddDate(sendingDate, noOFdays));
				System.out.println(">>>>>>>>>>>>>>>"+medActionPlan.getNextLabDate());
			}
		}
	}
	public int getAllergySize() {
		if(allergySize==0)
		{
			if(patientAllergyList.size()<=4)
				allergySize=patientAllergyList.size();

			else
				allergySize=4;	
		}
		return allergySize;
	}

	public void setAllergySize(int allergySize) {
		this.allergySize = allergySize;
	}
	private int allergySize=0;



	/**
	 * @return the dpOptimizerDrugList
	 */
	public List<FormularyDetail> getDpOptimizerDrugList() {
		if(dpOptimizerDrugList==null){
			dpOptimizerDrugList=new ArrayList<FormularyDetail>();
		}
		return dpOptimizerDrugList;
	}

	/**
	 * @param dpOptimizerDrugList the dpOptimizerDrugList to set
	 */
	public void setDpOptimizerDrugList(List<FormularyDetail> dpOptimizerDrugList) {
		this.dpOptimizerDrugList = dpOptimizerDrugList;
	}

	/**
	 * @return the ncUpdate1WSBean
	 */
	public NcUpdate1WSBean getNcUpdate1WSBean() {
		return ncUpdate1WSBean;
	}

	/**
	 * @param ncUpdate1WSBean the ncUpdate1WSBean to set
	 */
	public void setNcUpdate1WSBean(NcUpdate1WSBean ncUpdate1WSBean) {
		this.ncUpdate1WSBean = ncUpdate1WSBean;
	}

	/**
	 * @return the userService
	 */
	public IUserService getUserService() {
		return userService;
	}

	/**
	 * @param userService the userService to set
	 */
	public void setUserService(IUserService userService) {
		this.userService = userService;
	}

	public List<MedUnitSummary> getUnitSummaryList() {

		if(unitSummaryList.isEmpty())
		{
			unitSummaryList=patientMedicineService.findUnitSummaryList();
		}
		return unitSummaryList;
	}

	public void setUnitSummaryList(List<MedUnitSummary> unitSummaryList) {
		this.unitSummaryList = unitSummaryList;
	}

	/**
	 * @return the medicinename
	 */
	public String getMedicinename() {
		return medicinename;
	}

	/**
	 * @param medicinename the medicinename to set
	 */
	public void setMedicinename(String medicinename) {
		this.medicinename = medicinename;
	}


	public String getTimeFrameForReconcile() {
		return timeFrameForReconcile;
	}

	public void setTimeFrameForReconcile(String timeFrameForReconcile) {
		System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"+timeFrameForReconcile);
		this.timeFrameForReconcile = timeFrameForReconcile;
	}
  /**
   * used in overViewFilter.jsf 
   * Time Frame Data For Reconcile 
   * @return List of Time Frame data 
   */
	public List<String> getTimeFrameListForReconcile() {
		if(timeFrameListForReconcile.isEmpty())
		{
			timeFrameListForReconcile.add("3 Months");
			timeFrameListForReconcile.add("6 Months");
			timeFrameListForReconcile.add("9 Months");
			timeFrameListForReconcile.add("12 Months");
		}
		return timeFrameListForReconcile;
	}

	public void setTimeFrameListForReconcile(
			List<String> timeFrameListForReconcile) {
		this.timeFrameListForReconcile = timeFrameListForReconcile;
	}

	public List<LabDetail> getLabDetailList() {
		return labDetailList;
	}

	public void setLabDetailList(List<LabDetail> labDetailList) {
		this.labDetailList = labDetailList;
	}

	/**
	 * @return the allergyDescriptionForEdit
	 */
	public String getAllergyDescriptionForEdit() {
		return allergyDescriptionForEdit;
	}

	/**
	 * @param allergyDescriptionForEdit the allergyDescriptionForEdit to set
	 */
	public void setAllergyDescriptionForEdit(String allergyDescriptionForEdit) {
		this.allergyDescriptionForEdit = allergyDescriptionForEdit;
	}

	/*
	 * ************************* method to edit allergy
	 * @author saurabh
	 */

	public int getShowQuestionarieFormaintenance() {
		return showQuestionarieFormaintenance;
	}

	public void setShowQuestionarieFormaintenance(int showQuestionarieFormaintenance) {
		this.showQuestionarieFormaintenance = showQuestionarieFormaintenance;
	}
 /**
  * Edit Allergy Based on Selected Allergy 
  * 
  */
	
	public void editAllergyRow()
	{
		logger.info("edit method start:::::::::::::"+getAllergyDescriptionForEdit());
		patientMedicineService.editAllergyDetails(patientAllergy,getAllergyDescriptionForEdit()); // Allergy Data Edit Based on Selection 
		//------To clean patientAllergy List
		setPatientAllergyList(null);
		patientAllergy=new PatientAllergy();
		setAllergyDescriptionForEdit(null);
		//patientAllergy.setAllergy(null);

		FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_INFO, "Allergy Edited Successfully",  "");  

		FacesContext.getCurrentInstance().addMessage(null, message);  
	}
	public List<PharmacyDetail> getPharmacyDetailList() {
		/*if(pharmacyDetailList.isEmpty())
		{
			//pharmacyDetailList=patientMedicineService.findPharmacyDetail
		}*/

		return pharmacyDetailList;
	}

	public void setPharmacyDetailList(List<PharmacyDetail> pharmacyDetailList) {
		this.pharmacyDetailList = pharmacyDetailList;
	}

	/*
	 * change weight unit accordig to user
	 * @author:Gopal Krishna jha
	 */
	public void changeWeightUnit()	
	{
		logger.info(calculateCreatimineClearance.getSimpleWeight()+"::changeWeightUnit:::"+calculateCreatimineClearance.getFindWeightUnit());
		
		
		
		if(calculateCreatimineClearance.getFindWeightUnit().equalsIgnoreCase("Kg")){
			//calculateCreatimineClearance.setWeight(calculateCreatimineClearance.getSimpleWeight());
			double massLB = calculateCreatimineClearance.getSimpleWeight() * 2.2046;
			double massLbRound = Math.round(massLB * 100.0) / 100.0;
			calculateCreatimineClearance.setWeight(massLbRound);
			calculateCreatimineClearance.setWeightUnit("(Lbs)");
		}
		else
		{
			double massLB = calculateCreatimineClearance.getSimpleWeight() / 2.2046;
			double massLbRound = Math.round(massLB * 100.0) / 100.0;
			calculateCreatimineClearance.setWeight(massLbRound);
			calculateCreatimineClearance.setWeightUnit("(Kg)");

		}
		System.out.println(">>>>>>>>>>><<<<<<<<<<<<<<<<"+calculateCreatimineClearance.getWeight());

	}
	
	/*
	 * clean the object in allergy pop up 
	 * @ author sanket singh
	 * 
	 */
	public void searchAllergyRefresh()
	{
		logger.info("refreshing the allerylist start in bean::::");



		//PatientAllergy 	patientAllergy=new PatientAllergy();
		// patientAllergyList=null;

		allergyMasterList=new ArrayList<AllergyMaster>();

		//AllergyMaster pat=new AllergyMaster();
		patientAllergy=new PatientAllergy();

		//allergyMasterList=null;
		//logger.info("value update in pop up");

		RequestContext.getCurrentInstance().execute("masterAllergy.show();");
	}

	public String getShowPatientNotes() {
		return showPatientNotes;
	}

	public void setShowPatientNotes(String showPatientNotes) {
		this.showPatientNotes = showPatientNotes;
	}

	public String getShowPatientEducation() {
		return showPatientEducation;
	}

	public void setShowPatientEducation(String showPatientEducation) {
		this.showPatientEducation = showPatientEducation;
	}

	/*
	 * calculate total no of dispence according to change unit, regimen and days supply
	 * @author:Gopal Krishna jha
	 */
	public void calculateTotalDispence()
	{
		logger.info(patientMedicationData.getDirections()+"LLLLLL::::"+medActionPlan.getRegimen()+":::::::::::::calculateTotalDispence:::"+patientMedicationData.getUnit()+"::::::regimen"+medActionPlan.getRegimen()
				+"111::::"+patientMedicationData.getDaySupply());

		double noOfUnit=0,noOfregimen=0,calculation=0;
		//System.out.println("::vgetDaySupply::::"+patientMedicationData.getDaySupply().isEmpty());
		//int daySupply=0;
		noOfUnit=findNoOfUnitAccordingToChange(patientMedicationData.getUnit());
		String regimen;
		if(medActionPlan.getRegimen()==null)
			regimen=patientMedicationData.getDirections();
		else
			regimen=medActionPlan.getRegimen();
		noOfregimen=findNoOfRegimenAccordingToChange(regimen);
		String daySupply;
		if(patientMedicationData.getDaySupply()==null )
			daySupply="30";

		else if(patientMedicationData.getDaySupply().isEmpty())
			daySupply="30";
		else

			daySupply=patientMedicationData.getDaySupply();

		//daySupply="30 Days";
		//int noOFdays=findNoOfdays(daySupply);
		int noOFdays=Integer.parseInt(daySupply);
		System.out.println(noOFdays+":::::::::::::noOfUnit:::"+noOfUnit+":::::noOfregimen+"+noOfregimen);
		calculation=noOfUnit*noOFdays*noOfregimen;
		System.out.println(":::::::::::::calculation::"+calculation);
		int calculationInINt=(int) calculation;
		if(calculationInINt==0)
			patientMedicationData.setQuantity("1");	
		else
			patientMedicationData.setQuantity(String.valueOf(calculationInINt));


	}


	/* 
	 * find the no of regimen according to change no of regimen
	 * @author:Gopal Krishna jha
	 */

	private double findNoOfRegimenAccordingToChange(String regimen) {

		double frequencyTypeId=0;
		getSigCodeList();
		if(regimen==null)
			regimen="DAILY";
		else
		{
			for(SigCode sigCode:sigCodeList)
			{
				if(sigCode.getSigCode().equalsIgnoreCase(regimen))
					frequencyTypeId=sigCode.getSigCodeValue();

				//System.out.println("regimen:::::::::"+frequencyTypeId);
			}
		}

		return frequencyTypeId;

	}

	/*
	 * find the no of unit according to change no of unit
	 * @author:Gopal Krishna jha
	 */
	private double findNoOfUnitAccordingToChange(String unit) {
		double result=0;
		if(unit==null || unit.equalsIgnoreCase("Select") ||unit.equalsIgnoreCase("Add'l Sig"))
			unit="1";
		else{

			if(unit.length()>2 && (!unit.contains("/")))
			{
				unit=unit.substring(unit.indexOf('-')+1, unit.length());

			}
			if((unit.contains("/")))
			{
				unit=unit.substring(0, unit.indexOf('/'));
			}
		}	
		System.out.println("unit*************************************"+unit);
		result=Double.parseDouble(unit);

		return result;
	}

	/**
	 * @return the druAllergyDetailV2List
	 * @throws Exception 
	 */
	public List<DrugAllergyDetailV2> getDruAllergyDetailV2List() throws Exception {
		if(druAllergyDetailV2List==null){
			druAllergyDetailV2List=new ArrayList<DrugAllergyDetailV2>();
		}
		System.out.println( "getDruAllergyDetailV2List() Method started now ");
		String patientId=Integer.toString(new ContextUtil().getPatientId());
		System.out.println("getPatientMedicationDataList().size() in pat med bean "+getPatientMedicationDataList().size());
		FacesContext context = FacesContext	.getCurrentInstance();
		UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");
		druAllergyDetailV2List=ncUpdate1WSBean.callDrugAllergyInteractionV2(patientId,getPatientAllergyList(),getPatientMedicationDataList(),userManageBean.getProviderLocation());
		/*for(DrugAllergyDetailV2 drugAllergyDetailV2:druAllergyDetailV2List){
			logger.info("intraction text "+drugAllergyDetailV2.getInteractionText());
			logger.info("drug id "+drugAllergyDetailV2.getDrugID());
			logger.info("drug name "+drugAllergyDetailV2.getDrug());
			logger.info("composite allergy id "+drugAllergyDetailV2.getCompositeAllergyId());
			logger.info("concept id "+drugAllergyDetailV2.getConceptId());
			logger.info("concept "+drugAllergyDetailV2.getConceptType());
		}*/
		return druAllergyDetailV2List;
	}

	/**
	 * @param druAllergyDetailV2List the druAllergyDetailV2List to set
	 */
	public void setDruAllergyDetailV2List(
			List<DrugAllergyDetailV2> druAllergyDetailV2List) {
		this.druAllergyDetailV2List = druAllergyDetailV2List;
	}

	/**
	 * @return the drugDiseaseDetailList
	 * @throws Exception 
	 */
	public List<MasterDrugDiseaseInteraction> getDrugDiseaseDetailList() throws Exception {
		List<DrugDiseaseDetail>drugDiseaseListData=new ArrayList<DrugDiseaseDetail>();
		if(drugDiseaseDetailList==null){
			drugDiseaseDetailList=new ArrayList<MasterDrugDiseaseInteraction>();

			String patientId=Integer.toString(new ContextUtil().getPatientId());
			FacesContext context = FacesContext	.getCurrentInstance();
			UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");
			drugDiseaseListData=ncUpdate1WSBean.callDrugDiseaseInteraction(patientId,getPatientMedicationDataList(),getPatientDiagnosesDetailList(),userManageBean.getProviderLocation(),selectedDrugId);
			logger.info("{--}{--}{--}{--}{--}Start Integration to Database{Save drug disease interaction to database}{--}{--}{--}{--}{--}");
			patientMedicineService.integrateDrugDiseaseInteractionToDatabase(drugDiseaseListData);
			logger.info("{--}{--}{--}{--}{--}end Integration to Database{Save drug disease interaction to database}{--}{--}{--}{--}{--}");
			List<PatientDrugDiseaseInteraction>patientDrugDiseaseList=new ArrayList<PatientDrugDiseaseInteraction>();
			patientDrugDiseaseList=patientMedicineService.getAllUniquePatientDrugDiseaseRecords();
			for(PatientDrugDiseaseInteraction patientDrugDiseaseInteraction:patientDrugDiseaseList){
				MasterDrugDiseaseInteraction masterDrugDiseaseInteraction=new MasterDrugDiseaseInteraction();
				masterDrugDiseaseInteraction.setPatientDrugDiseaseDbId(patientDrugDiseaseInteraction.getId());
				masterDrugDiseaseInteraction.setDirectCondition(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getDirectCondition());
				masterDrugDiseaseInteraction.setDiseaseRelation(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getDiseaseRelation());
				masterDrugDiseaseInteraction.setDiseaseRelationText(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getDiseaseRelationText());
				masterDrugDiseaseInteraction.setDrugName(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getDrugName());
				masterDrugDiseaseInteraction.setIcd9(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getIcd9());
				masterDrugDiseaseInteraction.setRelatedCondition(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getRelatedCondition());
				masterDrugDiseaseInteraction.setSeverityLevel(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getSeverityLevel());
				masterDrugDiseaseInteraction.setSeverityLevelShortText(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getSeverityLevelShortText());
				masterDrugDiseaseInteraction.setSeverityLevelText(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getSeverityLevelText());
				drugDiseaseDetailList.add(masterDrugDiseaseInteraction);
			}
			drugDiseaseDetailListCopyList=drugDiseaseDetailList;
		}
		return drugDiseaseDetailList;
	}

	/**
	 * @param drugDiseaseDetailList the drugDiseaseDetailList to set
	 */
	public void setDrugDiseaseDetailList(
			List<MasterDrugDiseaseInteraction> drugDiseaseDetailList) {
		this.drugDiseaseDetailList = drugDiseaseDetailList;
	}

	/**
	 * @return the patientDiagnosesDetailList
	 */
	public List<PatientDiagnosesDetails> getPatientDiagnosesDetailList() {
		if(patientDiagnosesDetailList==null){
			patientDiagnosesDetailList=new ArrayList<PatientDiagnosesDetails>();
		

		patientDiagnosesDetailList=patientService.findPatientDiognosisDetails(new ContextUtil().getPatientId());
		}
		return patientDiagnosesDetailList;
	}

	/**
	 * @param patientDiagnosesDetailList the patientDiagnosesDetailList to set
	 */
	public void setPatientDiagnosesDetailList(
			List<PatientDiagnosesDetails> patientDiagnosesDetailList) {
		this.patientDiagnosesDetailList = patientDiagnosesDetailList;
	}

	/**
	 * @return the patientService
	 */
	public IPatientService getPatientService() {
		return patientService;
	}

	/**
	 * @param patientService the patientService to set
	 */
	public void setPatientService(IPatientService patientService) {
		this.patientService = patientService;
	}

	/**
	 * @return the drugHistoryDetailList
	 * @throws Exception 
	 */
	public List<DrugHistoryDetail> getDrugHistoryDetailList() throws Exception {
		if(drugHistoryDetailList==null){
			drugHistoryDetailList=new ArrayList<DrugHistoryDetail>();
		}
		FacesContext context = FacesContext	.getCurrentInstance();
		UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");
		drugHistoryDetailList=ncUpdate1WSBean.getDrugHistoryDetailList(userManageBean.getProviderLocation(),userManageBean.getRoleSecurity());
		return drugHistoryDetailList;
	}

	/**
	 * @param drugHistoryDetailList the drugHistoryDetailList to set
	 */
	public void setDrugHistoryDetailList(
			List<DrugHistoryDetail> drugHistoryDetailList) {
		this.drugHistoryDetailList = drugHistoryDetailList;
	}

	/**
	 * @return the drugAllergyDetailList
	 * @throws Exception 
	 */
	public List<MasterDrugAllergyInteraction> getDrugAllergyDetailList() throws Exception {
		List<DrugAllergyDetail>drugAllergyDetailListData=new ArrayList<DrugAllergyDetail>();
		if(drugAllergyDetailList==null){
			drugAllergyDetailList=new ArrayList<MasterDrugAllergyInteraction>();

			String patientId=Integer.toString(new ContextUtil().getPatientId());
			FacesContext context = FacesContext	.getCurrentInstance();
			UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");
			drugAllergyDetailListData=drugDetailWSBean.getDrugAllergyInteraction(patientId,getPatientAllergyList(),getPatientMedicationDataList(),userManageBean.getProviderLocation(),selectedDrugId);
			logger.info("{--}{--}{--}{--}{--}Start Integration to Database{Save drug allergy interaction to database}{--}{--}{--}{--}{--}");
			patientMedicineService.integrateDrugAllergyInteractionToDatabase(drugAllergyDetailListData);
			logger.info("{--}{--}{--}{--}{--}end Integration to Database{Save drug allergy interaction to database}{--}{--}{--}{--}{--}");
			List<PatientDrugAllergyInteraction>patientDrugAllergyList=new ArrayList<PatientDrugAllergyInteraction>();
			patientDrugAllergyList=patientMedicineService.getAllUniquePatientDrugAllergyRecords();
			for(PatientDrugAllergyInteraction drugAllergyInteraction:patientDrugAllergyList){
				MasterDrugAllergyInteraction masterDrugAllergyInteraction=new MasterDrugAllergyInteraction();
				masterDrugAllergyInteraction.setInteractionText(drugAllergyInteraction.getMasterDrugAllergyInteraction().getInteractionText());
				masterDrugAllergyInteraction.setPatientDrugAllergyDbId(drugAllergyInteraction.getId());
				masterDrugAllergyInteraction.setSeverityLevel(HIGH_VALUE);
				drugAllergyDetailList.add(masterDrugAllergyInteraction);
			}
			drugAllergyCopyList=drugAllergyDetailList;
		}
		return drugAllergyDetailList;
	}

	/**
	 * @param drugAllergyDetailList the drugAllergyDetailList to set
	 */
	public void setDrugAllergyDetailList(
			List<MasterDrugAllergyInteraction> drugAllergyDetailList) {
		this.drugAllergyDetailList = drugAllergyDetailList;
	}

	public List<String> getMedNcComparision() {
		return medNcComparision;
	}

	public void setMedNcComparision(List<String> medNcComparision) {
		this.medNcComparision = medNcComparision;
	}


	public void ignoreSelectedDrugAllergyInteraction(){
		logger.info(":::::::::ignoreSelectedDrugAllergyInteraction length "+drugAllergyDataModel.length);
		for(MasterDrugAllergyInteraction masterDrugAllergyInteraction:drugAllergyDataModel){
			patientMedicineService.ignoreSelectedDrugAllergy(masterDrugAllergyInteraction);
		}
		List<PatientDrugAllergyInteraction>uniquePatientDrugAllergyRecordsList=patientMedicineService.getAllUniquePatientDrugAllergyRecords();
		drugAllergyDetailList.clear();
		for(PatientDrugAllergyInteraction patientDrugAllergyInteraction:uniquePatientDrugAllergyRecordsList){
			MasterDrugAllergyInteraction masterDrugAllergyInteraction=new MasterDrugAllergyInteraction();
			masterDrugAllergyInteraction.setInteractionText(patientDrugAllergyInteraction.getMasterDrugAllergyInteraction().getInteractionText());
			masterDrugAllergyInteraction.setPatientDrugAllergyDbId(patientDrugAllergyInteraction.getId());
			masterDrugAllergyInteraction.setSeverityLevel(HIGH_VALUE);
			drugAllergyDetailList.add(masterDrugAllergyInteraction);
		}
		drugAllergyCopyList=drugAllergyDetailList;
	}

	public void ignoreSelectedDrugDiseaseInteraction(){
		logger.info(":::::::::ignoreSelectedDrugDiseaseInteraction length "+drugDiseaseInteractionDataModel.length);
		for(MasterDrugDiseaseInteraction masterDrugDiseaseInteraction:drugDiseaseInteractionDataModel){
			patientMedicineService.ignoreSelectedDrugDisease(masterDrugDiseaseInteraction);
		}
		List<PatientDrugDiseaseInteraction>uniquePatientDrugDiseaseRecordsList=patientMedicineService.getAllUniquePatientDrugDiseaseRecords();
		drugDiseaseDetailList.clear();
		for(PatientDrugDiseaseInteraction patientDrugDiseaseInteraction:uniquePatientDrugDiseaseRecordsList){
			MasterDrugDiseaseInteraction masterDrugDiseaseInteraction=new MasterDrugDiseaseInteraction();
			masterDrugDiseaseInteraction.setPatientDrugDiseaseDbId(patientDrugDiseaseInteraction.getId());
			masterDrugDiseaseInteraction.setDirectCondition(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getDirectCondition());
			masterDrugDiseaseInteraction.setDiseaseRelation(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getDiseaseRelation());
			masterDrugDiseaseInteraction.setDiseaseRelationText(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getDiseaseRelationText());
			masterDrugDiseaseInteraction.setDrugName(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getDrugName());
			masterDrugDiseaseInteraction.setIcd9(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getIcd9());
			masterDrugDiseaseInteraction.setRelatedCondition(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getRelatedCondition());
			masterDrugDiseaseInteraction.setSeverityLevel(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getSeverityLevel());
			masterDrugDiseaseInteraction.setSeverityLevelShortText(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getSeverityLevelShortText());
			masterDrugDiseaseInteraction.setSeverityLevelText(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getSeverityLevelText());
			drugDiseaseDetailList.add(masterDrugDiseaseInteraction);
		}
		drugDiseaseDetailListCopyList=drugDiseaseDetailList;

	}


	public MasterDrugDiseaseInteraction[] getDrugDiseaseInteractionDataModel() {
		return drugDiseaseInteractionDataModel;
	}

	public void setDrugDiseaseInteractionDataModel(
			MasterDrugDiseaseInteraction[] drugDiseaseInteractionDataModel) {
		this.drugDiseaseInteractionDataModel = drugDiseaseInteractionDataModel;
	}

	public MasterDrugAllergyInteraction[] getDrugAllergyDataModel() {
		return drugAllergyDataModel;
	}

	public void setDrugAllergyDataModel(
			MasterDrugAllergyInteraction[] drugAllergyDataModel) {
		this.drugAllergyDataModel = drugAllergyDataModel;
	}

	public DrugDrugInteractionData[] getDrugInteractionDataModel() {
		return drugInteractionDataModel;
	}

	public void setDrugInteractionDataModel(
			DrugDrugInteractionData[] drugInteractionDataModel) {
		this.drugInteractionDataModel = drugInteractionDataModel;
	}


	public void ignoreSelectedDrugInteraction(){
		try{
			if(drugInteractionDataModel!=null){
				logger.info(":::::::::ignoreSelectedDrugInteraction "+drugInteractionDataModel.length);
				for(DrugDrugInteractionData drugDrugInteractionData:drugInteractionDataModel){
					logger.info("drug id in database "+drugDrugInteractionData.getDrug1());
					logger.info("id in database "+drugDrugInteractionData.getId());
					//call to database to update the status
					patientMedicineService.ignoreSelectedDrugInDatabase(drugDrugInteractionData);

				}
				List<PatientDrugMapping>uniquePatientDrugRecordsList=patientMedicineService.getAllUniqueDrugRecords();
				drugInteractionList=new ArrayList<DrugDrugInteractionData>();
				//drugInteractionListData=new ArrayList<DrugInteraction>();
				for(PatientDrugMapping patientDrugMappingObj:uniquePatientDrugRecordsList){
					DrugDrugInteractionData drugDrugInteractionData=new DrugDrugInteractionData();
					drugDrugInteractionData.setStatus(patientDrugMappingObj.isStatus());
					drugDrugInteractionData.setMasterDrugDbId(patientDrugMappingObj.getMasterDrugDrugInteractionId().getId());
					drugDrugInteractionData.setId(patientDrugMappingObj.getId());
					drugDrugInteractionData.setDrug1ID(patientDrugMappingObj.getMasterDrugDrugInteractionId().getDrug1ID());
					drugDrugInteractionData.setDrug2ID(patientDrugMappingObj.getMasterDrugDrugInteractionId().getDrug2ID());
					drugDrugInteractionData.setDrug1(patientDrugMappingObj.getMasterDrugDrugInteractionId().getDrug1Name());
					drugDrugInteractionData.setDrug2(patientDrugMappingObj.getMasterDrugDrugInteractionId().getDrug2Name());
					drugDrugInteractionData.setClinicalEffects(patientDrugMappingObj.getMasterDrugDrugInteractionId().getClinicalEffects());
					if(StringUtils.contains(StringUtils.lowerCase(patientDrugMappingObj.getMasterDrugDrugInteractionId().getSeverityLevels()), HIGH_FILTER)){
						drugDrugInteractionData.setSeverityLevel(HIGH_FILTER);
					}else if(StringUtils.contains(StringUtils.lowerCase(patientDrugMappingObj.getMasterDrugDrugInteractionId().getSeverityLevels()), HIGH_FILTER_CONTRAINDICATED)){
						drugDrugInteractionData.setSeverityLevel(HIGH_FILTER_CONTRAINDICATED);
					}
					else if(StringUtils.contains(StringUtils.lowerCase(patientDrugMappingObj.getMasterDrugDrugInteractionId().getSeverityLevels()), MEDIUM_FILTER)){
						drugDrugInteractionData.setSeverityLevel(MEDIUM_FILTER);
					}else if(StringUtils.contains(StringUtils.lowerCase(patientDrugMappingObj.getMasterDrugDrugInteractionId().getSeverityLevels()), LOW_FILTER)){
						drugDrugInteractionData.setSeverityLevel(LOW_FILTER);
					}else{
						//do nothing
					}
					drugDrugInteractionData.setPatientManagement(patientDrugMappingObj.getMasterDrugDrugInteractionId().getPatientManagement());
					drugInteractionList.add(drugDrugInteractionData);
				}
				drugInteractionListFilterCopyList=drugInteractionList;
			}

			/**/
			if(drugDiseaseInteractionDataModel!=null){
				logger.info(":::::::::ignoreSelectedDrugDiseaseInteraction length "+drugDiseaseInteractionDataModel.length);
				for(MasterDrugDiseaseInteraction masterDrugDiseaseInteraction:drugDiseaseInteractionDataModel){
					patientMedicineService.ignoreSelectedDrugDisease(masterDrugDiseaseInteraction);
				}
				List<PatientDrugDiseaseInteraction>uniquePatientDrugDiseaseRecordsList=patientMedicineService.getAllUniquePatientDrugDiseaseRecords();
				drugDiseaseDetailList.clear();
				for(PatientDrugDiseaseInteraction patientDrugDiseaseInteraction:uniquePatientDrugDiseaseRecordsList){
					MasterDrugDiseaseInteraction masterDrugDiseaseInteraction=new MasterDrugDiseaseInteraction();
					masterDrugDiseaseInteraction.setPatientDrugDiseaseDbId(patientDrugDiseaseInteraction.getId());
					masterDrugDiseaseInteraction.setDirectCondition(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getDirectCondition());
					masterDrugDiseaseInteraction.setDiseaseRelation(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getDiseaseRelation());
					masterDrugDiseaseInteraction.setDiseaseRelationText(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getDiseaseRelationText());
					masterDrugDiseaseInteraction.setDrugName(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getDrugName());
					masterDrugDiseaseInteraction.setIcd9(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getIcd9());
					masterDrugDiseaseInteraction.setRelatedCondition(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getRelatedCondition());
					masterDrugDiseaseInteraction.setSeverityLevel(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getSeverityLevel());
					masterDrugDiseaseInteraction.setSeverityLevelShortText(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getSeverityLevelShortText());
					masterDrugDiseaseInteraction.setSeverityLevelText(patientDrugDiseaseInteraction.getMasterDrugDiseaseInteraction().getSeverityLevelText());
					drugDiseaseDetailList.add(masterDrugDiseaseInteraction);
				}
				drugDiseaseDetailListCopyList=drugDiseaseDetailList;
			}
			/**/
			if(drugAllergyDataModel!=null){
				logger.info(":::::::::ignoreSelectedDrugAllergyInteraction length "+drugAllergyDataModel.length);
				for(MasterDrugAllergyInteraction masterDrugAllergyInteraction:drugAllergyDataModel){
					patientMedicineService.ignoreSelectedDrugAllergy(masterDrugAllergyInteraction);
				}
				List<PatientDrugAllergyInteraction>uniquePatientDrugAllergyRecordsList=patientMedicineService.getAllUniquePatientDrugAllergyRecords();
				drugAllergyDetailList.clear();
				for(PatientDrugAllergyInteraction patientDrugAllergyInteraction:uniquePatientDrugAllergyRecordsList){
					MasterDrugAllergyInteraction masterDrugAllergyInteraction=new MasterDrugAllergyInteraction();
					masterDrugAllergyInteraction.setInteractionText(patientDrugAllergyInteraction.getMasterDrugAllergyInteraction().getInteractionText());
					masterDrugAllergyInteraction.setPatientDrugAllergyDbId(patientDrugAllergyInteraction.getId());
					masterDrugAllergyInteraction.setSeverityLevel(HIGH_VALUE);
					drugAllergyDetailList.add(masterDrugAllergyInteraction);
				}
				drugAllergyCopyList=drugAllergyDetailList;
			}
			if(patientPharmacogenomicsCurrentMedicineDataModel!=null){
				logger.info("::ignoreSelectedPharmcogenomics:::"+patientPharmacogenomicsCurrentMedicineDataModel.length);
				for(PatientPharmacogenomicsCurrentMedicineData patientPharmacogenomicsCurrentMedicineData:patientPharmacogenomicsCurrentMedicineDataModel){
					patientMedicineService.ignoreSelectedPharmcogenomics(patientPharmacogenomicsCurrentMedicineData);
				}
				patientPharmacogenomicsOverviewList=patientMedicineService.getAllRecordsFromPharmcogenics(true);
				patientPharmacogenomicsOverviewCopyList=patientPharmacogenomicsOverviewList;
			}
		}catch(NullPointerException ne){
			logger.error("error in ignoreSelectedDrugInteraction "+ne.getMessage());
		}finally{
			selectedOptionsDrugFilterList=null;
		}
	}

	public double getSelectedDrugId() {
		return selectedDrugId;
	}

	public void setSelectedDrugId(double selectedDrugId) {
		this.selectedDrugId = selectedDrugId;
	}

	public List<DrugInteraction> getDrugInteractions() {
		return drugInteractions;
	}

	public void setDrugInteractions(List<DrugInteraction> drugInteractions) {
		this.drugInteractions = drugInteractions;
	}

	public List<DrugAllergyDetail> getDrugAllergyInteractions() {
		return drugAllergyInteractions;
	}

	public void setDrugAllergyInteractions(
			List<DrugAllergyDetail> drugAllergyInteractions) {
		this.drugAllergyInteractions = drugAllergyInteractions;
	}

	public List<DrugDiseaseDetail> getDrugDiseaseDetailsInteractions() {
		return drugDiseaseDetailsInteractions;
	}

	public void setDrugDiseaseDetailsInteractions(
			List<DrugDiseaseDetail> drugDiseaseDetailsInteractions) {
		this.drugDiseaseDetailsInteractions = drugDiseaseDetailsInteractions;
	}

	/**
	 * @return the npiAndClinakosDoctorsDetail
	 */
	public NpiAndClinakosDoctorsDetail getNpiAndClinakosDoctorsDetail() {
		return npiAndClinakosDoctorsDetail;
	}

	/**
	 * @param npiAndClinakosDoctorsDetail the npiAndClinakosDoctorsDetail to set
	 */
	public void setNpiAndClinakosDoctorsDetail(
			NpiAndClinakosDoctorsDetail npiAndClinakosDoctorsDetail) {
		this.npiAndClinakosDoctorsDetail = npiAndClinakosDoctorsDetail;
	}

	/**
	 * @return the npiAndClinakosDoctorsDetailList
	 */
	public List<NpiAndClinakosDoctorsDetail> getNpiAndClinakosDoctorsDetailList() {
		return npiAndClinakosDoctorsDetailList;
	}

	/**
	 * @param npiAndClinakosDoctorsDetailList the npiAndClinakosDoctorsDetailList to set
	 */
	public void setNpiAndClinakosDoctorsDetailList(
			List<NpiAndClinakosDoctorsDetail> npiAndClinakosDoctorsDetailList) {
		this.npiAndClinakosDoctorsDetailList = npiAndClinakosDoctorsDetailList;
	}

	/*
	 * Method to set icon to be displayed for newly added medicine
	 * notNeeded:neither anticoag nor med action needed
	 * action: is anticoag med and action is needed for med action
	 * suggestion: is anticoag med and action is suggested
	 */
	public String setIconformed(String drugName)
	{
		System.out.println("setIcon called for..."+drugName);

		getMedicalActionPlanList();
		String imgPath="notNeeded";
		for(Medicine medName:anticoagMedList)
		{
			System.out.println("second set::"+medName.isFlagForMedActionPlan());

			if(medName.isFlagForMedActionPlan())
			{
				System.out.println("searching med for icon in 1st if::"+medicalActionPlanList.isEmpty()+":::Med:::"+medName);

				/*for(MedActionPlan medList:medicalActionPlanList)
			{
				System.out.println("searching med for icon in 2nd for::"+medList.getLabFrequency().length());
				//if(medList.getMedicineName().equalsIgnoreCase(drugName))
			//System.out.println(medList.getLabFrequency().isEmpty());
			//System.out.println(medList.getLabFrequency().length());
			if(medList.getLabFrequency().length()==0)

				 */
				if(medicalActionPlanList.isEmpty()){
					System.out.println("searching med for icon in 2nd if");
					if(drugName.equalsIgnoreCase("WARFARIN")|| drugName.equalsIgnoreCase("COUMADIN"))
					{//System.out.println("should not come here"+medList.getMedicineName()+"::::");
						//for warfarin need action

						imgPath="action";
					}
					else
					{
						//need suggestion

						imgPath="suggestion";
					}
				}

				// }

			}
		}
		return imgPath;
	}

	public List<PatientPharmacogenomicsCurrentMedicineData> getPatientPharmacogenomicsOverviewList() {
		if(patientPharmacogenomicsOverviewList==null){
			patientPharmacogenomicsOverviewList=new ArrayList<PatientPharmacogenomicsCurrentMedicineData>();
			logger.info("integrate pharmcogenomics current medicine to db");
			getPharmacogenomicsRecomendationsListForImpactedMedicine();
			patientMedicineService.integratePharmcogenomicsCurrentMedicineToDb(pharmacogenomicsRecomendationsListForImpactedMedicine);
			patientPharmacogenomicsOverviewList=patientMedicineService.getAllRecordsFromPharmcogenics(true);	
			patientPharmacogenomicsOverviewCopyList=patientPharmacogenomicsOverviewList;
		}

		return patientPharmacogenomicsOverviewList;
	}

	public void setPatientPharmacogenomicsOverviewList(
			List<PatientPharmacogenomicsCurrentMedicineData> patientPharmacogenomicsOverviewList) {
		this.patientPharmacogenomicsOverviewList = patientPharmacogenomicsOverviewList;
	}

	public PatientPharmacogenomicsCurrentMedicineData[] getPatientPharmacogenomicsCurrentMedicineDataModel() {
		return patientPharmacogenomicsCurrentMedicineDataModel;
	}

	public void setPatientPharmacogenomicsCurrentMedicineDataModel(
			PatientPharmacogenomicsCurrentMedicineData[] patientPharmacogenomicsCurrentMedicineDataModel) {
		patientPharmacogenomicsCurrentMedicineDataModel = patientPharmacogenomicsCurrentMedicineDataModel;
	}

	public void ignoreSelectedPharmcogenomics(){
		logger.info("::ignoreSelectedPharmcogenomics:::"+patientPharmacogenomicsCurrentMedicineDataModel.length);
		for(PatientPharmacogenomicsCurrentMedicineData patientPharmacogenomicsCurrentMedicineData:patientPharmacogenomicsCurrentMedicineDataModel){
			patientMedicineService.ignoreSelectedPharmcogenomics(patientPharmacogenomicsCurrentMedicineData);
		}
	}






	/*
	 * all discontinue medicine of current visit..
	 * @author: Gopal Krishan jha
	 */

	public List<PatientMedicationData> getDisContinueMedicationListForPatient() {
		disContinueMedicationListForPatient=patientMedicineService.findpatientDiscontinueMedicineListOfParticularVisit(new ContextUtil().getPatientId(),new ContextUtil().getProviderId(),selectedEncounterDateForPrint);
			//System.out.println("disContinueMedicationListForPatient::::::::"+disContinueMedicationListForPatient.size());
		return disContinueMedicationListForPatient;
	}
	public void setDisContinueMedicationListForPatient(
			List<PatientMedicationData> disContinueMedicationListForPatient) {
		this.disContinueMedicationListForPatient = disContinueMedicationListForPatient;
	}
	
	/*public List<PatientMedicationData> getDisContinueMedicationListForPatientShowUI() {
		getDisContinueMedicationListForPatient();
		//disContinueMedicationListForPatientShowUI.add((PatientMedicationData) disContinueMedicationListForPatient);
		System.out.println("disContinueMedicationListForPatientShowUI::::::"+disContinueMedicationListForPatient.size());
		for(PatientMedicationData pat: disContinueMedicationListForPatient)
		{	
			System.out.println("getModifyDate::::::::"+pat.getModifyDate()+"::::::::"+new DateUtil().getTodayDate());
			if(pat.getModifyDate().equals(new DateUtil().getTodayDate()))
				System.out.println("date details::::"+pat.getModifyDate()+"::::::"+new DateUtil().getTodayDate());
			disContinueMedicationListForPatientShowUI.add((PatientMedicationData) disContinueMedicationListForPatient);
			System.out.println("getDisContinueMedicationListForPatient:::::::"+disContinueMedicationListForPatientShowUI.size());
		}
		
		return disContinueMedicationListForPatientShowUI;
	}*/

	public void setDisContinueMedicationListForPatientShowUI(
			List<PatientMedicationData> disContinueMedicationListForPatientShowUI) {
		this.disContinueMedicationListForPatientShowUI = disContinueMedicationListForPatientShowUI;
	}
	
	

	public void filterDrugInteractions() throws Exception{
		logger.info("selected filterDrugInteractions length "+selectedOptionsDrugFilterList.length);
		logger.info("copy original drug interaction list size "+drugInteractionListFilterCopyList.size());
		logger.info("copy original drug disease interaction list size "+drugDiseaseDetailListCopyList.size());
		logger.info("copy original drug allergy interaction list size "+drugAllergyCopyList.size());
		logger.info("copy original pharmcogenomics list size "+patientPharmacogenomicsOverviewCopyList.size());
		List<DrugDrugInteractionData>temporaryDrugInteractionList=new ArrayList<DrugDrugInteractionData>();
		List<MasterDrugDiseaseInteraction>temporaryDrugDiseaseInteractionList=new ArrayList<MasterDrugDiseaseInteraction>();
		List<MasterDrugAllergyInteraction>temporaryDrugAllergyInteractionList=new ArrayList<MasterDrugAllergyInteraction>();
		List<PatientPharmacogenomicsCurrentMedicineData>temporaryPatientPharmacogenomicsList=new ArrayList<PatientPharmacogenomicsCurrentMedicineData>();
		if(selectedOptionsDrugFilterList.length>0){
			for(String s:selectedOptionsDrugFilterList){
				logger.info("selected value "+s);
				drugInteractionList=new ArrayList<DrugDrugInteractionData>();
				drugDiseaseDetailList=new ArrayList<MasterDrugDiseaseInteraction>();
				drugAllergyDetailList=new ArrayList<MasterDrugAllergyInteraction>();
				patientPharmacogenomicsOverviewList=new ArrayList<PatientPharmacogenomicsCurrentMedicineData>();
				if(s.equals(HIGH_VALUE)){
					String HIGH_MAPPED_VALUE_DRUG_INTERACION="severe";
					String HIGH_CONTRADICATION_VALUE="contraindicated";
					String drugDiseaseHighSeverity="Absolute contraindication";
					for(DrugDrugInteractionData drugDrugInteractionData:drugInteractionListFilterCopyList){
						if(StringUtils.contains(StringUtils.lowerCase(drugDrugInteractionData.getSeverityLevel()), StringUtils.lowerCase(HIGH_MAPPED_VALUE_DRUG_INTERACION))){
							drugDrugInteractionData.setSeverityLevel(HIGH_FILTER);
							temporaryDrugInteractionList.add(drugDrugInteractionData);
						}else if(StringUtils.contains(StringUtils.lowerCase(drugDrugInteractionData.getSeverityLevel()), StringUtils.lowerCase(HIGH_CONTRADICATION_VALUE))){
							drugDrugInteractionData.setSeverityLevel(HIGH_FILTER_CONTRAINDICATED);
							temporaryDrugInteractionList.add(drugDrugInteractionData);
						}

					}
					for(MasterDrugDiseaseInteraction masterDrugDiseaseInteraction:drugDiseaseDetailListCopyList){
						if(StringUtils.contains(StringUtils.lowerCase(masterDrugDiseaseInteraction.getSeverityLevelShortText()), StringUtils.lowerCase(drugDiseaseHighSeverity))){
							masterDrugDiseaseInteraction.setSeverityLevel(masterDrugDiseaseInteraction.getSeverityLevelShortText());
							temporaryDrugDiseaseInteractionList.add(masterDrugDiseaseInteraction);
						}
					}
					temporaryDrugAllergyInteractionList=drugAllergyCopyList;
					//as of now drug allergy doesnt have valid response By Default all records are set to HIGH
					for(PatientPharmacogenomicsCurrentMedicineData patientPharmacogenomicsCurrentMedicineData:patientPharmacogenomicsOverviewCopyList){
						if(patientPharmacogenomicsCurrentMedicineData.getAttentionRating().equals(HIGH_VALUE)){
							temporaryPatientPharmacogenomicsList.add(patientPharmacogenomicsCurrentMedicineData);
						}
					}
				}else if(s.equals(MEDIUM_VALUE)){
					String mediumDrugInteractionSeverityLevel="moderate";
					String mediumRelativeDrugDiseaseSeverityLevel="Relative contraindications";
					String mediumContraindicationsDrugDiseaseSeverityLevel="Contraindication warning";
					for(DrugDrugInteractionData drugDrugInteractionData:drugInteractionListFilterCopyList){
						if(StringUtils.contains(StringUtils.lowerCase(drugDrugInteractionData.getSeverityLevel()), StringUtils.lowerCase(mediumDrugInteractionSeverityLevel))){
							drugDrugInteractionData.setSeverityLevel(MEDIUM_FILTER);
							temporaryDrugInteractionList.add(drugDrugInteractionData);
						}
					}
					for(MasterDrugDiseaseInteraction masterDrugDiseaseInteraction:drugDiseaseDetailListCopyList){
						if(StringUtils.contains(StringUtils.lowerCase(masterDrugDiseaseInteraction.getSeverityLevelShortText()), StringUtils.lowerCase(mediumRelativeDrugDiseaseSeverityLevel))){
							masterDrugDiseaseInteraction.setSeverityLevel(masterDrugDiseaseInteraction.getSeverityLevelShortText());
							temporaryDrugDiseaseInteractionList.add(masterDrugDiseaseInteraction);
						}else if(StringUtils.contains(StringUtils.lowerCase(masterDrugDiseaseInteraction.getSeverityLevelShortText()), StringUtils.lowerCase(mediumContraindicationsDrugDiseaseSeverityLevel))){
							masterDrugDiseaseInteraction.setSeverityLevel(masterDrugDiseaseInteraction.getSeverityLevelShortText());
							temporaryDrugDiseaseInteractionList.add(masterDrugDiseaseInteraction);
						}
					}
					//modify this method once drug allergy have severity levels
					for(MasterDrugAllergyInteraction masterDrugAllergyInteraction:drugAllergyCopyList){
						if(StringUtils.contains(StringUtils.lowerCase(masterDrugAllergyInteraction.getSeverityLevel()), MEDIUM_VALUE)){
							masterDrugAllergyInteraction.setSeverityLevel(MEDIUM_FILTER);
							temporaryDrugAllergyInteractionList.add(masterDrugAllergyInteraction);
						}
					}
					for(PatientPharmacogenomicsCurrentMedicineData patientPharmacogenomicsCurrentMedicineData:patientPharmacogenomicsOverviewCopyList){
						if(patientPharmacogenomicsCurrentMedicineData.getAttentionRating().equals(MEDIUM_VALUE)){
							temporaryPatientPharmacogenomicsList.add(patientPharmacogenomicsCurrentMedicineData);
						}
					}

				}else if(s.equals(LOW_VALUE)){
					for(DrugDrugInteractionData drugDrugInteractionData:drugInteractionListFilterCopyList){
						if(StringUtils.contains(StringUtils.lowerCase(drugDrugInteractionData.getSeverityLevel()), StringUtils.lowerCase(LOW_VALUE))){
							drugDrugInteractionData.setSeverityLevel(LOW_FILTER);
							temporaryDrugInteractionList.add(drugDrugInteractionData);
						}
					}
					for(MasterDrugAllergyInteraction masterDrugAllergyInteraction:drugAllergyCopyList){
						if(StringUtils.contains(StringUtils.lowerCase(masterDrugAllergyInteraction.getSeverityLevel()), LOW_VALUE)){
							masterDrugAllergyInteraction.setSeverityLevel(LOW_FILTER);
							temporaryDrugAllergyInteractionList.add(masterDrugAllergyInteraction);
						}
						for(PatientPharmacogenomicsCurrentMedicineData patientPharmacogenomicsCurrentMedicineData:patientPharmacogenomicsOverviewCopyList){
							if(patientPharmacogenomicsCurrentMedicineData.getAttentionRating().equals(LOW_VALUE)){
								temporaryPatientPharmacogenomicsList.add(patientPharmacogenomicsCurrentMedicineData);
							}
						}
					}
				}
				//	temporaryDrugInteractionList=patientMedicineService.filterDrugInteractions(s);
				//	drugInteractionList.addAll(temporaryDrugInteractionList);
			}

			drugInteractionList.addAll(temporaryDrugInteractionList);
			drugDiseaseDetailList.addAll(temporaryDrugDiseaseInteractionList);
			drugAllergyDetailList.addAll(temporaryDrugAllergyInteractionList);
			patientPharmacogenomicsOverviewList.addAll(temporaryPatientPharmacogenomicsList);

			logger.info("drugInteractionList after filtering "+drugInteractionList.size());
			logger.info("drugDiseaseDetailList after filtering "+drugDiseaseDetailList.size());
			logger.info("drugAllergyDetailList after filtering "+drugAllergyDetailList.size());
			logger.info("patientPharmacogenomicsOverviewList after filtering "+patientPharmacogenomicsOverviewList.size());
		}else{
			logger.info("insisde else");
			drugInteractionList=new ArrayList<DrugDrugInteractionData>();
			drugInteractionList=drugInteractionListFilterCopyList;
			drugDiseaseDetailList=new ArrayList<MasterDrugDiseaseInteraction>();
			drugDiseaseDetailList=drugDiseaseDetailListCopyList;
			drugAllergyDetailList=new ArrayList<MasterDrugAllergyInteraction>();
			drugAllergyDetailList=drugAllergyCopyList;
			patientPharmacogenomicsOverviewList=new ArrayList<PatientPharmacogenomicsCurrentMedicineData>();
			patientPharmacogenomicsOverviewList=patientPharmacogenomicsOverviewCopyList;
		}
	}


	public String[] getSelectedOptionsDrugFilterList() {

		return selectedOptionsDrugFilterList;
	}

	public void setSelectedOptionsDrugFilterList(
			String[] selectedOptionsDrugFilterList) {
		this.selectedOptionsDrugFilterList = selectedOptionsDrugFilterList;

	}	

	/**
	 * Get Patient Health Plan Detail Result Using Pbm Eligblity
	 * @throws IOException 
	 * @throws SAXException 
	 * @throws ParserConfigurationException 
	 *  
	 */
	public void getPatientHealthPlanDetailUsingPBMEligblityV3() throws ParserConfigurationException, SAXException, IOException{
		System.out.println("Method started for health palan detail :::::;");
		FacesContext context = FacesContext	.getCurrentInstance();
		UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");
		userInsuranceDetailListFromIntegration=ncUpdate1WSBean.getEligblityDetailResultUsingDomParser(userManageBean.getProviderLocation(), userManageBean.getRoleSecurity());
	}


	/**
	 * @return the allergyNameForAddingNew
	 */
	public String getAllergyNameForAddingNew() {
		return allergyNameForAddingNew;
	}

	/**
	 * @param allergyNameForAddingNew the allergyNameForAddingNew to set
	 */
	public void setAllergyNameForAddingNew(String allergyNameForAddingNew) {
		this.allergyNameForAddingNew = allergyNameForAddingNew;
	}

	/**
	 * @return the checkAllergyValidName
	 */
	public boolean isCheckAllergyValidName() {
		return checkAllergyValidName;
	}

	/**
	 * @param checkAllergyValidName the checkAllergyValidName to set
	 */
	public void setCheckAllergyValidName(boolean checkAllergyValidName) {
		this.checkAllergyValidName = checkAllergyValidName;
	}


	/**
	 * Get Insurance Detail List From Integration 
	 * @return the userInsuranceDetailListFromIntegration
	 * @throws IOException 
	 * @throws SAXException 
	 * @throws ParserConfigurationException 
	 */
	public List<UserInsuranceDetails> getUserInsuranceDetailListFromIntegration() throws ParserConfigurationException, SAXException, IOException {
		if(userInsuranceDetailListFromIntegration==null){
			userInsuranceDetailListFromIntegration=new ArrayList<UserInsuranceDetails>();
		}
		FacesContext context = FacesContext	.getCurrentInstance();
		UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");
		userInsuranceDetailListFromIntegration=ncUpdate1WSBean.getEligblityDetailResultUsingDomParser(userManageBean.getProviderLocation(), userManageBean.getRoleSecurity());
		return userInsuranceDetailListFromIntegration;
	}

	/**
	 * @param userInsuranceDetailListFromIntegration the userInsuranceDetailListFromIntegration to set
	 */
	public void setUserInsuranceDetailListFromIntegration(
			List<UserInsuranceDetails> userInsuranceDetailListFromIntegration) {
		this.userInsuranceDetailListFromIntegration = userInsuranceDetailListFromIntegration;
	}	


	public List<DrugDrugInteractionData> getDrugInteractionListFilterCopyList() {
		return drugInteractionListFilterCopyList;
	}

	public void setDrugInteractionListFilterCopyList(
			List<DrugDrugInteractionData> drugInteractionListFilterCopyList) {
		this.drugInteractionListFilterCopyList = drugInteractionListFilterCopyList;
	}

	public List<MasterDrugDiseaseInteraction> getDrugDiseaseDetailListCopyList() {
		return drugDiseaseDetailListCopyList;
	}

	public void setDrugDiseaseDetailListCopyList(
			List<MasterDrugDiseaseInteraction> drugDiseaseDetailListCopyList) {
		this.drugDiseaseDetailListCopyList = drugDiseaseDetailListCopyList;
	}


	/**
	 * @return the searchMedicineDataTableforoverview
	 */
	public DataTable getSearchMedicineDataTableforoverview() {
		return searchMedicineDataTableforoverview;
	}

	/**
	 * @param searchMedicineDataTableforoverview the searchMedicineDataTableforoverview to set
	 */
	public void setSearchMedicineDataTableforoverview(
			DataTable searchMedicineDataTableforoverview) {
		this.searchMedicineDataTableforoverview = searchMedicineDataTableforoverview;
	}

	/**
	 * @return the reconsileMedsDataTableforoverview
	 */
	public DataTable getReconsileMedsDataTableforoverview() {
		return reconsileMedsDataTableforoverview;
	}

	/**
	 * @param reconsileMedsDataTableforoverview the reconsileMedsDataTableforoverview to set
	 */
	public void setReconsileMedsDataTableforoverview(
			DataTable reconsileMedsDataTableforoverview) {
		this.reconsileMedsDataTableforoverview = reconsileMedsDataTableforoverview;
	}

	/**
	 * @return the reconsileMedsForPharmacyDataTableforoverview
	 */
	public DataTable getReconsileMedsForPharmacyDataTableforoverview() {
		return reconsileMedsForPharmacyDataTableforoverview;
	}

	/**
	 * @param reconsileMedsForPharmacyDataTableforoverview the reconsileMedsForPharmacyDataTableforoverview to set
	 */
	public void setReconsileMedsForPharmacyDataTableforoverview(
			DataTable reconsileMedsForPharmacyDataTableforoverview) {
		this.reconsileMedsForPharmacyDataTableforoverview = reconsileMedsForPharmacyDataTableforoverview;
	}

	/**
	 * @return the viewRxDataTableforoverview
	 * 
	 */
	public DataTable getViewRxDataTableforoverview() {
		return viewRxDataTableforoverview;
	}

	/**
	 * @param viewRxDataTableforoverview the viewRxDataTableforoverview to set
	 */
	public void setViewRxDataTableforoverview(DataTable viewRxDataTableforoverview) {
		this.viewRxDataTableforoverview = viewRxDataTableforoverview;
	}


	public List<MasterDrugAllergyInteraction> getDrugAllergyCopyList() {
		return drugAllergyCopyList;
	}

	public void setDrugAllergyCopyList(
			List<MasterDrugAllergyInteraction> drugAllergyCopyList) {
		this.drugAllergyCopyList = drugAllergyCopyList;
	}

	public List<PatientPharmacogenomicsCurrentMedicineData> getPatientPharmacogenomicsOverviewCopyList() {
		return patientPharmacogenomicsOverviewCopyList;
	}

	public void setPatientPharmacogenomicsOverviewCopyList(
			List<PatientPharmacogenomicsCurrentMedicineData> patientPharmacogenomicsOverviewCopyList) {
		this.patientPharmacogenomicsOverviewCopyList = patientPharmacogenomicsOverviewCopyList;
	}

	public Date getCommonTodayDateForVallidation() {
		return commonTodayDateForVallidation;
	}

	public void setCommonTodayDateForVallidation(
			Date commonTodayDateForVallidation) {
		this.commonTodayDateForVallidation = commonTodayDateForVallidation;
	}

	/*
	 * show med detail of particula meds that dnt have med action plan
	 * @author: Gopal Krishna jha
	 */
	public List<PatientMedicationData> getMedicineDetailWithoutMedActionPlanList() {
		medicineDetailWithoutMedActionPlanList=new ArrayList<PatientMedicationData>();
		for(PatientMedicationData pat:getPatientMedicationDataList())
		{
			if(pat.isFlagForMedActionPlan())
				medicineDetailWithoutMedActionPlanList.add(pat);
		}
		//medicineDetailWithoutMedActionPlanList.isEmpty()
		return medicineDetailWithoutMedActionPlanList;
	}

	public void setMedicineDetailWithoutMedActionPlanList(
			List<PatientMedicationData> medicineDetailWithoutMedActionPlanList) {
		this.medicineDetailWithoutMedActionPlanList = medicineDetailWithoutMedActionPlanList;
	}
	public DataTable getMedActionPlanMessageDataTable() {
		return medActionPlanMessageDataTable;
	}

	public void setMedActionPlanMessageDataTable(
			DataTable medActionPlanMessageDataTable) {
		this.medActionPlanMessageDataTable = medActionPlanMessageDataTable;
	}
	private List<PatientMedicationData>medicineDetailWithoutMedActionPlanList=new ArrayList<PatientMedicationData>();


	public void checkMedActionPlan(){
		try{
			logger.info("*************start checkMedActionPlan()method:check med action plan for drug and patient ************ ");
			patientMedicationData= (PatientMedicationData) getViewRxDataTableforoverview().getRowData();
			List<GenericMedActionPlan>genericMedPlanDbList=new ArrayList<GenericMedActionPlan>();
			genericMedActionPlanList=new ArrayList<GenericMedActionPlan>();
			logger.info("selected patient med action plan drug "+patientMedicationData.getDrugId()+" ==> "+patientMedicationData.getDrugs());
			logger.info("start checking database for med action plan ");
			int patientID=new ContextUtil().getPatientId();
			genericMedActionPlanList=patientMedicineService.allMedPlansForPatient(patientMedicationData,patientID);
			if(genericMedActionPlanList.size()>0){
				//genericMedActionPlanList.addAll(genericMedPlanDbList);
				getPatientDiagnosesDetailsObj().setCode((genericMedActionPlanList.get(0).getDiagnosisName()));
				getPatientDiagnosesDetailsObj().setStatusUI(false);
				int i=0;
				if(selectedMonitoringParameters==null){
					selectedMonitoringParameters=new ArrayList<String>();
				}
				for(GenericMedActionPlan genericMedActionPlan:genericMedActionPlanList){

					if(genericMedActionPlan.getParameterShortName().equals(genericMedActionPlan.getMonitoringParameter())){
						//selectedMonitoringParameters[i]=genericMedActionPlan.getParameterShortName();
						selectedMonitoringParameters.add(genericMedActionPlan.getParameterShortName());
						//selectedLabUnit=patientMedicineService.findLabUnitDetails(genericMedActionPlan.getParameterShortName());
						i++;
					}else if(!genericMedActionPlan.getParameterShortName().equals(genericMedActionPlan.getMonitoringParameter())){
						//selectedMonitoringParameters[i]=genericMedActionPlan.getMonitoringParameter();
						selectedMonitoringParameters.add(genericMedActionPlan.getParameterShortName());
						//selectedLabUnit=patientMedicineService.findLabUnitDetails(genericMedActionPlan.getParameterShortName());
						i++;
					}else{

					}
				}

			}else{

				getPatientDiagnosesDetailsObj().setStatusUI(true);
				getPatientDiagnosesDetailsObj().setCode(null);
			}
			logger.info("genericMedActionPlanList size after getting med plans from database "+genericMedActionPlanList.size());
			logger.info("end checking database for med action plan ");
		}catch(IndexOutOfBoundsException ie){
			ie.printStackTrace();
		}
	}

	
	/**
	 * used in overViewFilter.jsf 
	 * Call Method on click of Med Action Paln button 
	 * Get Med Action Data For Selected Patient Medication  
	 * 
	 */
	public void duplicatecheckMedActionPlanforoverviewfilter(){
		try{
			logger.info("*************start checkMedActionPlan()method:check med action plan for drug and patient ************ ");
			patientMedicationData= (PatientMedicationData) getViewRxDataTableforoverviewfilter().getRowData();
			
			boolean checkAnticoagMeds=false;
			for(Medicine med:getAnticoagMedList())
			{
				if(med.getMedicinName().equalsIgnoreCase(patientMedicationData.getGenericName()))
					checkAnticoagMeds=true;
			}
			logger.info(checkAnticoagMeds+"1*************start checkMedActionPlan()method:check med action plan for drug and patient ************ "+patientMedicationData.getGenericName());
			
			if(checkAnticoagMeds)
			{
				afterAddNewMedicine1();
			}
			else
			{
			parentMedActionPlan=new ParentMedActionPlan();
			patientDiagnosesDetailsObj=new PatientDiagnosesDetails();
			parentMedActionPlan.setChildLabParameters(new ArrayList<ChildMedActionPlanParameter>());
			//genericMedActionPlanList=new ArrayList<GenericMedActionPlan>();
			logger.info("selected patient med action plan drug "+patientMedicationData.getDrugId()+" ==> "+patientMedicationData.getDrugs());
			logger.info("start checking database for med action plan ");
			int patientID=new ContextUtil().getPatientId();
			parentMedActionPlan=patientMedicineService.getAllMedPlansForPatient(patientMedicationData,patientID);
			if(parentMedActionPlan==null){
				parentMedActionPlan=new ParentMedActionPlan();
				parentMedActionPlan.setChildLabParameters(new ArrayList<ChildMedActionPlanParameter>());
				parentMedActionPlan=patientMedicineService.prepareMedDetailObj(patientMedicationData);
				parentMedActionPlan.setPatientId(patientID);
				parentMedActionPlan.setDosingStartDate(patientMedicationData.getStartDate());
			}
			/*if(selectedMonitoringParameters==null){*/
				selectedMonitoringParameters=new ArrayList<String>();
			/*}*/
			if(parentMedActionPlan!=null && parentMedActionPlan.getChildLabParameters().size()>0){
				patientDiagnosesDetailsObj.setCode(parentMedActionPlan.getPatientDiagnosisName());
				/*if(selectedMonitoringParameters==null){
					selectedMonitoringParameters=new ArrayList<String>();
				}*/
				
			

			}else if(parentMedActionPlan!=null && parentMedActionPlan.getChildLabParameters().size()==0 && StringUtils.isNotBlank(patientMedicationData.getDrugs())  && (StringUtils.lowerCase(patientMedicationData.getDrugs()).contains("lithium"))){
			/*	List<GenericMedActionPlan>psychopharmDefaultMedPlan=new ArrayList<GenericMedActionPlan>();
				psychopharmDefaultMedPlan=patientMedicineService.getDefaultParameters(LITHIUM_MED_NAME,getGenderOfPatient());
				setGenericMedActionPlanList(psychopharmDefaultMedPlan);*/
				
				/*parentMedActionPlan=new ParentMedActionPlan();
				parentMedActionPlan.setChildLabParameters(patientMedicineService.convertToChildMedActionPlanParams(psychopharmDefaultMedPlan));*/
				
			/*	parentMedActionPlan=new ParentMedActionPlan();
				ParentMedActionPlan psychopharmMedPlan=new ParentMedActionPlan();
				psychopharmMedPlan=patientMedicineService.get*/
				
				
			}
			else if(parentMedActionPlan!=null && parentMedActionPlan.getChildLabParameters().size()==0 && StringUtils.isNotBlank(patientMedicationData.getDrugs())  && (StringUtils.lowerCase(patientMedicationData.getDrugs()).contains("Sovaldi"))){
				/*List<GenericMedActionPlan>psychopharmDefaultMedPlan=new ArrayList<GenericMedActionPlan>();
				psychopharmDefaultMedPlan=patientMedicineService.getDefaultParameters(HEPATITIS_MED_NAME,getGenderOfPatient());
				setGenericMedActionPlanList(psychopharmDefaultMedPlan);*/
				
				
		
			}
			else{
				
			}
			logger.info("end checking database for med action plan ");
			RequestContext.getCurrentInstance().execute("medAactionPlanDialog.show()");
			
		}//end of if condition
		}
		//end of try condition
		catch(IndexOutOfBoundsException ie){
			ie.printStackTrace();
		}catch(Throwable t){
			t.printStackTrace();
		}

	}
	/*private List<GenericMedActionPlan> psychopharmMedDetailsSet(
			List<GenericMedActionPlan> psychopharmDefaultMedPlan) {
	//For setting MED details
		
		return null
	}*/
	/*public String[] getSelectedMonitoringParameters() {
		return selectedMonitoringParameters;
	}

	public void setSelectedMonitoringParameters(
			String[] selectedMonitoringParameters) {
		this.selectedMonitoringParameters = selectedMonitoringParameters;
	}*/

/*	private List<String> enableCheckboxBasedOnParameter(
			ParentMedActionPlan parentMedActionPlan2) {
		List<String>uiParametersPreSelect=new ArrayList<String>();
		for(ChildMedActionPlanParameter childMedActionPlanParameter:parentMedActionPlan2.getChildLabParameters()){
			
		}
		return uiParametersPreSelect;
	}*/
	public Map<String, String> parsePropertyEntryDropdown(String propKey)  {
		Map<String, String> checkBoxMonitoringItems = new LinkedHashMap<String, String>();
		try{
			Properties properties = new Properties();
			properties.load(this.getClass().getClassLoader().getResourceAsStream(CLINAKOS_MESSAGES_LOCATION));	
			String propVal = properties.getProperty(propKey);
			logger.info("property value "+propVal);
			StringTokenizer propElements = new StringTokenizer(propVal, PROP_VAL_DELIM);
			String eachElement = "";	
			if ( propElements !=null) {
				for (; propElements.hasMoreElements();) {
					eachElement = HtmlUtils.htmlUnescape(propElements.nextElement().toString());
					checkBoxMonitoringItems.put(eachElement.substring(0, eachElement.indexOf(":")), eachElement.substring(eachElement.indexOf(":")+1, eachElement.length()));
				}
			}
		}catch(IOException e){
			e.printStackTrace();
		}
		return checkBoxMonitoringItems;
	}

	public Map<String, String> getMonitoringParameters() {
		//if(monitoringParameters==null){
			if(StringUtils.isNotBlank(patientMedicationData.getDrugs())  && (StringUtils.lowerCase(patientMedicationData.getDrugs()).contains("lithium"))){
				monitoringParameters=parsePropertyEntryDropdown(MONITORING_PARAMETERS_LITHIUM);
			}else{
				monitoringParameters=parsePropertyEntryDropdown(MONITORING_PARAMETERS);
			}
		//}
		return monitoringParameters;
	}
	
	
	

	public void setMonitoringParameters(Map<String, String> monitoringParameters) {
		this.monitoringParameters = monitoringParameters;
	}
	
	
	/*
	 * New Way of fetching MAP parameters from Database
	 * 
	 * 
	 */

	private List<MasterMonitorParameters>monitoringParamsList;
	private Map<String,Set<ChildMonitoringParameters>>monitoringParamsMap;
	
	public List<MasterMonitorParameters> getMonitoringParamsList() {
		//Check Psychopharm clinic med if yes then load psychopharm labs
		/*if(StringUtils.isNotBlank(patientMedicationData.getDrugs())  && (StringUtils.lowerCase(patientMedicationData.getDrugs()).contains("lithium"))){
			monitoringParamsList=patientMedicineService.getGeneralMedPlanLabs(PSYCHOPHARM_MAP_VIEW);
			monitoringParamsMap=new LinkedHashMap<String, Set<ChildMonitoringParameters>>();
			monitoringParamsMap=prepareMedPlanMap(monitoringParamsList);
		}else{*/
		if(monitoringParamsList==null){
			monitoringParamsList=new ArrayList<MasterMonitorParameters>();
			monitoringParamsList=patientMedicineService.getGeneralMedPlanLabs(GENERAL_MAP_VIEW);
		}
			/*monitoringParamsMap=new LinkedHashMap<String, Set<ChildMonitoringParameters>>();
			monitoringParamsMap=prepareMedPlanMap(monitoringParamsList);*/
		/*}*/
		return monitoringParamsList;
	}
	private Map<String, Set<ChildMonitoringParameters>> prepareMedPlanMap(
			List<MasterMonitorParameters> monitoringParamsList2) {
		Map<String,Set<ChildMonitoringParameters>>medPlanMap=new LinkedHashMap<String, Set<ChildMonitoringParameters>>();
		/*for(MasterMonitorParameters parentParameter:monitoringParamsList2){
			
			medPlanMap.put(parentParameter.getParentParameter(), parentParameter.getChildMonitoringParameters());
		}*/
		return medPlanMap;
	}
	public void setMonitoringParamsList(
			List<MasterMonitorParameters> monitoringParamsList) {
		this.monitoringParamsList = monitoringParamsList;
	}
	
	public Map<String, Set<ChildMonitoringParameters>> getMonitoringParamsMap() {
		return monitoringParamsMap;
	}
	public void setMonitoringParamsMap(
			Map<String, Set<ChildMonitoringParameters>> monitoringParamsMap) {
		this.monitoringParamsMap = monitoringParamsMap;
	}
	
	
	
	/*
	 *  open dosing guidlines of particular meds
	 *  @author: Gopal Krishna Jha
	 */
	public void creatMedActionPlan()
	{
		
		patientMedicationData = (PatientMedicationData) getMedActionPlanMessageDataTable()
				.getRowData();
		doseAndDrugId=new ArrayList<String>();
		doseAndDrugId.add(patientMedicationData.getStrengths());
		doseAndDrugId.add(Double.toString(patientMedicationData.getDrugId()));
		System.out.println("::patientMedicationData.getDrugNameId():::::"+patientMedicationData.getDrugNameId()+":::::::::::><><"+patientMedicationData.getDosageForm());
		//patientMedicationData.setFlagForMedActionPlan(false);
		doseDetailList=new ArrayList<WSDrug>();
		doseDetailList=patientMedicineService.findDoseListOfParticularMeds(patientMedicationData.getDrugNameId(),patientMedicationData.getDosageForm());
		setCheckdateForMedactionplan(true);
		afterAddNewMedicine1();

	}
	
	public void creatMedActionPlanForAnticoag()
	{
		
		patientMedicationData = (PatientMedicationData) getCurrentAnticoagDataTable()
				.getRowData();
		doseAndDrugId=new ArrayList<String>();
		doseAndDrugId.add(patientMedicationData.getStrengths());
		doseAndDrugId.add(Double.toString(patientMedicationData.getDrugId()));
		System.out.println("::patientMedicationData.getDrugNameId():::::"+patientMedicationData.getDrugNameId()+":::::::::::><><"+patientMedicationData.getDosageForm());
		//patientMedicationData.setFlagForMedActionPlan(false);
		doseDetailList=new ArrayList<WSDrug>();
		doseDetailList=patientMedicineService.findDoseListOfParticularMeds(patientMedicationData.getDrugNameId(),patientMedicationData.getDosageForm());
		//setCheckdateForMedactionplan(true);
		afterAddNewMedicine1();

	}
	
	

	public void noMedActionPlan(ActionEvent actionEvent) throws IOException{  
		logger.info("noMedActionPlan method:::");
		patientMedicationData = (PatientMedicationData) getMedActionPlanMessageDataTable()
				.getRowData();
		patientMedicationData.setFlagForMedActionPlan(false);
		patientMedicineService.updateMedActionPlan(patientMedicationData);
		patientMedicationDataList=null;
		currentAntiCoagMedList=new ArrayList<PatientMedicationData>();
		for(PatientMedicationData pat:currentAntiCoagMedList)
		{
			if(pat.getDrugId()==patientMedicationData.getDrugId())
				pat.setFlagForMedActionPlan(false);
		}
		
		FacesContext fc = FacesContext.getCurrentInstance();
		ExternalContext ec = fc.getExternalContext();
		ec.redirect("anticoag.jsf");
		/* FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_INFO, "System Error",  "Please try again later.");  

	        FacesContext.getCurrentInstance().addMessage(null, message);  */
	} 

	public void monitorParameterAction(){
		logger.info("selected monitoring parameters length "+selectedMonitoringParameters.size());
		logger.info("generic med action plan list size "+genericMedActionPlanList.size());
		try{
		/*	for(String monitoringParameter:selectedMonitoringParameters){
				int i=genericMedActionPlanList.size()-1;
				logger.info("parameter "+monitoringParameter);

				//Check database for monitoring sub parameters
				List<MasterMonitorParameters>paramtersList=patientMedicineService.getAllSubParameters(monitoringParameter);
				if(paramtersList.size()>0){
					for(MasterMonitorParameters parameters:paramtersList){
						GenericMedActionPlan genericMedActionPlan=new GenericMedActionPlan();
						genericMedActionPlan.setMonitoringParameter(parameters.getChildParameter());
						genericMedActionPlan.setParameterShortName(parameters.getChildParameter());
						genericMedActionPlan.setDrugId(String.valueOf((int)patientMedicationData.getDrugId()));
						genericMedActionPlan.setDrugName(patientMedicationData.getDrugs());
						genericMedActionPlan.setStrength(patientMedicationData.getStrengths());
						genericMedActionPlan.setRegimen(patientMedicationData.getDirections());
						genericMedActionPlan.setPatientDiagnosesDetails(patientDiagnosesDetailsObj);
						genericMedActionPlan.setPrescriptionDate(patientMedicationData.getStartDate());
						genericMedActionPlan.setPrescribedBy(patientMedicationData.getPrescriberName());
						//}
						if(genericMedActionPlanList.contains(genericMedActionPlan)){
							genericMedActionPlan.setGoalRangeValue(genericMedActionPlanList.get(i).getGoalRangeValue());
							genericMedActionPlan.setGoalRangeSymbol(genericMedActionPlanList.get(i).getGoalRangeSymbol());
							genericMedActionPlan.setGoalRangeEndSymbol(genericMedActionPlanList.get(i).getGoalRangeEndSymbol());
							genericMedActionPlan.setGoalRangeEndValue(genericMedActionPlanList.get(i).getGoalRangeEndValue());	
							genericMedActionPlan.setAlertMediumHighRangeSymbol(genericMedActionPlanList.get(i).getAlertMediumHighRangeSymbol());
							genericMedActionPlan.setAlertMediumHighRangeValue(genericMedActionPlanList.get(i).getAlertMediumHighRangeValue());
							genericMedActionPlan.setAlertMediumLowRangeSymbol(genericMedActionPlanList.get(i).getAlertMediumLowRangeSymbol());
							genericMedActionPlan.setAlertMediumLowRangeValue(genericMedActionPlanList.get(i).getAlertMediumLowRangeValue());
							genericMedActionPlan.setAlertSevereHighRangeSymbol(genericMedActionPlanList.get(i).getAlertSevereHighRangeSymbol());
							genericMedActionPlan.setAlertSevereHighRangeValue(genericMedActionPlanList.get(i).getAlertSevereHighRangeValue());
							genericMedActionPlan.setAlertSevereLowRangeSymbol(genericMedActionPlanList.get(i).getAlertSevereLowRangeSymbol());
							genericMedActionPlan.setAlertSevereLowRangeValue(genericMedActionPlanList.get(i).getAlertSevereLowRangeValue());
						}else{
							genericMedActionPlanList.add(genericMedActionPlan);
						}
					}

				}else{
					GenericMedActionPlan genericMedActionPlan=new GenericMedActionPlan();
					genericMedActionPlan.setMonitoringParameter(monitoringParameter);
					genericMedActionPlan.setDrugId(String.valueOf((int)patientMedicationData.getDrugId()));
					genericMedActionPlan.setDrugName(patientMedicationData.getDrugs());
					genericMedActionPlan.setStrength(patientMedicationData.getStrengths());
					genericMedActionPlan.setRegimen(patientMedicationData.getDirections());
					genericMedActionPlan.setPatientDiagnosesDetails(patientDiagnosesDetailsObj);
					genericMedActionPlan.setPrescriptionDate(patientMedicationData.getStartDate());
					genericMedActionPlan.setPrescribedBy(patientMedicationData.getPrescriberName());
					genericMedActionPlan.setParameterShortName(monitoringParameter);

					if(genericMedActionPlanList.contains(genericMedActionPlan)){
						genericMedActionPlan.setGoalRangeValue(genericMedActionPlanList.get(i).getGoalRangeValue());
						genericMedActionPlan.setGoalRangeSymbol(genericMedActionPlanList.get(i).getGoalRangeSymbol());
						genericMedActionPlan.setGoalRangeEndSymbol(genericMedActionPlanList.get(i).getGoalRangeEndSymbol());
						genericMedActionPlan.setGoalRangeEndValue(genericMedActionPlanList.get(i).getGoalRangeEndValue());	
						genericMedActionPlan.setAlertMediumHighRangeSymbol(genericMedActionPlanList.get(i).getAlertMediumHighRangeSymbol());
						genericMedActionPlan.setAlertMediumHighRangeValue(genericMedActionPlanList.get(i).getAlertMediumHighRangeValue());
						genericMedActionPlan.setAlertMediumLowRangeSymbol(genericMedActionPlanList.get(i).getAlertMediumLowRangeSymbol());
						genericMedActionPlan.setAlertMediumLowRangeValue(genericMedActionPlanList.get(i).getAlertMediumLowRangeValue());
						genericMedActionPlan.setAlertSevereHighRangeSymbol(genericMedActionPlanList.get(i).getAlertSevereHighRangeSymbol());
						genericMedActionPlan.setAlertSevereHighRangeValue(genericMedActionPlanList.get(i).getAlertSevereHighRangeValue());
						genericMedActionPlan.setAlertSevereLowRangeSymbol(genericMedActionPlanList.get(i).getAlertSevereLowRangeSymbol());
						genericMedActionPlan.setAlertSevereLowRangeValue(genericMedActionPlanList.get(i).getAlertSevereLowRangeValue());
					}else{
						genericMedActionPlanList.add(genericMedActionPlan);
					}
				}
				i++;	
			}*/
		}catch(IndexOutOfBoundsException ie){
			ie.printStackTrace();
		}
	}


	public List<GenericMedActionPlan> getGenericMedActionPlanList() {
		
		if(genericMedActionPlanList==null){
			genericMedActionPlanList=new ArrayList<GenericMedActionPlan>();
//		}
		}
		return genericMedActionPlanList;
	}

	public void setGenericMedActionPlanList(
			List<GenericMedActionPlan> genericMedActionPlanList) {
		this.genericMedActionPlanList = genericMedActionPlanList;
	}

	public GenericMedActionPlan[] getGenericMedActionSelectionModel() {
		return genericMedActionSelectionModel;
	}

	public void setGenericMedActionSelectionModel(
			GenericMedActionPlan[] genericMedActionSelectionModel) {
		this.genericMedActionSelectionModel = genericMedActionSelectionModel;
	}

	public Map<String, String> getAlertSymbolsList() {
		if(alertSymbolsList==null){
			alertSymbolsList=new HashMap<String, String>();
			alertSymbolsList=parsePropertyEntryDropdown(ALERT_SYMBOLS);
		}
		return alertSymbolsList;
	}

	public void setAlertSymbolsList(Map<String, String> alertSymbolsList) {
		this.alertSymbolsList = alertSymbolsList;
	}

	public DataTable genericMedActionPlanPropertyforGMAPpage;
	public DataTable genericMedActionPlanPropertyforPsypage;
	public DataTable genericMedActionPlanPropertyforHepatatispage;
	
	
	
	public DataTable getGenericMedActionPlanPropertyforGMAPpage() {
		return genericMedActionPlanPropertyforGMAPpage;
	}
	public void setGenericMedActionPlanPropertyforGMAPpage(
			DataTable genericMedActionPlanPropertyforGMAPpage) {
		this.genericMedActionPlanPropertyforGMAPpage = genericMedActionPlanPropertyforGMAPpage;
	}
	public DataTable getGenericMedActionPlanPropertyforPsypage() {
		return genericMedActionPlanPropertyforPsypage;
	}
	public void setGenericMedActionPlanPropertyforPsypage(
			DataTable genericMedActionPlanPropertyforPsypage) {
		this.genericMedActionPlanPropertyforPsypage = genericMedActionPlanPropertyforPsypage;
	}
	
	public DataTable getGenericMedActionPlanPropertyforHepatatispage() {
		return genericMedActionPlanPropertyforHepatatispage;
	}
	public void setGenericMedActionPlanPropertyforHepatatispage(
			DataTable genericMedActionPlanPropertyforHepatatispage) {
		this.genericMedActionPlanPropertyforHepatatispage = genericMedActionPlanPropertyforHepatatispage;
	}
	/**
	 * Modified New Method : for removing selected Monitoring parameter in General Med action Plan
	 * working fine :TESTED ON 08/dec/2014
	 */
	public void removeSelectedMonitoringParameter(){
			ChildMedActionPlanParameter selectedMedPlanParamObj=(ChildMedActionPlanParameter) getGenericMedActionPlanPropertyforfilter().getRowData();
			addToParentList(selectedMedPlanParamObj);
	}
	
	/**
	 * 
	 * for General MAP page
	 * @return
	 */
	
	public void removeSelectedMonitoringParameterGMAPpage(){
		ChildMedActionPlanParameter selectedMedPlanParamObj=(ChildMedActionPlanParameter) getGenericMedActionPlanPropertyforGMAPpage().getRowData();
		addToParentList(selectedMedPlanParamObj);
	}
	
	/*
	 * for Psychopharm page
	 */
	public void removeSelectedMonitoringParameterPsychopharm(){
		ChildMedActionPlanParameter selectedMedPlanParamObj=(ChildMedActionPlanParameter) getGenericMedActionPlanPropertyforPsypage().getRowData();
		addToParentList(selectedMedPlanParamObj);
	}
	
	public void removeSelectedMonitoringParameterHepatatis(){
		ChildMedActionPlanParameter selectedMedPlanParamObj=(ChildMedActionPlanParameter) getGenericMedActionPlanPropertyforHepatatispage().getRowData();
		addToParentList(selectedMedPlanParamObj);
	}

	public void addToParentList(
			ChildMedActionPlanParameter selectedMedPlanParamObj) {
		logger.info("removeSelectedMonitoringParameter method fired");
		try{
			temporaryChildMedActionPlansParams=new ArrayList<ChildMedActionPlanParameter>();
			logger.info("selected generic med action plan obj for removal "+selectedMedPlanParamObj.getLabParameterObj().getLabType());
			if(selectedMedPlanParamObj.getId()>0){
				selectedMedPlanParamObj.setDatabaseCheck(true);
				temporaryChildMedActionPlansParams.add(selectedMedPlanParamObj);
			}else{
				selectedMedPlanParamObj.setDatabaseCheck(false);
			}
			parentMedActionPlan.getChildLabParameters().remove(selectedMedPlanParamObj);
		}catch(FacesException fe){
			fe.printStackTrace();
		}catch(Throwable e){
			e.printStackTrace();
		}
		
	}
	
	public void removeTemporaryParams(){
		logger.info("temporary params remove method fired size "+temporaryChildMedActionPlansParams.size());
		logger.info("Before:parent med action plan original list size "+parentMedActionPlan.getChildLabParameters().size());
		//parentMedActionPlan.getChildLabParameters().retainAll(temporaryChildMedActionPlansParams);
		
		logger.info("parent med action plan original list size "+parentMedActionPlan.getChildLabParameters().size());
	}
	public List<ChildMedActionPlanParameter> getTemporaryChildMedActionPlansParams() {
		return temporaryChildMedActionPlansParams;
	}
	public void setTemporaryChildMedActionPlansParams(
			List<ChildMedActionPlanParameter> temporaryChildMedActionPlansParams) {
		this.temporaryChildMedActionPlansParams = temporaryChildMedActionPlansParams;
	}
	public DataTable getGenericMedActionPlanProperty() {
		return genericMedActionPlanProperty;
	}

	public void setGenericMedActionPlanProperty(
			DataTable genericMedActionPlanProperty) {
		this.genericMedActionPlanProperty = genericMedActionPlanProperty;
	}

	public void clearTemporaryParameters(){
		logger.info("inside clearTemporaryParameters ");
		selectedMonitoringParameters=null;
	/*	monitoringParameters=null;
		genericMedActionPlanList=null;
		patientDiagnosesDetailsObj=null;
		genericMedActionPlanPropertyforfilter=null;*/
		//RequestContext.getCurrentInstance().update("genericMedActionPlanDialog");
	}

	public Map<String, String> getFrequencyList() {
		if(frequencyList==null){
			frequencyList=new HashMap<String, String>();
			frequencyList=parsePropertyEntryDropdown(FREQUENCY_LIST_DATA);;
		}
		return frequencyList;
	}

	public void setFrequencyList(Map<String, String> frequencyList) {
		this.frequencyList = frequencyList;
	}
	
	
	public Map<String, String> getFrequencyNoList() {
		if(frequencyNoList==null)
		{
			frequencyNoList=new HashMap<String, String>();
			frequencyNoList=parsePropertyEntryDropdown(FREQUENCY_LIST_NO);
		}
		return frequencyNoList;
	}

	public void setFrequencyNoList(Map<String, String> frequencyNoList) {
		this.frequencyNoList = frequencyNoList;
	}
	

	public void searchLabInLoincMaster(){
		labLOINCsearchResultSet=new ArrayList<MasterLOINCData>();
		logger.info("searchable string "+loincNumber);
		if(StringUtils.isNotBlank(loincNumber)){
			labLOINCsearchResultSet=patientMedicineService.searchLabInLoincMaster(loincNumber);
			RequestContext context = RequestContext.getCurrentInstance(); 
			context.addCallbackParam("searchResultSet", true);
		}else{
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Please enter name to search", ""));  
		}
	}

	public List<MasterLOINCData> getLabLOINCsearchResultSet() {
		return labLOINCsearchResultSet;
	}

	public void setLabLOINCsearchResultSet(
			List<MasterLOINCData> labLOINCsearchResultSet) {
		this.labLOINCsearchResultSet = labLOINCsearchResultSet;
	}

	public String getLoincNumber() {
		return loincNumber;
	}

	public void setLoincNumber(String loincNumber) {
		this.loincNumber = loincNumber;
	}

	public DataTable getLoincBindingObj() {
		return loincBindingObj;
	}

	public void setLoincBindingObj(DataTable loincBindingObj) {
		this.loincBindingObj = loincBindingObj;
	}

	public DataTable loincBindingObjPsypage;
	public DataTable loincBindingObjGMAPpage;
	public DataTable loincBindingObjHepatitspage;
//	private List<MedandGenricmed>medPlanMessages;
	private List<ParentMedActionPlan>medPlanMessages;
	
	private List<String>medPlanSelectedParams;
	
	
	public List<String> getMedPlanSelectedParams() {
		return medPlanSelectedParams;
	}
	public void setMedPlanSelectedParams(List<String> medPlanSelectedParams) {
		this.medPlanSelectedParams = medPlanSelectedParams;
	}
	public List<ParentMedActionPlan> getMedPlanMessages() {
		return medPlanMessages;
	}
	public void setMedPlanMessages(List<ParentMedActionPlan> medPlanMessages) {
		this.medPlanMessages = medPlanMessages;
	}
	public DataTable getLoincBindingObjHepatitspage() {
		return loincBindingObjHepatitspage;
	}
	public void setLoincBindingObjHepatitspage(DataTable loincBindingObjHepatitspage) {
		this.loincBindingObjHepatitspage = loincBindingObjHepatitspage;
	}
	public DataTable getLoincBindingObjPsypage() {
		return loincBindingObjPsypage;
	}
	public void setLoincBindingObjPsypage(DataTable loincBindingObjPsypage) {
		this.loincBindingObjPsypage = loincBindingObjPsypage;
	}
	public DataTable getLoincBindingObjGMAPpage() {
		return loincBindingObjGMAPpage;
	}
	public void setLoincBindingObjGMAPpage(DataTable loincBindingObjGMAPpage) {
		this.loincBindingObjGMAPpage = loincBindingObjGMAPpage;
	}
	public void addToGeneralMedAction(){
		MasterLOINCData selectedLoincData=(MasterLOINCData) getLoincBindingObj().getRowData();
		logger.info("database id ==>"+selectedLoincData.getId()+" loinc number==>"+selectedLoincData.getLoincNumber()+
				" loinc short name==>"+selectedLoincData.getShortName());
		addToParentMedPlan(selectedLoincData);
	}

	public void addToGeneralMedActionForPsypage(){
		MasterLOINCData selectedLoincData=(MasterLOINCData) getLoincBindingObjPsypage().getRowData();
		logger.info("database id ==>"+selectedLoincData.getId()+" loinc number==>"+selectedLoincData.getLoincNumber()+
				" loinc short name==>"+selectedLoincData.getShortName());
		addToParentMedPlan(selectedLoincData);
		
	}
	
	public void addToGeneralMedActionForHepatitspage(){
		MasterLOINCData selectedLoincData=(MasterLOINCData) getLoincBindingObjHepatitspage().getRowData();
		logger.info("database id ==>"+selectedLoincData.getId()+" loinc number==>"+selectedLoincData.getLoincNumber()+
				" loinc short name==>"+selectedLoincData.getShortName());
		addToParentMedPlan(selectedLoincData);
		
	}
	
	public void addToGeneralMedActionGMAPpage(){
		MasterLOINCData selectedLoincData=(MasterLOINCData) getLoincBindingObjGMAPpage().getRowData();
		logger.info("database id ==>"+selectedLoincData.getId()+" loinc number==>"+selectedLoincData.getLoincNumber()+
				" loinc short name==>"+selectedLoincData.getShortName());
		addToParentMedPlan(selectedLoincData);
	}
	
	public void addToParentMedPlan(MasterLOINCData selectedLoincData) {
		List<MedandGenricmed>allClinicMAP=getAllClinicMedPlans();
	/*	boolean isParameterExists=patientMedicineService.validateMAPlabParameter(allClinicMAP,selectedLoincData);
		if(!isParameterExists){
		parentMedActionPlan.getChildLabParameters().add(patientMedicineService.convertToProcedureTypeObj(selectedLoincData));
		}*/
	//	 List<MedandGenricmed>messageObj=new ArrayList<MedandGenricmed>();
		  medPlanMessages=new ArrayList<ParentMedActionPlan>();
		//  Map<Double,List<MedandGenricmed>>medPlanMAP=new LinkedHashMap<Double, List<MedandGenricmed>>();
		  MedandGenricmed medPlanObj;
		  medPlanObj=patientMedicineService.validateMAPlabParameter(allClinicMAP,selectedLoincData);
		  if(medPlanObj==null){
			  parentMedActionPlan.getChildLabParameters().add(patientMedicineService.convertToProcedureTypeObj(selectedLoincData));
		  }else{
			  //Show Message To User and get object based on selected Lab parameter
			  if(parentMedActionPlan.getDrugId()!=Double.valueOf(medPlanObj.getDrugId())){
			  medPlanSelectedParams=new ArrayList<String>();
			  medPlanSelectedParams.add(selectedLoincData.getShortName());
			  List<ParentMedActionPlan>medPlanList=patientMedicineService.convertObjToMasterDetail(medPlanObj);
			  for(ParentMedActionPlan pMAPobj:medPlanList){
				  for(ChildMedActionPlanParameter cMAPobj:pMAPobj.getChildLabParameters()){
					  if(cMAPobj.getLabType().equalsIgnoreCase(selectedLoincData.getShortName())){
						  ParentMedActionPlan pTypeObj=new ParentMedActionPlan();
						  pTypeObj=pMAPobj;
						  pTypeObj.setSelectedLabUI(selectedLoincData.getShortName());
						  medPlanMessages.add(pTypeObj);
						  break;
					  }
				  }
				  
			  }
		  }
		  }
		
		RequestContext context = RequestContext.getCurrentInstance(); 
		context.addCallbackParam("selectedLab", true);
		context.addCallbackParam("validateMAP", !medPlanMessages.isEmpty());
		
		loincNumber="";
		
	}
	
	public void addToExistMAPobj(){
		logger.info("addToExistMAPobj method fired :MedPlanMessage of type Master Detail "+medPlanMessages.size());
		selectedMonitoringParameters=new ArrayList<String>();
		for(ParentMedActionPlan pTypeObj:medPlanMessages){
			for(ChildMedActionPlanParameter childMonitoringParameters:pTypeObj.getChildLabParameters()){
			ChildMedActionPlanParameter cMAPobj=new ChildMedActionPlanParameter();
			cMAPobj.setGoalHighRangeSymbol(childMonitoringParameters.getGoalHighRangeSymbol());
			cMAPobj.setGoalHighRangeValue(childMonitoringParameters.getGoalHighRangeValue());
			cMAPobj.setGoalLowRangeSymbol(childMonitoringParameters.getGoalLowRangeSymbol());
			cMAPobj.setGoalLowRangeValue(childMonitoringParameters.getGoalLowRangeValue());
			cMAPobj.setAlertSevereHighRangeSymbol(childMonitoringParameters.getAlertSevereHighRangeSymbol());
			cMAPobj.setAlertSevereHighRangeValue(childMonitoringParameters.getAlertSevereHighRangeValue());
			cMAPobj.setAlertSevereLowRangeSymbol(childMonitoringParameters.getAlertSevereLowRangeSymbol());
			cMAPobj.setAlertSevereLowRangeValue(childMonitoringParameters.getAlertSevereLowRangeValue());
			cMAPobj.setAlertMediumHighRangeSymbol(childMonitoringParameters.getAlertMediumHighRangeSymbol());
			cMAPobj.setAlertMediumHighRangeValue(childMonitoringParameters.getAlertMediumHighRangeValue());
			cMAPobj.setAlertMediumLowRangeSymbol(childMonitoringParameters.getAlertMediumLowRangeSymbol());
			cMAPobj.setAlertMediumLowRangeValue(childMonitoringParameters.getAlertMediumLowRangeValue());
			cMAPobj.setLabParameterObj(childMonitoringParameters.getLabParameterObj());
			cMAPobj.setMedPlanUpdateRequired(true);
			parentMedActionPlan.getChildLabParameters().add(cMAPobj);
			}
		}
		
	}
	
	public void saveGenericMedActionPlan() throws IOException, InterruptedException{
		try{
			boolean success=false;
			RequestContext context = RequestContext.getCurrentInstance(); 
			int patientId=new ContextUtil().getPatientId();
			convertToOldGenericMedActionList(parentMedActionPlan);
			
			if(!validationCheckMedPlan(genericMedActionPlanList,patientDiagnosesDetailsObj)){
				if(temporaryChildMedActionPlansParams!=null && getTemporaryChildMedActionPlansParams().size()>0){
				
					logger.info("Patient diaognosis details obj "+patientDiagnosesDetailsObj.getCode());
					parentMedActionPlan.setPatientDiagnosisDetailsId(patientDiagnosesDetailsObj.getIcdId());
					parentMedActionPlan.setPatientDiagnosisName(patientDiagnosesDetailsObj.getCode());
					success=patientMedicineService.saveNewGeneralMedActionPlan(patientId,parentMedActionPlan,temporaryChildMedActionPlansParams,getDosingStartDate());
				
				}else{
					parentMedActionPlan.setPatientDiagnosisDetailsId(patientDiagnosesDetailsObj.getIcdId());
					parentMedActionPlan.setPatientDiagnosisName(patientDiagnosesDetailsObj.getCode());
					success=patientMedicineService.saveNewGeneralMedActionPlan(patientId,parentMedActionPlan,temporaryChildMedActionPlansParams,getDosingStartDate());
				
				}
				
				resetGeneralMAP();
				
				
			
				context.addCallbackParam("savedOrNotDb", success);
				
				  logger.info("all clinics med plans size for update indicator " + allClinicMedPlans.size());
				  for (PatientMedicationData patientMedicationData : patientMedicationDataList) {
				   for (MedandGenricmed medPlans : allClinicMedPlans) {
				    if (medPlans.getDrugId()
				      .equals(String.valueOf((int) patientMedicationData
				        .getDrugId()))) {
				     patientMedicationData.setMedPlanExists(true);
				     break;
				    }

				   }
				   
				  }
				 
			
				  FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_INFO, "Med Action Plan Saved Successfully ",  "");  
					FacesContext.getCurrentInstance().addMessage(OVW_MSG_ID, message);
					FacesContext.getCurrentInstance().getExternalContext().getFlash().setKeepMessages(true);
				  ExternalContext ec = FacesContext.getCurrentInstance().getExternalContext();
				    ec.redirect(((HttpServletRequest) ec.getRequest()).getRequestURI());
				
			}else{
				
				
			}
		}catch(IndexOutOfBoundsException e){
			e.printStackTrace();
		}

	}
	
	private void resetGeneralMAP() {
		parentMedActionPlan=null;
		selectedMonitoringParameters=null;
		alertMedActionPlans=null;
		hepCAlertMedActionPlanList=null;
		allGeneralMedPlans=null;
		PatientManageBean patientManageBeanObj=(PatientManageBean)FacesContext.getCurrentInstance().getApplication().getELResolver().getValue(FacesContext	.getCurrentInstance().getELContext(), null,"patientManageBean");
		patientManageBeanObj.setPatientICDDiagnosisList(null);
		getPatientMedicationDataList();
		getAllClinicMedPlans();
		
	}
	private void convertToOldGenericMedActionList(
			ParentMedActionPlan parentMedActionPlan2) {
		setGenericMedActionPlanList(patientMedicineService.convertToOldGenericMedActionList(parentMedActionPlan2));
		
	}
	public void saveGenericMedActionPlanwithoutdiagnoses() throws IOException{
		try{
			boolean success=false;
			RequestContext context = RequestContext.getCurrentInstance(); 
			int patientId=new ContextUtil().getPatientId();
			convertToOldGenericMedActionList(parentMedActionPlan);
			
			if(!validationCheckMedPlanwithoutdiagnoses(genericMedActionPlanList,patientDiagnosesDetailsObj)){
				if(temporaryChildMedActionPlansParams!=null && getTemporaryChildMedActionPlansParams().size()>0){
					logger.info("Patient diaognosis details obj "+patientDiagnosesDetailsObj.getCode());
					parentMedActionPlan.setPatientDiagnosisDetailsId(patientDiagnosesDetailsObj.getIcdId());
					parentMedActionPlan.setPatientDiagnosisName(patientDiagnosesDetailsObj.getCode());
					success=patientMedicineService.saveNewGeneralMedActionPlan(patientId,parentMedActionPlan,temporaryChildMedActionPlansParams,getDosingStartDate());
				}else{
					parentMedActionPlan.setPatientDiagnosisDetailsId(patientDiagnosesDetailsObj.getIcdId());
					parentMedActionPlan.setPatientDiagnosisName(patientDiagnosesDetailsObj.getCode());
					success=patientMedicineService.saveNewGeneralMedActionPlan(patientId,parentMedActionPlan,temporaryChildMedActionPlansParams,getDosingStartDate());
				}
				
			
				resetGeneralMAP();
				context.addCallbackParam("savedOrNotDb", success);
			
				  logger.info("all clinics med plans size for update indicator " + allClinicMedPlans.size());
				  for (PatientMedicationData patientMedicationData : patientMedicationDataList) {
				   for (MedandGenricmed medPlans : allClinicMedPlans) {
				    if (medPlans.getDrugId()
				      .equals(String.valueOf((int) patientMedicationData
				        .getDrugId()))) {
				
				    	
				     patientMedicationData.setMedPlanExists(true);
				     break;
				    }

				   }
				   
				  }
				 FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_INFO, "Med Action Plan Saved Successfully ",  "");  
					FacesContext.getCurrentInstance().addMessage(OVW_MSG_ID, message);
					FacesContext.getCurrentInstance().getExternalContext().getFlash().setKeepMessages(true);
				  ExternalContext ec = FacesContext.getCurrentInstance().getExternalContext();
				    ec.redirect(((HttpServletRequest) ec.getRequest()).getRequestURI());
			}else{
				
			}
		}catch(IndexOutOfBoundsException e){
			e.printStackTrace();
		}catch(Exception e){
			e.printStackTrace();
		}

	}
	
	
	public void saveGenericMedActionPlanforgreaterinrvalue() throws IOException{
		try{
			boolean success=false;
			RequestContext context = RequestContext.getCurrentInstance(); 
			int patientId=new ContextUtil().getPatientId();
			
			convertToOldGenericMedActionList(parentMedActionPlan);
			
			if(!validationCheckMedPlanforgreaterinrvalue(genericMedActionPlanList,patientDiagnosesDetailsObj)){
				if(temporaryChildMedActionPlansParams!=null && getTemporaryChildMedActionPlansParams().size()>0){
				
					logger.info("Patient diaognosis details obj "+patientDiagnosesDetailsObj.getCode());
					parentMedActionPlan.setPatientDiagnosisDetailsId(patientDiagnosesDetailsObj.getIcdId());
					parentMedActionPlan.setPatientDiagnosisName(patientDiagnosesDetailsObj.getCode());
					success=patientMedicineService.saveNewGeneralMedActionPlan(patientId,parentMedActionPlan,temporaryChildMedActionPlansParams,getDosingStartDate());
					
				}else{
					parentMedActionPlan.setPatientDiagnosisDetailsId(patientDiagnosesDetailsObj.getIcdId());
					parentMedActionPlan.setPatientDiagnosisName(patientDiagnosesDetailsObj.getCode());
					success=patientMedicineService.saveNewGeneralMedActionPlan(patientId,parentMedActionPlan,temporaryChildMedActionPlansParams,getDosingStartDate());
				

				}
				
				
				resetGeneralMAP();
			
				context.addCallbackParam("savedOrNotDb", success);
			
				  logger.info("all clinics med plans size for update indicator " + allClinicMedPlans.size());
				  for (PatientMedicationData patientMedicationData : patientMedicationDataList) {
				   for (MedandGenricmed medPlans : allClinicMedPlans) {
				    if (medPlans.getDrugId()
				      .equals(String.valueOf((int) patientMedicationData
				        .getDrugId()))) {
				     patientMedicationData.setMedPlanExists(true);
				     break;
				    }

				   }
				   
				  }
				 FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_INFO, "Med Action Plan Saved Successfully ",  "");  
					FacesContext.getCurrentInstance().addMessage(OVW_MSG_ID, message);
					FacesContext.getCurrentInstance().getExternalContext().getFlash().setKeepMessages(true);
				  ExternalContext ec = FacesContext.getCurrentInstance().getExternalContext();
				    ec.redirect(((HttpServletRequest) ec.getRequest()).getRequestURI());
			}else{
				//	context.update("genericMedActionPlanDialog:newGenericMedPlanFormId:messagesValidate"); 
			}
		}catch(IndexOutOfBoundsException e){
			e.printStackTrace();
		}catch(Exception e){
			e.printStackTrace();
		}

	}


	/*added by vinod for  to show the massage on visit summary page  */


	/*public List<String> getQuestionList() {
		return questionList;
	}

	public void setQuestionList(List<String> questionList) {
		this.questionList = questionList;
	}
	*/
	

	/**
	 * @return the reconcilieMedicine
	 */
	public String getReconcilieMedicine() {
      if(lastReconcileInfo != null && reconcilieMedicine != null){
		if((lastReconcileInfo.isEmpty()) || (lastReconcileInfo.contains("NA"))){
			logger.info("lastReconcileInfo size::::::::::" +lastReconcileInfo.size());
			logger.info("i" +lastReconcileInfo);
			reconcilieMedicine="Medication Reconciliation Is Not Completed.";

		}
		else if((lastReconcileInfo.get(0).equalsIgnoreCase("Not Sent")) || (lastReconcileInfo.get(0).equalsIgnoreCase("NA"))){
			logger.info("Prescriber name in lastReconcileInfo list:::::::::::::::;"+lastReconcileInfo.get(0));
			reconcilieMedicine= "Medication Reconciliation Completed.";
		}
		else{
			reconcilieMedicine= "Medication Reconciliation Completed by "+lastReconcileInfo.get(0)+"." ;
		}
      }
		return reconcilieMedicine;
	}
/*
	public String getQuestionForMAintenance() {
		return questionForMAintenance;
	}
	public void setQuestionForMAintenance(String questionForMAintenance) {
		this.questionForMAintenance = questionForMAintenance;
	}*/
	/**
	 * @param reconcilieMedicine the reconcilieMedicine to set
	 */
	public void setReconcilieMedicine(String reconcilieMedicine) {
		this.reconcilieMedicine = reconcilieMedicine;
	}

	public String getPharmacogenomicsDetails() {
		return pharmacogenomicsDetails;
	}

	public void setPharmacogenomicsDetails(String pharmacogenomicsDetails) {
		this.pharmacogenomicsDetails = pharmacogenomicsDetails;
	}

	public List<ParentMedActionPlan> getAllGenericMedActionPlan() {
		allGenericMedActionPlan=new ArrayList<ParentMedActionPlan>();
		int patientId=new ContextUtil().getPatientId();
		//if(allGenericMedActionPlan==null){
		allGenericMedActionPlan=patientMedicineService.getAllGenericMedActionPlan(patientId);
		
		/*for(GenericMedActionPlan genMeds : allGenericMedActionPlan)
		{
			ProcedureType pro = new ProcedureType();
			System.out.println("pro.getProcedureType();:::::::"+pro.getLabType()+"getParameterShortName::::"+genMeds.getParameterShortName());
			
			
		}*/
		//}
		for (ParentMedActionPlan genMedActionPlan : allGenericMedActionPlan) {
			if(genMedActionPlan.getDosageForm() == null || genMedActionPlan.getDosageForm().equalsIgnoreCase("Add'l Sig") || genMedActionPlan.getDosageForm().equalsIgnoreCase("Add'I Sig")){
				genMedActionPlan.setDosageForm(" ");
			}
			if(genMedActionPlan.getRegimen() == null || genMedActionPlan.getRegimen().equalsIgnoreCase("Add'l Sig") || genMedActionPlan.getRegimen().equalsIgnoreCase("Add'I Sig")){
				genMedActionPlan.setRegimen(" ");
			}
		}
		return allGenericMedActionPlan;
	}

	public void setAllGenericMedActionPlan(
			List<ParentMedActionPlan> allGenericMedActionPlan) {
		this.allGenericMedActionPlan = allGenericMedActionPlan;
	}
	
	/**
	 * 
	 * New Genaeral MAP:New way of fetching general MAP
	 * @param event
	 */
	private List<ParentMedActionPlan>allGeneralMedPlans;
	
	
	/**
	 * used in  genralmedactionplan.jsf 
	 * It will give all med action plan data for Showing med with med action plan on genralmedactionplan.jsf    
	 * @return List of ParentMedActionPlan
	 */
	public List<ParentMedActionPlan> getAllGeneralMedPlans() {
		if(allGeneralMedPlans==null){
			int patientId=new ContextUtil().getPatientId();
			allGeneralMedPlans=new ArrayList<ParentMedActionPlan>();
			allGeneralMedPlans=patientMedicineService.generalMedPlansForParticularPatient(patientId); // Get genral Med action plan data based on patientId 
			
			for (ParentMedActionPlan genMedActionPlan : allGeneralMedPlans) {
				if(genMedActionPlan.getDosageForm() == null || genMedActionPlan.getDosageForm().equalsIgnoreCase("Add'l Sig") || genMedActionPlan.getDosageForm().equalsIgnoreCase("Add'I Sig")){
					genMedActionPlan.setDosageForm(" ");
				}
				if(genMedActionPlan.getRegimen() == null || genMedActionPlan.getRegimen().equalsIgnoreCase("Add'l Sig") || genMedActionPlan.getRegimen().equalsIgnoreCase("Add'I Sig")){
					genMedActionPlan.setRegimen(" ");
				}
			}
		}
		return allGeneralMedPlans;
	}
	public void setAllGeneralMedPlans(List<ParentMedActionPlan> allGeneralMedPlans) {
		this.allGeneralMedPlans = allGeneralMedPlans;
	}
	/*Fetch the value from the  to RowExpension in drug-drug interection drug-desise Interection and drug Allery Interection 
	 Author @ Sanket Kumar Singh 
	 */
	public void onRowExpensionDrugInteraction(ToggleEvent event) {


		try {
			List<DrugInteraction>drugInteractionsList=new ArrayList<DrugInteraction>();
			List<DrugDiseaseDetail>drugDiseaseInteractionsList=new ArrayList<DrugDiseaseDetail>();
			List<DrugAllergyDetail>drugAllergyDetailsList=new ArrayList<DrugAllergyDetail>();
			drugInterectionListDetail=new ArrayList<DrugInteractionOverview>();
			PatientMedicationData patientMedicationData=(PatientMedicationData)event.getData();
			selectedDrugId= patientMedicationData.getDrugId();
			String drugName=patientMedicationData.getDrugs();
			//logger.info("selected id=== "+selectedDrugId+":::"+patientMedicationData.getDrugName());

			String patientId=Integer.toString(new ContextUtil().getPatientId());		

			FacesContext context = FacesContext	.getCurrentInstance();UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");
			if(!(selectedDrugId==0.0))
			{
				System.out.println("selectedDrugId::::details::::"+selectedDrugId);
				drugInteractionsList=drugDetailWSBean.callDrugDrugInteraction(patientMedicationDataList, userManageBean.getProviderLocation(),selectedDrugId);
				drugDiseaseInteractionsList=ncUpdate1WSBean.callDrugDiseaseInteraction(patientId,getPatientMedicationDataList(),getPatientDiagnosesDetailList(),userManageBean.getProviderLocation(),selectedDrugId);
				drugAllergyDetailsList=drugDetailWSBean.getDrugAllergyInteraction(patientId,getPatientAllergyList(),getPatientMedicationDataList(),userManageBean.getProviderLocation(),selectedDrugId);
			}
			//logger.info("drug interaction size for drug id "+selectedDrugId+"===>"+drugInteractionsList.size());
			//logger.info("drug disease interaction size for drug id "+selectedDrugId+"===>"+drugDiseaseInteractionsList.size());
			//logger.info("drug allergy interaction size for drug id "+selectedDrugId+"===>"+drugAllergyDetailsList.size());
			for(DrugInteraction drugInteractionData:drugInteractionsList){
				double drugId1=Double.parseDouble(drugInteractionData.getDrug1ID());
				double drugId2=Double.parseDouble(drugInteractionData.getDrug2ID());

				if(selectedDrugId==drugId1 )
				{
					DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
					drugInteractionOverview.setClinicalEffects(drugInteractionData.getClinicalEffects());
					drugInteractionOverview.setPatientManagement(drugInteractionData.getPatientManagement());
					drugInteractionOverview.setIssueType(DRUG_DRUG_INTERECTION);

					drugInteractionOverview.setDrugId(drugInteractionData.getDrug1());
					drugInteractionOverview.setConflict(drugInteractionData.getDrug2());
					/* drugInteractionOverview.setDrugName(drugInteractionData.getDrug2());*/

					if(StringUtils.contains(StringUtils.lowerCase(drugInteractionData.getSeverityLevel()), DRUG_SEVERITY_LEVEL_SEARCH_STR)){
						drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
						drugInteractionOverview.setSeverityLevelToolTip(DRUG_SEVERITY_TOOLTIP);
					}else if(StringUtils.contains(StringUtils.lowerCase(drugInteractionData.getSeverityLevel()), DRUG_SEVERITY_LEVEL_SEARCH_STR_CONTRAINDICATED)){
						drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
						drugInteractionOverview.setSeverityLevelToolTip(DRUG_SEVERITY_TOOLTIP_CONTRAINDICATED);
					}else if(StringUtils.contains(StringUtils.lowerCase(drugInteractionData.getSeverityLevel()), DRUG_SEVERITY_LEVEL_SEARCH_STR_MODERATE)){
						drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL);
						drugInteractionOverview.setSeverityLevelToolTip(DRUG_SEVERITY_TOOLTIP_MODERATE);
					}
					//System.out.println("drugId is=="+drugInteractionOverview.getDrugId());
					if(!drugInterectionListDetail.contains(drugInteractionOverview)){
						drugInterectionListDetail.add(drugInteractionOverview);
					}
				}

			}

			for(DrugDiseaseDetail drugDiseaseDetail:drugDiseaseInteractionsList){

				DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
				drugInteractionOverview.setClinicalEffects("");
				drugInteractionOverview.setConflict(drugDiseaseDetail.getDirectCondition());
				drugInteractionOverview.setIssueType(DRUG_DISEASE_INTERACTION);

				drugInteractionOverview.setPatientManagement(drugDiseaseDetail.getSeverityLevelText());
				if(StringUtils.equals(drugDiseaseDetail.getSeverityLevelShortText(), DRUG_SEVERITY_LEVEL_SEARCH_STR_DISEASE)){
					drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(drugDiseaseDetail.getSeverityLevelShortText());
				}else if((StringUtils.equals(drugDiseaseDetail.getSeverityLevelShortText(), DRUG_SEVERITY_LEVEL_SEARCH_STR_RELATIVE))||
						(StringUtils.equals(drugDiseaseDetail.getSeverityLevelShortText(), DRUG_SEVERITY_LEVEL_SEARCH_STR_CONTRADICATION))){
					drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(drugDiseaseDetail.getSeverityLevelShortText());
				}
			//	if(!drugInterectionListDetail.contains(drugInteractionOverview)){
					//	drugInteractionOverview.setSeverityLevel(drugDiseaseDetail.getSeverityLevelShortText());
					drugInterectionListDetail.add(drugInteractionOverview);
			//	}
			}
			String allergyNameWS=new String();
			String allergySeverityLevel="";
			for(DrugAllergyDetail drugAllergyDetail:drugAllergyDetailsList){
				DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
				drugInteractionOverview.setClinicalEffects("");
				drugInteractionOverview.setConflict(drugAllergyDetail.getInteractionText());
				drugInteractionOverview.setIssueType(DRUG_ALLERGY_INTERACTION);
				if(StringUtils.contains(drugAllergyDetail.getInteractionText(), "with")){
					int i = drugAllergyDetail.getInteractionText().lastIndexOf(' '); 
					allergyNameWS = drugAllergyDetail.getInteractionText().substring(i+1); 
					logger.info("allergy name "+allergyNameWS);
				}
				for(PatientAllergy patAllergy:getPatientAllergyList()){
					if(patAllergy.getAllergyName().equals(allergyNameWS)){
						allergySeverityLevel=patAllergy.getAllergySeverity();
						break;
					}
				}
				if(StringUtils.isNotEmpty(allergySeverityLevel)){
					if(StringUtils.equals(allergySeverityLevel, DRUG_SEVERITY_TOOLTIP)){
						drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
						drugInteractionOverview.setSeverityLevelToolTip(allergySeverityLevel);
					}else if(StringUtils.equals(allergySeverityLevel, DRUG_SEVERITY_TOOLTIP_MODERATE)){
						drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL);
						drugInteractionOverview.setSeverityLevelToolTip(allergySeverityLevel);
					}else if(StringUtils.equals(allergySeverityLevel, MILD_LEVEL)){
						drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL);
						drugInteractionOverview.setSeverityLevelToolTip(allergySeverityLevel);
					}
				}else {
					drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(MILD_LEVEL);
				}
		//		if(!drugInterectionListDetail.contains(drugInteractionOverview)){
					//	drugInteractionOverview.setSeverityLevel(drugDiseaseDetail.getSeverityLevelShortText());
					drugInterectionListDetail.add(drugInteractionOverview);
		//		}

				//drugInterectionListDetail.add(drugInteractionOverview);



			}
			/*getPharmacogenomicsRecomendationsListForImpactedMedicine();
				   for (PharmacogenomicsRecomendations pr : pharmacogenomicsRecomendationsListForImpactedMedicine) {
					   DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
				    System.out.println("inside onRowExpensionDrugInteraction::::::"+pr.getDrugName()+"="+drugName);
				    if (drugName.equalsIgnoreCase(pr.getDrugName())) {
				    	System.out.println("inside if block::::::"+pr.getDrugName()+"="+drugName);
				    	drugInteractionOverview.setSeverityLevel(pr.getAttentionRating());
						   drugInteractionOverview.setIssueType(PHARMACOGENOMIC);

						   drugInteractionOverview.setConflict(pr.getPharmacogenomicsId().getGeneSymbol());
						   drugInteractionOverview.setClinicalEffects(pr.getImplications());
						   drugInteractionOverview.setPatientManagement(pr.getRecommendation());
						   final String PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING=pr.getOvaleMessage();
						   drugInteractionOverview.setSeverityLevelToolTip(pr.getOvaleMessage());
						   if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), HIGH_SEVERITY_LEVEL_RATING)){
								drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL_RATING);
								drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
							}else if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), MEDIUM_SEVERITY_LEVEL_RATING)){
								drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL_RATING);
								drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
							}else if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), LOW_SEVERITY_LEVEL_RATING)){
								drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL_RATING);
								drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
							}
						   if(!drugInterectionListDetail.contains(drugInteractionOverview)){
								//	drugInteractionOverview.setSeverityLevel(drugDiseaseDetail.getSeverityLevelShortText());
									drugInterectionListDetail.add(drugInteractionOverview);
									}

					}*/
			/*   
				   }*/
		} catch (Exception e) {
			e.printStackTrace();
		}
	}




	public List<DrugInteractionOverview> getDrugInterectionListDetail() {

		return drugInterectionListDetail;
	}


	public void setDrugInterectionListDetail(
			List<DrugInteractionOverview> drugInterectionListDetail) {
		this.drugInterectionListDetail = drugInterectionListDetail;
	}



	public void setDrugInteraction(DrugInteractionOverview drugInteraction) {
		this.drugInteraction = drugInteraction;
	}

	public DrugInteractionOverview getDrugInteraction() {
		return drugInteraction;
	}

	public DataTable getViewRxDataTableforoverviewPharmacogenomics() {
		return viewRxDataTableforoverviewPharmacogenomics;
	}

	public void setViewRxDataTableforoverviewPharmacogenomics(
			DataTable viewRxDataTableforoverviewPharmacogenomics) {
		this.viewRxDataTableforoverviewPharmacogenomics = viewRxDataTableforoverviewPharmacogenomics;
	}

	public DataTable getGenericMedActionDatatable() {
		return genericMedActionDatatable;
	}
	public void setGenericMedActionDatatable(DataTable genericMedActionDatatable) {
		this.genericMedActionDatatable = genericMedActionDatatable;
	}
	/**
	 * used in  genralmedactionplan.jsf page 
	 *  Modified With NEW MAP ON :08/DEC/2014
	 * It will use for edit  ParentMedActionPlan data and modifed as per requirement 
	 */

	public void editGenericMedActionPlan(){
		/*genericMedActionPlan=new GenericMedActionPlan();
		genericMedActionPlan=(GenericMedActionPlan)getGenericMedActionDatatable().getRowData();*/
		
		parentMedActionPlan =new ParentMedActionPlan();
		parentMedActionPlan=(ParentMedActionPlan) getGenericMedActionDatatable().getRowData(); // Get Row data from datatable 
		patientMedicationData=new PatientMedicationData();
		patientMedicationData=patientMedicineService.preparePatientMedObj(parentMedActionPlan); // Prepare Parent Med Action Plan Data after getting row object from Databale 
		if(StringUtils.isNotBlank(parentMedActionPlan.getPatientDiagnosisName())){
			patientDiagnosesDetailsObj=new PatientDiagnosesDetails();
			patientDiagnosesDetailsObj.setCode(parentMedActionPlan.getPatientDiagnosisName());
		}else{
			patientDiagnosesDetailsObj=new PatientDiagnosesDetails();
		}
	}

	public GenericMedActionPlan getGenericMedActionPlan() {
		if(genericMedActionPlan==null){
			genericMedActionPlan=new GenericMedActionPlan();
		}
		return genericMedActionPlan;
	}

	public void setGenericMedActionPlan(GenericMedActionPlan genericMedActionPlan) {
		this.genericMedActionPlan = genericMedActionPlan;
	}

	/**
	 *  Modified With NEW MAP ON :08/DEC/2014
	 * 
	 * @return
	 */
	public String updateGenericMedActionPlan(){
		/*logger.info("selected drug id in generic med action plan id "+genericMedActionPlan.getDrugId()+"==>"+genericMedActionPlan.getDrugName()+
				"frequency value==>"+genericMedActionPlan.getFrequencyNo()+genericMedActionPlan.getFrequencyUnit());
		patientMedicineService.updateGenericMedActionPlan(genericMedActionPlan);
		alertMedActionPlans=null;
		return null;*/
		patientMedicineService.updateGeneralMAP(parentMedActionPlan);
		return null;
		
	}

	
	/**
	 * used in  genralmedactionplan.jsf page 
	 * Modified With NEW MAP ON :08/DEC/2014
	 * It will get the selected Row data of DataTable for removing purpose  
	 */
	public void removeGenericMedActionPlan(){
	/*	genericMedActionPlan=new GenericMedActionPlan();
		genericMedActionPlan=(GenericMedActionPlan)getGenericMedActionDatatable().getRowData();*/
		
		parentMedActionPlan =new ParentMedActionPlan();
		parentMedActionPlan=(ParentMedActionPlan) getGenericMedActionDatatable().getRowData(); // Get Row Data of Genric Med action Plan DataTable 
	}
	/**
	 * used in genralmedactionplan.jsf page 
	 * It will delete ParentMedActionPlan object data .
	 */

	public void deleteGenericMedActionPlan(){
		/*logger.info("selected generic med action plan ID "+genericMedActionPlan.getId());

		patientMedicineService.deleteGenericMedActionPlan(genericMedActionPlan);
		System.out.println("genericMedActionPlan.getDrugId():::::::"+genericMedActionPlan.getDrugId()+new ContextUtil().getPatientId());
		
		getAllGenericMedActionPlan();
		System.out.println("//getAllGenericMedActionPlan();"+allGenericMedActionPlan.size());
		
	
		
		alertMedActionPlans=null;*/
		
		patientMedicineService.deleteGeneralMAPonSelectedDrug(parentMedActionPlan); // Delete ParentMedActionPlan Data  
		
		resetGeneralMAPpageData();
	}

	private void resetGeneralMAPpageData() {
		allGeneralMedPlans=null;
		psychoPharmAlertMedActionPlanList=null;
		psychoPharmClinicMedActionPlanList=null;
		
	}
	/**
	 * @return the pharmacogenomicInteractionDetail
	 */
	public String getPharmacogenomicInteractionDetail() {
		return pharmacogenomicInteractionDetail;
	}

	/**
	 * @param pharmacogenomicInteractionDetail the pharmacogenomicInteractionDetail to set
	 */
	public void setPharmacogenomicInteractionDetail(
			String pharmacogenomicInteractionDetail) {
		this.pharmacogenomicInteractionDetail = pharmacogenomicInteractionDetail;
	}

	public List<PharmacogenomicsRecomendations> getPharmacogenomicInteractionDetailList() {
		return pharmacogenomicInteractionDetailList;
	}

	public void setPharmacogenomicInteractionDetailList(
			List<PharmacogenomicsRecomendations> pharmacogenomicInteractionDetailList) {
		this.pharmacogenomicInteractionDetailList = pharmacogenomicInteractionDetailList;
	}

    /**
     * used in genralmedactionplan.jsf
     * Show the alert of Generic Med Action Plan on GenericMedActionPlan.jsf page 
     * get the all information of drug med goal lab range etc in notes section 
     * @return List of Alert Generic Med Action Plan 
     */
	public List<AlertGenericMedActionLab> getAlertMedActionPlans() {
		int patientID=new ContextUtil().getPatientId();
		//alertMedActionPlans=new ArrayList<AlertGenericMedActionLab>();
		if(alertMedActionPlans==null){
			alertMedActionPlans=patientMedicineService.alertMedActionPlans(patientID); // Get Alert Med Action Plan Data based on Patient Id 
			
			for(AlertGenericMedActionLab altLab: alertMedActionPlans)
			{
				
				BigDecimal bd = new BigDecimal(altLab.getLowValue());
				DecimalFormat df = new DecimalFormat("0.##");
				
				BigDecimal bd1 = new BigDecimal(altLab.getHighValue());
				DecimalFormat df1 = new DecimalFormat("0.##");
				
				BigDecimal bd2 = new BigDecimal(altLab.getLabResultValue());
				DecimalFormat df2 = new DecimalFormat("0.##");
				//altLab.setLowValue(df.format(bd));

				
				String lowValueRange = String.valueOf(df.format(bd));
				String highValueRange = String.valueOf(df1.format(bd1));
				String labResultRange = String.valueOf(df2.format(bd2));
				System.out.println(":::::numWihoutDecimal:222::"+lowValueRange);
				//altLab.setLowValue(Double.parseDouble(numWihoutDecimal));
				altLab.setLowValue(Double.parseDouble(lowValueRange));
				altLab.setHighValue(Double.parseDouble(highValueRange));
				altLab.setLabResultValue(Double.parseDouble(labResultRange));
			}
			
			resetPsychopharmClinicMessages();
			resetHepCAlertMedActiopnPlan();
			
			/*copyAlertMedPlansFilter=new ArrayList<AlertGenericMedActionLab>();
			copyAlertMedPlansFilter.addAll(alertMedActionPlans);*/
		}
		
		return alertMedActionPlans;
	}

	private void resetPsychopharmClinicMessages() {
		psychoPharmAlertMedActionPlanList=null;
		currentPsychopharmMeds=null;
		psychoPharmClinicMedActionPlanList=null;
		
	}
	public void setAlertMedActionPlans(
			List<AlertGenericMedActionLab> alertMedActionPlans) {
		this.alertMedActionPlans = alertMedActionPlans;
	}

	public List<DrugInteractionOverview> getDrugAlleryInterectionListDetail() {
		return drugAlleryInterectionListDetail;
	}


	public void setDrugAlleryInterectionListDetail(
			List<DrugInteractionOverview> drugAlleryInterectionListDetail) {
		this.drugAlleryInterectionListDetail = drugAlleryInterectionListDetail;
	}

	public List<DrugInteractionOverview> getDrugDiseaseInterectionListDetail() {
		return drugDiseaseInterectionListDetail;
	}

	public void setDrugDiseaseInterectionListDetail(
			List<DrugInteractionOverview> drugDiseaseInterectionListDetail) {
		this.drugDiseaseInterectionListDetail = drugDiseaseInterectionListDetail;
	}

	public List<DrugInteractionOverview> getDrugPharmaInterectionListDetail() {
		return drugPharmaInterectionListDetail;
	}

	public void setDrugPharmaInterectionListDetail(
			List<DrugInteractionOverview> drugPharmaInterectionListDetail) {
		this.drugPharmaInterectionListDetail = drugPharmaInterectionListDetail;
	}



	/*medthod for displaying the patientIssue TotalCount on page Load.
	 * 
	 * Author @ Sanket Singh
	 * 
	 * */


	public void updateIssuesCount(){
	//	cachedDrugIssuesList=new ArrayList<DrugInteractionOverview>();
		getPatientMedicationDataList();
		getAllClinicMedPlans();
		logger.info("all clinics med plans size "+allClinicMedPlans.size());
		for(PatientMedicationData patientMedicationData:patientMedicationDataList){
			List<DrugInteractionOverview>drugIssuesList=new ArrayList<DrugInteractionOverview>();
			drugIssuesList=drugOverview(patientMedicationData.getDrugId());
			logger.info("drugIssuesList size"+drugIssuesList.size());
			for(MedandGenricmed medPlans:allClinicMedPlans){
				if(medPlans.getDrugId().equals(String.valueOf((int)patientMedicationData.getDrugId()))){
					patientMedicationData.setMedPlanExists(true);
					patientMedicationData.setMedPlanStrFilter(MED_ACTION_PLAN);
					break;
				}
				
			}
			//logger.info("drug issue list count for drug id ==>"+patientMedicationData.getDrugId()+" "+drugIssuesList.size()+patientMedicationData.getDrugs());
			patientMedicationData.setTotalCount(String.valueOf(drugIssuesList.size()));
			for(DrugInteractionOverview drugInterection:drugIssuesList)
			{
				//added for filters
				if(DRUG_DRUG_INTERECTION.equalsIgnoreCase(drugInterection.getIssueType())){
					patientMedicationData.setDrugInteractionStr(DRUG_DRUG_INTERECTION);
				}if(DRUG_DISEASE_INTERACTION.equalsIgnoreCase(drugInterection.getIssueType())){
					patientMedicationData.setDiseaseInteractionStr(DRUG_DISEASE_INTERACTION);
				}if(DRUG_ALLERGY_INTERACTION.equalsIgnoreCase(drugInterection.getIssueType())){
					patientMedicationData.setAllergyInteractionStr(DRUG_ALLERGY_INTERACTION);
				}
				//drugInterectionListDetail
				if (patientMedicationData.getIssuesLevel()==null)
				{
					patientMedicationData.setIssuesLevel(LOW_SEVERITY_LEVEL);
					logger.info("lebel:::"+drugInterection.getSeverityLevel());
				}


				if (! patientMedicationData.getIssuesLevel().equals(HIGH_SEVERITY_LEVEL))
				{

					if(drugInterection.getSeverityLevel().equals(HIGH_SEVERITY_LEVEL) || drugInterection.getSeverityLevel().equals(MEDIUM_SEVERITY_LEVEL) )
					{
						patientMedicationData.setIssuesLevel(drugInterection.getSeverityLevel());
					}

				}
				System.out.println("==high severity=="+patientMedicationData.getIssuesLevel()+"==value =="+drugIssuesList.size());
			}
			//added by nagaraj for Filtering data
		//	cachedDrugIssuesList.addAll(drugIssuesList);
		}

		
	}

	//fetch the list form web services and using this in total count and Patient Issues lavel.

	public List<DrugInteractionOverview> drugOverview(double selectedDrugId){

		drugInteractionsListIssueDetail=new ArrayList<DrugInteractionOverview>();
		//			PatientMedicationData patientMedicationData=(PatientMedicationData)event.getData();
		//String drugName=passedDrugName;
		//logger.info(passedDrugName+"selected id=== "+selectedDrugId+":::"+patientMedicationData.getDrugs()+
		//patientMedicationData.getDrugs());

		String patientId=Integer.toString(new ContextUtil().getPatientId());		


		FacesContext context = FacesContext.getCurrentInstance();
		UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");
		if(!(selectedDrugId==0.0))
		{
			drugInteractionsListIssue=drugDetailWSBean.callDrugDrugInteraction(patientMedicationDataList, userManageBean.getProviderLocation(),selectedDrugId);
			drugDiseaseInteractionsListIsssues=ncUpdate1WSBean.callDrugDiseaseInteraction(patientId,getPatientMedicationDataList(),getPatientDiagnosesDetailList(),userManageBean.getProviderLocation(),selectedDrugId);
			drugAllergyDetailsListIssues=drugDetailWSBean.getDrugAllergyInteraction(patientId,getPatientAllergyList(),getPatientMedicationDataList(),userManageBean.getProviderLocation(),selectedDrugId);


		}


		for(DrugInteraction drugInteractionData:drugInteractionsListIssue){
			double drugId1=Double.parseDouble(drugInteractionData.getDrug1ID());
			double drugId2=Double.parseDouble(drugInteractionData.getDrug2ID());
			if(selectedDrugId==drugId1)
			{
				DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
			//	drugInteractionOverview.setDrugId(String.valueOf((int)selectedDrugId));
				drugInteractionOverview.setIssueType(DRUG_DRUG_INTERECTION);
			//	drugInteractionOverview.setDrugId(String.valueOf((int)selectedDrugId));
				drugInteractionOverview.setDrugId(drugInteractionData.getDrug1());
				drugInteractionOverview.setConflict(drugInteractionData.getDrug2());
				/* drugInteractionOverview.setDrugName(drugInteractionData.getDrug2());*/
				drugInteractionOverview.setDrugIdVal(selectedDrugId);
				if(StringUtils.contains(StringUtils.lowerCase(drugInteractionData.getSeverityLevel()), DRUG_SEVERITY_LEVEL_SEARCH_STR)){
					drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);

				}else if(StringUtils.contains(StringUtils.lowerCase(drugInteractionData.getSeverityLevel()), DRUG_SEVERITY_LEVEL_SEARCH_STR_CONTRAINDICATED)){
					drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);

				}else if(StringUtils.contains(StringUtils.lowerCase(drugInteractionData.getSeverityLevel()), DRUG_SEVERITY_LEVEL_SEARCH_STR_MODERATE)){
					drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL);

				}

				//System.out.println("drugId is=="+drugInteractionOverview.getDrugId());
				if(!drugInteractionsListIssueDetail.contains(drugInteractionOverview)){
					drugInteractionsListIssueDetail.add(drugInteractionOverview);
				}
			}
		}

		for(DrugDiseaseDetail drugDiseaseDetail:drugDiseaseInteractionsListIsssues){
			DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
			drugInteractionOverview.setIssueType(DRUG_DISEASE_INTERACTION);
			drugInteractionOverview.setDrugId(String.valueOf((int)selectedDrugId));
			drugInteractionOverview.setDrugIdVal(selectedDrugId);
			if(StringUtils.equals(drugDiseaseDetail.getSeverityLevelShortText(), DRUG_SEVERITY_LEVEL_SEARCH_STR_DISEASE)){
				drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);

			}else if((StringUtils.equals(drugDiseaseDetail.getSeverityLevelShortText(), DRUG_SEVERITY_LEVEL_SEARCH_STR_RELATIVE))||
					(StringUtils.equals(drugDiseaseDetail.getSeverityLevelShortText(), DRUG_SEVERITY_LEVEL_SEARCH_STR_CONTRADICATION))){
				drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL);

			}


			//if(!drugInteractionsListIssueDetail.contains(drugInteractionOverview)){

				drugInteractionsListIssueDetail.add(drugInteractionOverview);
			//}
		}
		String allergyNameWS=new String();
		String allergySeverityLevel="";
		for(DrugAllergyDetail drugAllergyDetail:drugAllergyDetailsListIssues){
			
			DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
			drugInteractionOverview.setIssueType(DRUG_ALLERGY_INTERACTION);
			drugInteractionOverview.setDrugId(String.valueOf((int)selectedDrugId));
			drugInteractionOverview.setDrugIdVal(selectedDrugId);
			if(StringUtils.contains(drugAllergyDetail.getInteractionText(), "with")){
				
				int i = drugAllergyDetail.getInteractionText().lastIndexOf(' '); 
				allergyNameWS = drugAllergyDetail.getInteractionText().substring(i+1); 
				logger.info("allergy name "+allergyNameWS);
			}
			for(PatientAllergy patAllergy:getPatientAllergyList()){
				if(patAllergy.getAllergyName().equals(allergyNameWS)){
					allergySeverityLevel=patAllergy.getAllergySeverity();
					break;
				}
			}
			if(StringUtils.isNotEmpty(allergySeverityLevel)){
				if(StringUtils.equals(allergySeverityLevel, DRUG_SEVERITY_TOOLTIP)){
					drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(DRUG_SEVERITY_TOOLTIP);
				}else if(StringUtils.equals(allergySeverityLevel, DRUG_SEVERITY_TOOLTIP_MODERATE)){
					drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(DRUG_SEVERITY_TOOLTIP_MODERATE);
				}else if(StringUtils.equals(allergySeverityLevel, MILD_LEVEL)){
					drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(MILD_LEVEL);

				}
			}else {
				drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL);
				drugInteractionOverview.setSeverityLevelToolTip(MILD_LEVEL);
			}
			//if(!drugInteractionsListIssueDetail.contains(drugInteractionOverview)){

				drugInteractionsListIssueDetail.add(drugInteractionOverview);
		//	}


		}
		/*getPharmacogenomicsRecomendationsListForImpactedMedicine();

			   for (PharmacogenomicsRecomendations pr : pharmacogenomicsRecomendationsListForImpactedMedicine) {
				   DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
			   // System.out.println("inside onRowExpensionDrugInteraction::::::"+pr.getDrugName()+"="+drugName);
			    if (drugName.equalsIgnoreCase(pr.getDrugName())) {
			    	//System.out.println("inside if block::::::"+pr.getDrugName()+"="+drugName);
			    	drugInteractionOverview.setSeverityLevel(pr.getAttentionRating());
					   drugInteractionOverview.setIssueType(PHARMACOGENOMIC);

					   drugInteractionOverview.setConflict(pr.getPharmacogenomicsId().getGeneSymbol());
					   drugInteractionOverview.setClinicalEffects(pr.getImplications());
					   drugInteractionOverview.setPatientManagement(pr.getRecommendation());

					   drugInteractionOverview.setSeverityLevelToolTip(pr.getOvaleMessage());
					   if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), HIGH_SEVERITY_LEVEL_RATING)){
							drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL_RATING);

						}else if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), MEDIUM_SEVERITY_LEVEL_RATING)){
							drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL_RATING);

						}else if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), LOW_SEVERITY_LEVEL_RATING)){
							drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL_RATING);

						}
					   if(!drugInteractionsListIssueDetail.contains(drugInteractionOverview)){

						   drugInteractionsListIssueDetail.add(drugInteractionOverview);
						   System.out.println("size of list"+drugInteractionsListIssueDetail.size());
								}

				}
			System.out.println("size of list"+drugInteractionsListIssueDetail.size());

		}*/
		logger.info("drugInteractionsListIssueDetail size::::::::::::::::::::::::::::::::::::::"+drugInteractionsListIssueDetail.size());
		return drugInteractionsListIssueDetail;
	}

	public List<DrugInteraction> getDrugInteractionsListIssue() {
		return drugInteractionsListIssue;
	}

	public void setDrugInteractionsListIssue(
			List<DrugInteraction> drugInteractionsListIssue) {
		this.drugInteractionsListIssue = drugInteractionsListIssue;
	}

	public List<DrugInteractionOverview> getDrugInteractionsListIssueDetail() {
		return drugInteractionsListIssueDetail;
	}

	public void setDrugInteractionsListIssueDetail(
			List<DrugInteractionOverview> drugInteractionsListIssueDetail) {
		this.drugInteractionsListIssueDetail = drugInteractionsListIssueDetail;
	}

	public List<DrugDiseaseDetail> getDrugDiseaseInteractionsListIsssues() {
		return drugDiseaseInteractionsListIsssues;
	}

	public void setDrugDiseaseInteractionsListIsssues(
			List<DrugDiseaseDetail> drugDiseaseInteractionsListIsssues) {
		this.drugDiseaseInteractionsListIsssues = drugDiseaseInteractionsListIsssues;
	}

	public List<DrugAllergyDetail> getDrugAllergyDetailsListIssues() {
		return drugAllergyDetailsListIssues;
	}

	public void setDrugAllergyDetailsListIssues(
			List<DrugAllergyDetail> drugAllergyDetailsListIssues) {
		this.drugAllergyDetailsListIssues = drugAllergyDetailsListIssues;
	}

	public String getHighestServity() {
		return highestServity;
	}

	public void setHighestServity(String highestServity) {
		this.highestServity = highestServity;
	}

	public String getHighestServityForAllergy() {
		return highestServityForAllergy;
	}

	public void setHighestServityForAllergy(String highestServityForAllergy) {
		this.highestServityForAllergy = highestServityForAllergy;
	}

	public String getHighestServityForDisease() {
		return highestServityForDisease;
	}

	public void setHighestServityForDisease(String highestServityForDisease) {
		this.highestServityForDisease = highestServityForDisease;
	}

	public List<GenericMedActionPlan> getTemporaryGenericMedPlanList() {
		if(temporaryGenericMedPlanList==null){
			temporaryGenericMedPlanList=new ArrayList<GenericMedActionPlan>();
		}
		return temporaryGenericMedPlanList;
	}

	public void setTemporaryGenericMedPlanList(
			List<GenericMedActionPlan> temporaryGenericMedPlanList) {
		this.temporaryGenericMedPlanList = temporaryGenericMedPlanList;
	}

	public String getHighestServityForpharmacogenomic() {
		return highestServityForpharmacogenomic;
	}

	public void setHighestServityForpharmacogenomic(
			String highestServityForpharmacogenomic) {
		this.highestServityForpharmacogenomic = highestServityForpharmacogenomic;
	}

	public SendMessageEditRx getSendMessageEditRx() {
		return sendMessageEditRx;
	}

	public void setSendMessageEditRx(SendMessageEditRx sendMessageEditRx) {
		this.sendMessageEditRx = sendMessageEditRx;
	}

	private boolean validationCheckMedPlan(
			List<GenericMedActionPlan> genericMedActionPlanList2, PatientDiagnosesDetails patientDiagnosesDetailsObj2) {
		boolean validationCheck=false;

		if(genericMedActionPlanList2.size()==0){
			validationCheck=true;
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"No parameters have been selected to set up a Med Action Please select values or cancel.", ""));  
		}
		else if(patientDiagnosesDetailsObj2!=null && StringUtils.isBlank(patientDiagnosesDetailsObj2.getCode())){
			validationCheck=true;
			/*FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Pick Diagnosis.", ""));*/ 
			RequestContext.getCurrentInstance().execute("confirmfordiagnoses.show()");
		}
		else{
			for(GenericMedActionPlan genericMedActionPlan:genericMedActionPlanList2){
				if(genericMedActionPlan.getGoalRangeValue()==0.0 && genericMedActionPlan.getGoalRangeEndValue()==0.0){
					validationCheck=true;
					FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Pick a goal for each parameter.", ""));  
					break;
				}
				
				else if(genericMedActionPlan.getAlertSevereHighRangeValue()==0.0 && genericMedActionPlan.getAlertSevereLowRangeValue()==0.0
						&& genericMedActionPlan.getAlertMediumHighRangeValue()==0.0&&genericMedActionPlan.getAlertMediumLowRangeValue()==0.0){
					validationCheck=true;
					FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Pick at least one Alert Level for each parameter.", "")); 
					break;
				}
				else if(((genericMedActionPlan.getGoalRangeValue()>Goal_INR_range_value || genericMedActionPlan.getGoalRangeValue()==Goal_INR_range_value)||(genericMedActionPlan.getGoalRangeEndValue()>Goal_INR_range_value || genericMedActionPlan.getGoalRangeEndValue()==Goal_INR_range_value)) && ((genericMedActionPlan.getGoalRangeSymbol().equalsIgnoreCase(">")||genericMedActionPlan.getGoalRangeSymbol().equalsIgnoreCase(">="))||(genericMedActionPlan.getGoalRangeEndSymbol().equalsIgnoreCase(">")||genericMedActionPlan.getGoalRangeEndSymbol().equalsIgnoreCase(">="))) &&  genericMedActionPlan.getMonitoringParameter().equalsIgnoreCase("INR")){
					validationCheck=true;
					RequestContext.getCurrentInstance().execute("confirmbox_for_inr_value.show()");  
					break;
				}
			}
		}
		return validationCheck;
	}
	
	
	private boolean validationCheckMedPlanwithoutdiagnoses(
			List<GenericMedActionPlan> genericMedActionPlanList2, PatientDiagnosesDetails patientDiagnosesDetailsObj2) {
		boolean validationCheck=false;

		if(genericMedActionPlanList2.size()==0){
			validationCheck=true;
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"No parameters have been selected to set up a Med Action Please select values or cancel.", ""));  
		}
		/*else if(patientDiagnosesDetailsObj2!=null && StringUtils.isBlank(patientDiagnosesDetailsObj2.getCode())){
			validationCheck=true;
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Pick Diagnosis.", "")); 
			RequestContext.getCurrentInstance().execute("confirmfordiagnoses.show()");
		}*/
		else{
			for(GenericMedActionPlan genericMedActionPlan:genericMedActionPlanList2){
				if(genericMedActionPlan.getGoalRangeValue()==0.0 && genericMedActionPlan.getGoalRangeEndValue()==0.0){
					validationCheck=true;
					FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Pick a goal for each parameter.", ""));  
					break;
				}
				else if(genericMedActionPlan.getAlertSevereHighRangeValue()==0.0 && genericMedActionPlan.getAlertSevereLowRangeValue()==0.0
						&& genericMedActionPlan.getAlertMediumHighRangeValue()==0.0&&genericMedActionPlan.getAlertMediumLowRangeValue()==0.0){
					validationCheck=true;
					FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Pick at least one Alert Level for each parameter.", "")); 
					break;
				}
				
				else if(((genericMedActionPlan.getGoalRangeValue()>Goal_INR_range_value || genericMedActionPlan.getGoalRangeValue()==Goal_INR_range_value)||(genericMedActionPlan.getGoalRangeEndValue()>Goal_INR_range_value || genericMedActionPlan.getGoalRangeEndValue()==Goal_INR_range_value)) && ((genericMedActionPlan.getGoalRangeSymbol().equalsIgnoreCase(">")||genericMedActionPlan.getGoalRangeSymbol().equalsIgnoreCase(">="))||(genericMedActionPlan.getGoalRangeEndSymbol().equalsIgnoreCase(">")||genericMedActionPlan.getGoalRangeEndSymbol().equalsIgnoreCase(">="))) &&  genericMedActionPlan.getMonitoringParameter().equalsIgnoreCase("INR")){
					validationCheck=true;
					RequestContext.getCurrentInstance().execute("confirmbox_for_inr_value.show()");  
					break;
				}
			}
		}
		return validationCheck;
	}
	
	private boolean validationCheckMedPlanforgreaterinrvalue(
			List<GenericMedActionPlan> genericMedActionPlanList2, PatientDiagnosesDetails patientDiagnosesDetailsObj2) {
		boolean validationCheck=false;

		if(genericMedActionPlanList2.size()==0){
			validationCheck=true;
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"No parameters have been selected to set up a Med Action Please select values or cancel.", ""));  
		}
		/*else if(patientDiagnosesDetailsObj2!=null && StringUtils.isBlank(patientDiagnosesDetailsObj2.getCode())){
			validationCheck=true;
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Pick Diagnosis.", "")); 
			RequestContext.getCurrentInstance().execute("confirmfordiagnoses.show()");
		}*/
		else{
			for(GenericMedActionPlan genericMedActionPlan:genericMedActionPlanList2){
				if(genericMedActionPlan.getGoalRangeValue()==0.0 && genericMedActionPlan.getGoalRangeEndValue()==0.0){
					validationCheck=true;
					FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Pick a goal for each parameter.", ""));  
					break;
				}
				else if(genericMedActionPlan.getAlertSevereHighRangeValue()==0.0 && genericMedActionPlan.getAlertSevereLowRangeValue()==0.0
						&& genericMedActionPlan.getAlertMediumHighRangeValue()==0.0&&genericMedActionPlan.getAlertMediumLowRangeValue()==0.0){
					validationCheck=true;
					FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Pick at least one Alert Level for each parameter.", "")); 
					break;
				}
				
				/*else if((genericMedActionPlan.getGoalRangeValue()>Goal_INR_range_value || genericMedActionPlan.getGoalRangeValue()==Goal_INR_range_value) && (genericMedActionPlan.getGoalRangeSymbol().equalsIgnoreCase(">")||genericMedActionPlan.getGoalRangeSymbol().equalsIgnoreCase(">=")) && (genericMedActionPlan.getGoalRangeValue()>Goal_INR_range_value || genericMedActionPlan.getGoalRangeValue()==Goal_INR_range_value) && (genericMedActionPlan.getGoalRangeEndSymbol().equalsIgnoreCase(">") || genericMedActionPlan.getGoalRangeEndSymbol().equalsIgnoreCase(">=")) && genericMedActionPlan.getMonitoringParameter().equalsIgnoreCase("INR")){
					validationCheck=true;
					RequestContext.getCurrentInstance().execute("confirmbox_for_inr_value.show()");  
					break;
				}*/
			}
		}
		return validationCheck;
	}

	/**
	 * @return the sendMessageEditRxList
	 */
	public List<SendMessageEditRx> getSendMessageEditRxList() {
		if (sendMessageEditRxList==null) {
			sendMessageEditRxList=new ArrayList<SendMessageEditRx>();
		}
		sendMessageEditRxList=patientMedicineService.getsendMessageEditRxList(new ContextUtil().getPatientId());
		return sendMessageEditRxList;
	}

	/**
	 * @param sendMessageEditRxList the sendMessageEditRxList to set
	 */
	public void setSendMessageEditRxList(List<SendMessageEditRx> sendMessageEditRxList) {
		this.sendMessageEditRxList = sendMessageEditRxList;
	}

	public PatientDiagnosesDetails getPatientDiagnosesDetailsObj() {
		if(patientDiagnosesDetailsObj==null){
			patientDiagnosesDetailsObj=new PatientDiagnosesDetails();
		}
		return patientDiagnosesDetailsObj;
	}

	public void setPatientDiagnosesDetailsObj(
			PatientDiagnosesDetails patientDiagnosesDetailsObj) {
		this.patientDiagnosesDetailsObj = patientDiagnosesDetailsObj;
	}

	/*		Warfarin and INR value high chart value 
	 *    @author Sanket Singh
	 * 
	 * */
	public String anticogValue(ActionEvent ae){

		String msg = "";
		List<LabLineBarChart>lineBarChartList=new ArrayList<LabLineBarChart>();
		List<LabLineBarChart> lineBarChartList1=new ArrayList<LabLineBarChart>();
		Map<String, List<LabLineBarChart>> labLineBarChartMap=new HashMap<String, List<LabLineBarChart>>();

		FacesContext context = FacesContext.getCurrentInstance();
		LabManageBean labManageBean=(LabManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"labManageBean");
		String lab=getLabname();
		logger.info("lab name is"+lab);
		Date periodDate = labManageBean.getTimePeriod();
		List<ProcedureResultHistory> labHistoryListForAntiCoag=labManageBean.getLabresulthistorylistforanticoag(lab,new ContextUtil().getPatientId(),periodDate);


		//System.out.println("value of list:::"+labHistoryListForAntiCoag.size());
		for (ProcedureResultHistory proResultHistory : labHistoryListForAntiCoag) {

			LabLineBarChart lineBarChart=new LabLineBarChart();
			ProcedureResultHistory procedureHistory=new ProcedureResultHistory();
			procedureHistory.setResult(proResultHistory.getResult());
			procedureHistory.setDateResult(proResultHistory.getDateResult());


			//lineBarChart.setDateResult(proResultHistory.getDateResult().getTime());
			lineBarChart.setLongStartDate(proResultHistory.getDateResult().getTime());


			lineBarChart.setResult(proResultHistory.getResult().toString());

			//System.out.println("===value=="+lineBarChart.getDateResult()+"Result value=="+lineBarChart.getResult());
			lineBarChartList.add(lineBarChart);
			/*	procedureResultHistoryLineChart.add(procedureHistory);*/

			//
		}

		String medicinename=getMedicinename();
		logger.info("medicine name is"+medicinename);

		fetchMedicationHistoryList =labManageBean.getMedicationhistoryforanticoag(new ContextUtil().getPatientId(),medicinename,periodDate);
		fetchMedicationHistoryListforanticoag=labManageBean.getMedicationdataforanticoag(new ContextUtil().getPatientId(), medicinename, periodDate);
		getWeeklyDose();
		getSigCodeList();
		
		
		for(PatientMedicationHistory patHistory:fetchMedicationHistoryList)
		{
			LabLineBarChart lineBarChart1=new LabLineBarChart();
			if(!weekdoselist.isEmpty())
			{
			for(WeeklyDose weekdose:weekdoselist)
			{
				if(patHistory.getDrugId()==weekdose.getDrugId()&&!(((patHistory.getStrength()==null)) || (patHistory.getStrength().isEmpty())))
				{
				System.out.println("Inside if condition of med name match"+"weekdose drug_id"+weekdose.getDrugId()+"patient drugid"+patHistory.getDrugId()+"pat123>>>>strength"+patHistory.getStrength());
				
				double sunday = 0,monday = 0,tuesday = 0,wednesday = 0,thursday = 0,friday = 0,saturday = 0,avg;
				//StringUtils.isAlphanumeric(weeklyDose.getSundayDose());
				
				if(weekdose.getSundayDose()!=null && (!weekdose.getSundayDose().isEmpty()))
					sunday=Double.parseDouble(weekdose.getSundayDose().trim());
				System.out.println("sunday::::::warfarin maintenance:::::"+sunday);

				if(weekdose.getMondayDose()!=null && (!weekdose.getMondayDose().isEmpty()))
					monday=Double.parseDouble(weekdose.getMondayDose().trim());

				if(weekdose.getTuesDay()!=null && (!weekdose.getTuesDay().isEmpty()))
					tuesday=Double.parseDouble(weekdose.getTuesDay().trim());

				if(weekdose.getWednesdayDose()!=null && (!weekdose.getWednesdayDose().isEmpty()))
					wednesday=Double.parseDouble(weekdose.getWednesdayDose().trim());

				if(weekdose.getThursdayDose()!=null && (!weekdose.getThursdayDose().isEmpty()))
					thursday=Double.parseDouble(weekdose.getThursdayDose().trim());

				if(weekdose.getFridayDose()!=null && (!weekdose.getFridayDose().isEmpty()) )
					friday=Double.parseDouble(weekdose.getFridayDose().trim());

				if(weekdose.getSaturdayDose()!=null && (!weekdose.getSaturdayDose().isEmpty()))
				{
					System.out.println("weekdose.getSaturdayDose():::::"+weekdose.getSaturdayDose());
					saturday=Double.parseDouble(weekdose.getSaturdayDose().trim());
					System.out.println("saturday deatails:::::"+saturday);
				}
				
				Double A1,A2,A3,A4,A5,A6,A7;
				A1=sunday*Double.parseDouble(patHistory.getStrength().substring(0, patHistory.getStrength().indexOf(" ")).replace(" ", "").replace(",", ""));
				A2=monday*Double.parseDouble(patHistory.getStrength().substring(0, patHistory.getStrength().indexOf(" ")).replace(" ", "").replace(",", ""));
				A3=tuesday*Double.parseDouble(patHistory.getStrength().substring(0, patHistory.getStrength().indexOf(" ")).replace(" ", "").replace(",", ""));
				A4=wednesday*Double.parseDouble(patHistory.getStrength().substring(0, patHistory.getStrength().indexOf(" ")).replace(" ", "").replace(",", ""));
				A5=thursday*Double.parseDouble(patHistory.getStrength().substring(0, patHistory.getStrength().indexOf(" ")).replace(" ", "").replace(",", ""));
				A6=friday*Double.parseDouble(patHistory.getStrength().substring(0, patHistory.getStrength().indexOf(" ")).replace(" ", "").replace(",", ""));
				A7=saturday*Double.parseDouble(patHistory.getStrength().substring(0, patHistory.getStrength().indexOf(" ")).replace(" ", "").replace(",", ""));
				logger.info("value of A1s"+A1+A2+A3+A4+A5+A6+A7);

				double avg1=A1+A2+A3+A4+A5+A6+A7;
				
				avg=avg1/7;

				avg=Math.round(avg*100.0)/100.0;
				lineBarChart1.setLongStartDate(patHistory.getStartDate().getTime());
				lineBarChart1.setStartDate(patHistory.getStartDate());

				lineBarChart1.setStrength(Double.toString(avg));
				lineBarChartList1.add(lineBarChart1);
				logger.info("avarage infromation"+avg);
				}
				else
				{
					for(SigCode sigcode:sigCodeList)
					{
						if(sigcode.getSigCode().equalsIgnoreCase(patHistory.getDirection())&&!(((patHistory.getStrength()==null)) || (patHistory.getStrength().isEmpty())))
								{
							Double A1,avg;
							A1=sigcode.getSigCodeValue()*Double.parseDouble(patHistory.getStrength().substring(0, patHistory.getStrength().indexOf(" ")).replace(" ", "").replace(",", ""));
							avg=Math.round(A1*100.0)/100.0;
							lineBarChart1.setLongStartDate(patHistory.getStartDate().getTime());
							lineBarChart1.setStartDate(patHistory.getStartDate());

							lineBarChart1.setStrength(Double.toString(avg));
							logger.info("avarage infromation"+avg);
							lineBarChartList1.add(lineBarChart1);
					
				}
					}
				}
			}
		}
			
			else
			{
			for(SigCode sigcode:sigCodeList)
						{
							if(sigcode.getSigCode().equalsIgnoreCase(patHistory.getDirection())&&!(((patHistory.getStrength()==null)) || (patHistory.getStrength().isEmpty())))
									{
								Double A1,avg;
								A1=sigcode.getSigCodeValue()*Double.parseDouble(patHistory.getStrength().substring(0, patHistory.getStrength().indexOf(" ")).replace(" ", "").replace(",", ""));
								avg=Math.round(A1*100.0)/100.0;
								lineBarChart1.setLongStartDate(patHistory.getStartDate().getTime());
								lineBarChart1.setStartDate(patHistory.getStartDate());

								lineBarChart1.setStrength(Double.toString(avg));
								logger.info("avarage infromation"+avg);
								lineBarChartList1.add(lineBarChart1);
									}
							
						}
			

			String actualDose="";

			/*if(!(((patHistory.getStrength()==null)) || (patHistory.getStrength().isEmpty())))
			{
				String fullDose=patHistory.getStrength();
				int length=0;
				if(fullDose.contains("m"))
				{
					length=fullDose.indexOf('m');
				}
				if(fullDose.contains("M"))
				{
					length=fullDose.indexOf('M');
				}
				fullDose=fullDose.substring(0, length);
				actualDose=fullDose;
				lineBarChart1.setLongStartDate(patHistory.getStartDate().getTime());

				lineBarChart1.setStrength(fullDose);

				// System.out.println("value of dose::::::::::::::::::"+lineBarChart1.getStartDate()+""+lineBarChart1.getStrength());
				lineBarChartList1.add(lineBarChart1);
			}*/
			}
		}
		//	System.out.println("value of list::::::"+procedureResultHistoryLineChart.size());
		

		/*insert data from patientmedication data*/
		
		for(PatientMedicationData patdata:fetchMedicationHistoryListforanticoag)
		{
			LabLineBarChart lineBarChart1=new LabLineBarChart();
			if(!weekdoselist.isEmpty())
			{
			for(WeeklyDose weekdose:weekdoselist)
			{
				if(patdata.getDrugId()==weekdose.getDrugId()&&!(((patdata.getStrengths()==null)) || (patdata.getStrengths().isEmpty())))
				{
				System.out.println("Inside if condition of med name match"+"weekdose drug_id"+weekdose.getDrugId()+"patient drugid"+patdata.getDrugId()+"pat123>>>>strength"+patdata.getStrengths());
				
				double sunday = 0,monday = 0,tuesday = 0,wednesday = 0,thursday = 0,friday = 0,saturday = 0,avg;
				//StringUtils.isAlphanumeric(weeklyDose.getSundayDose());
				
				if(weekdose.getSundayDose()!=null && (!weekdose.getSundayDose().isEmpty()))
					sunday=Double.parseDouble(weekdose.getSundayDose().trim());
				System.out.println("sunday::::::warfarin maintenance:::::"+sunday);

				if(weekdose.getMondayDose()!=null && (!weekdose.getMondayDose().isEmpty()))
					monday=Double.parseDouble(weekdose.getMondayDose().trim());

				if(weekdose.getTuesDay()!=null && (!weekdose.getTuesDay().isEmpty()))
					tuesday=Double.parseDouble(weekdose.getTuesDay().trim());

				if(weekdose.getWednesdayDose()!=null && (!weekdose.getWednesdayDose().isEmpty()))
					wednesday=Double.parseDouble(weekdose.getWednesdayDose().trim());

				if(weekdose.getThursdayDose()!=null && (!weekdose.getThursdayDose().isEmpty()))
					thursday=Double.parseDouble(weekdose.getThursdayDose().trim());

				if(weekdose.getFridayDose()!=null && (!weekdose.getFridayDose().isEmpty()) )
					friday=Double.parseDouble(weekdose.getFridayDose().trim());

				if(weekdose.getSaturdayDose()!=null && (!weekdose.getSaturdayDose().isEmpty()))
				{
					System.out.println("weekdose.getSaturdayDose():::::"+weekdose.getSaturdayDose());
					saturday=Double.parseDouble(weekdose.getSaturdayDose().trim());
					System.out.println("saturday deatails:::::"+saturday);
				}
				
				Double A1,A2,A3,A4,A5,A6,A7;
				A1=sunday*Double.parseDouble(patdata.getStrengths().substring(0, patdata.getStrengths().indexOf(" ")).replace(" ", "").replace(",", ""));
				A2=monday*Double.parseDouble(patdata.getStrengths().substring(0, patdata.getStrengths().indexOf(" ")).replace(" ", "").replace(",", ""));
				A3=tuesday*Double.parseDouble(patdata.getStrengths().substring(0, patdata.getStrengths().indexOf(" ")).replace(" ", "").replace(",", ""));
				A4=wednesday*Double.parseDouble(patdata.getStrengths().substring(0, patdata.getStrengths().indexOf(" ")).replace(" ", "").replace(",", ""));
				A5=thursday*Double.parseDouble(patdata.getStrengths().substring(0, patdata.getStrengths().indexOf(" ")).replace(" ", "").replace(",", ""));
				A6=friday*Double.parseDouble(patdata.getStrengths().substring(0, patdata.getStrengths().indexOf(" ")).replace(" ", "").replace(",", ""));
				A7=saturday*Double.parseDouble(patdata.getStrengths().substring(0, patdata.getStrengths().indexOf(" ")).replace(" ", "").replace(",", ""));
				logger.info("value of A1s"+A1+A2+A3+A4+A5+A6+A7);

				double avg1=A1+A2+A3+A4+A5+A6+A7;
				
				avg=avg1/7;

				avg=Math.round(avg*100.0)/100.0;
				lineBarChart1.setLongStartDate(patdata.getStartDate().getTime());
				lineBarChart1.setStartDate(patdata.getStartDate());
				lineBarChart1.setStrength(Double.toString(avg));
				lineBarChartList1.add(lineBarChart1);
				logger.info("avarage infromation"+avg);
				}
				else
				{
					for(SigCode sigcode:sigCodeList)
					{
						if(sigcode.getSigCode().equalsIgnoreCase(patdata.getDirections())&&!(((patdata.getStrengths()==null)) || (patdata.getStrengths().isEmpty())))
								{
							Double A1,avg;
							A1=sigcode.getSigCodeValue()*Double.parseDouble(patdata.getStrengths().substring(0, patdata.getStrengths().indexOf(" ")).replace(" ", "").replace(",", ""));
							avg=Math.round(A1*100.0)/100.0;
							lineBarChart1.setLongStartDate(patdata.getStartDate().getTime());
							lineBarChart1.setStartDate(patdata.getStartDate());
							lineBarChart1.setStrength(Double.toString(avg));
							logger.info("avarage infromation"+avg);
							lineBarChartList1.add(lineBarChart1);
					
				}
					}
				}
			}
		}
			
			else
			{
			for(SigCode sigcode:sigCodeList)
						{
							if(sigcode.getSigCode().equalsIgnoreCase(patdata.getDirections())&&!(((patdata.getStrengths()==null)) || (patdata.getStrengths().isEmpty())))
									{
								Double A1,avg;
								A1=sigcode.getSigCodeValue()*Double.parseDouble(patdata.getStrengths().substring(0, patdata.getStrengths().indexOf(" ")).replace(" ", "").replace(",", ""));
								avg=Math.round(A1*100.0)/100.0;
								lineBarChart1.setLongStartDate(patdata.getStartDate().getTime());
								lineBarChart1.setStartDate(patdata.getStartDate());
								lineBarChart1.setStrength(Double.toString(avg));
								logger.info("avarage infromation"+avg);
								lineBarChartList1.add(lineBarChart1);
									}
							
						}
			

			/*String actualDose="";*/

			/*if(!(((patHistory.getStrength()==null)) || (patHistory.getStrength().isEmpty())))
			{
				String fullDose=patHistory.getStrength();
				int length=0;
				if(fullDose.contains("m"))
				{
					length=fullDose.indexOf('m');
				}
				if(fullDose.contains("M"))
				{
					length=fullDose.indexOf('M');
				}
				fullDose=fullDose.substring(0, length);
				actualDose=fullDose;
				lineBarChart1.setLongStartDate(patHistory.getStartDate().getTime());

				lineBarChart1.setStrength(fullDose);

				// System.out.println("value of dose::::::::::::::::::"+lineBarChart1.getStartDate()+""+lineBarChart1.getStrength());
				lineBarChartList1.add(lineBarChart1);
			}*/
			}
		}
		
		
	
		
		Collections.sort(lineBarChartList1);
		System.out.println("updateId::::::::::lab sizeLLL"+lineBarChartList.size()+"KKKK:::::::"+lineBarChartList1.size());
		
		labLineBarChartMap.put("INR", lineBarChartList);
		labLineBarChartMap.put("Dose", lineBarChartList1);
		RequestContext context1 = RequestContext.getCurrentInstance();
		context1.addCallbackParam("jsonDataSet", new Gson().toJson(labLineBarChartMap));
		//logger.info("json chart for lab "+new Gson().toJson(lineBarChartList));
		System.out.println("JSOn Arrasy "+new Gson().toJson(labLineBarChartMap));
		
		System.out.println("labLineBarChartMap:::::::::::"+labLineBarChartMap.size());
		if(lineBarChartList.size()==0 && lineBarChartList1.size()==0)
		{
			msg="No data found";
			FacesContext.getCurrentInstance().addMessage("messageUpdateForNewAddMeds", new FacesMessage(FacesMessage.SEVERITY_ERROR,msg,""));
		}
		
		return new Gson().toJson(labLineBarChartMap);
		
	}
			
    
	  public void checkPatientRowMedicine(){
		logger.info(":::::::started checkPatientRowMedicine method to get row data for patient in patient portal for maedicine:::::::");

		Map<String, String> params = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();
		System.out.println("selected medicine by patient:::"+drugName+"::::"+params.get("drugName")); 
		patientMedicationData.setDrugName(params.get("drugName"));
		//PatientMedicationData patMedData = (PatientMedicationData) getPatientMedicineDataTable().getRowData();
		//patientMedicationData.setDrugName(patMedData.getDrugName());
		logger.info("value of drug::::::"+ patientMedicationData.getDrugName());
	}


	public String getMsgForOverview() {
		return msgForOverview;
	}

	public void setMsgForOverview(String msgForOverview) {
		this.msgForOverview = msgForOverview;
	}

	public List<String> getSelectedMonitoringParameters() {
		return selectedMonitoringParameters;
	}

	public void setSelectedMonitoringParameters(
			List<String> selectedMonitoringParameters) {
		this.selectedMonitoringParameters = selectedMonitoringParameters;
	}

	public void setPharmacyName(String pharmacyName) {
		this.pharmacyName = pharmacyName;
	}

	public String getPharmacyName() {
		return pharmacyName;
	}

	public List<MedandGenricmed> getAllClinicMedPlans() {
		int patientId=new ContextUtil().getPatientId();
		if(allClinicMedPlans == null)
		{
		allClinicMedPlans=patientMedicineService.getAllClinicMedPlans(patientId);
		}
		else
		{
		allClinicMedPlans=patientMedicineService.getAllClinicMedPlans(patientId);	
		}
		return allClinicMedPlans;
	}

	public void setAllClinicMedPlans(List<MedandGenricmed> allClinicMedPlans) {
		this.allClinicMedPlans = allClinicMedPlans;
	}
	
	/**
	 * @return the medicalActionPlanListforgenricandnongenricmed
	 */
	public List<MedandGenricmed> getMedicalActionPlanListforgenricandnongenricmed() {
		if(medicalActionPlanListforgenricandnongenricmed==null)
		{
			logger.info("111getMedicalActionPlanList::::");
			medicalActionPlanListforgenricandnongenricmed=new ArrayList<MedandGenricmed>();
			medicalActionPlanListforgenricandnongenricmed=patientMedicineService.findgenricandnongenricMedActionPlanForPatient(new ContextUtil().getPatientId(),new ContextUtil().getProviderId());
			for(MedandGenricmed med:medicalActionPlanListforgenricandnongenricmed)
			{
				int noOFdays=findNoOfdays(med.getLabfrequency());
				med.setNextLabDate(new DateUtil().AddDate(med.getLastupdatedate(), noOFdays));
			}
		}
		
		else
		{
			logger.info("111getMedicalActionPlanList::::in else");
			medicalActionPlanListforgenricandnongenricmed=new ArrayList<MedandGenricmed>();
			medicalActionPlanListforgenricandnongenricmed=patientMedicineService.findgenricandnongenricMedActionPlanForPatient(new ContextUtil().getPatientId(),new ContextUtil().getProviderId());
			for(MedandGenricmed med:medicalActionPlanListforgenricandnongenricmed)
			{
				int noOFdays=findNoOfdays(med.getLabfrequency());
				med.setNextLabDate(new DateUtil().AddDate(med.getLastupdatedate(), noOFdays));
			}
			
		}
		
		
		return medicalActionPlanListforgenricandnongenricmed;
	}

	/**
	 * @param medicalActionPlanListforgenricandnongenricmed the medicalActionPlanListforgenricandnongenricmed to set
	 */
	public void setMedicalActionPlanListforgenricandnongenricmed(
			List<MedandGenricmed> medicalActionPlanListforgenricandnongenricmed) {
		this.medicalActionPlanListforgenricandnongenricmed = medicalActionPlanListforgenricandnongenricmed;
	}
	
	public void deletemedforintervantion()
	{
		logger.info(changePatientMedicineBackUpdata.getGenericName()+"saveMedicineChangesOnViewRx:::::"+changePatientMedicineBackUpdata.getDrugsNotes()+
				changePatientMedicineBackUpdata.getDrugs()+":::patientMedicationData"+patientMedicationData.getId()
				+"::::::::::"+changePatientMedicineBackUpdata.getDrugId());
		getMedicalActionPlanListforgenricandnongenricmed();
		String msg="";
		FacesContext fc = FacesContext.getCurrentInstance();
		Map<String,String> params = fc.getExternalContext().getRequestParameterMap();
		//int rowid=Integer.parseInt(params.get("rowIdForMEdActionPlan"));
		String deleteMedActionPlanOrUpdate=params.get("Yes");
		deleteMedActionPlanOrUpdate = params.get("No");
		System.out.println("><<<<<<<<<<<<<<<<<<<<<<<<<<<<::"+deleteMedActionPlanOrUpdate);
		String drugIdDetails=String.valueOf(changePatientMedicineBackUpdata.getDrugId());
		System.out.println("drugIdDetails:::::"+drugIdDetails);

		if(changePatientMedicineBackUpdata.getGenericName().equals(WARFARIN))
		{
			//checkNotesForLab=0;
			showAnticoagMedactionPlanMessage=0;	
		}
		logger.info("selectIntervention::::::"+selectIntervention);
		if(selectIntervention==1)
		{
		logger.info("Generic Med action plan size "+medicalActionPlanListforgenricandnongenricmed.size());
		if(medicalActionPlanListforgenricandnongenricmed.size()==0){
			
			System.out.println("allGenericMedActionPlan:1234::::umesh"+drugIdDetails);
			changePatientMedicineBackUpdata.setMedicineStatus(DISCONTINUE_MEDS);
			changePatientMedicineBackUpdata.setModifyDate(new DateUtil().getTodayDate());
			patientMedicineService.deleteMedicineChanges(changePatientMedicineBackUpdata);
		}else{
			boolean deleteMedicationDataPerMedPlan=true;
		for (MedandGenricmed gne:medicalActionPlanListforgenricandnongenricmed)
		{
			
			System.out.println("medicalActionPlanListforgenricandnongenricmed:::::"+gne.getDrugId());
			String drugId=(gne.getDrugId()+".0");
			System.out.println("drugId456:::::"+gne.getDrugId());
			
			if(drugId.equals(drugIdDetails))
			{
				System.out.println("drugIdDetails:1234::::umesh"+drugIdDetails);
				
				changePatientMedicineBackUpdata.setMedicineStatus(DISCONTINUE_MEDS);
				changePatientMedicineBackUpdata.setModifyDate(new DateUtil().getTodayDate());
				if(deleteMedicationDataPerMedPlan){
				patientMedicineService.deleteMedicineChanges(changePatientMedicineBackUpdata);
				deleteMedicationDataPerMedPlan=false;
				}
				//setMsgForOverview( "Are you sure you want to permanently delete this medication and the associated med action plan?");
				//System.out.println("sure::::"+msgForOverview);
			 
			}
		else {
			System.out.println("LLLLLLLLLLL:::::::::PP");
			
			System.out.println("drugIdDetails:1234::::"+drugIdDetails);
			changePatientMedicineBackUpdata.setMedicineStatus(DISCONTINUE_MEDS);
			changePatientMedicineBackUpdata.setModifyDate(new DateUtil().getTodayDate());
			if(deleteMedicationDataPerMedPlan){//delete once only for medication data and all related med action plans are deleted at single shot
			patientMedicineService.deleteMedicineChanges(changePatientMedicineBackUpdata);
			deleteMedicationDataPerMedPlan=false;
			}
			//setMsgForOverview("Are you sure you want to permanently delete this medication?");
			//System.out.println("sure:123:::"+msgForOverview);
			
		}
		}
		}
		
		}
		else if(selectIntervention==6)
		{
			System.out.println("send message::::"+changePatientMedicineBackUpdata.getDrugId()+"LLLL"+new ContextUtil().getLoginId()
					+"pat id::"+new ContextUtil().getPatientId()+"chan"+changePatientMedicineBackUpdata.getDrugsNotes()
					+"gsadfhj"+sendMessageEditRx.getSendMsgToDocName()+"OOOOO"+patientMedicationData.getDrugsNotes()+"ffffff"+new ContextUtil().getLoggerFirstName()+" fast:::"+new ContextUtil().getLoggerLastName());
			//changePatientMedicineBackUpdata.setMedicineStatus(SEND_MESSAGE);

			sendMessageEditRx.setLoginDoctorId(new ContextUtil().getLoginId());
			sendMessageEditRx.setMedId(changePatientMedicineBackUpdata.getDrugId());
			sendMessageEditRx.setPatientId(new ContextUtil().getPatientId());
			sendMessageEditRx.setDrugsNotes(patientMedicationData.getDrugsNotes());
			sendMessageEditRx.setMessageSentDate(new DateUtil().getTodayDate());
			sendMessageEditRx.setSendMsgToDocName(sendMessageEditRx.getSendMsgToDocName());
			sendMessageEditRx.setSendMsgFromDocname(new ContextUtil().getLoggerFirstName()+" "+new ContextUtil().getLoggerLastName());

			patientMedicineService.saveMessageDetials(sendMessageEditRx);

		}
		else 
		{
			patientMedicationData.setMedicineStatus(MODIFY_MEDS);
			patientMedicationData.setCauseOfAddMeds(MODIFY_MEDS);
			patientMedicationData.setStartDate(new DateUtil().getTodayDate());
			patientMedicationData.setPrescriberName(new ContextUtil().getLoggerFirstName()+" " +new ContextUtil().getLoggedUserMiddleName() +" "+new ContextUtil().getLoggerLastName());
			patientMedicationData.setPrescriptionStatus(PRESCRIPITION_STATUS_PENDING);
			patientMedicationData.setFlagForVisit(true);
			patientMedicationData.setPrescriptionGuid(null);
						
			for(Medicine med:getAnticoagMedList())
			{
				if(med.getMedicinName().equalsIgnoreCase(patientMedicationData.getGenericName()))
					patientMedicationData.setFlagForMedActionPlan(med.isFlagForMedActionPlan());

			}
			patientMedicineService.modifyMedicineChange(patientMedicationData,changePatientMedicineBackUpdata,deleteMedActionPlanOrUpdate);
		}
		//	logger.info("size:::::::::: before delet"+patientMedicationDataList.size());
		patientMedicationDataList=null;
		medicalActionPlanList=null;
		copyAlertMedPlansFilter=null;
		currentAntiCoagMedList=new ArrayList<PatientMedicationData>();
		currentAntiplateletMedsList=new ArrayList<PatientMedicationData>();
		//logger.info("size:::::::::: after delet "+patientMedicationDataList.size());
		//patientMedicineService.saveValueForIntegration(new ContextUtil().getPatientId(), true);
		//getDisContinueMedicationListForPatient();
		//	return "go_to_persionalizeMedReview";
		}
		

	//Old method for parameter change on Med action Plan
	public void valueChangedEventMedPlan(ValueChangeEvent ve){
		List<String>oldValues=(List<String>) ve.getOldValue();
		List<String>newValues=(List<String>) ve.getNewValue();
		String selectedItem=new String();
		System.out.println("labUnit::::::"+selectedItem);
		 if (oldValues == null) {
			 oldValues = Collections.emptyList();
			
		    }if(newValues==null){
		    	newValues=Collections.emptyList();
		    }
		 logger.info("old values "+oldValues);
		 logger.info("new values "+newValues);
		  if (oldValues.size() > newValues.size()) {
			  oldValues = new ArrayList<String>(oldValues);
			  oldValues.removeAll(newValues);
			  if( oldValues.iterator().hasNext()){
		        selectedItem = oldValues.iterator().next();
			  }			      
		        logger.info("selectedItem if"+selectedItem);
		        GenericMedActionPlan genericMedActionPlan=new GenericMedActionPlan();
		        genericMedActionPlan.setMonitoringParameter(selectedItem);
		        if(genericMedActionPlanList.contains(genericMedActionPlan)){
		        	genericMedActionPlanList.remove(genericMedActionPlan);
		        }
		    }
		    else {
		    	newValues = new ArrayList<String>(newValues);
		    	newValues.removeAll(oldValues);
		    	if(newValues.iterator().hasNext()){
		       selectedItem = newValues.iterator().next();
		    	}			     
		       logger.info("selectedItem else"+selectedItem);
		       List<MasterMonitorParameters>paramtersList=patientMedicineService.getAllSubParameters(selectedItem);
		       if(newValues.size()>0){
		    	   if(paramtersList.size()>0){
		    		   for(MasterMonitorParameters masterMonitorParameters:paramtersList){
		    		   GenericMedActionPlan genericMedActionPlan=new GenericMedActionPlan();
						genericMedActionPlan.setDrugId(String.valueOf((int)patientMedicationData.getDrugId()));
						genericMedActionPlan.setDrugName(patientMedicationData.getDrugs());
						genericMedActionPlan.setStrength(patientMedicationData.getStrengths());
						genericMedActionPlan.setRegimen(patientMedicationData.getDirections());
						genericMedActionPlan.setUnit(patientMedicationData.getUnit());
						genericMedActionPlan.setDosageForm(patientMedicationData.getDosageForm());
						genericMedActionPlan.setPatientDiagnosesDetails(patientDiagnosesDetailsObj);
						genericMedActionPlan.setPrescriptionDate(patientMedicationData.getStartDate());
						genericMedActionPlan.setPrescribedBy(patientMedicationData.getPrescriberName());
						genericMedActionPlan.setDrugNameId(patientMedicationData.getDrugNameId());
						genericMedActionPlan.setParameterShortName(masterMonitorParameters.getChildParameter());
						genericMedActionPlan.setMonitoringParameter(masterMonitorParameters.getChildParameter());
					  if(!genericMedActionPlanList.contains(genericMedActionPlan)){
						  ProcedureType procedureTypeObj= patientMedicineService.getLabUnitBasedOnParameter(masterMonitorParameters.getChildParameter());
						  genericMedActionPlan.setLabUnit(procedureTypeObj.getUnits());
						  genericMedActionPlanList.add(genericMedActionPlan); 
					  }
		    		   }
		    	   }else{
					GenericMedActionPlan genericMedActionPlan=new GenericMedActionPlan();
					genericMedActionPlan.setDrugId(String.valueOf((int)patientMedicationData.getDrugId()));
					genericMedActionPlan.setDrugName(patientMedicationData.getDrugs());
					genericMedActionPlan.setStrength(patientMedicationData.getStrengths());
					genericMedActionPlan.setRegimen(patientMedicationData.getDirections());
					genericMedActionPlan.setUnit(patientMedicationData.getUnit());
					genericMedActionPlan.setDosageForm(patientMedicationData.getDosageForm());
					genericMedActionPlan.setPatientDiagnosesDetails(patientDiagnosesDetailsObj);
					genericMedActionPlan.setPrescriptionDate(patientMedicationData.getStartDate());
					genericMedActionPlan.setPrescribedBy(patientMedicationData.getPrescriberName());
					genericMedActionPlan.setDrugNameId(patientMedicationData.getDrugNameId());
					genericMedActionPlan.setParameterShortName(selectedItem);
					genericMedActionPlan.setMonitoringParameter(selectedItem);
				  if(!genericMedActionPlanList.contains(genericMedActionPlan)){
					  ProcedureType procedureTypeObj= patientMedicineService.getLabUnitBasedOnParameter(selectedItem);
					  genericMedActionPlan.setLabUnit(procedureTypeObj.getUnits());
					  genericMedActionPlanList.add(genericMedActionPlan); 
				  }
		    	   }
			  }
		    }
		  logger.info("modified old values "+oldValues);
		  logger.info("modified new values "+newValues);
		  logger.info("genericMedActionPlanList sie "+genericMedActionPlanList.size());
}

	/*
	 * Added on 26/Nov/2014 By Nagaraj
	 * 
	 */
	private ParentMedActionPlan parentMedActionPlan;
	
	
	public ParentMedActionPlan getParentMedActionPlan() {
		if(parentMedActionPlan==null){
			parentMedActionPlan=new ParentMedActionPlan();
			if(parentMedActionPlan.getChildLabParameters()==null){
				parentMedActionPlan.setChildLabParameters(new ArrayList<ChildMedActionPlanParameter>());
			}
		}
		return parentMedActionPlan;
	}
	public void setParentMedActionPlan(ParentMedActionPlan parentMedActionPlan) {
		this.parentMedActionPlan = parentMedActionPlan;
	}
	//upgraded Method based on master detail relationship from single table
		//so method needs to be updated in order to support master detail relationship
	//  Upgraded method for Med action plan -Master Detal relationship
	 public void onParameterChangeMedActionPlan(ValueChangeEvent ve){
		 List<String>oldValues=(List<String>) ve.getOldValue();
			List<String>newValues=(List<String>) ve.getNewValue();
			String selectedItem=new String();
			 if (oldValues == null) {
				 oldValues = Collections.emptyList();
				
			    }if(newValues==null){
			    	newValues=Collections.emptyList();
			    }
			 logger.info("old values "+oldValues);
			 logger.info("new values "+newValues);
			  if (oldValues.size() > newValues.size()) {//If any parameter is unchecked then oldValues size will be greater than newValues Size
				  oldValues = new ArrayList<String>(oldValues);
				  oldValues.removeAll(newValues);
				  if( oldValues.iterator().hasNext()){
			        selectedItem = oldValues.iterator().next();
				  }			      
			        logger.info("selectedItem if"+selectedItem);
			    
			  
			        List<ChildMonitoringParameters>childParametersList=new ArrayList<ChildMonitoringParameters>();
			        childParametersList=getSelectedChildParams(selectedItem);
			        if(parentMedActionPlan.getChildLabParameters()!=null){
			        
			        
			        	try{
			        	
			        		
			        	}catch(UnsupportedOperationException e){
			        		e.printStackTrace();
			        	}catch(IllegalStateException ie){
			        		ie.printStackTrace();
			        	}
			        }
			        
			        
			  }
			    else {
			    	newValues = new ArrayList<String>(newValues);
			    	newValues.removeAll(oldValues);
			    	if(newValues.iterator().hasNext()){
			       selectedItem = newValues.iterator().next();
			    	}			     
			       logger.info("selectedItem else"+selectedItem);
			       
			       if(newValues.size()>0){
			    	   medPlanSelectedParams=new ArrayList<String>();
						 
			    	   List<ChildMonitoringParameters>childParameters=new ArrayList<ChildMonitoringParameters>();
			    	   childParameters=getSelectedChildParams(selectedItem);
			    	   logger.info("child paramteres size "+childParameters.size());
			    	 List<MedandGenricmed>allClinicMAP=getAllClinicMedPlans();
			    	 List<MedandGenricmed>matchedMAP=new ArrayList<MedandGenricmed>();
			    	  medPlanMessages=new ArrayList<ParentMedActionPlan>();
			    	  List<ParentMedActionPlan>medPlanList=new ArrayList<ParentMedActionPlan>();
			    	 /* Map<Double,List<MedandGenricmed>>medPlanMAP=new LinkedHashMap<Double, List<MedandGenricmed>>();*/
			    	   for(ChildMonitoringParameters childParams:childParameters){
			    		   if(parentMedActionPlan==null){
			    			   parentMedActionPlan=new ParentMedActionPlan();
			    			   if(parentMedActionPlan.getChildLabParameters()==null){
			    				   parentMedActionPlan.setChildLabParameters(new ArrayList<ChildMedActionPlanParameter>());
			    			   }
			    		   }
			    		   medPlanSelectedParams.add(childParams.getLoincObj().getLabType());
			    		//  if(!duplicateCheckLabParams(parentMedActionPlan.getChildLabParameters(),childParams.getLoincObj())){
			    			/*  List<MedandGenricmed>messageObj=new ArrayList<MedandGenricmed>();*/
			    			
			    			  MasterLOINCData loincObj=new MasterLOINCData();
			    			  loincObj.setShortName(childParams.getLoincObj().getLabType());
			    			 logger.info("Bean validate MAP start");
			    			  MedandGenricmed medPlanTypeObj=patientMedicineService.validateMAPlabParameter(allClinicMAP,loincObj);
			    			  if(medPlanTypeObj!=null){
			    			  matchedMAP.add(medPlanTypeObj);
			    			  }
			    			  logger.info("Bean validate MAP end");
			    			  if(medPlanTypeObj==null){
			    				  parentMedActionPlan.getChildLabParameters().add(ConvertObjToChildMedPlanParams(childParams));
			    			  }else{
			    				if(Double.valueOf(medPlanTypeObj.getDrugId())!=parentMedActionPlan.getDrugId()){//selected drugId if MAP exists then no need to show message
			    				  medPlanList.addAll(patientMedicineService.convertObjToMasterDetail(medPlanTypeObj));
			    				}
			    				
			    			/*	  for(ParentMedActionPlan pMAPobj:medPlanList){
			    					  for(ChildMedActionPlanParameter cMAPobj:pMAPobj.getChildLabParameters()){
			    						  if(cMAPobj.getLabType().equalsIgnoreCase(loincObj.getShortName())){
			    							  medPlanMessages.add(pMAPobj);
			    							  break;
			    						  }
			    					  }
			    					  
			    				  }*/
			    			  }
			    			
			    		  }
			    		
			    	 //  }
			    	 /*  if(!medPlanMAP.isEmpty()){
			    		   List<ParentMedActionPlan>medPlanList=patientMedicineService.convertObjToMasterDetail(medPlanMAP);
			    		   medPlanMessages.addAll(medPlanList);
			    		   for(ParentMedActionPlan pType:medPlanMessages){
			    			   logger.info("drug Name "+pType.getDrugName());
			    			   for(ChildMedActionPlanParameter cType:pType.getChildLabParameters()){
			    				   logger.info("child Paramter Name "+cType.getLabType());
			    			   }
			    		   }
			    	   }*/
			    	   if(!medPlanList.isEmpty()){
			    		   medPlanMessages=new ArrayList<ParentMedActionPlan>();
			    		   medPlanMessages=patientMedicineService.convertObjToMasterDetailType(medPlanList);
			    		   logger.info("Master detail relationship size "+medPlanMessages.size());
			    		   RequestContext.getCurrentInstance().execute("medPlanExistsWidgetVar.show()");
/*			    		   for(ParentMedActionPlan pType:masterDetailList){
			    			   logger.info("drug Name "+pType.getDrugName());
			    			   for(ChildMedActionPlanParameter cType:pType.getChildLabParameters()){
			    				   logger.info("child Paramter Name "+cType.getLabType());
			    			   }
			    		   }*/
			    	   }
			       }
			
			    }
			/*  if(!medPlanMessages.isEmpty()){
				  RequestContext.getCurrentInstance().execute("medPlanExistsWidgetVar.show()");
			  }*/
		/*	  for(ChildMedActionPlanParameter medPlanParam:parentMedActionPlan.getChildLabParameters()){
				  logger.info("param name "+medPlanParam.getLabParameterObj().getLabType()+"\n"+medPlanParam.getLabParameterObj().getLoincCode()+"\n"+medPlanParam.getLabParameterObj().getLaboratoryName());
			  }*/
			  logger.info("modified old values "+oldValues);
			  logger.info("modified new values "+newValues);
			  //logger.info("genericMedActionPlanList sie "+genericMedActionPlanList.size());
	}
	
	
	

	/*public String getYes() {
		return Yes;
	}

	public void setYes(String yes) {
		Yes = yes;
	}*/
	

	


		private List<ChildMonitoringParameters> getSelectedChildParams(
			String selectedItem) {
			  List<ChildMonitoringParameters>childParameters=new ArrayList<ChildMonitoringParameters>();
			  for(MasterMonitorParameters labParam:monitoringParamsList){
	    		   if(labParam.getParentParameter().equalsIgnoreCase(selectedItem)){
	    			   childParameters.addAll(labParam.getChildMonitoringParameters());
	    			   break;
	    		   }
	    		  
	    	   }
		return childParameters;
	}
		private ChildMedActionPlanParameter ConvertObjToChildMedPlanParams(
			ChildMonitoringParameters childParams) {
		ChildMedActionPlanParameter childMedActionPlanParameter=new ChildMedActionPlanParameter();
		childMedActionPlanParameter.setLabParameterObj(childParams.getLoincObj());
		return childMedActionPlanParameter;
	}
		private boolean duplicateCheckLabParams(
			List<ChildMedActionPlanParameter> list,
			ProcedureType loincObj) {
		for(ChildMedActionPlanParameter childLabParam:list){
			if(childLabParam.getLabParameterObj().getId()==loincObj.getId()){
				return true;
			}
		}
		return false;
	}
		
		/* Method Displaying High chart Value in graph at MedAction Plan List
		 * 
		 * @Author Sanket Singh
		 * 
		 * 
		 * */
		public String medActionPlanHighChart(ActionEvent ae)
		{
		
			//logger.info("value in bean::::::::::::"+medActionListForChart.size());
			List<LabLineBarChart>medBarChartList=new ArrayList<LabLineBarChart>();
			List<LabLineBarChart>medBarList=new ArrayList<LabLineBarChart>();
			Map<String, List<LabLineBarChart>>medBarChartMap=new HashMap<String, List<LabLineBarChart>>();
			FacesContext context = FacesContext.getCurrentInstance();
			LabManageBean labManageBean=(LabManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"labManageBean");
			List<ProcedureResultHistory> labHistoryListForMedActionPlan=labManageBean.getProcedureResultListForCurrentLab();
		    logger.info("value of list:::::"+labHistoryListForMedActionPlan.size());
			for(ProcedureResultHistory medPlan:labHistoryListForMedActionPlan)
			{	LabLineBarChart labBarChartformed=new LabLineBarChart();
				if(medPlan.getLabName().equals(medPlan.getLabName()))
				{
			
				labBarChartformed.setResult(medPlan.getResult().toString());
				}
				labBarChartformed.setLongStartDate(medPlan.getDateResult().getTime());
				medBarChartList.add(labBarChartformed);

			}
			
			
		
	//	System.out.println("list size:::::::::"+medActionListForChart.size());
		
	    
		
		
		for(MedandGenricmed value:medActionListForChart)
		{
			LabLineBarChart labLineBarChart=new LabLineBarChart();

			labLineBarChart.setStrength(value.getDose());
			labLineBarChart.setStartDate(value.getCreatedate());
			medBarList.add(labLineBarChart);
		}
		
		
			
			medBarChartMap.put("Lab", medBarChartList);
			//medBarChartMap.put("loincKeyMaster", medBarChartList);
			medBarChartMap.put("Dose", medBarList);
			RequestContext context1 = RequestContext.getCurrentInstance();
			context1.addCallbackParam("jsonDataSet", new Gson().toJson(medBarChartMap));
			//logger.info("json chart for lab "+new Gson().toJson(lineBarChartList));
			System.out.println("JSOn Arrasy "+new Gson().toJson(medBarChartMap));
			
		
			return  new Gson().toJson(medBarChartMap);

		}

		
		public void setMedActionListForChart(List<MedandGenricmed> medActionListForChart) {
			this.medActionListForChart = medActionListForChart;
		}
      
		
     String labType="";
     String medicineName;
		public List<MedandGenricmed> getMedActionListForChart() {
			
			
		medActionListForChart = patientMedicineService.fetchGenericList(new ContextUtil().getPatientId());
	
		
			return medActionListForChart;
		}
		
	/*	public void changeActionOnClick(AjaxBehaviorEvent e)
		
		{
			logger.info("value in change method:::::::::::"+medActionListForChart.size());
			logger.info(medandGenricmed.getMedicinename()+"<<>><<><><><><>::::"+medActionPlan.getRegimen()+":::::::::::::changeActionOnClick:::"
					+"111::::"+medandGenricmed.getLab());
		
	
	  LinkedHashMap<String, String> medActionPlan1 = new LinkedHashMap<String,String>();
			
			 getMedActionListForChart();
			 MedandGenricmed medandGenricmed=new MedandGenricmed();
		for(MedandGenricmed med:medActionListForChart)
			{
			labType=med.getLab();
				
					
				medicineName=med.getMedicinename();
				logger.info("medicine name:::"+medicineName+"<><><>value of lab<><><><>"+labType);
				Object newValue = e.toString(); 
				
				logger.info("medicine name==="+newValue);
				
				if(med.getLab().equals(med.getLab())|| med.getMedicinename().contains(med.getMedicinename()))
			
					medandGenricmed.setMedicinename(med.getMedicinename());
					
				
					logger.info("newvalue1<><><><><><"+medandGenricmed.getMedicinename());
		logger.info("medicine value :::::::::"+medicineName);
		
		logger.info("value in medicine:::::"+medicineName);
				
			}*/
		
	

	

		

		public MedandGenricmed getMedandGenricmed() {
			return medandGenricmed;
		}

		public void setMedandGenricmed(MedandGenricmed medandGenricmed) {
			this.medandGenricmed = medandGenricmed;
		}

		public String getMedicineName() {
			return medicineName;
		}

		public void setMedicineName(String medicineName) {
			this.medicineName = medicineName;
		}
		
		public void updateMedPlanIndicator(){
			  getPatientMedicationDataList();
			  getAllClinicMedPlans();
			  
			  logger.info("all clinics med plans size for update indicator " + allClinicMedPlans.size());
			  
			  if(allClinicMedPlans.size()==0 )
		    	{
		    	System.out.println(":::::::::KKKK::::::"+allClinicMedPlans.size());
		    	patientMedicationData.setMedPlanExists(false);
		    	}
			  else
			  {
			  for (PatientMedicationData patientMedicationData : patientMedicationDataList) {
			   for (MedandGenricmed medPlans : allClinicMedPlans) {
			    if (medPlans.getDrugId()
			      .equals(String.valueOf((int) patientMedicationData
			        .getDrugId()))) 
			    {
			
			    	
			     patientMedicationData.setMedPlanExists(true);
			     break;
			    }
			    else if(!(medPlans.getDrugId().equals(String.valueOf((int) patientMedicationData.getDrugId()))))
			    {
			    	 logger.info("all clinics med plans size for update12345 indicator " + allClinicMedPlans.size());
			    	patientMedicationData.setMedPlanExists(false);
			    	break;
			    	
			    	
			    }
			    
			   }
			  }
			  }
			 }
			  
			//}
		/**
		 * overViewFilter.jsf#Prescriber
		 * Name of All Presciber use in filter section 
		 * @return All Precriber Name List
		 * 
		 */
		public List<PrescriberFilter> getPrescriberFilterList() {
			//int loggerdUserId=new ContextUtil().getLoginId();
			//String loggedInFirstName=new ContextUtil().getLoggerFirstName();
			//String loggedInLastName=new ContextUtil().getLoggerLastName();
			//String loggedInMiddleName=new ContextUtil().getLoggedUserMiddleName();
			
			if(prescriberFilterList==null){
				prescriberFilterList=new ArrayList<PrescriberFilter>();
				getCopyOriginalPatientMedicationList();
				for(PatientMedicationData patientMedicationData:copyOriginalPatientMedicationList){
					PrescriberFilter prescriberFilter=new PrescriberFilter();
					
					prescriberFilter.setPrescriberName(patientMedicationData.getPrescriberName().trim());
					prescriberFilter.setPrecriberId(patientMedicationData.getDoctorId());
					 prescriberFilter.setDrugId(patientMedicationData.getDrugId());
					  prescriberFilter.setDrugName(patientMedicationData.getDrugs());
					if(!prescriberFilterList.contains(prescriberFilter)){
						prescriberFilterList.add(prescriberFilter);
					}
				}
			}
			return prescriberFilterList;
		}

		public void setPrescriberFilterList(List<PrescriberFilter> prescriberFilterList) {
			this.prescriberFilterList = prescriberFilterList;
		}

		public List<String> getPrescriberFilterByName() {
			if(prescriberFilterByName==null){
				prescriberFilterByName=new ArrayList<String>();
			}
			return prescriberFilterByName;
		}

		public void setPrescriberFilterByName(List<String> prescriberFilterByName) {
			this.prescriberFilterByName = prescriberFilterByName;
		}
		
		public void overviewFilter(ValueChangeEvent event){
		
		}
		/**
		 * method used on overViewFilter.jsf 
		 * Analyze all Filter clicked on this 
		 * 
		 */
		public void filterOverview(){
		
			logger.info("selected Prescriber filters size from overview "+prescriberFilterByName.size());
			logger.info("selected drug filters size from overview "+drugFilterByName.size());
			logger.info("selected formulary filters size from overview  "+formularyFilterByTier.size());
			logger.info("selected alert level filters size from overview  "+alertFilterLevels.size());
			logger.info("alert type filters "+alertTypeFilterLevels.size());
			logger.info("Selected value for ACO measure "+acoMeasureSelectedOption);
			logger.info("Selected med classfication size "+medData.size());
			logger.info("selected therapeutic categories size "+medCategory.size());
			logger.info("Selected drug Type like specialty and Non specialty "+drugType.size());
			List<String>allFilterList=new ArrayList<String>();
	
			allFilterList.addAll(prescriberFilterByName);
			allFilterList.addAll(drugFilterByName);
			allFilterList.addAll(formularyFilterByTier);
			allFilterList.addAll(alertTypeFilterLevels);
			allFilterList.addAll(alertFilterLevels);
			allFilterList.addAll(medData);
			allFilterList.addAll(medCategory);
			allFilterList.add(String.valueOf(acoMeasureSelectedOption));
			allFilterList.addAll(drugType);
			logger.info("All filters in single List size "+allFilterList.size());
			try{
			if(prescriberFilterByName.size()==getPrescriberFilterList().size() && drugFilterByName.size()==getDrugFilterList().size() 
					&& formularyFilterByTier.size()==9 && alertFilterLevels.size()==getAlertFilters().size() 
					&& alertTypeFilterLevels.size()==9 && acoMeasureSelectedOption && medData.size()==getDrugCategoryList().size() && medCategory.size()==getTherapeuticCategories().size() && drugType.size()==2){
				copyAlertMedPlansFilter=new ArrayList<AlertGenericMedActionLab>();
				copyAlertMedPlansFilter.addAll(alertMedActionPlans);
				copyOriginalPatientMedicationList=new ArrayList<PatientMedicationData>();
				for(PatientMedicationData patientMedicationData:filterPatientMedicationList){
					patientMedicationData.setTotalCount(patientMedicationData.getOriginalCount());
					patientMedicationData.setIssuesLevel(patientMedicationData.getOriginalIssueLevel());
				}
				
				copyOriginalPatientMedicationList.addAll(filterPatientMedicationList);
				acoPatientMeasureFilterPageList=new ArrayList<ACOPatientMeasure>();
				acoPatientMeasureFilterPageList.addAll(patientmesure);
			/*	anticoagClinicMessages=new ArrayList<MedActionPlan>();
				anticoagClinicMessages.addAll(medActionListForINRLabMessage);*/
				anticoagAlertMessageObj=new MedActionPlan();
				setAnticoagAlertMessageObj(getLatestMedActionPlanForINR());
				//setShowNotesForINRlabOvw(isShowNotesForINRLab());
			}
			else if(allFilterList.size()>0){
				boolean conditionChk=true;
				boolean clinicMessagesAlertsCheck=true;
				boolean acoMeasure=true;
				boolean anticoagAlertsDefaultMsg=true;
				boolean showAnticoagMessages=true;
				List<PatientMedicationData>temp2List=new ArrayList<PatientMedicationData>();
				List<AlertGenericMedActionLab>tempAlertsList=new ArrayList<AlertGenericMedActionLab>();
			//	List<MedActionPlan>tempAnticoagMessages=new ArrayList<MedActionPlan>();
				List<ACOPatientMeasure>tempACOmeasure=new ArrayList<ACOPatientMeasure>();
				MedActionPlan temporaryAnticoagMsgObj=new MedActionPlan();
				if(prescriberFilterByName.size()>0 ){
					List<PatientMedicationData>temporaryPatientMedicationList=new ArrayList<PatientMedicationData>();
				for(PatientMedicationData patientMedicationData:filterPatientMedicationList){
					patientMedicationData.setTotalCount(patientMedicationData.getOriginalCount());
					patientMedicationData.setIssuesLevel(patientMedicationData.getOriginalIssueLevel());
					for(String precriberName:prescriberFilterByName){
						if(precriberName.equalsIgnoreCase(patientMedicationData.getPrescriberName())){
							if(!temporaryPatientMedicationList.contains(patientMedicationData)){
								temporaryPatientMedicationList.add(patientMedicationData);
								}
						}
					}
					}
				temp2List.addAll(temporaryPatientMedicationList);
				if(temp2List.size()==0){
					conditionChk=false;
				}
				}
				if(alertFilterLevels.size()>0){
					List<PatientMedicationData>temporaryPatientMedicationList=new ArrayList<PatientMedicationData>();
					List<AlertGenericMedActionLab>temporaryGenericMedPlanAlerts=new ArrayList<AlertGenericMedActionLab>();
					List<ACOPatientMeasure>temporaryACOmeasures=new ArrayList<ACOPatientMeasure>();
					List<MedActionPlan>temporaryAnticoagAlerts=new ArrayList<MedActionPlan>();
					
					if(temp2List.size()>0 ){
					for(PatientMedicationData patientMedicationData:temp2List){
						patientMedicationData.setTotalCount(patientMedicationData.getOriginalCount());
						patientMedicationData.setIssuesLevel(patientMedicationData.getOriginalIssueLevel());
						for(String alertFilter:alertFilterLevels){
							
							if(alertFilter.equalsIgnoreCase("Low")){
								if(alertFilter.equalsIgnoreCase(patientMedicationData.getIssuesLevel())){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}else if(alertFilter.equalsIgnoreCase("Low") && patientMedicationData.getIssuesLevel()==null){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}
								//commented as per #1069 as  formulary status changed as per 22/Jan/2015
							/*	else if(patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 1") || patientMedicationData.getFormularySymbol().equalsIgnoreCase("On Formulary")){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}*/
								else if(patientMedicationData.getFormularySymbol().equalsIgnoreCase("Unlisted Drug") || patientMedicationData.getFormularySymbol().equalsIgnoreCase("On Formulary")){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}
								else if(patientMedicationData.getAttentionRating()!=null && alertFilter.equalsIgnoreCase(patientMedicationData.getAttentionRating())){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}else if(patientMedicationData.getCompliancePercentage()>80){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}
								
							}else if(alertFilter.equalsIgnoreCase("Medium")){
								if(alertFilter.equalsIgnoreCase(patientMedicationData.getIssuesLevel())){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}else if(patientMedicationData.getAttentionRating()!=null && alertFilter.equalsIgnoreCase(patientMedicationData.getAttentionRating())){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}else if(patientMedicationData.getCompliancePercentage()>60 && patientMedicationData.getCompliancePercentage()<=80){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}
								//commented as per #1069 as  formulary status changed as per 22/Jan/2015
								/*else if(patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 2") || patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 3")||patientMedicationData.getFormularySymbol().equalsIgnoreCase("Prior Authorization")){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}*/
								else if(patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 1") || patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 2") || patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 3")||patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 4 and above")){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}
							}else if(alertFilter.equalsIgnoreCase("High")){
								if(alertFilter.equalsIgnoreCase(patientMedicationData.getIssuesLevel())){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}else if(patientMedicationData.getAttentionRating()!=null && alertFilter.equalsIgnoreCase(patientMedicationData.getAttentionRating())){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}else if(patientMedicationData.getCompliancePercentage()>0 && patientMedicationData.getCompliancePercentage()<=60){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}	
								//commented as per #1069 as  formulary status changed as per 22/Jan/2015
							/*	else if(patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 4 and above") || patientMedicationData.getFormularySymbol().equalsIgnoreCase("Non Formulary")
										||patientMedicationData.getFormularySymbol().equalsIgnoreCase("Unlisted Drug")||patientMedicationData.getFormularySymbol().equalsIgnoreCase("Not Reimbursed")){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}*/
								else if(patientMedicationData.getFormularySymbol().equalsIgnoreCase("Prior Authorization") || patientMedicationData.getFormularySymbol().equalsIgnoreCase("Non Formulary")
										||patientMedicationData.getFormularySymbol().equalsIgnoreCase("Not Reimbursed")){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}
								
							}
						}
					}
					}else if(conditionChk){
						for(PatientMedicationData patientMedicationData:filterPatientMedicationList){
							patientMedicationData.setTotalCount(patientMedicationData.getOriginalCount());
							patientMedicationData.setIssuesLevel(patientMedicationData.getOriginalIssueLevel());
							for(String alertFilter:alertFilterLevels){
								
								if(alertFilter.equalsIgnoreCase("Low")){
									if(alertFilter.equalsIgnoreCase(patientMedicationData.getIssuesLevel())){
										if(!temporaryPatientMedicationList.contains(patientMedicationData)){
											temporaryPatientMedicationList.add(patientMedicationData);
											}
									}else if(alertFilter.equalsIgnoreCase("Low") && patientMedicationData.getIssuesLevel()==null){
										if(!temporaryPatientMedicationList.contains(patientMedicationData)){
											temporaryPatientMedicationList.add(patientMedicationData);
											}
									}
									//commented as per #1069 as  formulary status changed as per 22/Jan/2015
								/*	else if( patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 1") || patientMedicationData.getFormularySymbol().equalsIgnoreCase("On Formulary")){
										if(!temporaryPatientMedicationList.contains(patientMedicationData)){
											temporaryPatientMedicationList.add(patientMedicationData);
											}
									}*/
									else if(patientMedicationData.getFormularySymbol().equalsIgnoreCase("Unlisted Drug") || patientMedicationData.getFormularySymbol().equalsIgnoreCase("On Formulary")){
										if(!temporaryPatientMedicationList.contains(patientMedicationData)){
											temporaryPatientMedicationList.add(patientMedicationData);
											}
									}
									else if(patientMedicationData.getAttentionRating()!=null && alertFilter.equalsIgnoreCase(patientMedicationData.getAttentionRating())){
										if(!temporaryPatientMedicationList.contains(patientMedicationData)){
											temporaryPatientMedicationList.add(patientMedicationData);
											}
									}else if(patientMedicationData.getCompliancePercentage()>80){
										if(!temporaryPatientMedicationList.contains(patientMedicationData)){
											temporaryPatientMedicationList.add(patientMedicationData);
											}
									}
									
								}else if(alertFilter.equalsIgnoreCase("Medium")){
									if(alertFilter.equalsIgnoreCase(patientMedicationData.getIssuesLevel())){
										if(!temporaryPatientMedicationList.contains(patientMedicationData)){
											temporaryPatientMedicationList.add(patientMedicationData);
											}
									}else if(patientMedicationData.getAttentionRating()!=null && alertFilter.equalsIgnoreCase(patientMedicationData.getAttentionRating())){
										if(!temporaryPatientMedicationList.contains(patientMedicationData)){
											temporaryPatientMedicationList.add(patientMedicationData);
											}
									}else if(patientMedicationData.getCompliancePercentage()>60 && patientMedicationData.getCompliancePercentage()<=80){
										if(!temporaryPatientMedicationList.contains(patientMedicationData)){
											temporaryPatientMedicationList.add(patientMedicationData);
											}
									}
									//commented as per #1069 as  formulary status changed as per 22/Jan/2015
								/*	else if(patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 2") || patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 3")||patientMedicationData.getFormularySymbol().equalsIgnoreCase("Prior Authorization")){
										if(!temporaryPatientMedicationList.contains(patientMedicationData)){
											temporaryPatientMedicationList.add(patientMedicationData);
											}
									}*/
									else if(patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 1") || patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 2") || patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 3")||patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 4 and above")){
										if(!temporaryPatientMedicationList.contains(patientMedicationData)){
											temporaryPatientMedicationList.add(patientMedicationData);
											}
									}
								}else if(alertFilter.equalsIgnoreCase("High")){
									if(alertFilter.equalsIgnoreCase(patientMedicationData.getIssuesLevel())){
										if(!temporaryPatientMedicationList.contains(patientMedicationData)){
											temporaryPatientMedicationList.add(patientMedicationData);
											}
									}else if(patientMedicationData.getAttentionRating()!=null && alertFilter.equalsIgnoreCase(patientMedicationData.getAttentionRating())){
										if(!temporaryPatientMedicationList.contains(patientMedicationData)){
											temporaryPatientMedicationList.add(patientMedicationData);
											}
									}else if(patientMedicationData.getCompliancePercentage()>0 && patientMedicationData.getCompliancePercentage()<=60){
										if(!temporaryPatientMedicationList.contains(patientMedicationData)){
											temporaryPatientMedicationList.add(patientMedicationData);
											}
									}	
									//commented as per #1069 as  formulary status changed as per 22/Jan/2015
									/*else if(patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 4 and above") || patientMedicationData.getFormularySymbol().equalsIgnoreCase("Non Formulary")
											||patientMedicationData.getFormularySymbol().equalsIgnoreCase("Unlisted Drug")||patientMedicationData.getFormularySymbol().equalsIgnoreCase("Not Reimbursed")){
										if(!temporaryPatientMedicationList.contains(patientMedicationData)){
											temporaryPatientMedicationList.add(patientMedicationData);
											}
									}*/
									else if(patientMedicationData.getFormularySymbol().equalsIgnoreCase("Prior Authorization") || patientMedicationData.getFormularySymbol().equalsIgnoreCase("Non Formulary")
											||patientMedicationData.getFormularySymbol().equalsIgnoreCase("Not Reimbursed")){
										if(!temporaryPatientMedicationList.contains(patientMedicationData)){
											temporaryPatientMedicationList.add(patientMedicationData);
											}
									}
									
								}
							}
						}
					
					}
					if(tempAlertsList.size()>0){
					for(AlertGenericMedActionLab alertGenericMedActionLab:tempAlertsList){
						for(String selectedFilter:alertFilterLevels){
						if(selectedFilter.equalsIgnoreCase(alertGenericMedActionLab.getSeverityLevel())){
							if(!temporaryGenericMedPlanAlerts.contains(alertGenericMedActionLab)){
								temporaryGenericMedPlanAlerts.add(alertGenericMedActionLab);
							}
						}
						}
					}
					}else if(clinicMessagesAlertsCheck){
						for(AlertGenericMedActionLab alertGenericMedActionLab:alertMedActionPlans){
							for(String selectedFilter:alertFilterLevels){
							if(selectedFilter.equalsIgnoreCase(alertGenericMedActionLab.getSeverityLevel())){
								if(!temporaryGenericMedPlanAlerts.contains(alertGenericMedActionLab)){
									temporaryGenericMedPlanAlerts.add(alertGenericMedActionLab);
								}
							}
							}
						}
						
					}
					//For Anticoag Alert Messages Filter
					/*if(tempAnticoagMessages.size()>0){
						for(MedActionPlan medActionPlan:tempAnticoagMessages){
							for(String selectedFilter:alertFilterLevels){
								if(selectedFilter.equalsIgnoreCase("High")){
								//	if(!temporaryAnticoagAlerts.contains(medActionPlan)){
										temporaryAnticoagAlerts.add(medActionPlan);
								//	}
								}
							}
						}
						
					}else if(anticoagAlertsDefaultMsg){
						for(MedActionPlan medActionPlan:medActionListForINRLabMessage){
							for(String selectedFilter:alertFilterLevels){
								if(selectedFilter.equalsIgnoreCase("High")){
								//	if(!temporaryAnticoagAlerts.contains(medActionPlan)){
										temporaryAnticoagAlerts.add(medActionPlan);
								//	}
								}
							}
						}
					}*/
					
					if(StringUtils.isNotBlank(getLatestMedActionPlanForINR().getLabImageStatusForINR())){
						for(String selectedFilter:alertFilterLevels){
							if(selectedFilter.equalsIgnoreCase("High")){
								if(latestMedActionPlanForINR.getLabImageStatusForINR().equalsIgnoreCase("Red")){
									temporaryAnticoagMsgObj=latestMedActionPlanForINR;
									showAnticoagMessages=false;
									
								}
							}else if(selectedFilter.equalsIgnoreCase("Medium")){
								if(latestMedActionPlanForINR.getLabImageStatusForINR().equalsIgnoreCase("Amber")){
									temporaryAnticoagMsgObj=latestMedActionPlanForINR;
									showAnticoagMessages=false;
									
								}
								
							}else if(selectedFilter.equalsIgnoreCase("Low")){
								if(latestMedActionPlanForINR.getLabImageStatusForINR().equalsIgnoreCase("Green")){
									temporaryAnticoagMsgObj=latestMedActionPlanForINR;
									showAnticoagMessages=false;
									
								}
							}
						}
					}
					
					
					if(acoMeasureSelectedOption){
					if(tempACOmeasure.size()>0){
						for(ACOPatientMeasure acoPatientMeasure:tempACOmeasure){
							for(String alertLevel:alertFilterLevels){
								if(alertLevel.equalsIgnoreCase("Low") && acoPatientMeasure.getActive()==0){
									if(!temporaryACOmeasures.contains(acoPatientMeasure)){
										temporaryACOmeasures.add(acoPatientMeasure);
									}
								}else if(alertLevel.equalsIgnoreCase("High") && acoPatientMeasure.getActive()==1){
									if(!temporaryACOmeasures.contains(acoPatientMeasure)){
										temporaryACOmeasures.add(acoPatientMeasure);
									}
								}
							}
						}
						
					}else if(acoMeasure){
						for(ACOPatientMeasure acoPatientMeasure:patientmesure){
							for(String alertLevel:alertFilterLevels){
								if(alertLevel.equalsIgnoreCase("Low") && acoPatientMeasure.getActive()==0){
									if(!temporaryACOmeasures.contains(acoPatientMeasure)){
										temporaryACOmeasures.add(acoPatientMeasure);
									}
								}else if(alertLevel.equalsIgnoreCase("High") && acoPatientMeasure.getActive()==1){
									if(!temporaryACOmeasures.contains(acoPatientMeasure)){
										temporaryACOmeasures.add(acoPatientMeasure);
									}
								}
							}
						}
						
					}
					}
					tempACOmeasure=new ArrayList<ACOPatientMeasure>();
					tempACOmeasure.addAll(temporaryACOmeasures);
					if(tempACOmeasure.size()==0){
						acoMeasure=false;
					}
					
					tempAlertsList=new ArrayList<AlertGenericMedActionLab>();
					tempAlertsList.addAll(temporaryGenericMedPlanAlerts);
					if(tempAlertsList.size()==0){
						clinicMessagesAlertsCheck=false;
					}
					
					temp2List=new ArrayList<PatientMedicationData>();
					temp2List.addAll(temporaryPatientMedicationList);
					if(temp2List.size()==0){
						conditionChk=false;
					}
				/*	tempAnticoagMessages=new ArrayList<MedActionPlan>();
					tempAnticoagMessages.addAll(temporaryAnticoagAlerts);
					if(tempAnticoagMessages.size()==0){
						anticoagAlertsDefaultMsg=false;
					}*/
					
			
				}
				if(drugFilterByName.size()>0){
					List<PatientMedicationData>temporaryPatientMedicationList=new ArrayList<PatientMedicationData>();
					List<AlertGenericMedActionLab>temporaryGenericMedPlanAlerts=new ArrayList<AlertGenericMedActionLab>();
					if(temp2List.size()>0){
					for(PatientMedicationData patientMedicationData:temp2List){
						patientMedicationData.setTotalCount(patientMedicationData.getOriginalCount());
						patientMedicationData.setIssuesLevel(patientMedicationData.getOriginalIssueLevel());
						for(String drugs:drugFilterByName){
							if(drugs.equalsIgnoreCase(patientMedicationData.getDrugs())){
								if(!temporaryPatientMedicationList.contains(patientMedicationData)){
									temporaryPatientMedicationList.add(patientMedicationData);
									}
							}
						}
					}
					}else if(conditionChk){
						for(PatientMedicationData patientMedicationData:filterPatientMedicationList){
							patientMedicationData.setTotalCount(patientMedicationData.getOriginalCount());
							patientMedicationData.setIssuesLevel(patientMedicationData.getOriginalIssueLevel());
							for(String drugs:drugFilterByName){
								if(drugs.equalsIgnoreCase(patientMedicationData.getDrugs())){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}
							}
						}
					}
					
					if(tempAlertsList.size()>0){
					for(AlertGenericMedActionLab alertGenericMedActionLab:tempAlertsList){
						for(String selectedFilter:drugFilterByName){
						if(selectedFilter.equalsIgnoreCase(alertGenericMedActionLab.getDrugName())){
							if(!temporaryGenericMedPlanAlerts.contains(alertGenericMedActionLab)){
								temporaryGenericMedPlanAlerts.add(alertGenericMedActionLab);
							}
						}
						}
					}
					}else if(clinicMessagesAlertsCheck){
						for(AlertGenericMedActionLab alertGenericMedActionLab:alertMedActionPlans){
							for(String selectedFilter:drugFilterByName){
							if(selectedFilter.equalsIgnoreCase(alertGenericMedActionLab.getDrugName())){
								if(!temporaryGenericMedPlanAlerts.contains(alertGenericMedActionLab)){
									temporaryGenericMedPlanAlerts.add(alertGenericMedActionLab);
								}
							}
							}
						}	
					}
					tempAlertsList=new ArrayList<AlertGenericMedActionLab>();
					tempAlertsList.addAll(temporaryGenericMedPlanAlerts);
					if(tempAlertsList.size()==0){
						clinicMessagesAlertsCheck=false;
					}
					temp2List=new ArrayList<PatientMedicationData>();
					temp2List.addAll(temporaryPatientMedicationList);		
					if(temp2List.size()==0){
						conditionChk=false;
					}
					
				}
				if(medData.size()>0){
					List<PatientMedicationData>temporaryPatientMedicationList=new ArrayList<PatientMedicationData>();
					if(temp2List.size()>0){
						for(String medClassfication:medData){
						for(PatientMedicationData patientMedicationData:temp2List){
							patientMedicationData.setTotalCount(patientMedicationData.getOriginalCount());
							patientMedicationData.setIssuesLevel(patientMedicationData.getOriginalIssueLevel());
							if(patientMedicationData.getDrugCategory()!=null){
								if(patientMedicationData.getDrugCategory().equalsIgnoreCase(medClassfication)){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}
							}
							}
						}
						
						
						}else if(conditionChk){
							for(String medClassfication:medData){
									for(PatientMedicationData patientMedicationData:filterPatientMedicationList){
										patientMedicationData.setTotalCount(patientMedicationData.getOriginalCount());
										patientMedicationData.setIssuesLevel(patientMedicationData.getOriginalIssueLevel());
										if(patientMedicationData.getDrugCategory()!=null){
										if(patientMedicationData.getDrugCategory().equalsIgnoreCase(medClassfication)){
												if(!temporaryPatientMedicationList.contains(patientMedicationData)){
													temporaryPatientMedicationList.add(patientMedicationData);
													}
											}
										}
									}
								
							}
						}
					temp2List=new ArrayList<PatientMedicationData>();
					temp2List.addAll(temporaryPatientMedicationList);		
					if(temp2List.size()==0){
						conditionChk=false;
					}
				}
				if(formularyFilterByTier.size()>0){
					List<PatientMedicationData>temporaryPatientMedicationList=new ArrayList<PatientMedicationData>();
					if(temp2List.size()>0){
					for(PatientMedicationData patientMedicationData:temp2List){
						patientMedicationData.setTotalCount(patientMedicationData.getOriginalCount());
						patientMedicationData.setIssuesLevel(patientMedicationData.getOriginalIssueLevel());
						for(String tier:formularyFilterByTier){
							if(tier.equalsIgnoreCase(patientMedicationData.getFormularySymbol())){
								if(!temporaryPatientMedicationList.contains(patientMedicationData)){
									temporaryPatientMedicationList.add(patientMedicationData);
									}
							}
							else if(tier.equalsIgnoreCase("Tier 1") && (patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 1"))){
								if(!temporaryPatientMedicationList.contains(patientMedicationData)){
									temporaryPatientMedicationList.add(patientMedicationData);
									}
							}
							else if(tier.equalsIgnoreCase("Tier 2") && (patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 2"))){
								if(!temporaryPatientMedicationList.contains(patientMedicationData)){
									temporaryPatientMedicationList.add(patientMedicationData);
									}
							}
							else if(tier.equalsIgnoreCase("Tier 3") && (patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 3"))){
								if(!temporaryPatientMedicationList.contains(patientMedicationData)){
									temporaryPatientMedicationList.add(patientMedicationData);
									}
							}
							else if(tier.equalsIgnoreCase(TIER_4_LABEL) && patientMedicationData.getFormularySymbol().equalsIgnoreCase(TIER_4_LABEL)){
								if(!temporaryPatientMedicationList.contains(patientMedicationData)){
									temporaryPatientMedicationList.add(patientMedicationData);
									}
							}
							else if(tier.equalsIgnoreCase("Prior Authorization") && patientMedicationData.getFormularySymbol().equalsIgnoreCase("Prior Authorization")){
								if(!temporaryPatientMedicationList.contains(patientMedicationData)){
									temporaryPatientMedicationList.add(patientMedicationData);
									}
							}
							else if(tier.equalsIgnoreCase("On Formulary") && patientMedicationData.getFormularySymbol().equalsIgnoreCase("On Formulary")){
								if(!temporaryPatientMedicationList.contains(patientMedicationData)){
									temporaryPatientMedicationList.add(patientMedicationData);
									}
							}
							else if(tier.equalsIgnoreCase("UL") && patientMedicationData.getFormularySymbol().equalsIgnoreCase("Unlisted Drug")){
								if(!temporaryPatientMedicationList.contains(patientMedicationData)){
									temporaryPatientMedicationList.add(patientMedicationData);
									}
							}
							else if(tier.equalsIgnoreCase("NF") && patientMedicationData.getFormularySymbol().equalsIgnoreCase("Non Formulary")){
								if(!temporaryPatientMedicationList.contains(patientMedicationData)){
									temporaryPatientMedicationList.add(patientMedicationData);
									}
							}
							else if(tier.equalsIgnoreCase("NR") && patientMedicationData.getFormularySymbol().equalsIgnoreCase("Not Reimbursed")){
								if(!temporaryPatientMedicationList.contains(patientMedicationData)){
									temporaryPatientMedicationList.add(patientMedicationData);
									}
							}
						/*	else if(tier.equalsIgnoreCase("Tier 1") && (patientMedicationData.getFormularySymbol().equalsIgnoreCase("On Formulary")||patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 1"))){
								if(!temporaryPatientMedicationList.contains(patientMedicationData)){
									temporaryPatientMedicationList.add(patientMedicationData);
									}
							}
							else if(tier.equalsIgnoreCase("NF/UL/NR") && (patientMedicationData.getFormularySymbol().equalsIgnoreCase("Non Formulary")||patientMedicationData.getFormularySymbol().equalsIgnoreCase("Unlisted Drug")
									||patientMedicationData.getFormularySymbol().equalsIgnoreCase("Not Reimbursed"))){
								if(!temporaryPatientMedicationList.contains(patientMedicationData)){
									temporaryPatientMedicationList.add(patientMedicationData);
									}
							}
							else if(tier.equalsIgnoreCase(TIER_4_LABEL) && patientMedicationData.getFormularySymbol().equalsIgnoreCase(TIER_4_LABEL)){
								if(!temporaryPatientMedicationList.contains(patientMedicationData)){
									temporaryPatientMedicationList.add(patientMedicationData);
									}
							}
							else if(tier.equalsIgnoreCase("Prior Authorization") && patientMedicationData.getFormularySymbol().equalsIgnoreCase("Prior Authorization")){
								if(!temporaryPatientMedicationList.contains(patientMedicationData)){
									temporaryPatientMedicationList.add(patientMedicationData);
									}
							}else if(tier.equalsIgnoreCase("Tier 2/Tier 3") && patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 2/Tier 3")){
								if(!temporaryPatientMedicationList.contains(patientMedicationData)){
									temporaryPatientMedicationList.add(patientMedicationData);
									}
							}*/
						}
					}
					}else if(conditionChk){
						for(PatientMedicationData patientMedicationData:filterPatientMedicationList){
							patientMedicationData.setTotalCount(patientMedicationData.getOriginalCount());
							patientMedicationData.setIssuesLevel(patientMedicationData.getOriginalIssueLevel());
							for(String tier:formularyFilterByTier){
								if(tier.equalsIgnoreCase(patientMedicationData.getFormularySymbol())){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}
								else if(tier.equalsIgnoreCase("Tier 1") && (patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 1"))){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}
								else if(tier.equalsIgnoreCase("Tier 2") && (patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 2"))){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}
								else if(tier.equalsIgnoreCase("Tier 3") && (patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 3"))){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}
								else if(tier.equalsIgnoreCase(TIER_4_LABEL) && patientMedicationData.getFormularySymbol().equalsIgnoreCase(TIER_4_LABEL)){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}
								else if(tier.equalsIgnoreCase("Prior Authorization") && patientMedicationData.getFormularySymbol().equalsIgnoreCase("Prior Authorization")){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}
								else if(tier.equalsIgnoreCase("On Formulary") && patientMedicationData.getFormularySymbol().equalsIgnoreCase("On Formulary")){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}
								else if(tier.equalsIgnoreCase("UL") && patientMedicationData.getFormularySymbol().equalsIgnoreCase("Unlisted Drug")){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}
								else if(tier.equalsIgnoreCase("NF") && patientMedicationData.getFormularySymbol().equalsIgnoreCase("Non Formulary")){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}
								else if(tier.equalsIgnoreCase("NR") && patientMedicationData.getFormularySymbol().equalsIgnoreCase("Not Reimbursed")){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}
							/*	else if(tier.equalsIgnoreCase("Tier 1") && (patientMedicationData.getFormularySymbol().equalsIgnoreCase("On Formulary")||patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 1"))){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}
								else if(tier.equalsIgnoreCase("NF/UL/NR") && (patientMedicationData.getFormularySymbol().equalsIgnoreCase("Non Formulary")||patientMedicationData.getFormularySymbol().equalsIgnoreCase("Unlisted Drug")
										||patientMedicationData.getFormularySymbol().equalsIgnoreCase("Not Reimbursed"))){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}
								else if(tier.equalsIgnoreCase(TIER_4_LABEL) && patientMedicationData.getFormularySymbol().equalsIgnoreCase(TIER_4_LABEL)){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}
								else if(tier.equalsIgnoreCase("Prior Authorization") && patientMedicationData.getFormularySymbol().equalsIgnoreCase("Prior Authorization")){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}else if(tier.equalsIgnoreCase("Tier 2/Tier 3") && patientMedicationData.getFormularySymbol().equalsIgnoreCase("Tier 2/Tier 3")){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}*/
							}
						}
					}
					temp2List=new ArrayList<PatientMedicationData>();
					temp2List.addAll(temporaryPatientMedicationList);
					if(temp2List.size()==0){
						conditionChk=false;
					}
				
				}
				if(alertTypeFilterLevels.size()>0){
					List<PatientMedicationData>temporaryPatientMedicationList=new ArrayList<PatientMedicationData>();
					if(temp2List.size()>0){
					for(PatientMedicationData patientMedicationData:temp2List){
						patientMedicationData.setTotalCount(patientMedicationData.getOriginalCount());
						patientMedicationData.setIssuesLevel(patientMedicationData.getOriginalIssueLevel());
						int i=0;
						boolean highSeverity=false;
						boolean mediumSeverity=false;
						boolean lowSeverity=false; 
						for(String alertType:alertTypeFilterLevels){
							if(alertType.equalsIgnoreCase(patientMedicationData.getDrugInteractionStr())||
									alertType.equalsIgnoreCase(patientMedicationData.getDiseaseInteractionStr())
									||alertType.equalsIgnoreCase(patientMedicationData.getAllergyInteractionStr())
									||alertType.equalsIgnoreCase(patientMedicationData.getMedPlanStrFilter())||alertType.equalsIgnoreCase(patientMedicationData.getGeriatricPrecautionStr())||
											alertType.equalsIgnoreCase(patientMedicationData.getPaediatricPrecautionStr()) ){
					
									for(DrugInteractionOverview drugIssues:cachedDrugIssuesList){
										if(patientMedicationData.getDrugId()==drugIssues.getDrugIdVal()){
											if((alertType.equalsIgnoreCase(patientMedicationData.getDrugInteractionStr()) && drugIssues.getIssueType().equalsIgnoreCase(patientMedicationData.getDrugInteractionStr()))||
													(alertType.equalsIgnoreCase(patientMedicationData.getDiseaseInteractionStr()) && drugIssues.getIssueType().equalsIgnoreCase(patientMedicationData.getDiseaseInteractionStr()))||
													(alertType.equalsIgnoreCase(patientMedicationData.getAllergyInteractionStr()) &&(drugIssues.getIssueType().equalsIgnoreCase(patientMedicationData.getAllergyInteractionStr()))
													)
											||(alertType.equalsIgnoreCase(patientMedicationData.getGeriatricPrecautionStr()) && drugIssues.getIssueType().equalsIgnoreCase((patientMedicationData.getGeriatricPrecautionStr())) )||
											(alertType.equalsIgnoreCase(patientMedicationData.getPaediatricPrecautionStr()) && drugIssues.getIssueType().equalsIgnoreCase(patientMedicationData.getPaediatricPrecautionStr()) )
													){
									
											i=i+1;
											if(drugIssues.getSeverityLevel().equalsIgnoreCase(HIGH_SEVERITY_LEVEL)){
												highSeverity=true;
											}else if(drugIssues.getSeverityLevel().equalsIgnoreCase(MEDIUM_SEVERITY_LEVEL)){
												mediumSeverity=true;
											}else if(drugIssues.getSeverityLevel().equalsIgnoreCase(LOW_SEVERITY_LEVEL)){
												lowSeverity=true;
											}
											}
							
									}
										
									patientMedicationData.setTotalCount(String.valueOf(i));
									if(highSeverity){
										patientMedicationData.setIssuesLevel(HIGH_SEVERITY_LEVEL);
									}else if(mediumSeverity){
										patientMedicationData.setIssuesLevel(MEDIUM_SEVERITY_LEVEL);
									}else {
										patientMedicationData.setIssuesLevel(LOW_SEVERITY_LEVEL);
									}
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
									temporaryPatientMedicationList.add(patientMedicationData);
									}
									}
							}else if(alertType.equalsIgnoreCase(patientMedicationData.getMedPlanStrFilter())){
								if(!temporaryPatientMedicationList.contains(patientMedicationData)){
									temporaryPatientMedicationList.add(patientMedicationData);
									}
							}else if(alertType.equalsIgnoreCase("Pharmacogenomics Interactions") && patientMedicationData.getAttentionRating()!=null){
								if(!temporaryPatientMedicationList.contains(patientMedicationData)){
									temporaryPatientMedicationList.add(patientMedicationData);
									}
							}else if(alertType.equalsIgnoreCase("Compliance Issues") && patientMedicationData.getCompliancePercentage()>0){
								if(!temporaryPatientMedicationList.contains(patientMedicationData)){
									temporaryPatientMedicationList.add(patientMedicationData);
									}
							}else if(alertType.equalsIgnoreCase("Formulary Issues") && patientMedicationData.getFormularySymbol()!=null){
								if(!temporaryPatientMedicationList.contains(patientMedicationData)){
									temporaryPatientMedicationList.add(patientMedicationData);
									}
							}
							
						}
					}
					}else if(conditionChk ){
						for(PatientMedicationData patientMedicationData:filterPatientMedicationList){
							patientMedicationData.setTotalCount(patientMedicationData.getOriginalCount());
							patientMedicationData.setIssuesLevel(patientMedicationData.getOriginalIssueLevel());
							int i=0;
							boolean highSeverity=false;
							boolean mediumSeverity=false;
							boolean lowSeverity=false; 
							for(String alertType:alertTypeFilterLevels){
								if(alertType.equalsIgnoreCase(patientMedicationData.getDrugInteractionStr())||
										alertType.equalsIgnoreCase(patientMedicationData.getDiseaseInteractionStr())
										||alertType.equalsIgnoreCase(patientMedicationData.getAllergyInteractionStr())
										||alertType.equalsIgnoreCase(patientMedicationData.getGeriatricPrecautionStr())||
										alertType.equalsIgnoreCase(patientMedicationData.getPaediatricPrecautionStr())){
										for(DrugInteractionOverview drugIssues:cachedDrugIssuesList){
											if(patientMedicationData.getDrugId()==drugIssues.getDrugIdVal()){
											if((alertType.equalsIgnoreCase(patientMedicationData.getDrugInteractionStr()) && drugIssues.getIssueType().equalsIgnoreCase(patientMedicationData.getDrugInteractionStr()))||
													(alertType.equalsIgnoreCase(patientMedicationData.getDiseaseInteractionStr()) && drugIssues.getIssueType().equalsIgnoreCase(patientMedicationData.getDiseaseInteractionStr()))||
													(alertType.equalsIgnoreCase(patientMedicationData.getAllergyInteractionStr()) &&(drugIssues.getIssueType().equalsIgnoreCase(patientMedicationData.getAllergyInteractionStr()))
													)
												||(alertType.equalsIgnoreCase(patientMedicationData.getGeriatricPrecautionStr()) && drugIssues.getIssueType().equalsIgnoreCase((patientMedicationData.getGeriatricPrecautionStr())) )||
											(alertType.equalsIgnoreCase(patientMedicationData.getPaediatricPrecautionStr()) && drugIssues.getIssueType().equalsIgnoreCase(patientMedicationData.getPaediatricPrecautionStr()) )	
													){
										
												i=i+1;
												if(drugIssues.getSeverityLevel().equalsIgnoreCase(HIGH_SEVERITY_LEVEL)){
													highSeverity=true;
												}else if(drugIssues.getSeverityLevel().equalsIgnoreCase(MEDIUM_SEVERITY_LEVEL)){
													mediumSeverity=true;
												}else if(drugIssues.getSeverityLevel().equalsIgnoreCase(LOW_SEVERITY_LEVEL)){
													lowSeverity=true;
												}
												
											}
										
										}
											
										patientMedicationData.setTotalCount(String.valueOf(i));
										if(highSeverity){
											patientMedicationData.setIssuesLevel(HIGH_SEVERITY_LEVEL);
										}else if(mediumSeverity){
											patientMedicationData.setIssuesLevel(MEDIUM_SEVERITY_LEVEL);
										}else {
											patientMedicationData.setIssuesLevel(LOW_SEVERITY_LEVEL);
										}
										if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
										}
								}else if(alertType.equalsIgnoreCase(patientMedicationData.getMedPlanStrFilter())){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}
								else if(alertType.equalsIgnoreCase("Pharmacogenomics Interactions") && patientMedicationData.getAttentionRating()!=null){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}else if(alertType.equalsIgnoreCase("Compliance Issues") && patientMedicationData.getCompliancePercentage()>0){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}else if(alertType.equalsIgnoreCase("Formulary Issues") && patientMedicationData.getFormularySymbol()!=null){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}
							
							}
						}
					}
					temp2List=new ArrayList<PatientMedicationData>();
					temp2List.addAll(temporaryPatientMedicationList);
					if(temp2List.size()==0){
						conditionChk=false;
					}
				
				}
			
				if(medCategory.size()>0){
					List<PatientMedicationData>temporaryPatientMedicationList=new ArrayList<PatientMedicationData>();
					if(temp2List.size()>0){
						for(String therapeuticCategory:medCategory){
							for(PatientMedicationData patientMedicationData:temp2List){
								patientMedicationData.setTotalCount(patientMedicationData.getOriginalCount());
								patientMedicationData.setIssuesLevel(patientMedicationData.getOriginalIssueLevel());
								if(patientMedicationData.getTherapeuticCategory()!=null){
								if(patientMedicationData.getTherapeuticCategory().contains(therapeuticCategory)){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}
								}
							}
						}
						
					}else if(conditionChk){
						for(String therapeuticCategory:medCategory){
							for(PatientMedicationData patientMedicationData:filterPatientMedicationList){
								patientMedicationData.setTotalCount(patientMedicationData.getOriginalCount());
								patientMedicationData.setIssuesLevel(patientMedicationData.getOriginalIssueLevel());
								if(patientMedicationData.getTherapeuticCategory()!=null){
								if(patientMedicationData.getTherapeuticCategory().contains(therapeuticCategory)){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
								}
								}
							}
						}
					}
					
					
					
					temp2List=new ArrayList<PatientMedicationData>();
					temp2List.addAll(temporaryPatientMedicationList);
					if(temp2List.size()==0){
						conditionChk=false;
					}
				}
				
				if(drugType.size()>0){
					List<PatientMedicationData>temporaryPatientMedicationList=new ArrayList<PatientMedicationData>();
					if(temp2List.size()>0){
						for(String drugTypeSelected:drugType){
							if(drugTypeSelected.equalsIgnoreCase("specialty drugs")){
							for(PatientMedicationData patientMedicationData:temp2List){
								patientMedicationData.setTotalCount(patientMedicationData.getOriginalCount());
								patientMedicationData.setIssuesLevel(patientMedicationData.getOriginalIssueLevel());
								if(patientMedicationData.isSpecialtyDrugExist()){
								if(!temporaryPatientMedicationList.contains(patientMedicationData)){
									temporaryPatientMedicationList.add(patientMedicationData);
									}
								}
							}
						}else if(drugTypeSelected.equalsIgnoreCase("non specialty drugs")){
							for(PatientMedicationData patientMedicationData:temp2List){
								patientMedicationData.setTotalCount(patientMedicationData.getOriginalCount());
								patientMedicationData.setIssuesLevel(patientMedicationData.getOriginalIssueLevel());
								if(!patientMedicationData.isSpecialtyDrugExist()){
								if(!temporaryPatientMedicationList.contains(patientMedicationData)){
									temporaryPatientMedicationList.add(patientMedicationData);
									}
								}
							}
						}
						}
						
					}else if(conditionChk){
						for(String drugTypeSelected:drugType){
								if(drugTypeSelected.equalsIgnoreCase("specialty drugs")){
								for(PatientMedicationData patientMedicationData:filterPatientMedicationList){
									patientMedicationData.setTotalCount(patientMedicationData.getOriginalCount());
									patientMedicationData.setIssuesLevel(patientMedicationData.getOriginalIssueLevel());
									if(patientMedicationData.isSpecialtyDrugExist()){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
									}
								}
							}else if(drugTypeSelected.equalsIgnoreCase("non specialty drugs")){
								for(PatientMedicationData patientMedicationData:filterPatientMedicationList){
									patientMedicationData.setTotalCount(patientMedicationData.getOriginalCount());
									patientMedicationData.setIssuesLevel(patientMedicationData.getOriginalIssueLevel());
									if(!patientMedicationData.isSpecialtyDrugExist()){
									if(!temporaryPatientMedicationList.contains(patientMedicationData)){
										temporaryPatientMedicationList.add(patientMedicationData);
										}
									}
								}
							}
							
						}
					}
					temp2List=new ArrayList<PatientMedicationData>();
					temp2List.addAll(temporaryPatientMedicationList);
					if(temp2List.size()==0){
						conditionChk=false;
					}
				}
				
				if(acoMeasureSelectedOption){
					List<ACOPatientMeasure>temporaryACOmeasures=new ArrayList<ACOPatientMeasure>();
					if(tempACOmeasure.size()>0){
						for(ACOPatientMeasure acoPatientMeasure:tempACOmeasure){
								if(acoPatientMeasure.getActive()==1){
									if(!temporaryACOmeasures.contains(acoPatientMeasure)){
										temporaryACOmeasures.add(acoPatientMeasure);
									}
								}else if(acoPatientMeasure.getActive()==0){
									if(!temporaryACOmeasures.contains(acoPatientMeasure)){
										temporaryACOmeasures.add(acoPatientMeasure);
									}
								}
							
						}
						
					}else if(acoMeasure){
						for(ACOPatientMeasure acoPatientMeasure:patientmesure){
								if(acoPatientMeasure.getActive()==1){
									if(!temporaryACOmeasures.contains(acoPatientMeasure)){
										temporaryACOmeasures.add(acoPatientMeasure);
									}
								}else if(acoPatientMeasure.getActive()==0){
									if(!temporaryACOmeasures.contains(acoPatientMeasure)){
										temporaryACOmeasures.add(acoPatientMeasure);
									}
								}
							
						}
						
					}
					tempACOmeasure=new ArrayList<ACOPatientMeasure>();
					tempACOmeasure.addAll(temporaryACOmeasures);
					if(tempACOmeasure.size()==0){
						acoMeasure=false;
					}
					
				}
				copyAlertMedPlansFilter=new ArrayList<AlertGenericMedActionLab>();
				copyAlertMedPlansFilter.addAll(tempAlertsList);
				copyOriginalPatientMedicationList=new ArrayList<PatientMedicationData>();
				copyOriginalPatientMedicationList.addAll(temp2List);
				acoPatientMeasureFilterPageList=new ArrayList<ACOPatientMeasure>();
				acoPatientMeasureFilterPageList.addAll(tempACOmeasure);
				/*anticoagClinicMessages=new ArrayList<MedActionPlan>();
				anticoagClinicMessages.addAll(tempAnticoagMessages);*/
				anticoagAlertMessageObj=new MedActionPlan();
				setAnticoagAlertMessageObj(temporaryAnticoagMsgObj);
				setShowNotesForINRlabOvw(showAnticoagMessages);
				logger.info("Filtered End result for Patient Medication list size "+copyOriginalPatientMedicationList.size());
				logger.info("Filtered clinic messages end result size "+copyAlertMedPlansFilter.size());
				logger.info("Filtered ACO measures end result size "+acoPatientMeasureFilterPageList.size());
				//logger.info("Filtered AnticoagMessages:{No Lab Value} end result size "+anticoagClinicMessages.size());
				
			}else{
				logger.info("No Filters have been selected from overview page ");
				copyOriginalPatientMedicationList=new ArrayList<PatientMedicationData>();
				//copyOriginalPatientMedicationList=filterPatientMedicationList;
				copyAlertMedPlansFilter=new ArrayList<AlertGenericMedActionLab>();
				//copyAlertMedPlansFilter=alertMedActionPlans;
				acoPatientMeasureFilterPageList=new ArrayList<ACOPatientMeasure>();
			//	anticoagClinicMessages=new ArrayList<MedActionPlan>();
				anticoagAlertMessageObj=new MedActionPlan();
				setShowNotesForINRlabOvw(false);
			}
			}catch(NullPointerException ne){
				ne.printStackTrace();
			}catch(ConcurrentModificationException ce){
				ce.printStackTrace();
			}
		}

		public List<PatientMedicationData> getFilterPatientMedicationList() {
			if(filterPatientMedicationList==null){
				filterPatientMedicationList=new ArrayList<PatientMedicationData>();
			}
			return filterPatientMedicationList;
		}

		public void setFilterPatientMedicationList(
				List<PatientMedicationData> filterPatientMedicationList) {
			this.filterPatientMedicationList = filterPatientMedicationList;
		}
       /**
        * overViewFilter.jsf#Medicine  
        * It will provide all Meicine in Filter Section 
        * @return List<DrugFilter> drugFilterList
        */
		public List<DrugFilter> getDrugFilterList() {
			if(drugFilterList==null){
				
				drugFilterList=new ArrayList<DrugFilter>();
				getCopyOriginalPatientMedicationList();
				for(PatientMedicationData patientMedicationData:copyOriginalPatientMedicationList){
					DrugFilter drugFilter=new DrugFilter();
					
					drugFilter.setDrugName(patientMedicationData.getDrugs());
			/*		drugFilter.setDrugId(Double.parseDouble(String.valueOf(patientMedicationData.getDrugId())));*/
					drugFilter.setPrescriberName(patientMedicationData.getPrescriberName());
					if(!drugFilterList.contains(drugFilter)){
						drugFilterList.add(drugFilter);
					}
				}
			
			}
			return drugFilterList;
		}

		public void setDrugFilterList(List<DrugFilter> drugFilterList) {
			this.drugFilterList = drugFilterList;
		}
		/**
		 * used in OverViewFilter.jsf
		 * Clear All Filter on overViewFilter.jsf for analyse 
		 */
	public void clearAllFilters(){
		prescriberFilterByName=null;
		drugFilterByName=null;
		formularyFilterByTier=null;
		alertFilterLevels=null;
	//	alertInteractions=null;
		alertTypeFilterLevels=null;
		acoMeasureSelectedOption=false;
		medData=null;
		medCategory=null;
		hedisSelectedOption=false;
		gapinSelectedOption=false;
		drugType=null;
	//	copyOriginalPatientMedicationList=new ArrayList<PatientMedicationData>();
	//	copyOriginalPatientMedicationList=filterPatientMedicationList;
	//	copyAlertMedPlansFilter=new ArrayList<AlertGenericMedActionLab>();
	//	copyAlertMedPlansFilter=alertMedActionPlans;
	}

	public List<String> getDrugFilterByName() {
		if(drugFilterByName==null){
			drugFilterByName=new ArrayList<String>();
		}
		return drugFilterByName;
	}

	public void setDrugFilterByName(List<String> drugFilterByName) {
		this.drugFilterByName = drugFilterByName;
	}
    /**
     * used method in overviewFilter.jsf 
     * It will give all medication data based on patient 
     * @return List<PatientMedicationData>
     */
	public List<PatientMedicationData> getCopyOriginalPatientMedicationList() {
		//logger.info("getCopyOriginalPatientMedicationList:::::::::"+copyOriginalPatientMedicationList);
		if(copyOriginalPatientMedicationList==null){
			try{
			int patientId=new ContextUtil().getPatientId();
			copyOriginalPatientMedicationList=new ArrayList<PatientMedicationData>();
			List<PatientMedicationData>cachedPatientMedicationDataList=new ArrayList<PatientMedicationData>();
			cachedPatientMedicationDataList.addAll(getPatientMedicationDataList());
			getSigCodeList();
			System.out.println(":::::::::::::size::::"+cachedPatientMedicationDataList.size());
			for(PatientMedicationData patientMedicationData:cachedPatientMedicationDataList){
				boolean specialtyDrugExists=patientMedicineService.checkSpecialtyDrug(patientMedicationData.getDrugs()); // Check based on drug name it is specility drug or not 
				patientMedicationData.setSpecialtyDrugExist(specialtyDrugExists);
				for(SigCode sigcode:sigCodeList)
				{
					if(sigcode.getSigCode().equalsIgnoreCase(patientMedicationData.getDirections()))
					{
						patientMedicationData.setSigcodemeaning(sigcode.getMeaning());
					}
				}

				//Checked Null Value Added By Anjani 
			/*	if(!(patientMedicationData.getQuantity()==null)){
					patientMedicationData.setQuantityforsorting(Integer.parseInt(patientMedicationData.getQuantity()));
				}*/
				System.out.println("QUANTITY for meds:::::::::"+patientMedicationData.getQuantity());
				
			/*	if(StringUtils.isNotBlank(patientMedicationData.getQuantity())){
				patientMedicationData.setQuantityforsorting(Double.parseDouble(patientMedicationData.getQuantity()));

				}else{
					patientMedicationData.setQuantityforsorting(Double.parseDouble("0"));
				}*/
			}
			filterPatientMedicationList=new ArrayList<PatientMedicationData>();
			copyOriginalPatientMedicationList.addAll(cachedPatientMedicationDataList);
			filterPatientMedicationList.addAll(cachedPatientMedicationDataList);
			cachedPatientMedicationList=new ArrayList<PatientMedicationData>();
			cachedPatientMedicationList.addAll(cachedPatientMedicationDataList);
			
			//logger.info("copyOriginalPatientMedicationList size::::::::::::"+copyOriginalPatientMedicationList.size());
	
			}catch(NumberFormatException nfe){
				logger.info("Number format exception for quantint ");
				nfe.printStackTrace();
			}
			
		}
		return copyOriginalPatientMedicationList;
	}

	public void setCopyOriginalPatientMedicationList(
			List<PatientMedicationData> copyOriginalPatientMedicationList) {
		this.copyOriginalPatientMedicationList = copyOriginalPatientMedicationList;
	}
	
	public String clearPreviousValues(){
		prescriberFilterByName=null;
		drugFilterByName=null;
		formularyFilterByTier=null;
		alertTypeFilterLevels=null;
		alertFilters=null;
		alertInteractions=null;
		alertTypeFilterLevels=null;
		acoMeasureSelectedOption=true;
		hedisSelectedOption=true;
		gapinSelectedOption=true;
		/*copyOriginalPatientMedicationList=null;
		copyAlertMedPlansFilter=null;
		acoPatientMeasureFilterPageList=null;
*/		copyOriginalPatientMedicationList=filterPatientMedicationList;
		copyAlertMedPlansFilter=alertMedActionPlans;
		acoPatientMeasureFilterPageList=patientmesure;
		//anticoagClinicMessages=medActionListForINRLabMessage;
		showNotesForINRlabOvw=null;
		getShowNotesForINRlabOvw();
		setAnticoagAlertMessageObj(getLatestMedActionPlanForINR());
		return "go_to_ovw_filters";
	}

	public List<String> getFormularyFilterByTier() {
		if(formularyFilterByTier==null){
			formularyFilterByTier=new ArrayList<String>();
		}
		return formularyFilterByTier;
	}

	public void setFormularyFilterByTier(List<String> formularyFilterByTier) {
		this.formularyFilterByTier = formularyFilterByTier;
	}

	public List<String> getAlertFilterLevels() {
		if(alertFilterLevels==null){
			alertFilterLevels=new ArrayList<String>();
		}
		return alertFilterLevels;
	}

	public void setAlertFilterLevels(List<String> alertFilterLevels) {
		this.alertFilterLevels = alertFilterLevels;
	}

	public List<String> getAlertTypeFilterLevels() {
		if(alertTypeFilterLevels==null){
			alertTypeFilterLevels=new ArrayList<String>();
		}
		return alertTypeFilterLevels;
	}

	public void setAlertTypeFilterLevels(List<String> alertTypeFilterLevels) {
		this.alertTypeFilterLevels = alertTypeFilterLevels;
	}

	public List<AlertGenericMedActionLab> getCopyAlertMedPlansFilter() {
		if(copyAlertMedPlansFilter==null){
			copyAlertMedPlansFilter=new ArrayList<AlertGenericMedActionLab>();
			List<AlertGenericMedActionLab>alertMessagesMedPlans=new ArrayList<AlertGenericMedActionLab>();
			alertMessagesMedPlans.addAll(getAlertMedActionPlans());
			for(AlertGenericMedActionLab altLab: alertMessagesMedPlans)
			{
				BigDecimal bd = new BigDecimal(altLab.getLowValue());
				DecimalFormat df = new DecimalFormat("0.##");
				
				BigDecimal bd1 = new BigDecimal(altLab.getHighValue());
				DecimalFormat df1 = new DecimalFormat("0.##");
				
				BigDecimal bd2 = new BigDecimal(altLab.getLabResultValue());
				DecimalFormat df2 = new DecimalFormat("0.##");
				//altLab.setLowValue(df.format(bd));
				//altLab.setLowValue(String.valueOf(df.format(bd));
				
				String lowValueRange = String.valueOf(df.format(bd));
				String highValueRange = String.valueOf(df1.format(bd1));
				String labResultRange = String.valueOf(df2.format(bd2));
				System.out.println(":::::numWihoutDecimal::1212:"+lowValueRange);
				//altLab.setLowValue(Double.parseDouble(numWihoutDecimal));
				altLab.setLowValue(Double.parseDouble(lowValueRange));
				altLab.setHighValue(Double.parseDouble(highValueRange));
				altLab.setLabResultValue(Double.parseDouble(labResultRange));
				//altLab.setLowValueInString(lowValueRange);
				//altLab.setHighValueInString(highValueRange);
				//altLab.setLabResultValueInString(labResultRange);
			}
			
			copyAlertMedPlansFilter.addAll(alertMessagesMedPlans);
		}
		return copyAlertMedPlansFilter;
	}

	public void setCopyAlertMedPlansFilter(
			List<AlertGenericMedActionLab> copyAlertMedPlansFilter) {
		this.copyAlertMedPlansFilter = copyAlertMedPlansFilter;
	}
    /**
     * page overViewFilter.jsf
     * Provide Alert Level List
     * @return AlertFilter List
     */
	public List<AlertsFilter> getAlertFilters() {
		if(alertFilters==null){
			alertFilters=new ArrayList<AlertsFilter>();
			AlertsFilter alertFilterLow=new AlertsFilter();
			alertFilterLow.setImageValueStr("green1.jpg");
			alertFilterLow.setItemLabelStr("");
			alertFilterLow.setItemValueStr("Low");
			AlertsFilter alertFilterMedium=new AlertsFilter();
			alertFilterMedium.setImageValueStr("orange1.jpg");
			alertFilterMedium.setItemLabelStr("");
			alertFilterMedium.setItemValueStr("Medium");
			AlertsFilter alertFilterHigh=new AlertsFilter();
			alertFilterHigh.setImageValueStr("red1.jpg");
			alertFilterHigh.setItemLabelStr("");
			alertFilterHigh.setItemValueStr("High");
			alertFilters.add(alertFilterLow);
			alertFilters.add(alertFilterMedium);
			alertFilters.add(alertFilterHigh);
		}
		return alertFilters;
	}

	public void setAlertFilters(List<AlertsFilter> alertFilters) {
		this.alertFilters = alertFilters;
	}
    /**
     * overViewFilter.jsf#Alert Type
     * It will give all type of  alert in Filter Section 
     * @return Alert Interaction Map 
     */
	public Map<String, String> getAlertInteractions() {
		if(alertInteractions==null){
			alertInteractions=new LinkedHashMap<String, String>();
		/*	alertInteractions.put("Drug Drug Interaction", "Drug Drug Interection");
			alertInteractions.put("Drug Disease Interaction", "Drug Disease Interaction");
			alertInteractions.put("Drug Allergy Related", "Drug Allergy Interaction");
			alertInteractions.put("Med Action Plan","Med Action Plan");*/
			alertInteractions=parsePropertyEntryDropdown(DRUG_FILTERS);
		}
		return alertInteractions;
	}

	public void setAlertInteractions(Map<String, String> alertInteractions) {
		this.alertInteractions = alertInteractions;
	}

	public void clearMedActionPlan(){
 		logger.info("calling clearMedActionPlan method::::::::::::");
 		genericMedActionPlanList=null;
 		selectedMonitoringParameters=null;
 		patientDiagnosesDetailsObj=null;
	}
	
	public void clearMedActionPlan1(){
 		logger.info("calling clearMedActionPlan method::for diagnosis::::::::::");
 		//genericMedActionPlanList=null;
 		//selectedMonitoringParameters=null;
 		patientDiagnosesDetailsObj=null;
	}

// added by vinod to show the No INR lab for added medicine on anticog &  overview & medationplan Pages
	public List<MedActionPlan> getMedActionListForINRLabMessage() {
		medActionListForINRLabMessage = new ArrayList<MedActionPlan>();
		for(MedActionPlan medlist:getMedicalActionPlanList()){
			
			int noOFdays=findNoOfdays(medlist.getLabFrequency());
			System.out.println("MedActionListForINRLabMessage :::noOFdays:::::89:::"+noOFdays);
			
			//medlist.setNextLabDate(new DateUtil().AddDate(medlist.getDosingStartDate(), noOFdays));
			Date labDate=new DateUtil().AddDate(medlist.getDosingStartDate(), noOFdays);
			if(labDate.before(new DateUtil().getTodayDate()))
			{
				System.out.println(":::::::::labDate::before::");
				medActionListForINRLabMessage.add(medlist);
			}
			logger.info("medName:::::::::::::::"+medlist.getMedicineName()+"lastupdatedDate:::::::::::::::::"+medlist.getLastUpdateDate());
		}
		
		return medActionListForINRLabMessage;
	}
	
	public List<ACOPatientMeasure> getPatientmesure()
	 {	
        logger.info("ACOPatientMeasure in patint bean:::::");
	
		if(patientmesure==null || patientmesureFalg)

		{
			patientmesureFalg = false ;
			patientmesure=new ArrayList<ACOPatientMeasure>();
			int pat_id = new ContextUtil().getPatientId() ;
					 patientmesure = patientMedicineService.getACOPatientMeasure(pat_id);
		
	 }
		 return patientmesure;
		 
	 }
	/**
	 * 
	 * used in overViewFilter.jsf
	 * Call Patient Measure Count and Refresh ACO Measure Data 
	 * @throws IOException
	 */
	public void CalPatientmesureCount() throws IOException
	 {	
		patientmesureFalg =true;
		int pat_id = new ContextUtil().getPatientId() ;
		 patientMedicineService.CalPatientmesureCount(pat_id); // Call Patient Measure Count 
		 refreshACOmeasure();
		 FacesContext.getCurrentInstance().getExternalContext().redirect("overViewFilter.jsf");
		
		
		 
	 }

	
	private void refreshACOmeasure() {
		patientmesure=null;
		patientmesureHistory=null;
		acoPatientMeasureFilterPageList=null;
		
	}

	public void setMedActionListForINRLabMessage(
			List<MedActionPlan> medActionListForINRLabMessage) {
		this.medActionListForINRLabMessage = medActionListForINRLabMessage;
	}

	public int getLowData() {
		return lowData;
	}

	public void setLowData(int lowData) {
		this.lowData = lowData;
	}

	public int getMediumData() {
		return mediumData;
	}

	public void setMediumData(int mediumData) {
		this.mediumData = mediumData;
	}

	public int getHighData() {
		return highData;
	}

	public void setHighData(int highData) {
		this.highData = highData;
	}
	
	public ACOPatientMeasure getAcoPat() {
		return acoPat;
	}

	public void setAcoPat(ACOPatientMeasure acoPat) {
		this.acoPat = acoPat;
	}
 /**
  * used method on OverviewFilter.jsf 
  * Select all Filter 
  */
	public void selectAllFilters(){
		logger.info("select all filter button clicked");
		alertFilterLevels=new ArrayList<String>();
		for(AlertsFilter alertsFilter:alertFilters){
		alertFilterLevels.add(alertsFilter.getItemValueStr());
		}
		alertTypeFilterLevels=new ArrayList<String>();
		for (Map.Entry<String,String> entry : alertInteractions.entrySet()) {
			alertTypeFilterLevels.add(entry.getValue());
		}
		prescriberFilterByName=new ArrayList<String>();
		for(PrescriberFilter precriber:prescriberFilterList){
			prescriberFilterByName.add(precriber.getPrescriberName());
		}
		drugFilterByName=new ArrayList<String>();
		for(DrugFilter drugObj:drugFilterList){
			drugFilterByName.add(drugObj.getDrugName());
		}
		/*formularyFilterByTier=new ArrayList<String>();
		formularyFilterByTier.add("Tier 1");
		formularyFilterByTier.add("Tier 2");
		formularyFilterByTier.add("Tier 3");*/
		formularyFilterByTier=new ArrayList<String>();
		for(Map.Entry<String, String>entry:formularyTiersMapList.entrySet()){
			formularyFilterByTier.add(entry.getValue());
		}
		medData=new ArrayList<String>();
	/*	for(Map.Entry<String, String>entry:medClassifiactionList.entrySet()){
			medData.add(entry.getValue());
		}*/
		for(DrugCategoryFilter drugCategoryFilter:drugCategoryList){
			medData.add(drugCategoryFilter.getDrugCategoryName());
		}
		
		medCategory=new ArrayList<String>();
		for(MedTherapeuticCategory medCat:therapeuticCategories){
			medCategory.add(medCat.getTherapeuticCategoryValue());
		}
		drugType=new ArrayList<String>();
		for(Map.Entry<String, String>entry:drugClassificationList.entrySet()){
			drugType.add(entry.getValue());
		}
		acoMeasureSelectedOption=true;
		hedisSelectedOption=true;
		gapinSelectedOption=true;
	}


	public List<PatientMedicationData> getTemporaryFilteredList() {
		if(temporaryFilteredList==null){
			temporaryFilteredList=new ArrayList<PatientMedicationData>();
		}
		return temporaryFilteredList;
	}

	public void setTemporaryFilteredList(
			List<PatientMedicationData> temporaryFilteredList) {
		this.temporaryFilteredList = temporaryFilteredList;
	}

	public List<ACOPatientMeasure> getAcoPatientMeasureFilterPageList() {
		if(acoPatientMeasureFilterPageList==null){
			acoPatientMeasureFilterPageList=new ArrayList<ACOPatientMeasure>();
	//		if(patientmesure==null){
				List<ACOPatientMeasure>cachedACOmeasureList=new ArrayList<ACOPatientMeasure>();
			cachedACOmeasureList.addAll(getPatientmesure());
			acoPatientMeasureFilterPageList.addAll(cachedACOmeasureList);
//			}
		}
		return acoPatientMeasureFilterPageList;
	}

	public void setAcoPatientMeasureFilterPageList(
			List<ACOPatientMeasure> acoPatientMeasureFilterPageList) {
		this.acoPatientMeasureFilterPageList = acoPatientMeasureFilterPageList;
	}

	public boolean isAcoMeasureSelectedOption() {
		return acoMeasureSelectedOption;
	}

	public void setAcoMeasureSelectedOption(boolean acoMeasureSelectedOption) {
		this.acoMeasureSelectedOption = acoMeasureSelectedOption;
	}
	
   /**
    * used on overViewFilter.jsf page 
    * It will provide all cost related saving data 
    * @return formularyTier Map 
    */
	public Map<String, String> getFormularyTiersMapList() {
		if(formularyTiersMapList==null){
			formularyTiersMapList=new LinkedHashMap<String, String>();
			formularyTiersMapList=parsePropertyEntryDropdown(FORMULARY_FILTERS);
		}
		return formularyTiersMapList;
	}

	public void setFormularyTiersMapList(Map<String, String> formularyTiersMapList) {
		this.formularyTiersMapList = formularyTiersMapList;
	}

	public List<String> getMedData() {
		if(medData==null){
			medData=new ArrayList<String>();
		}
		return medData;
	}

	public void setMedData(List<String> medData) {
		this.medData = medData;
	}

	public Map<String, String> getMedClassifiactionList() {
		if(medClassifiactionList==null){
			medClassifiactionList=new LinkedHashMap<String, String>();
			medClassifiactionList=parsePropertyEntryDropdown(MED_CLASSIFICATION);
		}
		return medClassifiactionList;
	}

	public void setMedClassifiactionList(Map<String, String> medClassifiactionList) {
		this.medClassifiactionList = medClassifiactionList;
	}

	public List<String> getMedCategory() {
		return medCategory;
	}

	public void setMedCategory(List<String> medCategory) {
		this.medCategory = medCategory;
	}
    /**
     *  overViewFilter.jsf#Therapeutic Categories
     *  Provide all MedTherapeuticCategory List
     * @return TherapeuticCategories List
     * 
     */
	public List<MedTherapeuticCategory> getTherapeuticCategories() {
		if(therapeuticCategories==null){
			getCopyOriginalPatientMedicationList();
			therapeuticCategories=new ArrayList<MedTherapeuticCategory>();
			for(PatientMedicationData patientMedicationData:copyOriginalPatientMedicationList){
				MedTherapeuticCategory therapeuticCategoryObj=new MedTherapeuticCategory();
				therapeuticCategoryObj.setDrugId(patientMedicationData.getDrugId());
				//therapeuticCategoryObj.setTherapeuticCategory(patientMedicationData.getTherapeuticCategory());
				if(patientMedicationData.getTherapeuticCategory()!=null){
				if(patientMedicationData.getTherapeuticCategory().contains(",")){
					therapeuticCategoryObj.setTherapeuticCategoryLabel(patientMedicationData.getTherapeuticCategory().replace(",", "/"));
				}else{
					therapeuticCategoryObj.setTherapeuticCategoryLabel(patientMedicationData.getTherapeuticCategory());
				}
				therapeuticCategoryObj.setTherapeuticCategoryValue(patientMedicationData.getTherapeuticCategory());
				if(!therapeuticCategories.contains(therapeuticCategoryObj)){
					therapeuticCategories.add(therapeuticCategoryObj);
					}
				}
				
			}
		}
		return therapeuticCategories;
	}

	public void setTherapeuticCategories(
			List<MedTherapeuticCategory> therapeuticCategories) {
		this.therapeuticCategories = therapeuticCategories;
	}
	

	private List<PatientMedicationData> callToTherapeuticCategories(
			List<PatientMedicationData> patientMedicationDataList2) {
		List<PatientMedicationData>copyOriginalPatientMedicationListTemp=new ArrayList<PatientMedicationData>();
			for(PatientMedicationData patientMedicationData:patientMedicationDataList2){
				PatientMedicationData patientMedicationData2=new PatientMedicationData();
				patientMedicationData2=patientMedicationData;
				WSDrug wsDrugObj=patientMedicineService.getWSdrugObj(patientMedicationData.getDataProvider(),patientMedicationData.getDrugId(),patientMedicationData.getDrugNameId());
				patientMedicationData2.setTherapeuticCategory(wsDrugObj.getTherapeuticCategory());
				copyOriginalPatientMedicationListTemp.add(patientMedicationData2);
				}
		return copyOriginalPatientMedicationListTemp;
	}

	public List<DrugInteractionOverview> getCachedDrugIssuesList() {
		if(cachedDrugIssuesList==null){
			cachedDrugIssuesList=new ArrayList<DrugInteractionOverview>();
		}
		return cachedDrugIssuesList;
	}

	public void setCachedDrugIssuesList(
			List<DrugInteractionOverview> cachedDrugIssuesList) {
		this.cachedDrugIssuesList = cachedDrugIssuesList;
	}
	/**
	 * used method in overViewFilter.jsf 
	 * On Row expension It will call Patient Severity Interaction method 
	 * @param event
	 */
	public void onRowExpensionDrugInteractionFilter(ToggleEvent event) {
		logger.info("User selected alert type list size "+alertTypeFilterLevels.size());

		try {
			List<DrugInteraction>drugInteractionsList=new ArrayList<DrugInteraction>();
			List<DrugDiseaseDetail>drugDiseaseInteractionsList=new ArrayList<DrugDiseaseDetail>();
			List<DrugAllergyDetail>drugAllergyDetailsList=new ArrayList<DrugAllergyDetail>();
			overviewFilterDrugInteractionsList=new ArrayList<DrugInteractionOverview>();
			PatientMedicationData patientMedicationData=(PatientMedicationData)event.getData();
			selectedDrugId= patientMedicationData.getDrugId();
			String drugName=patientMedicationData.getDrugs();
			//logger.info("selected id=== "+selectedDrugId+":::"+patientMedicationData.getDrugName());
			String patientId=Integer.toString(new ContextUtil().getPatientId());	
			boolean drugInteraction=false;
			boolean diseaseInteraction=false;
			boolean allergyInteraction=false;
			boolean otherInteractions=false;
			boolean geriatricPrecaution=false;
			boolean paediatricPrecaution=false;
			for(String alertType:alertTypeFilterLevels){
				if(alertType.equalsIgnoreCase(DRUG_DRUG_INTERECTION)){
					drugInteraction=true;
				}else if(alertType.equalsIgnoreCase(DRUG_DISEASE_INTERACTION)){
					diseaseInteraction=true;
				}else if(alertType.equalsIgnoreCase(DRUG_ALLERGY_INTERACTION)){
					allergyInteraction=true;
				}else if(alertType.equalsIgnoreCase(GERIATRIC_PRECAUTIONS)){
					geriatricPrecaution=true;
				}else if(alertType.equalsIgnoreCase(PAEDIATRIC_PRECAUTIONS)){
					paediatricPrecaution=true;
				}
				else{
					otherInteractions=true;
				}
			}
			FacesContext context = FacesContext	.getCurrentInstance();UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");
			if(!(selectedDrugId==0.0))
			{
				System.out.println("selectedDrugId::::details::::"+selectedDrugId);
				if(alertTypeFilterLevels.size()==0 || (alertTypeFilterLevels.size()>0 && otherInteractions &&(!drugInteraction) && (!diseaseInteraction) &&(!allergyInteraction) && (!geriatricPrecaution) && (!paediatricPrecaution))){
					drugInteractionsList=drugDetailWSBean.callDrugDrugInteraction(getFilterPatientMedicationList(), userManageBean.getProviderLocation(),selectedDrugId);
					drugDiseaseInteractionsList=ncUpdate1WSBean.callDrugDiseaseInteraction(patientId,getFilterPatientMedicationList(),getPatientDiagnosesDetailList(),userManageBean.getProviderLocation(),selectedDrugId);
					drugAllergyDetailsList=drugDetailWSBean.getDrugAllergyInteraction(patientId,getPatientAllergyList(),getFilterPatientMedicationList(),userManageBean.getProviderLocation(),selectedDrugId);
					precautionsBasedOnDrugId(selectedDrugId);
				}
				
				else if(drugInteraction||diseaseInteraction||allergyInteraction||geriatricPrecaution||paediatricPrecaution){
				if(drugInteraction){
				drugInteractionsList=drugDetailWSBean.callDrugDrugInteraction(getFilterPatientMedicationList(), userManageBean.getProviderLocation(),selectedDrugId);
				}
				if(diseaseInteraction){
				drugDiseaseInteractionsList=ncUpdate1WSBean.callDrugDiseaseInteraction(patientId,getFilterPatientMedicationList(),getPatientDiagnosesDetailList(),userManageBean.getProviderLocation(),selectedDrugId);
				}
				if(allergyInteraction){
				drugAllergyDetailsList=drugDetailWSBean.getDrugAllergyInteraction(patientId,getPatientAllergyList(),getFilterPatientMedicationList(),userManageBean.getProviderLocation(),selectedDrugId);
				}
				if(geriatricPrecaution||paediatricPrecaution){
					precautionsBasedOnDrugId(selectedDrugId);
					logger.info("Geriatric precautions size "+geriatricPrecautions.size());
					logger.info("Paediatric Precautions Size "+paediatricPrecautions.size());
					}
				}
				
			}
			//logger.info("drug interaction size for drug id "+selectedDrugId+"===>"+drugInteractionsList.size());
			//logger.info("drug disease interaction size for drug id "+selectedDrugId+"===>"+drugDiseaseInteractionsList.size());
			//logger.info("drug allergy interaction size for drug id "+selectedDrugId+"===>"+drugAllergyDetailsList.size());
			for(DrugInteraction drugInteractionData:drugInteractionsList){
				double drugId1=Double.parseDouble(drugInteractionData.getDrug1ID());
				double drugId2=Double.parseDouble(drugInteractionData.getDrug2ID());

				if(selectedDrugId==drugId1 )
				{
					DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
					drugInteractionOverview.setClinicalEffects(drugInteractionData.getClinicalEffects());
					drugInteractionOverview.setPatientManagement(drugInteractionData.getPatientManagement());
					drugInteractionOverview.setIssueType(DRUG_DRUG_INTERECTION);

					drugInteractionOverview.setDrugId(drugInteractionData.getDrug1());
					drugInteractionOverview.setConflict(drugInteractionData.getDrug2());
					/* drugInteractionOverview.setDrugName(drugInteractionData.getDrug2());*/

					if(StringUtils.contains(StringUtils.lowerCase(drugInteractionData.getSeverityLevel()), DRUG_SEVERITY_LEVEL_SEARCH_STR)){
						drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
						drugInteractionOverview.setSeverityLevelToolTip(DRUG_SEVERITY_TOOLTIP);
					}else if(StringUtils.contains(StringUtils.lowerCase(drugInteractionData.getSeverityLevel()), DRUG_SEVERITY_LEVEL_SEARCH_STR_CONTRAINDICATED)){
						drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
						drugInteractionOverview.setSeverityLevelToolTip(DRUG_SEVERITY_TOOLTIP_CONTRAINDICATED);
					}else if(StringUtils.contains(StringUtils.lowerCase(drugInteractionData.getSeverityLevel()), DRUG_SEVERITY_LEVEL_SEARCH_STR_MODERATE)){
						drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL);
						drugInteractionOverview.setSeverityLevelToolTip(DRUG_SEVERITY_TOOLTIP_MODERATE);
					}
					//System.out.println("drugId is=="+drugInteractionOverview.getDrugId());
					/*if(drugInteractionOverview!=null)
					{
					if(!overviewFilterDrugInteractionsList.contains(drugInteractionOverview)){*/
						overviewFilterDrugInteractionsList.add(drugInteractionOverview);
					/*}
					}*/
				}

			}

			for(DrugDiseaseDetail drugDiseaseDetail:drugDiseaseInteractionsList){
				
				DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
				drugInteractionOverview.setClinicalEffects("");
				drugInteractionOverview.setConflict(drugDiseaseDetail.getDirectCondition());
				drugInteractionOverview.setIssueType(DRUG_DISEASE_INTERACTION);

				drugInteractionOverview.setPatientManagement(drugDiseaseDetail.getSeverityLevelText());
				if(StringUtils.equals(drugDiseaseDetail.getSeverityLevelShortText(), DRUG_SEVERITY_LEVEL_SEARCH_STR_DISEASE)){
					drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(drugDiseaseDetail.getSeverityLevelShortText());
				}else if((StringUtils.equals(drugDiseaseDetail.getSeverityLevelShortText(), DRUG_SEVERITY_LEVEL_SEARCH_STR_RELATIVE))||
						(StringUtils.equals(drugDiseaseDetail.getSeverityLevelShortText(), DRUG_SEVERITY_LEVEL_SEARCH_STR_CONTRADICATION))){
					drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(drugDiseaseDetail.getSeverityLevelShortText());
				}
				/*if(drugInteractionOverview!=null)
				{
				if(!overviewFilterDrugInteractionsList.contains(drugInteractionOverview)){*/
					overviewFilterDrugInteractionsList.add(drugInteractionOverview);
				/*}
				}*/
			}
			String allergyNameWS=new String();
			String allergySeverityLevel="";
			for(DrugAllergyDetail drugAllergyDetail:drugAllergyDetailsList){
				DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
				drugInteractionOverview.setClinicalEffects("");
				drugInteractionOverview.setConflict(drugAllergyDetail.getInteractionText());
				drugInteractionOverview.setIssueType(DRUG_ALLERGY_INTERACTION);
				if(StringUtils.contains(drugAllergyDetail.getInteractionText(), "with")){
					int i = drugAllergyDetail.getInteractionText().lastIndexOf(' '); 
					allergyNameWS = drugAllergyDetail.getInteractionText().substring(i+1); 
					logger.info("allergy name "+allergyNameWS);
				}
				for(PatientAllergy patAllergy:getPatientAllergyList()){
					if(patAllergy.getAllergyName().equals(allergyNameWS)){
						allergySeverityLevel=patAllergy.getAllergySeverity();
						break;
					}
				}
				if(StringUtils.isNotEmpty(allergySeverityLevel)){
					if(StringUtils.equals(allergySeverityLevel, DRUG_SEVERITY_TOOLTIP)){
						drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
						drugInteractionOverview.setSeverityLevelToolTip(allergySeverityLevel);
					}else if(StringUtils.equals(allergySeverityLevel, DRUG_SEVERITY_TOOLTIP_MODERATE)){
						drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL);
						drugInteractionOverview.setSeverityLevelToolTip(allergySeverityLevel);
					}else if(StringUtils.equals(allergySeverityLevel, MILD_LEVEL)){
						drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL);
						drugInteractionOverview.setSeverityLevelToolTip(allergySeverityLevel);
					}
				}else {
					drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(MILD_LEVEL);
				}
				/*if(drugInteractionOverview!=null)
				{
				if(!overviewFilterDrugInteractionsList.contains(drugInteractionOverview)){*/
				overviewFilterDrugInteractionsList.add(drugInteractionOverview);
				/*}
				}*/
			}
			
			if(geriatricPrecautions!=null){
				if(geriatricPrecautions.size()>0){
					List<DrugInteractionOverview>geriatricPrecautionList=patientMedicineService.convertGeriatricPrecautionToDrugInteractionOverviewObj(geriatricPrecautions,selectedDrugId);
					overviewFilterDrugInteractionsList.addAll(geriatricPrecautionList);
				}
			}
			
			if(paediatricPrecautions!=null){
				if(paediatricPrecautions.size()>0){
					List<DrugInteractionOverview>paediatricPrecautionList=patientMedicineService.convertPaediatricPrecautionToDrugInteractionOverviewObj(paediatricPrecautions,selectedDrugId);
					overviewFilterDrugInteractionsList.addAll(paediatricPrecautionList);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * @return the searchMedicineDataTableforoverviewfilter
	 */
	public DataTable getSearchMedicineDataTableforoverviewfilter() {
		return searchMedicineDataTableforoverviewfilter;
	}

	/**
	 * @param searchMedicineDataTableforoverviewfilter the searchMedicineDataTableforoverviewfilter to set
	 */
	public void setSearchMedicineDataTableforoverviewfilter(
			DataTable searchMedicineDataTableforoverviewfilter) {
		this.searchMedicineDataTableforoverviewfilter = searchMedicineDataTableforoverviewfilter;
	}

	/**
	 * @return the genericMedActionPlanPropertyforfilter
	 */
	public DataTable getGenericMedActionPlanPropertyforfilter() {
		return genericMedActionPlanPropertyforfilter;
	}

	/**
	 * @param genericMedActionPlanPropertyforfilter the genericMedActionPlanPropertyforfilter to set
	 */
	public void setGenericMedActionPlanPropertyforfilter(
			DataTable genericMedActionPlanPropertyforfilter) {
		this.genericMedActionPlanPropertyforfilter = genericMedActionPlanPropertyforfilter;
	}

	/**
	 * @return the reconsileMedsDataTableforoverviewfilter
	 */
	public DataTable getReconsileMedsDataTableforoverviewfilter() {
		return reconsileMedsDataTableforoverviewfilter;
	}

	/**
	 * @param reconsileMedsDataTableforoverviewfilter the reconsileMedsDataTableforoverviewfilter to set
	 */
	public void setReconsileMedsDataTableforoverviewfilter(
			DataTable reconsileMedsDataTableforoverviewfilter) {
		this.reconsileMedsDataTableforoverviewfilter = reconsileMedsDataTableforoverviewfilter;
	}

	/**
	 * @return the reconsileMedsForPharmacyDataTableforoverviewfilter
	 */
	public DataTable getReconsileMedsForPharmacyDataTableforoverviewfilter() {
		return reconsileMedsForPharmacyDataTableforoverviewfilter;
	}

	/**
	 * @param reconsileMedsForPharmacyDataTableforoverviewfilter the reconsileMedsForPharmacyDataTableforoverviewfilter to set
	 */
	public void setReconsileMedsForPharmacyDataTableforoverviewfilter(
			DataTable reconsileMedsForPharmacyDataTableforoverviewfilter) {
		this.reconsileMedsForPharmacyDataTableforoverviewfilter = reconsileMedsForPharmacyDataTableforoverviewfilter;
	}

	/**
	 * @return the viewRxDataTableforoverviewfilter
	 */
	public DataTable getViewRxDataTableforoverviewfilter() {
		return viewRxDataTableforoverviewfilter;
	}

	/**
	 * @param viewRxDataTableforoverviewfilter the viewRxDataTableforoverviewfilter to set
	 */
	public void setViewRxDataTableforoverviewfilter(
			DataTable viewRxDataTableforoverviewfilter) {
		this.viewRxDataTableforoverviewfilter = viewRxDataTableforoverviewfilter;
	}
	
	public void overviewFilterUpdateIssuesCount(){
		cachedDrugIssuesList=new ArrayList<DrugInteractionOverview>();
	//	getPatientMedicationDataList();
		try{
		getFilterPatientMedicationList();
		getAllClinicMedPlans();
		logger.info(filterPatientMedicationList.size()+"all clinics med plans size ::: "+allClinicMedPlans.size());
		for(PatientMedicationData patientMedicationData:filterPatientMedicationList){
			List<DrugInteractionOverview>drugIssuesList=new ArrayList<DrugInteractionOverview>();
			drugIssuesList=overviewFilterDrugOverview(patientMedicationData.getDrugId());
			logger.info("drugIssuesList size"+drugIssuesList.size());
			for(MedandGenricmed medPlans:allClinicMedPlans){
				if(medPlans.getDrugId().equals(String.valueOf((int)patientMedicationData.getDrugId()))){
					patientMedicationData.setMedPlanExists(true);
					patientMedicationData.setMedPlanStrFilter(MED_ACTION_PLAN);
					break;
				}
				
			}
			patientMedicationData.setTotalCount(String.valueOf(drugIssuesList.size()));
			patientMedicationData.setOriginalCount(String.valueOf(drugIssuesList.size()));
			for(DrugInteractionOverview drugInterection:drugIssuesList)
			{
				if(drugInterection!=null && StringUtils.isNotBlank(drugInterection.getIssueType())){
				if(DRUG_DRUG_INTERECTION.equalsIgnoreCase(drugInterection.getIssueType())){
					patientMedicationData.setDrugInteractionStr(DRUG_DRUG_INTERECTION);
				}if(DRUG_DISEASE_INTERACTION.equalsIgnoreCase(drugInterection.getIssueType())){
					patientMedicationData.setDiseaseInteractionStr(DRUG_DISEASE_INTERACTION);
				}if(DRUG_ALLERGY_INTERACTION.equalsIgnoreCase(drugInterection.getIssueType())){
					patientMedicationData.setAllergyInteractionStr(DRUG_ALLERGY_INTERACTION);
				}if(GERIATRIC_PRECAUTIONS.equalsIgnoreCase(drugInterection.getIssueType())){
					patientMedicationData.setGeriatricPrecautionStr(GERIATRIC_PRECAUTIONS);
				}if(PAEDIATRIC_PRECAUTIONS.equalsIgnoreCase(drugInterection.getIssueType())){
					patientMedicationData.setPaediatricPrecautionStr(PAEDIATRIC_PRECAUTIONS);
				}
				}
				if (patientMedicationData.getIssuesLevel()==null)
				{
					patientMedicationData.setIssuesLevel(LOW_SEVERITY_LEVEL);
					patientMedicationData.setOriginalIssueLevel(LOW_SEVERITY_LEVEL);
					logger.info("lebel:::"+drugInterection.getSeverityLevel());
				}


				if (StringUtils.isNotBlank(drugInterection.getSeverityLevel()) && (StringUtils.isNotBlank(patientMedicationData.getIssuesLevel()) && ! patientMedicationData.getIssuesLevel().equals(HIGH_SEVERITY_LEVEL)))
				{

					if( drugInterection.getSeverityLevel().equals(HIGH_SEVERITY_LEVEL) || drugInterection.getSeverityLevel().equals(MEDIUM_SEVERITY_LEVEL) )
					{
						patientMedicationData.setIssuesLevel(drugInterection.getSeverityLevel());
						patientMedicationData.setOriginalIssueLevel(drugInterection.getSeverityLevel());
					}

				}
				logger.info("drug Issue List Size==value =="+drugIssuesList.size());
			}
			//added by nagaraj for Filtering data
			cachedDrugIssuesList.addAll(drugIssuesList);
		}
		}catch(Exception e){
			e.printStackTrace();
		}

		
	}
	
	public List<DrugInteractionOverview> overviewFilterDrugOverview(double selectedDrugId){

		overviewFilterDrugInteractionsList=new ArrayList<DrugInteractionOverview>();
		String patientId=Integer.toString(new ContextUtil().getPatientId());
		FacesContext context = FacesContext.getCurrentInstance();
		UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");
		try{
		if(!(selectedDrugId==0.0))
		{
			drugInteractionsListIssue=drugDetailWSBean.callDrugDrugInteraction(getFilterPatientMedicationList(), userManageBean.getProviderLocation(),selectedDrugId);
			drugDiseaseInteractionsListIsssues=ncUpdate1WSBean.callDrugDiseaseInteraction(patientId,getFilterPatientMedicationList(),getPatientDiagnosesDetailList(),userManageBean.getProviderLocation(),selectedDrugId);
			drugAllergyDetailsListIssues=drugDetailWSBean.getDrugAllergyInteraction(patientId,getPatientAllergyList(),getFilterPatientMedicationList(),userManageBean.getProviderLocation(),selectedDrugId);
			
			precautionsBasedOnDrugId(selectedDrugId);
			logger.info("Geriatric precautions size "+geriatricPrecautions.size());
			logger.info("Paediatric Precautions Size "+paediatricPrecautions.size());
		}
		for(DrugInteraction drugInteractionData:drugInteractionsListIssue){
			double drugId1=Double.parseDouble(drugInteractionData.getDrug1ID());
			double drugId2=Double.parseDouble(drugInteractionData.getDrug2ID());
			if(selectedDrugId==drugId1)
			{
				DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
			//	drugInteractionOverview.setDrugId(String.valueOf((int)selectedDrugId));
				drugInteractionOverview.setIssueType(DRUG_DRUG_INTERECTION);
			//	drugInteractionOverview.setDrugId(String.valueOf((int)selectedDrugId));
				drugInteractionOverview.setDrugId(drugInteractionData.getDrug1());
				drugInteractionOverview.setConflict(drugInteractionData.getDrug2());
				/* drugInteractionOverview.setDrugName(drugInteractionData.getDrug2());*/
				drugInteractionOverview.setDrugIdVal(selectedDrugId);
				if(StringUtils.contains(StringUtils.lowerCase(drugInteractionData.getSeverityLevel()), DRUG_SEVERITY_LEVEL_SEARCH_STR)){
					drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);

				}else if(StringUtils.contains(StringUtils.lowerCase(drugInteractionData.getSeverityLevel()), DRUG_SEVERITY_LEVEL_SEARCH_STR_CONTRAINDICATED)){
					drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);

				}else if(StringUtils.contains(StringUtils.lowerCase(drugInteractionData.getSeverityLevel()), DRUG_SEVERITY_LEVEL_SEARCH_STR_MODERATE)){
					drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL);

				}

				/*if(drugInteractionOverview!=null)
				{
				if(!overviewFilterDrugInteractionsList.contains(drugInteractionOverview)){*/
					overviewFilterDrugInteractionsList.add(drugInteractionOverview);
				/*}
				}*/
			}
		}

		for(DrugDiseaseDetail drugDiseaseDetail:drugDiseaseInteractionsListIsssues){
			DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
			drugInteractionOverview.setIssueType(DRUG_DISEASE_INTERACTION);
			drugInteractionOverview.setDrugId(String.valueOf((int)selectedDrugId));
			drugInteractionOverview.setDrugIdVal(selectedDrugId);
			if(StringUtils.equals(drugDiseaseDetail.getSeverityLevelShortText(), DRUG_SEVERITY_LEVEL_SEARCH_STR_DISEASE)){
				drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);

			}else if((StringUtils.equals(drugDiseaseDetail.getSeverityLevelShortText(), DRUG_SEVERITY_LEVEL_SEARCH_STR_RELATIVE))||
					(StringUtils.equals(drugDiseaseDetail.getSeverityLevelShortText(), DRUG_SEVERITY_LEVEL_SEARCH_STR_CONTRADICATION))){
				drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL);

			}
			/*if(drugInteractionOverview!=null)
			{
			if(!overviewFilterDrugInteractionsList.contains(drugInteractionOverview)){*/
			overviewFilterDrugInteractionsList.add(drugInteractionOverview);
			/*}
			}*/
		}
		String allergyNameWS=new String();
		String allergySeverityLevel="";
		for(DrugAllergyDetail drugAllergyDetail:drugAllergyDetailsListIssues){
			
			DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
			drugInteractionOverview.setIssueType(DRUG_ALLERGY_INTERACTION);
			drugInteractionOverview.setDrugId(String.valueOf((int)selectedDrugId));
			drugInteractionOverview.setDrugIdVal(selectedDrugId);
			if(StringUtils.contains(drugAllergyDetail.getInteractionText(), "with")){
				
				int i = drugAllergyDetail.getInteractionText().lastIndexOf(' '); 
				allergyNameWS = drugAllergyDetail.getInteractionText().substring(i+1); 
				logger.info("allergy name "+allergyNameWS);
			}
			for(PatientAllergy patAllergy:getPatientAllergyList()){
				if(patAllergy.getAllergyName().equals(allergyNameWS)){
					allergySeverityLevel=patAllergy.getAllergySeverity();
					break;
				}
			}
			if(StringUtils.isNotEmpty(allergySeverityLevel)){
				if(StringUtils.equals(allergySeverityLevel, DRUG_SEVERITY_TOOLTIP)){
					drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(DRUG_SEVERITY_TOOLTIP);
				}else if(StringUtils.equals(allergySeverityLevel, DRUG_SEVERITY_TOOLTIP_MODERATE)){
					drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(DRUG_SEVERITY_TOOLTIP_MODERATE);
				}else if(StringUtils.equals(allergySeverityLevel, MILD_LEVEL)){
					drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(MILD_LEVEL);

				}
			}else {
				drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL);
				drugInteractionOverview.setSeverityLevelToolTip(MILD_LEVEL);
			}
			/*if(drugInteractionOverview!=null)
			{
			
			if(!overviewFilterDrugInteractionsList.contains(drugInteractionOverview)){*/
			overviewFilterDrugInteractionsList.add(drugInteractionOverview);
			/*}
			}*/
		}
		

		if(geriatricPrecautions!=null){
			if(geriatricPrecautions.size()>0){
				List<DrugInteractionOverview>geriatricPrecautionList=patientMedicineService.convertGeriatricPrecautionToDrugInteractionOverviewObj(geriatricPrecautions,selectedDrugId);
				overviewFilterDrugInteractionsList.addAll(geriatricPrecautionList);
			}
		}
		
		if(paediatricPrecautions!=null){
			if(paediatricPrecautions.size()>0){
				List<DrugInteractionOverview>paediatricPrecautionList=patientMedicineService.convertPaediatricPrecautionToDrugInteractionOverviewObj(paediatricPrecautions,selectedDrugId);
				overviewFilterDrugInteractionsList.addAll(paediatricPrecautionList);
			}
		}
		logger.info("drugInteractionsListIssueDetail size::::::::::::::::::::::::::::::::::::::"+overviewFilterDrugInteractionsList.size());
		}catch(Exception e){
			e.printStackTrace();
		}
		return overviewFilterDrugInteractionsList;
	}

	public List<DrugInteractionOverview> getOverviewFilterDrugInteractionsList() {
		return overviewFilterDrugInteractionsList;
	}

	public void setOverviewFilterDrugInteractionsList(
			List<DrugInteractionOverview> overviewFilterDrugInteractionsList) {
		this.overviewFilterDrugInteractionsList = overviewFilterDrugInteractionsList;
	}

	public List<PatientMedicationData> getCachedPatientMedicationList() {
		return cachedPatientMedicationList;
	}

	public void setCachedPatientMedicationList(
			List<PatientMedicationData> cachedPatientMedicationList) {
		this.cachedPatientMedicationList = cachedPatientMedicationList;
	}

	public boolean isHedisSelectedOption() {
		return hedisSelectedOption;
	}

	public void setHedisSelectedOption(boolean hedisSelectedOption) {
		this.hedisSelectedOption = hedisSelectedOption;
	}

	public boolean isGapinSelectedOption() {
		return gapinSelectedOption;
	}

	public void setGapinSelectedOption(boolean gapinSelectedOption) {
		this.gapinSelectedOption = gapinSelectedOption;
	}


	/*@current value fo date EditRx
	 * @Author singh
	 * 
	 * */
		public List<SendMessageEditRx> getSendMessageCurrentEditRxList() {
			
		
			if (sendMessageCurrentEditRxList==null) {
				sendMessageCurrentEditRxList=new ArrayList<SendMessageEditRx>();
			}
			
				sendMessageCurrentEditRxList=patientMedicineService.getSendMessageCurrentEditRxList(new ContextUtil().getPatientId(),new DateUtil().getTodayDate());
			
			
			
		
			
			return sendMessageCurrentEditRxList;
		}

		public void setSendMessageCurrentEditRxList(
				List<SendMessageEditRx> sendMessageCurrentEditRxList) {
			this.sendMessageCurrentEditRxList = sendMessageCurrentEditRxList;
		}

		public Date getTodayDate() {
			return new Date();
		}

		public void setTodayDate(Date todayDate) {
			this.todayDate = todayDate;
		}

		public List<PatientMedicationHistory> getDisContinueMedicationListForVisit() {
			try{
				logger.info("inside discontinuemedicine merhod>>>>");
				/*Date stardate;
		    	 stardate=new DateUtil().AddDate(new Date(), -1);
		    	 List<PatientMedicationHistory> disContinueMedicationList=new ArrayList<PatientMedicationHistory>();*/
				
		    	 disContinueMedicationListForVisit=patientMedicineService.findDiscontinueMedicineListOfParticularVisit(new ContextUtil().getPatientId(),new ContextUtil().getProviderId());
			
			/*for(PatientMedicationHistory pathistory:disContinueMedicationListForVisit)
		     {
		    	 System.out.println(stardate+"action_date::::"+pathistory.getActionDate());
		    	
		    	// stardate=sdf.p
		    	 if(pathistory.getActionDate().after(stardate))
		    	 {

			    	
		    		 System.out.println("date in discontinue medicine::::"+pathistory.getActionDate()+"start date::"+stardate);
		    		 disContinueMedicationList.add(pathistory);
		    		 disContinueMedicationListForVisit=disContinueMedicationList;
		    	 }
			
			
			logger.info("disContinueMedicationListForVisit::::"+disContinueMedicationListForVisit.size());
			
		
		
			}*/
			}
			catch(Exception e){
				e.printStackTrace();
			}
			return disContinueMedicationListForVisit;
		}

		public void setDisContinueMedicationListForVisit(
				List<PatientMedicationHistory> disContinueMedicationListForVisit) {
			this.disContinueMedicationListForVisit = disContinueMedicationListForVisit;
		}

		public Date getModifyDate() {
			if(modifyDate==null)
			{
				modifyDate=patientMedicationData.getModifyDate();
			}
			return modifyDate;
		}

		public void setModifyDate(Date modifyDate) {
			this.modifyDate = modifyDate;
		}

		public List<PatientMedicationData> getAddedOrChangedMedicationListForCurrentDatePatient() {
			addedOrChangedMedicationListForCurrentDatePatient= new ArrayList<PatientMedicationData>();
			logger.info("getAddedOrChangedMedicationListForCurrentDatePatient");
			//SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			 Date stardate,endDate;
			 if(selectedEncounterDateForPrint==null){
				 stardate=new DateUtil().AddDate(new Date(), -1); 
			 }
			 else {
				stardate=selectedEncounterDateForPrint;
			}
	    	 stardate=new DateUtil().AddDate(new Date(), -1);
		try {
		
		     for(PatientMedicationData pat:patientMedicationDataList)
		     {
		    	 System.out.println(stardate+"date::::"+pat.getStartDate());
		    	
		    	// stardate=sdf.p
		    	 if (!(pat.getStartDate().equals(null)) || !(pat.getStartDate()==null)) {
		    		 if(pat.getStartDate().after(stardate))
			    	 {
			    		 System.out.println("date1111::::"+pat.getStartDate());
			    	     addedOrChangedMedicationListForCurrentDatePatient.add(pat);
			    	 }
		    	 }
	    	 
	     }
			//addedOrChangedMedicationListForCurrentDatePatient=patientMedicineService.findPatientMedicationDataListForPatient(new ContextUtil().getPatientId());
	     
			/*for(PatientMedicationData pvalue:addedOrChangedMedicationListForCurrentDatePatient)
			{
				//if(!(pat.getMedicineStatus().equalsIgnoreCase(DISCONTINUE_MEDS)))
				if(pvalue.isFlagForVisit())()
					addedOrChangedMedicationListForPatient.add(pvalue);
			}
	*/
		 	
		} catch (NullPointerException np) {
			np.printStackTrace();
			logger.info(">>>>>>>>>>>NullPointerException EXCEPTION IN getAddedOrChangedMedicationListForCurrentDatePatient INSIDE patientMedicineManageBean<<<<<<<<<<<<<<",np);
		}
		catch (Exception e) {
			e.printStackTrace();
			logger.info(">>>>>>>>>>>EXCEPTION IN getAddedOrChangedMedicationListForCurrentDatePatient INSIDE patientMedicineManageBean<<<<<<<<<<<<<<",e);
		}
		
			return addedOrChangedMedicationListForCurrentDatePatient;
		}

		public void setAddedOrChangedMedicationListForCurrentDatePatient(
				List<PatientMedicationData> addedOrChangedMedicationListForCurrentDatePatient) {
			this.addedOrChangedMedicationListForCurrentDatePatient = addedOrChangedMedicationListForCurrentDatePatient;
		}

		public void setMedicalActionPlanListForCurrentDate(
				List<MedandGenricmed> medicalActionPlanListForCurrentDate) {
			
			this.medicalActionPlanListForCurrentDate = medicalActionPlanListForCurrentDate;
		}

		public List<MedandGenricmed> getMedicalActionPlanListForCurrentDate() {
			
				logger.info("getMedicalActionPlanList in meds::::");
				medicalActionPlanListForCurrentDate=new ArrayList<MedandGenricmed>();
				medicalActionPlanListForCurrentDate=patientMedicineService.findgenricandnongenricMedActionPlanPatient(new ContextUtil().getPatientId(),new ContextUtil().getProviderId());
				
				logger.info("medicalActionPlanListForCurrentDate size in bean:::"+medicalActionPlanListForCurrentDate.size());
				for(MedandGenricmed med:medicalActionPlanListForCurrentDate)
				{
					int noOFdays=findNoOfdays(med.getLabfrequency());
					med.setNextLabDate(new DateUtil().AddDate(med.getLastupdatedate(), noOFdays));
					System.out.println(":::::::::setNextLabDate::::::::::::"+med.getNextLabDate());
				}

			
			/*else
			{
				
				logger.info("getMedicalActionPlanList::::in else");
				medicalActionPlanListForCurrentDate=new ArrayList<MedandGenricmed>();
				medicalActionPlanListForCurrentDate=patientMedicineService.findgenricandnongenricMedActionPlanPatient(new ContextUtil().getPatientId(),new ContextUtil().getProviderId());
				for(MedandGenricmed med:medicalActionPlanListForCurrentDate)
				{
					int noOFdays=findNoOfdays(med.getLabfrequency());
					med.setNextLabDate(new DateUtil().AddDate(med.getCreatedate(), noOFdays));
				}
				
			}*/
			
			
		
		
			return medicalActionPlanListForCurrentDate;
		}

		public List<PatientMedicationData> getPatientMedicationListForVisit() {
			
			patientMedicationListForVisit=patientMedicineService.findMedicineForPatient(new ContextUtil().getPatientId());
			return patientMedicationListForVisit;
		}

		public void setPatientMedicationListForVisit(
				List<PatientMedicationData> patientMedicationListForVisit) {
			this.patientMedicationListForVisit = patientMedicationListForVisit;
		}

		
		/*Save Details Notes and patient Education
		 * @Author Sanket Singh
		 * */
		public void saveEncounterSummaryDetail()
		{
			System.out.println(" Encounter Summary method started now ");
			getShowPatientNotes();
			getShowPatientEducation();
			getPatientMedicationDataList();
			try {
				encounterSummary.setEncounterDate(new Date());
				encounterSummary.setDoctorId(new ContextUtil().getLoginId());
				encounterSummary.setProviderId(new ContextUtil().getProviderId());
				encounterSummary.setPatientId(new ContextUtil().getPatientId());
				encounterSummary.setClinicId(new ContextUtil().getClinicId());
				System.out.println("Review point of System completed "+encounterSummary.getTenPointReviewOfSytemCompleted()+"If Yes "+encounterSummary.getIfYes()
						);
				
				for(PatientMedicationData pdata:patientMedicationDataList)
				{
					patientMedicineNotes.setDrugName(pdata.getDrugName());
				}
				/*logger.info("saveDetailForEducation:::::"+getShowPatientEducation().toString()+"patientMedicineNotes drug name"+patientMedicineNotes.getDrugName());
				PatientMedicineNotes patientMedicineNotes=new PatientMedicineNotes();
				patientMedicineNotes.setNotes(getShowPatientNotes().toString());
				patientMedicineNotes.setPatientEducation(getShowPatientEducation().toString());
				patientMedicineNotes.setDrugName(patientMedicineNotes.getDrugName());
				patientMedicineNotes.setPatientId(new ContextUtil().getPatientId());
				patientMedicineNotes.setDate(new DateUtil().getTodayDate());*/
				
				
				
			/*	if(!(getShowPatientNotes().toString()==null) && (!(getShowPatientEducation().toString()==null) ))
				{*/
					/*if(!(getShowPatientNotes().toString().isEmpty() ))
					{
						if(!(getShowPatientEducation().isEmpty()))
						{*/
						
				    patientMedicineService.saveMedicineDetailforEducation(patientMedicineNotes,encounterSummary);
					patientMedicineNotesList=null;
			/*	}
					
				}*/
				/*}*/
			} catch (NullPointerException ne) {
				ne.printStackTrace();
			}
			

		}
       /**
        * overViewFilter.jsf#Medicine Category
        * It will different  Medicine Category in Filter Section   
        * @return List<DrugCategoryFilter> drugCategoryList
        */
		public List<DrugCategoryFilter> getDrugCategoryList() {
			if(drugCategoryList==null){
				drugCategoryList=new ArrayList<DrugCategoryFilter>();
				getCopyOriginalPatientMedicationList();
				for(PatientMedicationData patientMedicationData:copyOriginalPatientMedicationList){
					if(patientMedicationData.getDrugCategory()!=null){
					DrugCategoryFilter drugCategoryFilter=new DrugCategoryFilter();
					drugCategoryFilter.setDrugId(patientMedicationData.getDrugId());
					drugCategoryFilter.setDrugCategoryName(patientMedicationData.getDrugCategory());
					drugCategoryFilter.setDrugNameId(patientMedicationData.getDrugNameId());
					if(!drugCategoryList.contains(drugCategoryFilter)){
						drugCategoryList.add(drugCategoryFilter);
					}
					}
				}
			}
			return drugCategoryList;
		}

		public void setDrugCategoryList(List<DrugCategoryFilter> drugCategoryList) {
			this.drugCategoryList = drugCategoryList;
		}
         /**
          * overViewFilter.jsf#Drug Type
          * It will provide all Drug Type 
          * @return Map<String,String>  DrugClassification 
          */
		public Map<String, String> getDrugClassificationList() {
			if(drugClassificationList==null){
				drugClassificationList=new LinkedHashMap<String, String>();
				drugClassificationList=parsePropertyEntryDropdown(DRUG_CLASSIFICATION);
			}
			return drugClassificationList;
		}

		public void setDrugClassificationList(Map<String, String> drugClassificationList) {
			this.drugClassificationList = drugClassificationList;
		}

		public List<String> getDrugType() {
			if(drugType==null){
				drugType=new ArrayList<String>();
			}
			return drugType;
		}

		public void setDrugType(List<String> drugType) {
			this.drugType = drugType;
		}

		/**
		 * used in virtualPillBox.jsf
		 * Get the med data with image link and sig information for showing in virtualPillBox page   
		 * @return the patVirtualPillBoxListForDoctor
		 * Get the pat virtual pill box med List For Doctor
		 */
		public List<PatientMedicationData> getpatVirtualPillBoxListForDoctor() {
			
			
			if(patVirtualPillBoxListForDoctor==null)
			{
				patVirtualPillBoxListForDoctor=new ArrayList<PatientMedicationData>();

			}
			
			getMedicationListForPatient(new ContextUtil().getPatientId()); // Get Medication list Based on Patient Id 
			getSigCodeList(); // Get Sig Code Data 
			patVirtualPillBoxListForDoctor=medicationListForPatient;
			for(PatientMedicationData pat:medicationListForPatient)
			{
				pat =findvirtualPillBoxDetail(sigCodeList,pat); //Find pill box detail data  
			}
			return patVirtualPillBoxListForDoctor;
		}

		/**
		 * @param patVirtualPillBoxListForDoctor the patVirtualPillBoxListForDoctor to set
		 */
		public void setpatVirtualPillBoxListForDoctor(
				List<PatientMedicationData> patVirtualPillBoxListForDoctor) {
			this.patVirtualPillBoxListForDoctor = patVirtualPillBoxListForDoctor;
		}
		
       /**
        * Doctor/overViewFilter.jsf#Prescriber
        * Select all Prescriber in Filter
        */
		public void selectAllPrecriberFilters(){
			logger.info("Select All Precriber Filters method called");
			prescriberFilterByName=new ArrayList<String>();
			for(PrescriberFilter prescriberFilter:prescriberFilterList){
				prescriberFilterByName.add(prescriberFilter.getPrescriberName());
			}
		}
		/**
	        * Doctor/overViewFilter.jsf#Prescriber
	        * Clear all Precriber in Fillter   
	        */
		public void clearAllPrescriberFilters(){
			logger.info("Clear All Precriber Filters method called");
			prescriberFilterByName=new ArrayList<String>();
		}
		/**
		 * used Method in overViewFilter.jsf
		 * In medicine sectoin it will select all medicine 
		 */
		public void selectAllDrugFilters(){
			logger.info("Select All Drug Filters method called");
			drugFilterByName=new ArrayList<String>();
			for(DrugFilter drugFilter:drugFilterList){
				drugFilterByName.add(drugFilter.getDrugName());
			}
		}
		/**
		 * overViewFilter.jsf#Medicine  
		 * Clear all Drug Filter 
		 */
		public void clearAllDrugFilters(){
			logger.info("Clear All Drug Filters method called");
			drugFilterByName=new ArrayList<String>();
		}
		public List<MedActionPlan> getAnticoagClinicMessages() {
			if(anticoagClinicMessages==null){
				anticoagClinicMessages=new ArrayList<MedActionPlan>();
				anticoagClinicMessages.addAll(getMedActionListForINRLabMessage());
			}
			return anticoagClinicMessages;
		}
		public void setAnticoagClinicMessages(List<MedActionPlan> anticoagClinicMessages) {
			this.anticoagClinicMessages = anticoagClinicMessages;
		}
		public MedActionPlan getAnticoagAlertMessageObj() {
			if(anticoagAlertMessageObj==null){
				anticoagAlertMessageObj=new MedActionPlan();
				setAnticoagAlertMessageObj(getLatestMedActionPlanForINR());
			//	logger.info("AntiCoag duplicate obj for Filtering "+latestMedActionPlanForINR.getMedicineName());
			}
			return anticoagAlertMessageObj;
		}
		public void setAnticoagAlertMessageObj(MedActionPlan anticoagAlertMessageObj) {
			this.anticoagAlertMessageObj = anticoagAlertMessageObj;
		}
	/*	public boolean isShowNotesForINRlabOvw() {
			isShowNotesMsgINRLab();
			getCheckNotesForLab();
			setShowNotesForINRlabOvw(isShowNotesForINRLab());
			return showNotesForINRlabOvw;
		}
		public void setShowNotesForINRlabOvw(boolean showNotesForINRlabOvw) {
			this.showNotesForINRlabOvw = showNotesForINRlabOvw;
		}
*/
		public Boolean getShowNotesForINRlabOvw() {
			if(showNotesForINRlabOvw==null){
				isShowNotesMsgINRLab();
				//getCheckNotesForLab();
				//getShowAnticoagMedactionPlanMessage();
				//setShowNotesForINRlabOvw(isShowNotesForINRLab());
			}
			return showNotesForINRlabOvw;
		}
		public void setShowNotesForINRlabOvw(Boolean showNotesForINRlabOvw) {
			this.showNotesForINRlabOvw = showNotesForINRlabOvw;
		}	
		/**
		 * reset Virtual Pill Box Med On Load Method
		 * in Doctor Profile  
		 */
		public void resetVirtualPillBoxList(){
			patVirtualPillBoxListForDoctor=null; // reset virtual pill box list value 
			medicationListForPatient=null; // reset medication list for patient 
		}
		public List<PatientMedicationData> getPatientMedList() {
			if(patientMedList==null){
				patientMedList=new ArrayList<PatientMedicationData>();
				patientMedList = patientMedicineService 
						.getPatientMedicationeData(new ContextUtil().getLoginId());
				for(PatientMedicationData pdata:patientMedList)
				{
					pharmacyName=pdata.getPharmacyName();
					
					
				}
			}
			
			System.out.println(patientMedList.size());
			return patientMedList;
		}
		public void setPatientMedList(List<PatientMedicationData> patientMedList) {
			this.patientMedList = patientMedList;
		}
		
		/*find allergy name Method for New pateint 
		   added by vinod*/
		public void findAllergyNameForNewPatient()
		{
			logger.info("findAllergyNameForNewPatient ::::::::::::::::::::::");
			allergyMaster=new AllergyMaster();
			allergyMaster=(AllergyMaster)getMasterDataBindingTable().getRowData();
			setAllergyNameForAddingNew(allergyMaster.getAllergyName());
			System.out.println(patientAllergy.getAllergyName()+"::::selected allergy name::"+getAllergyNameForAddingNew()+"::allergy from master:::"+allergyMaster.getAllergyName());
			setCheckAllergyValidName(true);
			//RequestContext.getCurrentInstance().execute("addAllergyDialog.hide()");
			RequestContext.getCurrentInstance().execute("addAllergyDialog.show()");
			//setAllergyNameForAddingNew(null);
		}
		
		/*add allergy Method for New pateint 
		   added by vinod*/
		public void addAllergyForNewPatient()
		{
			logger.info("addAllergyForNewPatient for new Patient::::::::::::::::::::::");
			logger.info(getAllergyNameForAddingNew()+":::savePatientAllergy:::::::: for new Patient"+patientAllergy.getAllergyName()+"dsf"+patientAllergy.getAllergyName()+"fasdfsdf"+patientAllergy.getPatientId());

			boolean check=false;
		
			for(PatientAllergy patAllergy:getAllergyListForNewPatient())
			{
				if(patAllergy.getAllergyName().equals(getAllergyNameForAddingNew()))
					check=true;

				System.out.println("check:::"+check);
			}
		

			if(!(allergyNameForAddingNew.isEmpty())){	
				logger.info("allergyNameForAddingNew:::::::::::for new Patient"+allergyNameForAddingNew);

				if (checkAllergyValidName) {
					System.out.println("checkAllergyValidName::for new Patient"+checkAllergyValidName);

					if(!check)
					{
						System.out.println("check inside if block of::"+check);
						//patientAllergy.setPatientId(new ContextUtil().getPatientId());
						patientAllergy.setAllergyName(getAllergyNameForAddingNew());
						patientAllergy.setAllergySource(allergyMaster.getAllergySourceId());
						patientAllergy.setCompositeAllergyId(Integer.parseInt(allergyMaster.getCompositeAllergyId()));
						patientAllergy.setAlergyConceptId(Integer.parseInt(allergyMaster.getAllergyConceptId()));
						patientAllergy.setAllergyConceptType(allergyMaster.getConceptType());
						patientAllergy.setStartDate(new DateUtil().getTodayDate());
						patientAllergy.setModifyDate(new DateUtil().getTodayDate());
						patientAllergy.setDateTimeForcompareAllergy(new DateUtil().convertDateFormatUsingFormat(new DateUtil().getTodayDate(),"yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
						logger.info("setDateTimeForcompareAllergy :::"+patientAllergy.getDateTimeForcompareAllergy());
						System.out.println("::::::::::::::::><><><>> notes::"+patientAllergy.getAllergyNotes());

						if(!(patientAllergy.getAllergyName().equals("")))
						{
							allergyListForNewPatient.add(patientAllergy);
						}
						FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO,"Allergy Added Successfully", ""));
						 FacesContext.getCurrentInstance().getExternalContext().getFlash().setKeepMessages(true);
					}
					else
					{
						FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO,"Data Already There", "")); 
						FacesContext.getCurrentInstance().getExternalContext().getFlash().setKeepMessages(true);
					}
				}
				else {
					System.out.println("inside else checkAllergyValidName:"+checkAllergyValidName);
					FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO,"Use Valid Allergy Name", ""));
					 FacesContext.getCurrentInstance().getExternalContext().getFlash().setKeepMessages(true);
				}
			}
			else{
				RequestContext context = RequestContext.getCurrentInstance();  
				context.addCallbackParam("validationFailed", false);  
				FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Please Enter Allergy Name", ""));
			}
			setCheckAllergyValidName(false);
			patientAllergy=new PatientAllergy();
			setAllergyNameForAddingNew(null);
			allergyMasterList=null;
			drugAllergyDetailList=null;
			drugAllergyCopyList=null;
		}
		public List<PatientAllergy> getAllergyListForNewPatient() {
			if(allergyListForNewPatient == null){
				allergyListForNewPatient = new ArrayList<PatientAllergy>();
			}
			return allergyListForNewPatient;
		}
		public void setAllergyListForNewPatient(
				List<PatientAllergy> allergyListForNewPatient) {
			this.allergyListForNewPatient = allergyListForNewPatient;
		}
		
		
		public void editDeleteRowForNewPatient()
		{
			logger.info("setidtodeletePatientAllergyForNewPatient method start:::");
			patientAllergy =new PatientAllergy();
			patientAllergy = (PatientAllergy) getAllergyDataTableForNewPatient().getRowData();
			FacesContext fc = FacesContext.getCurrentInstance();
			Map<String,String> params = fc.getExternalContext().getRequestParameterMap();
			rowIdnumber=Integer.parseInt(params.get("rowIdForAllergyNewPatient"));
			System.out.println("::::::::::::::::::::::::>>>aller"+patientAllergy.getAllergyName());
		}
		
	/*edit allergy Method for New pateint 
	   added by vinod*/
		public void editAllergyRowNewPateint()
		{
			logger.info("editAllergyRowNewPateint method start for new Patient:::::::::::::"+getAllergyDescriptionForEdit());
			//patientMedicineService.editAllergyDetails(patientAllergy,getAllergyDescriptionForEdit());
			//------To clean patientAllergy List
			setPatientAllergyList(null);
			patientAllergy=new PatientAllergy();
			setAllergyDescriptionForEdit(null);
			//patientAllergy.setAllergy(null);

			FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_INFO, "Allergy Edited Successfully",  "");  

			FacesContext.getCurrentInstance().addMessage(null, message);  
		}
		
		/*delete allergy Method for New pateint 
		   added by vinod*/
		public void deleteAllergyNewPatient()
		{
			logger.info("deleteAllergyNewPatient method start for new Patient:::::::::::::");
			allergySize=0;
			System.out.println(":::::::::::row id:asdel:"+rowIdnumber+":::"+allergyListForNewPatient.size());
			allergyListForNewPatient.remove(rowIdnumber);
			System.out.println("::::::::::::::::::::patientAllergyList"+allergyListForNewPatient.size());
			//patientMedicineService.deleteAllergyDetails(patientAllergy);
			patientAllergy=new PatientAllergy();
			FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_INFO, "Allergy Deleted Successfully",  "");  
			FacesContext.getCurrentInstance().addMessage(null, message);  

		}
		public DataTable getAllergyDataTableForNewPatient() {
			return allergyDataTableForNewPatient;
		}
		public void setAllergyDataTableForNewPatient(
				DataTable allergyDataTableForNewPatient) {
			this.allergyDataTableForNewPatient = allergyDataTableForNewPatient;
		}
		public DataTable getMasterDataBindingTable() {
			return masterDataBindingTable;
		}
		public void setMasterDataBindingTable(DataTable masterDataBindingTable) {
			this.masterDataBindingTable = masterDataBindingTable;
		}
        
		public Map<String, String> getOptionsValue() {
			if(optionsValue==null){
				optionsValue=parsePropertyEntryDropdown(DRUG_SCREENING_OPTIONS);
			}
			return optionsValue;
		}
		public void setOptionsValue(Map<String, String> optionsValue) {
			this.optionsValue = optionsValue;
		}
		public PsychopharmModelData getPsychopharmModelDataObj() {
			if(psychopharmModelDataObj==null){
				psychopharmModelDataObj=new PsychopharmModelData(); 
			}
			return psychopharmModelDataObj;
		}
		public void setPsychopharmModelDataObj(
				PsychopharmModelData psychopharmModelDataObj) {
			this.psychopharmModelDataObj = psychopharmModelDataObj;
		}
		public List<ModelMessage> getModelMessageList() {
			if(modelMessageList==null){
				modelMessageList=new ArrayList<ModelMessage>();
			}
			return modelMessageList;
		}
		public void setModelMessageList(List<ModelMessage> modelMessageList) {
			this.modelMessageList = modelMessageList;
		}
		
		public void resetAllergyList(){
			allergyMasterList = null;
			setAllergyNameForAddingNew(null);
			patientAllergy = new  PatientAllergy();
		}
		
	
		public boolean isCheckForInrQuestion() {
			return checkForInrQuestion;
		}
		public void setCheckForInrQuestion(boolean checkForInrQuestion) {
			this.checkForInrQuestion = checkForInrQuestion;
		}
		public QuestionForMaintenance getQuestionForMaintenance() {
			return questionForMaintenance;
		}
		public void setQuestionForMaintenance(QuestionForMaintenance questionForMaintenance) {
			this.questionForMaintenance = questionForMaintenance;
		}
	
		public List<String> getContraindicatedDiagnosisForPsychopharmClinic() {
			if(contraindicatedDiagnosisForPsychopharmClinic==null){ 
				contraindicatedDiagnosisForPsychopharmClinic=new ArrayList<String>();
				contraindicatedDiagnosisForPsychopharmClinic=patientMedicineService.getContraindicatedDiagnosis();				
			}
			return contraindicatedDiagnosisForPsychopharmClinic;
		}
		public void setContraindicatedDiagnosisForPsychopharmClinic(
				List<String> contraindicatedDiagnosisForPsychopharmClinic) {
			this.contraindicatedDiagnosisForPsychopharmClinic = contraindicatedDiagnosisForPsychopharmClinic;
		}
		public List<String> getContraindicatedMedsForPsychopharmClinic()  {
			if(contraindicatedMedsForPsychopharmClinic==null){
				contraindicatedMedsForPsychopharmClinic=new ArrayList<String>();
				contraindicatedMedsForPsychopharmClinic=patientMedicineService.getContraindicatedMeds();
			}
				
			return contraindicatedMedsForPsychopharmClinic;
		}
		
		public void setContraindicatedMedsForPsychopharmClinic(
				List<String> contraindicatedMedsForPsychopharmClinic) {
			this.contraindicatedMedsForPsychopharmClinic = contraindicatedMedsForPsychopharmClinic;
		}
		public List<String> getSelectedContraindicatedMeds() {
			if(selectedContraindicatedMeds==null){
				selectedContraindicatedMeds=new ArrayList<String>();
			}
			return selectedContraindicatedMeds;
		}
		public void setSelectedContraindicatedMeds(
				List<String> selectedContraindicatedMeds) {
			this.selectedContraindicatedMeds = selectedContraindicatedMeds;
		}
		public List<String> getSelectedContraindicatedDiagnosis() {
			if(selectedContraindicatedDiagnosis==null){
				selectedContraindicatedDiagnosis=new ArrayList<String>();
			}
			return selectedContraindicatedDiagnosis;
		}
		public void setSelectedContraindicatedDiagnosis(
				List<String> selectedContraindicatedDiagnosis) {
			this.selectedContraindicatedDiagnosis = selectedContraindicatedDiagnosis;
		}
		
	
	
		public String getGenderOfPatient() {
			if(genderOfPatient==null){
				genderOfPatient=new String();
				 FacesContext context = FacesContext.getCurrentInstance();
				DashBoardManageBean dashBoardManageBean=(DashBoardManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"dashBoardManageBean");
				genderOfPatient=dashBoardManageBean.getUserLoginDetail().getGender();
				logger.info("Patient gender "+StringUtils.isNotBlank(genderOfPatient));
			}
			return genderOfPatient.toLowerCase();
		}
		public void setGenderOfPatient(String genderOfPatient) {
			this.genderOfPatient = genderOfPatient;
		}

		/**
		 * @return the dosingStartDate
		 */
		public Date getDosingStartDate() {
		/*	if(dosingStartDate==null){
				dosingStartDate=new Date();
			}*/
			return dosingStartDate;
		}
		/**
		 * @param dosingStartDate the dosingStartDate to set
		 */
		public void setDosingStartDate(Date dosingStartDate) {
			this.dosingStartDate = dosingStartDate;
		}

		public List<PsychopharmLabParameter> getPsychopharmParamterList() {
			//As Of Now hardcoded,It should come from DRL file
			if(psychopharmParamterList==null){
				/*psychopharmParamterList=new ArrayList<PsychopharmLabParameter>();
				PsychopharmLabParameter psychopharmLabParameterObj=new PsychopharmLabParameter();
				psychopharmLabParameterObj.setLabParamter("Systolic BP");
				List<String>frequncyListObj=new ArrayList<String>();
				frequncyListObj.add("4");
				psychopharmLabParameterObj.setFrequency(frequncyListObj);*/
				
				PsychopharmLabParameter psychopharmLabParameter=new PsychopharmLabParameter();
				psychopharmLabParameter.setLabParamter("Systolic BP");
				List<String>frequncyList=new ArrayList<String>();
				frequncyList.add("Every 3 months");
				psychopharmLabParameter.setFrequency(frequncyList);
				psychopharmParamterList.add(psychopharmLabParameter);
				PsychopharmLabParameter psychopharmLabParameter2=new PsychopharmLabParameter();
				psychopharmLabParameter2.setLabParamter("Diastolic  BP");
				psychopharmLabParameter2.setFrequency(frequncyList);
				psychopharmParamterList.add(psychopharmLabParameter2);
				PsychopharmLabParameter psychopharmLabParameter3=new PsychopharmLabParameter();
				psychopharmLabParameter3.setLabParamter("Creatinine");
			
				psychopharmLabParameter3.setFrequency(frequncyList);
				psychopharmParamterList.add(psychopharmLabParameter3);
				
				PsychopharmLabParameter psychopharmLabParameter4=new PsychopharmLabParameter();
				psychopharmLabParameter4.setLabParamter("BMI");
				psychopharmLabParameter4.setFrequency(frequncyList);
				psychopharmParamterList.add(psychopharmLabParameter4);
				
				PsychopharmLabParameter psychopharmLabParameter5=new PsychopharmLabParameter();
				psychopharmLabParameter5.setLabParamter("FBS");
				psychopharmLabParameter5.setFrequency(frequncyList);
				psychopharmParamterList.add(psychopharmLabParameter5);
				
				PsychopharmLabParameter psychopharmLabParameter6=new PsychopharmLabParameter();
				psychopharmLabParameter6.setLabParamter("TG");
				psychopharmLabParameter6.setFrequency(frequncyList);
				psychopharmParamterList.add(psychopharmLabParameter6);
				
				PsychopharmLabParameter psychopharmLabParameter7=new PsychopharmLabParameter();
				psychopharmLabParameter7.setLabParamter("HDL");
				psychopharmLabParameter7.setFrequency(frequncyList);
				psychopharmParamterList.add(psychopharmLabParameter7);
				
			}
			return psychopharmParamterList;
		}
		
		public List<WeeklyDose> getWeekdoselist() {
			/*if(weekdoselist==null)*/
			weekdoselist=patientMedicineService.findWeeklyDoseOfParticularPatientforanticoagmedicine(new ContextUtil().getPatientId(),new ContextUtil().getProviderId());
			System.out.println("weekley dose list size in get weekdoses" +weekdoselist.size());
			return weekdoselist;
		}
		public void setWeekdoselist(List<WeeklyDose> weekdoselist) {
			this.weekdoselist = weekdoselist;
		}
		public void setPsychopharmParamterList(
				List<PsychopharmLabParameter> psychopharmParamterList) {
			this.psychopharmParamterList = psychopharmParamterList;
		}
	

		
		public List<GenericMedActionPlan> getSelectedLabParamters() {
			if(selectedLabParamters==null){
				selectedLabParamters=new ArrayList<GenericMedActionPlan>();
			}
			return selectedLabParamters;
		}
		public void setSelectedLabParamters(
				List<GenericMedActionPlan> selectedLabParamters) {
			this.selectedLabParamters = selectedLabParamters;
		}
		
		private List<ChildMedActionPlanParameter>selectedLabParamtersPsychopharm;
		
		
		
		public List<ChildMedActionPlanParameter> getSelectedLabParamtersPsychopharm() {
			if(selectedLabParamtersPsychopharm==null){
				selectedLabParamtersPsychopharm=new ArrayList<ChildMedActionPlanParameter>();
			}
			return selectedLabParamtersPsychopharm;
		}
		public void setSelectedLabParamtersPsychopharm(
				List<ChildMedActionPlanParameter> selectedLabParamtersPsychopharm) {
			this.selectedLabParamtersPsychopharm = selectedLabParamtersPsychopharm;
		}
		public String returnToPsychopharmDosingGuideline(){
			resetPsychopharmDosingGuidelineWizard();
			return "go_to_lithium_dosing_guideline";
		}
		
		private void resetPsychopharmDosingGuidelineWizard() {
			try{
			psychopharmModelDataObj=new PsychopharmModelData();
			psychopharmModelDataObj.setDosing_step_1_disabled(false);
			psychopharmModelDataObj.setDosing_step_2_disabled(true);
			psychopharmModelDataObj.setDosing_step_3_disabled(true);
			psychopharmModelDataObj.setDosing_step_4_disabled(true);
			psychopharmModelDataObj.setActiveIndexDefault("0");
			psychopharm_parameters=null;
			selectedContraindicatedDiagnosis=null;
			selectedContraindicatedMeds=null;
			getGenderOfPatient();
			Double CrClval;
			
			getPsychopharm_parameters();
			FacesContext context = FacesContext.getCurrentInstance();
			DashBoardManageBean dashBoardManageBean=(DashBoardManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"dashBoardManageBean");
			CrClval=dashBoardManageBean.getCalculateCrCl();
			//patientVital=dashBoardManageBean.getPatientVital();
			
			if(CrClval!=null){
			psychopharm_parameters=patientMedicineService.loadCalculatedCrClVal(CrClval,psychopharm_parameters);
			}
			}catch(NullPointerException nfe){
				nfe.printStackTrace();
			}catch(Exception e){
				e.printStackTrace();
			}
		}
		public List<Map.Entry<String, PsychopharmMessage>>getPsychopharm_parameters(){
			if(psychopharm_parameters==null){
				FacesContext context = FacesContext.getCurrentInstance();
				DashBoardManageBean dashBoardManageBean=(DashBoardManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"dashBoardManageBean");
				PatientVital patientVitalObj=new PatientVital();
				patientVitalObj=dashBoardManageBean.getPatientVital();
				psychopharm_parameters=patientMedicineService.getPsychopharm_step_1_data_UI(patientVitalObj);
			}
			return psychopharm_parameters;
		}
		
		public void psychopharm_validateStep1(ActionEvent event){
			logger.info("Inside Step 1 of Psychopharm "+psychopharm_parameters.size());
			modelMessageList=new ArrayList<ModelMessage>();
			modelMessageList=patientMedicineService.psychopharm_validateStep1(psychopharm_parameters,getGenderOfPatient());
			RequestContext context = RequestContext.getCurrentInstance();
			//pre select checkboxes for diagnosis if patient have any
			checkContraindicatedDiagnosis();
			List<String>contraindicatedMeds=patientMedicineService.checkContraindicatedMeds(getContraindicatedMedsForPsychopharmClinic(),getPatientMedicationDataList());
			/*for(String contraindicatedMedsName:contraindicatedMeds){*/
				selectedContraindicatedMeds=new ArrayList<String>();
				selectedContraindicatedMeds.addAll(contraindicatedMeds);
			/*}*/
			if(psychopharmModelDataObj.getPhq9Date()==null){
				logger.info("Inside Null check for PHQ-9 date ");
				psychopharmModelDataObj.setPhq9Date(new Date());
			}
			if(psychopharmModelDataObj.getAltmanManiaDate()==null){
				logger.info("Inside Null check for Altman date ");
				psychopharmModelDataObj.setAltmanManiaDate(new Date());
			}
			if(modelMessageList.size()>0){
			context.addCallbackParam("showDialogToUser", true);
			}
			else{
			context.addCallbackParam("showDialogToUser", false);
			psychopharm_next_button_active_wizard(psychopharmModelDataObj);
			}	
		}
		
		
		private void checkContraindicatedDiagnosis() {
			getContraindicatedDiagnosisForPsychopharmClinic();
			selectedContraindicatedDiagnosis=new ArrayList<String>();
			PatientManageBean patientManageBeanObj=(PatientManageBean)FacesContext.getCurrentInstance().getApplication().getELResolver().getValue(FacesContext	.getCurrentInstance().getELContext(), null,"patientManageBean");
			List<PatientDiagnosesDetails> currentPatientDiagnosisList=new ArrayList<PatientDiagnosesDetails>();
			currentPatientDiagnosisList=patientManageBeanObj.getPatientICDDiagnosisList();
			List<String>currentPatientDiagnosisListNames=new ArrayList<String>();
			for(PatientDiagnosesDetails patientDiagnosesDetails:currentPatientDiagnosisList){
				currentPatientDiagnosisListNames.add(patientDiagnosesDetails.getCodeDescription());
			}
			
			List<String>contraindicatedDiagnosisShortNames=new ArrayList<String>();
			for(String contraindicatedDiagonis:contraindicatedDiagnosisForPsychopharmClinic){
				String fullDiagnosisName=new String();
				//As of now it has been hardcoded but it will come from Lithium rules file
				if(contraindicatedDiagonis.equalsIgnoreCase("recent MI")){
					fullDiagnosisName="myocardial";
				}else if(contraindicatedDiagonis.equalsIgnoreCase("CAD")){
					fullDiagnosisName="coronary artery";
				}else if(contraindicatedDiagonis.equalsIgnoreCase("Renal insufficiency")){
					fullDiagnosisName="renal";
				}else if(contraindicatedDiagonis.equalsIgnoreCase("psoriasis")){
					fullDiagnosisName="psoriasis";
				}else if(contraindicatedDiagonis.equalsIgnoreCase("Diabetes insipidus")){
					fullDiagnosisName="diabetes insipidus";
				}
				/*contraindicatedDiagnosisShortNames.add(fullDiagnosisName);*/
				for(String currentDiagnosisName:currentPatientDiagnosisListNames){
					if((currentDiagnosisName.toLowerCase()).contains(fullDiagnosisName.toLowerCase())){
					selectedContraindicatedDiagnosis.add(contraindicatedDiagonis);
					break;
					}
				}
			/*	if(currentPatientDiagnosisListNames.contains(fullDiagnosisName)){
					selectedContraindicatedDiagnosis.add(contraindicatedDiagonis);
				}*/
				
			}
			
		}
		public void validatePsychopharmStep2() throws JSONException{
			logger.info("{-----}{------}{--------}Step 2 validation of psychopharm {-----}{------}{--------}");
			logger.info("Selected option for Drug "+psychopharmModelDataObj.isDrugScreenOption());
			logger.info("selected option for pregnancy "+psychopharmModelDataObj.isPregnancyOption());
			logger.info("Selected contraindicated meds "+selectedContraindicatedMeds.toString());
			logger.info("selected contraindicated diagnosis "+selectedContraindicatedDiagnosis.toString());
			logger.info("Phq-9 scale entered by user "+psychopharmModelDataObj.getPhq9Scale());
			logger.info("altman baseline scaled "+psychopharmModelDataObj.getAltmanManiaRatingScale());
			modelMessageList=new ArrayList<ModelMessage>();
			try{
				modelMessageList=patientMedicineService.psychopharm_validateStep2(psychopharm_parameters,psychopharmModelDataObj,selectedContraindicatedMeds,
						selectedContraindicatedDiagnosis);
				//Based on CrCl and if diabetes Inspidious is selected then get recomendations
				PsychopharmModelData psychopharmRecomendationObj=patientMedicineService.getPsychopharmRecomendations(selectedContraindicatedDiagnosis,psychopharm_parameters,getPatientAge());
				psychopharmModelDataObj.setRecommendedDose(psychopharmRecomendationObj.getRecommendedDose());
				psychopharmModelDataObj.setStrengths(psychopharmRecomendationObj.getStrengths());
				RequestContext context = RequestContext.getCurrentInstance();
		//		setPsychopharmDefaultMedPlanParameters(patientMedicineService.getDefaultParameters(LITHIUM_MED_NAME,getGenderOfPatient()));
			
				
				if(modelMessageList.size()>0){
				context.addCallbackParam("showDialogToUser", true);
				}
				else{
					context.addCallbackParam("showDialogToUser", false);
					psychopharm_next_button_active_wizard(psychopharmModelDataObj);
				}
				}catch(Exception e){
					e.printStackTrace();
				}

		}
		
		public void validatePsychopharmStep3(ActionEvent event){
			logger.info("Psychopharm validate Step3 ");
			RequestContext context = RequestContext.getCurrentInstance();
			//selectedLabParamters=new ArrayList<GenericMedActionPlan>();
			selectedLabParamtersPsychopharm=new ArrayList<ChildMedActionPlanParameter>();
	/*		setPsychopharmDefaultMedPlanParameters(patientMedicineService.getDefaultParameters(LITHIUM_MED_NAME,getGenderOfPatient()));*/
			/*parentMedActionPlan=new ParentMedActionPlan();
			parentMedActionPlan=patientMedicineService.convertGeneralMAPMasterDetailObj(patientMedicationData,getPsychopharmDefaultMedPlanParameters());*/
			//By default it will 1 Days for calculation
			parentMedActionPlan=new ParentMedActionPlan();
			parentMedActionPlan.setChildLabParameters(patientMedicineService.getPsychopharmDefaultLabParameters(PSYCHOPHARM_MAP_VIEW,getGenderOfPatient()));
			calculateNextDosingLab(1,"Days");
			context.addCallbackParam("showDialogToUser", false);
			psychopharm_next_button_active_wizard(psychopharmModelDataObj);
		}
		
		private void calculateNextDosingLab(int numberOfDays, String frequencyUnit) {
			for(ChildMedActionPlanParameter genericMedActionPlanObj:parentMedActionPlan.getChildLabParameters()){
				int noOFdays=findNoOfdays(numberOfDays+" "+frequencyUnit);
				genericMedActionPlanObj.setNextLabDate(new DateUtil().AddDate(new DateUtil().getTodayDate(), noOFdays));
			}
			
		}
		public void validatePsychopharmStep4(ActionEvent event){
			logger.info("Psychopharm validate Step4 ");
			//First save the medicine
			logger.info("selected lab paramters "+selectedLabParamtersPsychopharm.size());
			int patientId=new ContextUtil().getPatientId();
			//save the MAP
			RequestContext context = RequestContext.getCurrentInstance();
			patientDiagnosesDetailsObj=null;
			//setGenericMedActionPlanList(selectedLabParamters);
			parentMedActionPlan.setChildLabParameters(selectedLabParamtersPsychopharm);
			convertToOldGenericMedActionList(parentMedActionPlan);
			if(!validationCheckMedPlan(genericMedActionPlanList,patientDiagnosesDetailsObj)){
					List<ChildMedActionPlanParameter>temporaryGeneralMedPlanList=new ArrayList<ChildMedActionPlanParameter>();
					//Get Procedure Type obj for PHQ-9 && Altman
					List<ProcedureType>procedureTypes=new ArrayList<ProcedureType>();
					if(StringUtils.isNotBlank(psychopharmModelDataObj.getPhq9Scale())||StringUtils.isNotBlank(psychopharmModelDataObj.getAltmanManiaRatingScale()) ){
						List<String>labParameters=patientMedicineService.getLabParams(psychopharmModelDataObj);
						procedureTypes=labService.getPsychopharmProcedureTypes(labParameters);
					}
				
					//for saving lab
					for(ProcedureType pType:procedureTypes){
						if(StringUtils.isNotBlank(psychopharmModelDataObj.getPhq9Scale())){
							labService.saveLabDetailValue(psychopharmModelDataObj.getPhq9Date(),psychopharmModelDataObj.getPhq9Scale(),pType.getId(),pType.getLabType(),pType.getLoincCode());
						}else if(StringUtils.isNotBlank(psychopharmModelDataObj.getAltmanManiaRatingScale())){
							labService.saveLabDetailValue(psychopharmModelDataObj.getAltmanManiaDate(),psychopharmModelDataObj.getAltmanManiaRatingScale(),pType.getId(),pType.getLabType(),pType.getLoincCode());
						}
					}
					
					addMedicine_Psychopharm();
					//for saving PHQ-9
					//labService.saveLabDetailValue(d1,getResultForLabSearch(),procedureType.getId(),procedureType.getLabType(),procedureType.getLoincCode());
					//for saving Altman
					//labService.saveLabDetailValue(d1,getResultForLabSearch(),procedureType.getId(),procedureType.getLabType(),procedureType.getLoincCode());
					
					logger.info("prescriber name after saving to Database "+patientMedicationData.getPrescriberName());
					parentMedActionPlan=patientMedicineService.prepareMedDetailObj(patientMedicationData);
					parentMedActionPlan.setDosingStartDate(getDosingStartDate());
					parentMedActionPlan.setPatientId(new ContextUtil().getPatientId());
					parentMedActionPlan.setChildLabParameters(selectedLabParamtersPsychopharm);
				/*	for(int i=0;i<genericMedActionPlanList.size();i++){
						genericMedActionPlanList.get(i).setDosingStartDate(getDosingStartDate());
						genericMedActionPlanList.get(i).setDrugId(String.valueOf((int)patientMedicationData.getDrugId()));
						genericMedActionPlanList.get(i).setDrugName(patientMedicationData.getDrugs());
						genericMedActionPlanList.get(i).setStrength(patientMedicationData.getStrengths());
						genericMedActionPlanList.get(i).setRegimen(patientMedicationData.getDirections());
						genericMedActionPlanList.get(i).setUnit(patientMedicationData.getUnit());
						genericMedActionPlanList.get(i).setDosageForm(patientMedicationData.getDosageForm());
						//genericMedActionPlanList.get(i).setPatientDiagnosesDetails(patientDiagnosesDetailsObj);
						genericMedActionPlanList.get(i).setPrescriptionDate(patientMedicationData.getStartDate());
						genericMedActionPlanList.get(i).setPrescribedBy(patientMedicationData.getPrescriberName());
						genericMedActionPlanList.get(i).setDrugNameId(patientMedicationData.getDrugNameId());
					}*/
					boolean success=patientMedicineService.saveNewGeneralMedActionPlan(patientId,parentMedActionPlan,temporaryGeneralMedPlanList,getDosingStartDate());
				//	boolean success=patientMedicineService.saveGenericMedActionPlan(patientId,genericMedActionPlanList,temporaryGenericMedPlanList, dosingStartDate);
					loadRefreshData();
					refreshGenericMedPlan();
					logger.info("suceess med plan "+success);
					/*context.closeDialog(PSYCHOPHARM_DOSING_GUIDELINE_WIZARD);*/
			}
			
			
			/*context.addCallbackParam("showDialogToUser", false);*/
			logger.info("view name "+getViewName());
			context.addCallbackParam("pageName", getViewName());
			/*psychopharm_next_button_active_wizard(psychopharmModelDataObj);*/
		}
		
		private void refreshGenericMedPlan() {
		//	genericMedActionPlanList=null;
			parentMedActionPlan=null;
			selectedLabParamtersPsychopharm=null;
			selectedMonitoringParameters=null;
			alertMedActionPlans=null;	
			PatientManageBean patientManageBeanObj=(PatientManageBean)FacesContext.getCurrentInstance().getApplication().getELResolver().getValue(FacesContext	.getCurrentInstance().getELContext(), null,"patientManageBean");
			patientManageBeanObj.setPatientICDDiagnosisList(null);
			
			getPatientMedicationDataList();
			getAllClinicMedPlans();
			  logger.info("all clinics med plans size for update indicator " + allClinicMedPlans.size());
			  for (PatientMedicationData patientMedicationData : patientMedicationDataList) {
			   for (MedandGenricmed medPlans : allClinicMedPlans) {
			    if (medPlans.getDrugId()
			      .equals(String.valueOf((int) patientMedicationData
			        .getDrugId()))) {
			     patientMedicationData.setMedPlanExists(true);
			     break;
			    }

			   }
			   
			  }
			
		}
		private void loadRefreshData() {
			FacesContext context = FacesContext	.getCurrentInstance();
			PatientManageBean patientManageBean=(PatientManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"patientManageBean");
			patientManageBean.setCareTeamListForPatient(null);
			patientMedicationDataList=null;
			getPatientMedicationDataList();
			//added By nagaraj
			makeFilterPageRefreshData();
			setCheckdateForMedactionplan(false);
			
			//copyOriginalPatientMedicationList=null;
			patientMedicationData=new PatientMedicationData();
			currentPsychopharmMeds=null;
			psychoPharmClinicMedActionPlanList=null;
			hepCAlertMedActionPlanList=null;
			psychoPharmAlertMedActionPlanList=new ArrayList<AlertGenericMedActionLab>();
			
		}

		private List<Map.Entry<String,PsychopharmMessage>>psychopharm_parameters;
		private List<Map.Entry<String,PsychopharmMessage>>altmanManiaQuestions;
		private List<Map.Entry<String,PsychopharmMessage>>phq9Questions;
		private List<Map.Entry<String,PsychopharmMessage>>psychopharmQuestions;

		public void setPsychopharm_parameters(
				List<Map.Entry<String, PsychopharmMessage>> psychopharm_parameters) {
			this.psychopharm_parameters = psychopharm_parameters;
		}

	public void psychopharm_previous_button_wizard(ActionEvent event){
		logger.info("Previous button clicked from Psychopharm Dosing Guideline wizard "+psychopharmModelDataObj.getActiveIndexDefault());
		PsychopharmModelData psychopharmModelData=psychopharmModelDataObj;
		psychopharm_previous_button_active_wizard(psychopharmModelData);
	}
	
	public void psychopharm_previous_button_active_wizard(PsychopharmModelData psychopharmModelData){
		//If previous button clicked from Step 2 then Goto Step 1 by making active index to 0 and disable step 2 wizard and it follows
		//the same for rest.
		if(psychopharmModelData.getActiveIndexDefault().equals("1")){
			psychopharmModelDataObj.setActiveIndexDefault("0");
			psychopharmModelDataObj.setDosing_step_1_disabled(false);
			psychopharmModelDataObj.setDosing_step_2_disabled(true);			
		}else if(psychopharmModelData.getActiveIndexDefault().equals("2")){
			psychopharmModelDataObj.setActiveIndexDefault("1");			
			psychopharmModelDataObj.setDosing_step_2_disabled(false);
			psychopharmModelDataObj.setDosing_step_3_disabled(true);
		}else if(psychopharmModelData.getActiveIndexDefault().equals("3")){
			psychopharmModelDataObj.setActiveIndexDefault("2");			
			psychopharmModelDataObj.setDosing_step_3_disabled(false);
			psychopharmModelDataObj.setDosing_step_4_disabled(true);
		}
	}
	
	public void psychopharm_next_button_active_wizard(
			PsychopharmModelData psychopharmModelDataObj2) {
		if(psychopharmModelDataObj2.getActiveIndexDefault().equals("0")){
			psychopharmModelDataObj.setActiveIndexDefault("1");
			psychopharmModelDataObj.setDosing_step_1_disabled(true);
			psychopharmModelDataObj.setDosing_step_2_disabled(false);
		}else if(psychopharmModelDataObj2.getActiveIndexDefault().equals("1")){
			psychopharmModelDataObj.setActiveIndexDefault("2");
			psychopharmModelDataObj.setDosing_step_2_disabled(true);
			psychopharmModelDataObj.setDosing_step_3_disabled(false);
		}else if(psychopharmModelDataObj2.getActiveIndexDefault().equals("2")){
			psychopharmModelDataObj.setActiveIndexDefault("3");
			psychopharmModelDataObj.setDosing_step_3_disabled(true);
			psychopharmModelDataObj.setDosing_step_4_disabled(false);
		}
	}
	
	public void psychopharm_proceed_button(ActionEvent event){
		logger.info("Active index of current tab "+psychopharmModelDataObj.getActiveIndexDefault());
		psychopharm_next_button_active_wizard(psychopharmModelDataObj);
	}
	
	public void closePsychopharmView(ActionEvent event){
		logger.info("Psychopharm cancel button clicked");
		RequestContext.getCurrentInstance().closeDialog(PSYCHOPHARM_LITHIUM_QUICK_PRESCRIBE_VIEW);
	}
	

	
	public void subGenotypeEnable(){
		
		if(!(hepatitisC.getGenoType().equals("g1") || hepatitisC.getGenoType().equals("selection"))){
			hepatitisC.setGenoTypeEnable(true);
			hepatitisC.setPolymorphismEnable(true);
			hepatitisC.setSubGenotype("selection");
			hepatitisC.setPolymorphism("selection");
		}else{
			hepatitisC.setGenoTypeEnable(false);
			
		}
		if(!hepatitisC.getGenoType().equals("g2")){
			hepatitisC.setIfnRequired(true);
		}else{
			hepatitisC.setIfnRequired(false);
		}
		
	}
	
	public void polymorphismEnable(){
		System.out.println("Inside polymorphismEnable:::::::"+hepatitisC.getGenoType());
		if(!(hepatitisC.getSubGenotype().equals("1a")|| hepatitisC.getSubGenotype().equals("selection"))){
			hepatitisC.setPolymorphismEnable(true);
			hepatitisC.setPolymorphism("selection");
		}else{
			hepatitisC.setPolymorphismEnable(false);
			
		}
	}
	
	public void hcvTreatementEnable(){
		System.out.println("Inside hcvTreatementEnable:::::::");
		if(!hepatitisC.getHcvTreatment().equals("Y")){
			hepatitisC.setHcvTreatementEnable(true);
			hepatitisC.setProteaseInhibitor("selection");
		}else{
			hepatitisC.setHcvTreatementEnable(false);
			
		}
		
	}
	public void gotoStep3() throws JSONException  {
		
		
		List<String>responseList=new ArrayList<String>();
		List<Message>messageList=new ArrayList<Message>();
		List<String>monitorResponseList=new ArrayList<String>();
		
		if(hepatitisC.getSubGenotype()==null||hepatitisC.getSubGenotype()==""||hepatitisC.getSubGenotype().equals("selection")){
			hepatitisC.setSubGenotype("NotApplicable");
		}
		
		if(hepatitisC.getPolymorphism()==null||hepatitisC.getPolymorphism()==""||hepatitisC.getPolymorphism().equals("selection")){
			hepatitisC.setPolymorphism("NotApplicable");
		}
		if(hepatitisC.getProteaseInhibitor()==null||hepatitisC.getProteaseInhibitor().equals("selection") ||hepatitisC.getProteaseInhibitor()==""){
			hepatitisC.setProteaseInhibitor("NotApplicable");	
		}
		if(hepatitisC.getIfnEligibility()==null||hepatitisC.getIfnEligibility()==""){
			hepatitisC.setIfnEligibility("Any");	
		}
		
		HepatitisCRulesData hepatitisCRules=new HepatitisCRulesData();
		hepatitisCRules.setMedicine(HEPATITIS_MED_NAME);
		hepatitisCRules.setRequest(Request.MASTER_DATA);
		hepatitisCRules.setEncephalopathy(hepatitisC.getEncephalopathy());
		hepatitisCRules.setGenoType(hepatitisC.getGenoType());
		hepatitisCRules.setSubGenotype(hepatitisC.getSubGenotype());
		hepatitisCRules.setPolymorphism(hepatitisC.getPolymorphism());
		hepatitisCRules.setIfnEligibility(hepatitisC.getIfnEligibility());
		hepatitisCRules.setHcvTreatment(hepatitisC.getHcvTreatment());
		hepatitisCRules.setProteaseInhibitor(hepatitisC.getProteaseInhibitor());
		
		System.out.println("parameter in Hepatitis C:::" +hepatitisC.getGenoType() + " getSubGenotype:::" +hepatitisC.getSubGenotype()+" getPolymorphism:::" + 
		 hepatitisC.getPolymorphism() +" getIfnEligibility:::" + hepatitisC.getIfnEligibility() +" getHcvTreatment:::" + hepatitisC.getHcvTreatment()
		+" getProteaseInhibitor:::"  +hepatitisC.getProteaseInhibitor() );
		
		
		RulesUtil.process(hepatitisCRules);
		messageList.add(hepatitisCRules);
		RulesUtil.fireRuleToDroolEngine();
		
		for(Message mes:messageList){
			String response = mes.getResponse();
			responseList.add(response);
		}
		
		for(String response:responseList){
			
			if(!response.isEmpty()){
				HepatitisC message=new Gson().fromJson(response, HepatitisC.class);
				logger.info("Recommendation message "+message.toString());
				
				hepatitisC.setRecommendation(message.getRecommendation());
				hepatitisC.setDurationTreatment(message.getDurationTreatment());
				hepatitisC.setAltRecommendation(message.getAltRecommendation());
				hepatitisC.setAltRecDuration(message.getAltRecDuration());
				hepatitisC.setRecommendationLevel(message.getRecommendationLevel());
				hepatitisC.setSource(message.getSource());
				//recommendMessageList.add(message);
				}
			
		}
		
		
	}
	
	public HepatitisCRulesData prepareRequestToDrools(){
		HepatitisCRulesData monitorParameter=new HepatitisCRulesData();
		monitorParameter.setMedicine(HEPATITIS_MED_NAME);
		return monitorParameter;
	}
	
	public  List<GenericMedActionPlan> getUiData(){
		
		System.out.println("Inside GetUI Method::::::::: ");
		
		
		List<GenericMedActionPlan>defaultResponseList=new ArrayList<GenericMedActionPlan>();
		HepatitisCRulesData monitorParameter=prepareRequestToDrools();
		monitorParameter.setRequest(Request.ACTION_PLAN);
		RulesUtil.process(monitorParameter);
		RulesUtil.fireRuleToDroolEngine();
		List<MedPlan>respnseList=monitorParameter.getMedPlanDefaultSettings();
		for(MedPlan medPlan:respnseList){
			GenericMedActionPlan genericMedActionPlan=new GenericMedActionPlan();
			genericMedActionPlan.setMonitoringParameter(medPlan.getMonitoringParameter());
			 defaultResponseList.add(genericMedActionPlan);
		}
		
		return defaultResponseList ;
		
	}
	
	public List<String> getPhase() {
		if(phase ==null ){
			phase=new ArrayList<String>();
			phase=patientMedicineService.getPhase();
		}
		return phase;
	}
	public void setPhase(List<String> phase) {
		this.phase = phase;
	}
	public List<GenericMedActionPlan> getPsychopharmDefaultMedPlanParameters() {
			logger.info("inside psychopharm lab parameters ");
			//if(StringUtils.isNotBlank(patientMedicationData.getDrugs())  && (StringUtils.lowerCase(patientMedicationData.getDrugs()).contains("lithium"))){
			//	psychopharmDefaultMedPlanParameters=patientMedicineService.getDefaultParameters(LITHIUM_MED_NAME);
			if(psychopharmDefaultMedPlanParameters==null){
				psychopharmDefaultMedPlanParameters=new ArrayList<GenericMedActionPlan>();
		}
		return psychopharmDefaultMedPlanParameters;
	}
	public void setPsychopharmDefaultMedPlanParameters(
			List<GenericMedActionPlan> psychopharmDefaultMedPlanParameters) {
		this.psychopharmDefaultMedPlanParameters = psychopharmDefaultMedPlanParameters;
	}

	public List<DrugInteractionForWarfarin> getDrugInteractionForWarfarinList() {
		return drugInteractionForWarfarinList;
	}
	public void setDrugInteractionForWarfarinList(
			List<DrugInteractionForWarfarin> drugInteractionForWarfarinList) {
		drugInteractionForWarfarinList = drugInteractionForWarfarinList;
	}
private int checkNotesForWarfarinDrugInteraction;

public List<GenericMedActionPlan> getHepatitisCDefaultMedParameters() {
	hepatitisCUserDetails();
	if(hepatitisCDefaultMedParameters==null){	
	
		hepatitisCDefaultMedParameters = new ArrayList<GenericMedActionPlan>();
		
	List<GenericMedActionPlan>defaultResponseListSvr=new ArrayList<GenericMedActionPlan>();
	HepatitisCRulesData monitorParameter=prepareRequestToDrools();
	monitorParameter.setRequest(Request.ACTION_PLAN);
	monitorParameter.setMonitorParameter("SVR");
	RulesUtil.process(monitorParameter);
	RulesUtil.fireRuleToDroolEngine();
	List<MedPlan>respnseList=monitorParameter.getMedPlanDefaultSettings();
	for(MedPlan medPlan:respnseList){
		GenericMedActionPlan genericMedActionPlan=new GenericMedActionPlan();
		genericMedActionPlan.setMonitoringParameter(medPlan.getMonitoringParameter());
		genericMedActionPlan.setParameterShortName(medPlan.getParameterShortName());
		defaultResponseListSvr.add(genericMedActionPlan);
	}
	hepatitisCSvrParameters = defaultResponseListSvr ;
	hepatitisCDefaultMedParameters.addAll(defaultResponseListSvr);
	List<GenericMedActionPlan>defaultResponseListHgb=new ArrayList<GenericMedActionPlan>();
	HepatitisCRulesData monitorParameter1=prepareRequestToDrools();
	monitorParameter1.setRequest(Request.ACTION_PLAN);
	monitorParameter1.setMonitorParameter("Hgb");
	RulesUtil.process(monitorParameter1);
	RulesUtil.fireRuleToDroolEngine();
	List<MedPlan>respnseList1=monitorParameter1.getMedPlanDefaultSettings();
	for(MedPlan medPlan:respnseList1){
		GenericMedActionPlan genericMedActionPlan=new GenericMedActionPlan();
		genericMedActionPlan.setMonitoringParameter(medPlan.getMonitoringParameter());
		genericMedActionPlan.setParameterShortName(medPlan.getParameterShortName());
		defaultResponseListHgb.add(genericMedActionPlan);
	}
	
	hepatitisCHgbParameters = defaultResponseListHgb ;
	hepatitisCDefaultMedParameters.addAll(defaultResponseListHgb);
	
	//hepatitisCDefaultMedParameters = defaultResponseList ;
	}
	return hepatitisCDefaultMedParameters;
}
	public void setHepatitisCDefaultMedParameters(
			List<GenericMedActionPlan> hepatitisCDefaultMedParameters) {
		this.hepatitisCDefaultMedParameters = hepatitisCDefaultMedParameters;
	}
	
	



public int getCheckNotesForWarfarinDrugInteraction() {
	if(checkNotesForWarfarinDrugInteraction==0)
	{
		logger.info("getCheckNotesForWarfarinDrugInteraction:::");
		boolean check = false;
		for(PatientMedicationData pat:getPatientMedicationDataList())
		{
			if(pat.getGenericName().equalsIgnoreCase(WARFARIN))
			{
				check=true;
				break;
			}
		}
		System.out.println("check::::::::::"+check);
		if(check)
			drugInteractionForWarfarinList=patientMedicineService.findDrugInteractionForWarfarinList(patientMedicationDataList);// Find the Drug name which has interaction with warfrain 
		checkNotesForWarfarinDrugInteraction=1;
	}
	logger.info("size::::::::::::"+drugInteractionForWarfarinList.size());
	return checkNotesForWarfarinDrugInteraction;
	}

	public void addMedicine_Psychopharm()
	{
		logger.info("addGeneralMedicine method started");
		//findDrugIDAccordingToDrugNameAndDose(patientMedicationData, doseDetailList);
		patientMedicationData.setPrescriptionStatus(PRESCRIPITION_STATUS_PENDING);
		patientMedicationData.setPatientId(new ContextUtil().getPatientId());
		patientMedicationData.setProviderId(new ContextUtil().getProviderId());
		patientMedicationData.setCompliancePercentage(0);
		patientMedicationData.setDoctorId(new ContextUtil().getLoginId());
		patientMedicationData.setChangeMedId(1);
		patientMedicationData.setFlagForMedActionPlan(false);
		System.out.println("checkdateForMedactionplan"+checkdateForMedactionplan);
		/*if(patientMedicationData.getStrengths().contains("/"))
		{*/
			patientMedicationData.setUnit(patientMedicationData.getUnit());
			System.out.println("strength contain /"+patientMedicationData.getUnit());
		/*}*/
		
		if(!checkdateForMedactionplan){
				patientMedicationData.setPrescriberName(new ContextUtil().getLoggerFirstName()+" "+new ContextUtil().getLoggedUserMiddleName()+" "+new ContextUtil().getLoggerLastName());
		}
		//patientMedicationData.setMedicineStatus(NEW_ADDED_MEDS);
		patientMedicationData.setCauseOfAddMeds(NEW_ADDED_MEDS);
	
		patientMedicationData.setModifyDate(patientMedicationData.getStartDate());
		patientMedicationData.setSelectedImageForPatient(true);
		patientMedicationData.setFlagForVisit(true);
		//-------for saving date with time zone
		logger.info("patientMedicationData.getStartDate:"+patientMedicationData.getStartDate()+"=="+new Date());
		logger.info("setDateWithTimeZoneForCompare="+new DateUtil().convertDateFormatUsingFormat(patientMedicationData.getStartDate(), "yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
		patientMedicationData.setDateWithTimeZoneForCompare(new DateUtil().convertDateFormatUsingFormat(new DateUtil().getTodayDate(), "yyyy-MM-dd'T'HH:mm:ss.SSSZ"));  
		logger.info("1:::drug id::"+patientMedicationData.getDrugId()+"::::::::::::"+patientMedicationData.getDrugNameId());
		findDrugIDAccordingToDrugNameAndDose(patientMedicationData, doseDetailList);

		logger.info("2:1::drug id::"+patientMedicationData.getDrugId()+"::::::::::::"+patientMedicationData.getDrugNameId()+"::::therapic category:::"+patientMedicationData.getTherapeuticCategory());
		patientMedicineService.saveMedicineDetail(patientMedicationData);
		
		
		
	

	}
	
	public void returnToView(){
		loadRefreshData();
		logger.info("view name "+viewName);
		//viewName=returnParticularView();
		RequestContext context=RequestContext.getCurrentInstance();
		logger.info("view name "+viewName);
		context.addCallbackParam("pageName", getViewName());
		/*RequestContext.getCurrentInstance().closeDialog(PSYCHOPHARM_LITHIUM_QUICK_PRESCRIBE_VIEW);*/
		
	}
	

	/*add allergy method for edit pateint profile
	 * by vinod */
	
	
	public void findAllergyNameForEditPatient()
	{
		logger.info("findAllergyNameForEditPatient ::::::::::::::::::::::");
		allergyMaster=new AllergyMaster();
		allergyMaster=(AllergyMaster)getSelectAllergyBindingForEditpatient().getRowData();
		setAllergyNameForAddingNew(allergyMaster.getAllergyName());
		System.out.println(patientAllergy.getAllergyName()+"::::selected allergy name::"+getAllergyNameForAddingNew()+"::allergy from master:::"+allergyMaster.getAllergyName());
		setCheckAllergyValidName(true);
		//RequestContext.getCurrentInstance().execute("addAllergyDialog.hide()");
		RequestContext.getCurrentInstance().execute("addAllergyDialogForEditProfile.show()");
		//setAllergyNameForAddingNew(null);
	}
	
	/*add allergy Method for New pateint 
	   added by vinod*/
	public void addAllergyForEditPatient()
	{
		logger.info("addAllergyForNewPatient for new Patient::::::::::::::::::::::");
		logger.info(getAllergyNameForAddingNew()+":::savePatientAllergy:::::::: for new Patient"+patientAllergy.getAllergyName()+"dsf"+patientAllergy.getAllergyName()+"fasdfsdf"+patientAllergy.getPatientId());

		boolean check=false;
		for(PatientAllergy patAllergy:getAllergyDetailsForEditPatientList())
		{
			if(patAllergy.getAllergyName().equals(getAllergyNameForAddingNew()))
				check=true;

			System.out.println("check:::"+check);
		}

		if(!(allergyNameForAddingNew.isEmpty())){	
			logger.info("allergyNameForAddingNew:::::::::::for new Patient"+allergyNameForAddingNew);

			if (checkAllergyValidName) {
				System.out.println("checkAllergyValidName::for new Patient"+checkAllergyValidName);

				if(!check)
				{
					System.out.println("check inside if block of::"+check);
					patientAllergy.setPatientId(new ContextUtil().getPatientId());
					patientAllergy.setAllergyName(getAllergyNameForAddingNew());
					patientAllergy.setAllergySource(allergyMaster.getAllergySourceId());
					patientAllergy.setCompositeAllergyId(Integer.parseInt(allergyMaster.getCompositeAllergyId()));
					patientAllergy.setAlergyConceptId(Integer.parseInt(allergyMaster.getAllergyConceptId()));
					patientAllergy.setAllergyConceptType(allergyMaster.getConceptType());
					patientAllergy.setStartDate(new DateUtil().getTodayDate());
					patientAllergy.setModifyDate(new DateUtil().getTodayDate());
					patientAllergy.setDateTimeForcompareAllergy(new DateUtil().convertDateFormatUsingFormat(new DateUtil().getTodayDate(),"yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
					logger.info("setDateTimeForcompareAllergy :::"+patientAllergy.getDateTimeForcompareAllergy());
					System.out.println("::::::::::::::::><><><>> notes::"+patientAllergy.getAllergyNotes());

					if(!(patientAllergy.getAllergyName().equals("")))
					{
						getAllergyDetailsForEditPatientList();
						allergyDetailsForEditPatientList.add(patientAllergy);
					}
					FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO,"Allergy Added Successfully", ""));
					 FacesContext.getCurrentInstance().getExternalContext().getFlash().setKeepMessages(true);
				}
				else
				{
					FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO,"Data Already There", "")); 
					FacesContext.getCurrentInstance().getExternalContext().getFlash().setKeepMessages(true);
				}
			}
			else {
				System.out.println("inside else checkAllergyValidName:"+checkAllergyValidName);
				FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO,"Use Valid Allergy Name", ""));
				 FacesContext.getCurrentInstance().getExternalContext().getFlash().setKeepMessages(true);
			}
		}
		else{
			RequestContext context = RequestContext.getCurrentInstance();  
			context.addCallbackParam("validationFailed", false);  
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Please Enter Allergy Name", ""));
		}
		setCheckAllergyValidName(false);
		patientAllergy=new PatientAllergy();
		setAllergyNameForAddingNew(null);
		allergyMasterList=null;
		drugAllergyDetailList=null;
		drugAllergyCopyList=null;
	}
	public List<PatientAllergy> getAllergyDetailsForEditPatientList() {
		if(allergyDetailsForEditPatientList == null){
			allergyDetailsForEditPatientList = new ArrayList<PatientAllergy>();
		}
		return allergyDetailsForEditPatientList;
	}
	public void setAllergyDetailsForEditPatientList(
			List<PatientAllergy> allergyDetailsForEditPatientList) {
		this.allergyDetailsForEditPatientList = allergyDetailsForEditPatientList;
	}
	public DataTable getSelectAllergyBindingForEditpatient() {
		return selectAllergyBindingForEditpatient;
	}
	public void setSelectAllergyBindingForEditpatient(
			DataTable selectAllergyBindingForEditpatient) {
		this.selectAllergyBindingForEditpatient = selectAllergyBindingForEditpatient;
	}
	public String getLabname() {
		return labname;
	}
	public void setLabname(String labname) {
		this.labname = labname;
	}
	public List<MedActionPlan> getMedicalActionPlanListforanticaog() {
		/*if(medicalActionPlanListforanticaog==null)*/
		medicalActionPlanListforanticaog=patientMedicineService.findMedActionPlanForPatientforantiocag(new ContextUtil().getPatientId(),new ContextUtil().getProviderId());
		return medicalActionPlanListforanticaog;
	}
	public void setMedicalActionPlanListforanticaog(
			List<MedActionPlan> medicalActionPlanListforanticaog) {
		this.medicalActionPlanListforanticaog = medicalActionPlanListforanticaog;
	}

/*
 * ***********method for calculating compliance for DEMO DB	
 * ********@author: saurabh
 */
			
  public void complianceCalculationForDemo(){
	logger.info("==============method complianceCalculationForDemo called in patientMedicineManageBean===========");
	getSigCodeList();	
	patientMedicineService.complianceCalculationForDemo(sigCodeList);
  	}

public void setCheckNotesForWarfarinDrugInteraction(
		int checkNotesForWarfarinDrugInteraction) {
	this.checkNotesForWarfarinDrugInteraction = checkNotesForWarfarinDrugInteraction;
}




  
  public List<ParentMedActionPlan> getPsychoPharmClinicMedActionPlanList() {
	  if(psychoPharmClinicMedActionPlanList==null){
			int patientId=new ContextUtil().getPatientId();
			psychoPharmClinicMedActionPlanList=new ArrayList<ParentMedActionPlan>();
			try{
				psychoPharmClinicMedActionPlanList=patientMedicineService.getPsychopharmClinicMedPlans(patientId,PSYCHOPHARM_CLINIC_NAME);
			logger.info("Psychopharm clinic Med plans size "+psychoPharmClinicMedActionPlanList.size());
			}catch(Exception e){
				e.printStackTrace();
			}
	  }
	return psychoPharmClinicMedActionPlanList;
}
public void setPsychoPharmClinicMedActionPlanList(
		List<ParentMedActionPlan> psychoPharmClinicMedActionPlanList) {
	this.psychoPharmClinicMedActionPlanList = psychoPharmClinicMedActionPlanList;
}
public void freqCalculate(){
	 
	  if(genericMedActionPlan.getFrequencyNo()==""||genericMedActionPlan.getFrequencyNo()==null){
		  genericMedActionPlan.setFrequencyNo("1");
	  }
	  if(genericMedActionPlan.getFrequencyUnit()==""||genericMedActionPlan.getFrequencyUnit()==null){
		  genericMedActionPlan.setFrequencyUnit("DAYS");
		  
	  }
		int noOFdays=findNoOfdays(genericMedActionPlan.getFrequencyNo()+" "+genericMedActionPlan.getFrequencyUnit());
		medActionPlan.setNextLabDate(new DateUtil().AddDate(new DateUtil().getTodayDate(), noOFdays));
		logger.info(noOFdays+"next lab date::::"+medActionPlan.getNextLabDate());
		
		
	}
  /**
   * @return the psychoPharmAlertMedActionPlanList
  */
  public List<AlertGenericMedActionLab> getPsychoPharmAlertMedActionPlanList() {
	  List<AlertGenericMedActionLab>alertMedPlans=getAlertMedActionPlans();
	  if(psychoPharmAlertMedActionPlanList==null){
		 
		  psychoPharmAlertMedActionPlanList=new ArrayList<AlertGenericMedActionLab>();
		  for(AlertGenericMedActionLab psychoPharmMedActionPlanAlert:alertMedPlans){
			  for(String medName :getPsychoPharmClinicMedicineList()){
				  Pattern pattern=Pattern.compile(medName, Pattern.CASE_INSENSITIVE);
					Matcher matcher=pattern.matcher(psychoPharmMedActionPlanAlert.getDrugName());
				  if(matcher.matches()){
					 if(!(psychoPharmAlertMedActionPlanList.contains(psychoPharmMedActionPlanAlert))){
						
						 for(AlertGenericMedActionLab altLab: psychoPharmAlertMedActionPlanList)
							{
							 BigDecimal bd = new BigDecimal(altLab.getLowValue());
								DecimalFormat df = new DecimalFormat("0.##");
								
								BigDecimal bd1 = new BigDecimal(altLab.getHighValue());
								DecimalFormat df1 = new DecimalFormat("0.##");
								
								BigDecimal bd2 = new BigDecimal(altLab.getLabResultValue());
								DecimalFormat df2 = new DecimalFormat("0.##");
								//altLab.setLowValue(df.format(bd));
								
								String lowValueRange = String.valueOf(df.format(bd));
								String highValueRange = String.valueOf(df1.format(bd1));
								String labResultRange = String.valueOf(df2.format(bd2));
								System.out.println(":::::numWihoutDecimal::333:"+lowValueRange);
								//altLab.setLowValue(Double.parseDouble(numWihoutDecimal));
								altLab.setLowValue(Double.parseDouble(lowValueRange));
								altLab.setHighValue(Double.parseDouble(highValueRange));
								altLab.setLabResultValue(Double.parseDouble(labResultRange));
							}
						 
						// String numWihoutDecimal = String.valueOf(psychoPharmMedActionPlanAlert.getLowValue()).split("\\.")[0];
						// System.out.println("lab mes alert:::"+psychoPharmMedActionPlanAlert.getLowValue()+":::"+numWihoutDecimal);
						  psychoPharmAlertMedActionPlanList.add(psychoPharmMedActionPlanAlert); 
						
					 }
					 
				  }
			  }
			 
			 
		  }
	  }
	  
	return psychoPharmAlertMedActionPlanList;
 }
 /**
  * @param psychoPharmAlertMedActionPlanList the psychoPharmAlertMedActionPlanList to set
  */
 public void setPsychoPharmAlertMedActionPlanList(
		List<AlertGenericMedActionLab> psychoPharmAlertMedActionPlanList) {
	this.psychoPharmAlertMedActionPlanList = psychoPharmAlertMedActionPlanList;
 }
/**
 * @return the psychoPharmMedActionChartMonitoringParameterList
 */
public List<GenericMedActionPlan> getPsychoPharmMedActionChartMonitoringParameterList() {
	if(psychoPharmMedActionChartMonitoringParameterList==null){
		psychoPharmMedActionChartMonitoringParameterList=new ArrayList<GenericMedActionPlan>();
		/*Set<GenericMedActionPlan> psychoPharmMedPlanMonitoringParameterSet=new HashSet<GenericMedActionPlan>();
		for(GenericMedActionPlan medActionPlan:getPsychoPharmClinicMedActionPlanList()){
			if(psychoPharmMedPlanMonitoringParameterSet.add(medActionPlan)){
				psychoPharmMedActionChartMonitoringParameterList.add(medActionPlan);
			}
		}*/
		psychoPharmMedActionChartMonitoringParameterList=patientMedicineService.getPsychoPharmMonitoringParameterChartValue(new ContextUtil().getPatientId());
	}
	
	

	
	
	return psychoPharmMedActionChartMonitoringParameterList;
}
/**
 * @param psychoPharmMedActionChartMonitoringParameterList the psychoPharmMedActionChartMonitoringParameterList to set
 */
public void setPsychoPharmMedActionChartMonitoringParameterList(
		List<GenericMedActionPlan> psychoPharmMedActionChartMonitoringParameterList) {
	this.psychoPharmMedActionChartMonitoringParameterList = psychoPharmMedActionChartMonitoringParameterList;
}
	


 public List<Map.Entry<String, PsychopharmMessage>> getAltmanManiaQuestions() {
		if(altmanManiaQuestions==null){
			altmanManiaQuestions=patientMedicineService.getPsychopharm_Altman_mania_questions();
		}
		return altmanManiaQuestions;
	}
	public void setAltmanManiaQuestions(
			List<Map.Entry<String, PsychopharmMessage>> altmanManiaQuestions) {
		this.altmanManiaQuestions = altmanManiaQuestions;
	}
		
		public void altmanScoreCalculation(ActionEvent event) throws ParseException{
			logger.info("Start calculating the  Altman scale score based on selected value");
			int altmanTotalScore=0;
			for (Map.Entry<String,PsychopharmMessage> entry : altmanManiaQuestions) {
			/*	logger.info("Key  "+entry.getKey());
				logger.info("Question List size "+entry.getValue().getResponeLinkedMapList());*/
				logger.info("selected value from end user "+entry.getValue().getSelectedValue());
				if(StringUtils.isNotBlank(entry.getValue().getSelectedValue())){
					altmanTotalScore=altmanTotalScore+Integer.parseInt(entry.getValue().getSelectedValue());
				}

			
		}
			logger.info("Total Altman score after calculation "+altmanTotalScore);
			psychopharmModelDataObj.setAltmanManiaRatingScale(String.valueOf(altmanTotalScore));
		}

		/**
		 * @return the psychoPharmMedActionChartDrugNameList
		 */
		public List<GenericMedActionPlan> getPsychoPharmMedActionChartDrugNameList() {
			if(psychoPharmMedActionChartDrugNameList==null){
				psychoPharmMedActionChartDrugNameList=new ArrayList<GenericMedActionPlan>();
			}
			psychoPharmMedActionChartDrugNameList=patientMedicineService.getPsychoPharmMedActionChartDrugNameData(new ContextUtil().getPatientId());
			return psychoPharmMedActionChartDrugNameList;
		}
		/**
		 * @param psychoPharmMedActionChartDrugNameList the psychoPharmMedActionChartDrugNameList to set
		 */
		public void setPsychoPharmMedActionChartDrugNameList(
				List<GenericMedActionPlan> psychoPharmMedActionChartDrugNameList) {
			this.psychoPharmMedActionChartDrugNameList = psychoPharmMedActionChartDrugNameList;
		}

		
		public void phq9ScoreCalculation(ActionEvent event){
			logger.info("Start calculating PHQ-9 score based on selected value ");
			int phq9Score=0;
			for (Map.Entry<String,PsychopharmMessage> entry : phq9Questions) {
				/*	logger.info("Key  "+entry.getKey());
					logger.info("Question List size "+entry.getValue().getResponeLinkedMapList());*/
					logger.info("selected value from end user "+entry.getValue().getSelectedValue());
					if(StringUtils.isNotBlank(entry.getValue().getSelectedValue())){
						phq9Score=phq9Score+Integer.parseInt(entry.getValue().getSelectedValue());
					}
				
			}
				logger.info("Total PHQ9 score after calculation "+phq9Score);
				psychopharmModelDataObj.setPhq9Scale(String.valueOf(phq9Score));
		}
		
		public List<Map.Entry<String, PsychopharmMessage>> getPhq9Questions() {
			if(phq9Questions==null){
				phq9Questions=patientMedicineService.getPsychopharm_PHQ_9_questions();
			}
			return phq9Questions;
		}
		public void setPhq9Questions(
				List<Map.Entry<String, PsychopharmMessage>> phq9Questions) {
			this.phq9Questions = phq9Questions;
		}
		public List<Map.Entry<String, PsychopharmMessage>> getPsychopharmQuestions() {
			/*if(psychopharmQuestions==null){
				psychopharmQuestions=patientMedicineService.getPyschoPharmQuestionsBasedOnLithiumLevel();
			}*/
			return psychopharmQuestions;
		}
		public void setPsychopharmQuestions(
				List<Map.Entry<String, PsychopharmMessage>> psychopharmQuestions) {
			this.psychopharmQuestions = psychopharmQuestions;
		}
		
		public void addMedicine_HepatitisC()
		{
			logger.info("addGeneralMedicine method started");
			//findDrugIDAccordingToDrugNameAndDose(patientMedicationData, doseDetailList);
			patientMedicationData.setPrescriptionStatus(PRESCRIPITION_STATUS_PENDING);
			patientMedicationData.setPatientId(new ContextUtil().getPatientId());
			patientMedicationData.setProviderId(new ContextUtil().getProviderId());
			patientMedicationData.setCompliancePercentage(0);
			patientMedicationData.setDoctorId(new ContextUtil().getLoginId());
			patientMedicationData.setChangeMedId(1);
			patientMedicationData.setFlagForMedActionPlan(false);
			
			/*if(patientMedicationData.getStrengths().contains("/"))
			{*/
				patientMedicationData.setUnit(patientMedicationData.getUnit()+" "+patientMedicationData.getStrengths().substring(patientMedicationData.getStrengths().lastIndexOf("m")));
				System.out.println("strength contain /"+patientMedicationData.getUnit());
			/*}*/
			System.out.println("checkdateForMedactionplan"+checkdateForMedactionplan);
			if(!checkdateForMedactionplan){
					patientMedicationData.setPrescriberName(new ContextUtil().getLoggerFirstName()+" "+new ContextUtil().getLoggedUserMiddleName()+" "+new ContextUtil().getLoggerLastName());
			}
		

			//patientMedicationData.setMedicineStatus(NEW_ADDED_MEDS);
			patientMedicationData.setCauseOfAddMeds(NEW_ADDED_MEDS);
		
			patientMedicationData.setModifyDate(patientMedicationData.getStartDate());
			patientMedicationData.setSelectedImageForPatient(true);
			patientMedicationData.setFlagForVisit(true);
			//-------for saving date with time zone
			logger.info("patientMedicationData.getStartDate:"+patientMedicationData.getStartDate()+"=="+new Date());
			logger.info("setDateWithTimeZoneForCompare="+new DateUtil().convertDateFormatUsingFormat(patientMedicationData.getStartDate(), "yyyy-MM-dd'T'HH:mm:ss.SSSZ"));
			patientMedicationData.setDateWithTimeZoneForCompare(new DateUtil().convertDateFormatUsingFormat(new DateUtil().getTodayDate(), "yyyy-MM-dd'T'HH:mm:ss.SSSZ"));  
			logger.info("1:::drug id::"+patientMedicationData.getDrugId()+"::::::::::::"+patientMedicationData.getDrugNameId());
			findDrugIDAccordingToDrugNameAndDose(patientMedicationData, doseDetailList);

			logger.info("2:1::drug id::"+patientMedicationData.getDrugId()+"::::::::::::"+patientMedicationData.getDrugNameId()+"::::therapic category:::"+patientMedicationData.getTherapeuticCategory());
			patientMedicineService.saveMedicineDetail(patientMedicationData);

		}
	  
	  private void resetHepatitisCAcord() {
		  hepatitisCObj = new HepatitisC(); 
		  hepatitisCObj.setDosing_step_1_disabled(false);
		  hepatitisCObj.setDosing_step_2_disabled(true);
		  hepatitisCObj.setDosing_step_3_disabled(true);
		  hepatitisCObj.setDosing_step_4_disabled(true);
		  hepatitisCObj.setActiveIndexDefault("0");
			
		}
	  
	  public void hepatitisC_previous_button_wizard(ActionEvent event){
			logger.info("Previous button clicked from Hepatitis C "+hepatitisCObj.getActiveIndexDefault());
			HepatitisC hepatitisCData=hepatitisCObj;
			hepatitisC_previous_button_active_wizard(hepatitisCData);
		}
	  
	  public void hepatitisC_previous_button_active_wizard(HepatitisC  hepatitisCdata){
			//If previous button clicked from Step 2 then Goto Step 1 by making active index to 0 and disable step 2 wizard and it follows
			//the same for rest.
			if(hepatitisCdata.getActiveIndexDefault().equals("1")){
				hepatitisCObj.setActiveIndexDefault("0");
				hepatitisCObj.setDosing_step_1_disabled(false);
				hepatitisCObj.setDosing_step_2_disabled(true);			
			}else if(hepatitisCdata.getActiveIndexDefault().equals("2")){
				hepatitisCObj.setActiveIndexDefault("1");			
				hepatitisCObj.setDosing_step_2_disabled(false);
				hepatitisCObj.setDosing_step_3_disabled(true);
			}else if(hepatitisCdata.getActiveIndexDefault().equals("3")){
				hepatitisCObj.setActiveIndexDefault("2");			
				hepatitisCObj.setDosing_step_3_disabled(false);
				hepatitisCObj.setDosing_step_4_disabled(true);
			}
		}
		
		public void hepatitisC_next_button_active_wizard(
				HepatitisC hepatitisCdata2) {
			if(hepatitisCdata2.getActiveIndexDefault().equals("0")){
				hepatitisCObj.setActiveIndexDefault("1");
				hepatitisCObj.setDosing_step_1_disabled(true);
				hepatitisCObj.setDosing_step_2_disabled(false);
			}else if(hepatitisCdata2.getActiveIndexDefault().equals("1")){		
				hepatitisCObj.setActiveIndexDefault("2");
				hepatitisCObj.setDosing_step_2_disabled(true);
				hepatitisCObj.setDosing_step_3_disabled(false);
			}else if(hepatitisCdata2.getActiveIndexDefault().equals("2")){
				hepatitisCObj.setActiveIndexDefault("3");
				hepatitisCObj.setDosing_step_3_disabled(true);
				hepatitisCObj.setDosing_step_4_disabled(false);
			}
		}
		
		public void findDiagnosisName(){
			
			System.out.println("inside find diagnosis-----");

			FacesContext context = FacesContext	.getCurrentInstance();
			PatientManageBean patientManageBean=(PatientManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"patientManageBean");
			patientDiagnosesDetailsObj= patientManageBean.getPatientDiagnosesDetails() ;
			
		}
		public void hepatitis_validateStep1(ActionEvent event){
			logger.info("Inside Step 1 of Hepatitis ");
			
			
			hepatitisC_next_button_active_wizard(hepatitisCObj);
		
		
		}
		
		public void hepatitis_validateStep2(ActionEvent event) throws JSONException{
			logger.info("Inside Step 2 of Hepatitis ");
			hepatitisC_next_button_active_wizard(hepatitisCObj);
			gotoStep3();
			
		}
		
		public void hepatitis_validateStep3(ActionEvent event){
			logger.info("Inside Step 3 of Hepatitis ");
			hepatitisC_next_button_active_wizard(hepatitisCObj);
		}
		
		public void hepatitisCStep4(ActionEvent event){
			logger.info("HepatitisC Step4 ");
			//First save the medicine
			logger.info("selected lab paramters "+selectedLabParamters.size());
			if(selectedLabParamtersHgb!=null){
			selectedLabParamters.addAll(selectedLabParamtersHgb);
			}
			int patientId=new ContextUtil().getPatientId();
			//save the MAP
			RequestContext context = RequestContext.getCurrentInstance();
			//patientDiagnosesDetailsObj=null;
			setGenericMedActionPlanList(selectedLabParamters);
			convertToOldGenericMedActionList(parentMedActionPlan);
			if(!validationCheckMedPlan(genericMedActionPlanList,patientDiagnosesDetailsObj)){
				
					temporaryGenericMedPlanList=new ArrayList<GenericMedActionPlan>();
					addMedicine_Psychopharm();
					for(int i=0;i<genericMedActionPlanList.size();i++){
						genericMedActionPlanList.get(i).setDosingStartDate(getDosingStartDate());
						genericMedActionPlanList.get(i).setDrugId(String.valueOf((int)patientMedicationData.getDrugId()));
						genericMedActionPlanList.get(i).setDrugName(patientMedicationData.getDrugs());
						genericMedActionPlanList.get(i).setStrength(patientMedicationData.getStrengths());
						genericMedActionPlanList.get(i).setRegimen(patientMedicationData.getDirections());
						genericMedActionPlanList.get(i).setUnit(patientMedicationData.getUnit());
						genericMedActionPlanList.get(i).setDosageForm(patientMedicationData.getDosageForm());
						genericMedActionPlanList.get(i).setPatientDiagnosesDetails(patientDiagnosesDetailsObj);
						genericMedActionPlanList.get(i).setPrescriptionDate(patientMedicationData.getStartDate());
						genericMedActionPlanList.get(i).setPrescribedBy(patientMedicationData.getPrescriberName());
						System.out.println("This is setPrescribedBy "+patientMedicationData.getPrescriberName());
						genericMedActionPlanList.get(i).setDrugNameId(patientMedicationData.getDrugNameId());
						
					}
					//addMedicine_HepatitisC();
					//addMedicine_Psychopharm();
					boolean success=patientMedicineService.saveGenericMedActionPlan(patientId,genericMedActionPlanList,temporaryGenericMedPlanList, dosingStartDate);
					context.closeDialog(HEPATITIS_C_VIEW);
					loadRefreshData();
					refreshGenericMedPlan();
					logger.info("suceess med plan "+success);
					
					
			}
			logger.info("view name "+getViewName());
			makeFilterPageRefreshData();
			context.addCallbackParam("pageName", getViewName());
			//context.addCallbackParam("showDialogToUser", false);
			//hepatitisC_next_button_active_wizard(hepatitisCObj);
		}
		public HepatitisC getHepatitisCObj() {
			return hepatitisCObj;
		}
		public void setHepatitisCObj(HepatitisC hepatitisCObj) {
			this.hepatitisCObj = hepatitisCObj;
		}
		
		public void hepatitisCUserDetails(){
		    FacesContext context = FacesContext.getCurrentInstance();
			DashBoardManageBean dashBoardManageBean=(DashBoardManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"dashBoardManageBean");
			hepatitisC.setAge(dashBoardManageBean.getUserLoginDetail().getAge());
		}
		
	
		public void generalEditGenericMedActionPlan(ActionEvent event){
			parentMedActionPlan=new ParentMedActionPlan();
			parentMedActionPlan=(ParentMedActionPlan) getPsychopharmMedPlanDatatable().getRowData();
			patientMedicationData=new PatientMedicationData();
			patientMedicationData=patientMedicineService.preparePatientMedObj(parentMedActionPlan);
			if(StringUtils.isNotBlank(parentMedActionPlan.getPatientDiagnosisName())){
				patientDiagnosesDetailsObj=new PatientDiagnosesDetails();
				patientDiagnosesDetailsObj.setCode(parentMedActionPlan.getPatientDiagnosisName());
			}else{
				patientDiagnosesDetailsObj=new PatientDiagnosesDetails();
			}
			
		}
		
		public void generalRemoveGenericMedActionPlan(ActionEvent event){
			parentMedActionPlan=new ParentMedActionPlan();
			parentMedActionPlan=(ParentMedActionPlan) getPsychopharmMedPlanDatatable().getRowData();
			
		}
		public DataTable getPsychopharmMedPlanDatatable() {
			return psychopharmMedPlanDatatable;
		}
		public void setPsychopharmMedPlanDatatable(DataTable psychopharmMedPlanDatatable) {
			this.psychopharmMedPlanDatatable = psychopharmMedPlanDatatable;
		}
		/**
		 * @return the hepatitisCMedActionPlanList
		 */
		public List<ParentMedActionPlan> getHepatitisCMedActionPlanList() {
			if(hepatitisCMedActionPlanList==null){
				hepatitisCMedActionPlanList=new ArrayList<ParentMedActionPlan>();
			}
			hepatitisCMedActionPlanList=patientMedicineService.getHepatitisCMedActionPlanData(new ContextUtil().getPatientId());
			return hepatitisCMedActionPlanList;
		}
		/**
		 * @param hepatitisCMedActionPlanList the hepatitisCMedActionPlanList to set
		 */
		public void setHepatitisCMedActionPlanList(
				List<ParentMedActionPlan> hepatitisCMedActionPlanList) {
			this.hepatitisCMedActionPlanList = hepatitisCMedActionPlanList;
		}
		
		public WSDrug getSelectedMedObj() {
			if(selectedMedObj==null){
				selectedMedObj=new WSDrug();
			}
			return selectedMedObj;
		}
		public void setSelectedMedObj(WSDrug selectedMedObj) {
			this.selectedMedObj = selectedMedObj;
		}
		
		public void selectedSearchMedsForPsychopharm() throws Exception
		{
			try{
			logger.info("selectedSearchMedsForPsychopharm method start "+getSelectedMedObj().getDrugName());
			setShowMedActionPlanForWarfarin(false);
			setShowMessageForNewAddMeds(false);
			//PatientMedicationData	PatientMedicationDataForReconcile=(PatientMedicationData) getReconsileMedsDataTable().getRowData();
			WSDrug wsDrugObj=getSelectedMedObj();
			System.out.println(":::::::::::::::: meds::"+wsDrugObj.getDrugName()+"id:::::::::::"+wsDrugObj.getDrugNameId());
			//RequestContext.getCurrentInstance().reset("medicinename");
			patientMedicationData.setDrugs(wsDrugObj.getDrugName());
			patientMedicationData.setDrugNameId(wsDrugObj.getDrugNameId());
			patientMedicationData.setDosageForm(wsDrugObj.getDosageForm());
			patientMedicationData.setByRoute(wsDrugObj.getRoute());
			System.out.println(":::::::::::::::::::>>>>>"+patientMedicationData.getDrugNameId());
			//getting dose list...for selected meds
			doseDetailList=new ArrayList<WSDrug>();
			doseDetailList=patientMedicineService.findDoseListOfParticularMeds(wsDrugObj.getDrugNameId(),wsDrugObj.getDosageForm());
		
			
			if(doseDetailList.size()>0){
				createDrugDosageMap(doseDetailList);
				initializeDosageForm(doseDetailList.get(0).getDose());
			}else{
				doseDetailList=prepareWSdrugObj(patientMedicationData);
				dosageForms=new ArrayList<String>();
				dosageForms.add(patientMedicationData.getDosageForm().trim());
				
			}
			if(!((wsDrugObj.getDosageForm().equalsIgnoreCase("capsule")) || (wsDrugObj.getDosageForm().equalsIgnoreCase("tablet"))
					||(wsDrugObj.getDosageForm().equalsIgnoreCase("Lozenge"))
					||(wsDrugObj.getDosageForm().equalsIgnoreCase("pill"))||(wsDrugObj.getDosageForm().equalsIgnoreCase("patch"))
					||(wsDrugObj.getDosageForm().equalsIgnoreCase("suppository"))))
				patientMedicationData.setQuantity("");


			String genericName;
			if(wsDrugObj.getGenericName() != null)

				genericName=wsDrugObj.getGenericName();
			else
				genericName=wsDrugObj.getDrugName();
			System.out.println(":::::::::anticoag:::::::genericName::"+genericName);
			patientMedicationData.setGenericName(genericName);
			checkStartDateMedicine(genericName);
			findDrugIDAccordingToDrugName(doseDetailList);
			selectedDrugId= patientMedicationData.getDrugId();
			FacesContext context = FacesContext	.getCurrentInstance();UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");	

			if(!(selectedDrugId==0.0))
			{
				drugInteractions=drugDetailWSBean.callDrugDrugInteraction(patientMedicationDataList, userManageBean.getProviderLocation(),selectedDrugId);
			}
			List<DrugInteraction> drugInteractionsList=new ArrayList<DrugInteraction>();

			for (DrugInteraction dr : drugInteractions) {
				System.out.println("DrugInteraction list:dr.getDrug1::"+dr.getDrug1());
				if (!(String.valueOf(selectedDrugId)).equals(dr.getDrug2ID()+".0")) {
					drugInteractionsList.add(dr);
				}

			}
			drugInteractions.removeAll(drugInteractionsList);

			drugInterectionListDetail=new ArrayList<DrugInteractionOverview>();
			for(DrugInteraction drugInteractionData:drugInteractions){
				System.out.println("setSeverityLevel:::::::"+drugInteractionData.getSeverityLevel());
				DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
				drugInteractionOverview.setClinicalEffects(drugInteractionData.getClinicalEffects());
				drugInteractionOverview.setPatientManagement(drugInteractionData.getPatientManagement());
				drugInteractionOverview.setIssueType(DRUG_DRUG_INTERECTION);
				drugInteractionOverview.setDrugId(drugInteractionData.getDrug1ID());
				drugInteractionOverview.setConflict(drugInteractionData.getDrug1());

				if(StringUtils.contains(StringUtils.lowerCase(drugInteractionData.getSeverityLevel()), DRUG_SEVERITY_LEVEL_SEARCH_STR)){
					drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(DRUG_SEVERITY_TOOLTIP);
				}else if(StringUtils.contains(StringUtils.lowerCase(drugInteractionData.getSeverityLevel()), DRUG_SEVERITY_LEVEL_SEARCH_STR_CONTRAINDICATED)){
					drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(DRUG_SEVERITY_TOOLTIP_CONTRAINDICATED);
				}else if(StringUtils.contains(StringUtils.lowerCase(drugInteractionData.getSeverityLevel()), DRUG_SEVERITY_LEVEL_SEARCH_STR_MODERATE)){
					drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(DRUG_SEVERITY_TOOLTIP_MODERATE);
				}
				System.out.println("drugId is=="+drugInteractionOverview.getDrugId());
				if(!drugInterectionListDetail.contains(drugInteractionOverview)){
					drugInterectionListDetail.add(drugInteractionOverview);

					highestServity=new String();

					for (Iterator iterator = drugInterectionListDetail.iterator(); iterator.hasNext();){
						DrugInteractionOverview drugInteraction = (DrugInteractionOverview) iterator.next();
						// System.out.println(":::::::name:"+clinicDiagnosis.getDiagnosisName());
						if(drugInteraction.getSeverityLevel().equalsIgnoreCase(HIGH_SEVERITY_LEVEL))
						{
							// System.out.println("getSeverityLevel::o::"+drugInteraction.getSeverityLevel());
							setHighestServity(HIGH_SEVERITY_LEVEL);
							// System.out.println("getSeverityLevel::444:o:"+highestServity);
							break;
						}

						else if(drugInteraction.getSeverityLevel().equalsIgnoreCase(MEDIUM_SEVERITY_LEVEL))
						{	
							// System.out.println("MEDIUM_SEVERITY_LEVEL:o:::"+drugInteraction.getSeverityLevel());
							setHighestServity(MEDIUM_SEVERITY_LEVEL);
							// System.out.println("MEDIUM_SEVERITY_LEVEL::444:o:"+highestServity);
							break;
						} 	

						else if(drugInteraction.getSeverityLevel().equalsIgnoreCase(LOW_SEVERITY_LEVEL))
						{
							// System.out.println("LOW_SEVERITY_LEVEL::o::"+drugInteraction.getSeverityLevel());
							setHighestServity(LOW_SEVERITY_LEVEL);
							//System.out.println("LOW_SEVERITY_LEVEL::444:o:"+highestServity);
							break;
						}
					}
				}
			}


			System.out.println("patientMedicationData:anticoag:::::::::"+patientMedicationData.getGenericName()+":::::::"
					+patientMedicationData.getDrugName()+"dsfhgjsd"+patientMedicationData.getDrugs());

			System.out.println("value of PharmacogenomicInteractionDetail @ 8497="+getPharmacogenomicInteractionDetail());
			pharmacogenomicInteractionDetailList=patientMedicineService.findPharmacogenomicsInteractionDuringAddMedicine(patientMedicationData.getDrugNameId(),patientMedicationData.getDrugs(),new ContextUtil().getPatientId());
			System.out.println(patientMedicationData.getDrugNameId()+"value of  PharmacogenomicInteractionDetail after @ 8497="+getPharmacogenomicInteractionDetail());

			drugPharmaInterectionListDetail=new ArrayList<DrugInteractionOverview>();
			getPharmacogenomicsRecomendationsListForImpactedMedicine();
			highestServityForpharmacogenomic = new String();
			String drugName=patientMedicationData.getDrugs();
			for (PharmacogenomicsRecomendations pr : pharmacogenomicInteractionDetailList) {
				DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
				System.out.println("inside onRowExpensionDrugInteraction::::::"+pr.getDrugName()+"="+drugName);
				if (drugName.equalsIgnoreCase(pr.getDrugName())) {
					System.out.println("inside if block::::::"+pr.getDrugName()+"="+drugName);
					drugInteractionOverview.setSeverityLevel(pr.getAttentionRating());
					drugInteractionOverview.setIssueType(PHARMACOGENOMIC);

					drugInteractionOverview.setConflict(pr.getPharmacogenomicsId().getGeneSymbol());
					drugInteractionOverview.setClinicalEffects(pr.getImplications());
					drugInteractionOverview.setPatientManagement(pr.getRecommendation());
					final String PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING=pr.getOvaleMessage();
					drugInteractionOverview.setSeverityLevelToolTip(pr.getOvaleMessage());
					if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), HIGH_SEVERITY_LEVEL_RATING)){
						drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL_RATING);
						drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
					}else if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), MEDIUM_SEVERITY_LEVEL_RATING)){
						drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL_RATING);
						drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
					}else if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), LOW_SEVERITY_LEVEL_RATING)){
						drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL_RATING);
						drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
					}
					if(!drugPharmaInterectionListDetail.contains(drugInteractionOverview)){
						//	drugInteractionOverview.setSeverityLevel(drugDiseaseDetail.getSeverityLevelShortText());
						drugPharmaInterectionListDetail.add(drugInteractionOverview);
					}
					for(DrugInteractionOverview dio: drugPharmaInterectionListDetail)
					{
						System.out.println("drugInterectionListDetail::PHARMACOGENOMIC:::anti::::123:::"+dio.getSeverityLevel());
						setHighestServityForpharmacogenomic(dio.getSeverityLevel());
						System.out.println("drugInterectionListDetail::PHARMACOGENOMIC::456::anti:::123:::"+dio.getSeverityLevelToolTip());
					}
				}

			}
			



			String patientId=Integer.toString(new ContextUtil().getPatientId());		
			if(!(selectedDrugId==0.0))
			{
				drugAllergyInteractions=drugDetailWSBean.getDrugAllergyInteraction(patientId,getPatientAllergyList(),getPatientMedicationDataList(),userManageBean.getProviderLocation(),selectedDrugId);
			}
			drugAlleryInterectionListDetail= new ArrayList<DrugInteractionOverview>();
			String [] allergySeverity=new String[2];
			String allergySeverityLevel="";
			for(DrugAllergyDetail drugAllergyDetail:drugAllergyInteractions){
				DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
				drugInteractionOverview.setClinicalEffects("");
				drugInteractionOverview.setConflict(drugAllergyDetail.getInteractionText());
				drugInteractionOverview.setIssueType(DRUG_ALLERGY_INTERACTION);
				if(StringUtils.contains(drugAllergyDetail.getInteractionText(), "with")){
					allergySeverity=StringUtils.split(drugAllergyDetail.getInteractionText(), "with");
				
				}
				for(PatientAllergy patAllergy:getPatientAllergyList()){
					if(patAllergy.getAllergyName().equals(allergySeverity[1])){
						allergySeverityLevel=patAllergy.getAllergySeverity();
						break;
					}
				}
				if(StringUtils.isNotEmpty(allergySeverityLevel)){
					if(StringUtils.equals(allergySeverityLevel, DRUG_SEVERITY_TOOLTIP)){
						drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
						drugInteractionOverview.setSeverityLevelToolTip(allergySeverityLevel);
					}else if(StringUtils.equals(allergySeverityLevel, DRUG_SEVERITY_TOOLTIP_MODERATE)){
						drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL);
						drugInteractionOverview.setSeverityLevelToolTip(allergySeverityLevel);
					}else if(StringUtils.equals(allergySeverityLevel, MILD_LEVEL)){
						drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL);
						drugInteractionOverview.setSeverityLevelToolTip(allergySeverityLevel);
					}
				}else {
					drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(MILD_LEVEL);
				}
				//if(!drugAlleryInterectionListDetail.contains(drugInteractionOverview)){
					//	drugInteractionOverview.setSeverityLevel(drugDiseaseDetail.getSeverityLevelShortText());
					drugAlleryInterectionListDetail.add(drugInteractionOverview);
				//}

				//drugInterectionListDetail.add(drugInteractionOverview);
				highestServityForAllergy = new String();
				for (Iterator iterator = drugAlleryInterectionListDetail.iterator(); iterator.hasNext();){
					DrugInteractionOverview drugInteraction = (DrugInteractionOverview) iterator.next();
					// System.out.println(":::::::name:"+clinicDiagnosis.getDiagnosisName());
					if(drugInteraction.getSeverityLevel().equalsIgnoreCase(HIGH_SEVERITY_LEVEL))
					{
						// System.out.println("getSeverityLevel::Allergy:o:"+drugInteraction.getSeverityLevel());
						setHighestServityForAllergy(HIGH_SEVERITY_LEVEL);
						// System.out.println("getSeverityLevel::444:o:"+highestServity);
						break;
					}

					else if(drugInteraction.getSeverityLevel().equalsIgnoreCase(MEDIUM_SEVERITY_LEVEL))
					{	
						//System.out.println("MEDIUM_SEVERITY_LEVEL::Allergy1:o:"+drugInteraction.getSeverityLevel());
						setHighestServityForAllergy(MEDIUM_SEVERITY_LEVEL);
						// System.out.println("MEDIUM_SEVERITY_LEVEL::444:o:"+highestServity);
						break;
					} 	

					else if(drugInteraction.getSeverityLevel().equalsIgnoreCase(LOW_SEVERITY_LEVEL))
					{
						// System.out.println("LOW_SEVERITY_LEVEL::Allergy12::"+drugInteraction.getSeverityLevel());
						setHighestServityForAllergy(LOW_SEVERITY_LEVEL);
						//System.out.println("LOW_SEVERITY_LEVEL::444::"+highestServityForAllergy);
						break;
					}
				}


			}

			if(!(selectedDrugId==0.0))
			{
				drugDiseaseDetailsInteractions=ncUpdate1WSBean.callDrugDiseaseInteraction(patientId,getPatientMedicationDataList(),getPatientDiagnosesDetailList(),userManageBean.getProviderLocation(),selectedDrugId);
			}
			drugDiseaseInterectionListDetail= new ArrayList<DrugInteractionOverview>();	
			for(DrugDiseaseDetail drugDiseaseDetail:drugDiseaseDetailsInteractions){
				DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
				drugInteractionOverview.setClinicalEffects("");
				drugInteractionOverview.setConflict(drugDiseaseDetail.getDirectCondition());
				drugInteractionOverview.setIssueType(DRUG_DISEASE_INTERACTION);

				drugInteractionOverview.setPatientManagement(drugDiseaseDetail.getSeverityLevelText());
				if((StringUtils.equals(drugDiseaseDetail.getSeverityLevelShortText(), DRUG_SEVERITY_LEVEL_SEARCH_STR_DISEASE))||
						(StringUtils.equals(drugDiseaseDetail.getSeverityLevelShortText(), DRUG_SEVERITY_LEVEL_SEARCH_STR_RELATIVE))){
					drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(drugDiseaseDetail.getSeverityLevelShortText());
				}else if((StringUtils.equals(drugDiseaseDetail.getSeverityLevelShortText(), DRUG_SEVERITY_LEVEL_SEARCH_STR_CONTRADICATION))){
					drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL);
					drugInteractionOverview.setSeverityLevelToolTip(drugDiseaseDetail.getSeverityLevelShortText());
				}
				//if(!drugDiseaseInterectionListDetail.contains(drugInteractionOverview)){
					//	drugInteractionOverview.setSeverityLevel(drugDiseaseDetail.getSeverityLevelShortText());
					drugDiseaseInterectionListDetail.add(drugInteractionOverview);
				//}
				highestServityForDisease = new String();
				for (Iterator iterator = drugDiseaseInterectionListDetail.iterator(); iterator.hasNext();){
					DrugInteractionOverview drugInteraction = (DrugInteractionOverview) iterator.next();
					// System.out.println(":::::::name:"+clinicDiagnosis.getDiagnosisName());
					if(drugInteraction.getSeverityLevel().equalsIgnoreCase(HIGH_SEVERITY_LEVEL))
					{
						//System.out.println("getSeverityLevel::Disease:1:o"+drugInteraction.getSeverityLevel());
						setHighestServityForDisease(HIGH_SEVERITY_LEVEL);
						//System.out.println("getSeverityLevel::444:Disease1:"+highestServity);
						break;
					}

					else if(drugInteraction.getSeverityLevel().equalsIgnoreCase(MEDIUM_SEVERITY_LEVEL))
					{	
						//System.out.println("MEDIUM_SEVERITY_LEVEL::Disease:2o:"+drugInteraction.getSeverityLevel());
						setHighestServityForDisease(MEDIUM_SEVERITY_LEVEL);
						// System.out.println("MEDIUM_SEVERITY_LEVEL::444:2o:"+highestServity);
						break;
					} 	

					else if(drugInteraction.getSeverityLevel().equalsIgnoreCase(LOW_SEVERITY_LEVEL))
					{
						//System.out.println("LOW_SEVERITY_LEVEL::Disease3:o:"+drugInteraction.getSeverityLevel());
						setHighestServityForDisease(LOW_SEVERITY_LEVEL);
						// System.out.println("LOW_SEVERITY_LEVEL::444:Disease3:o"+highestServity);
						break;
					}
				}
			}
			
			if (!(selectedDrugId == 0.0)) {
				//precautionsBasedOnDrugId
				precautionsBasedOnDrugId(selectedDrugId);
				
			}

			//for setting medactionplan for warfarin...

			if(patientMedicationData.getGenericName().equalsIgnoreCase("warfarin"))
			{
				clinicDiagnosisList=patientMedicineService.findClinicDiagnosisList(patientMedicationData.getGenericName());
				clinicSubDiagnosisList=new ArrayList<ClinicSubdiagnosis>();
				labDetailList=new ArrayList<LabDetail>();
				LabDetail labDetail=new LabDetail();
				labDetail.setLabName("INR");
				//labDetail.setSelected(true);
				labDetailList.add(labDetail);
				//labDetailList=patientMedicineService.findLabDetailListAccordingToGenericname(patientMedicationData.getGenericName());


			}

		//for Formulary alert should come when med being added  added by gopal
			
		/*	if(new ContextUtil().getInsuranceId()==0)
			{
				patientMedicationData.setFormularySymbol("");
			}
			else
			{
		
			patientMedicationData.setFormularySymbol(patientMedicineService.findFormularySymbol(new ContextUtil().getInsuranceId(),patientMedicationData.getDrugs()));
			}*/
			
			String formularySymbolText=new String();
			/*String drugId=String.valueOf(patientMedicationData.getDrugId());*/
			Double drugIdForFormulary=patientMedicationData.getDrugId();
			Integer drugId=(int) drugIdForFormulary.doubleValue();
			logger.info("pat Med bean in double form"+drugIdForFormulary +" drug id in int form "+drugId);
			
			formularySymbolText=patientMedicineService.findFormularySymbol(new ContextUtil().getInsuranceId(),Integer.toString(drugId));
			Map<String,String>formularyMAP=patientMedicineService.formularyMAPtoOldText();
			if(StringUtils.isNotBlank(formularySymbolText)){
				patientMedicationData.setFormularyText(formularyMAP.get(formularySymbolText));
				patientMedicationData.setFormularySymbol(formularySymbolText);
			}else{
				patientMedicationData.setFormularyText("");
				patientMedicationData.setFormularySymbol("");
			}
			
			//}
			logger.info("2find formulary detail end::::"+patientMedicationData.getFormularySymbol());
			
			if((patientMedicationData.getGenericName().equalsIgnoreCase("Apixaban")) || (patientMedicationData.getGenericName().equalsIgnoreCase("Enoxaparin"))
					|| (patientMedicationData.getGenericName().equalsIgnoreCase("Rivaroxaban")) || (patientMedicationData.getGenericName().equalsIgnoreCase("dabigatran etexilate"))
					|| (patientMedicationData.getGenericName().equalsIgnoreCase("dalteparin (porcine)")) || (patientMedicationData.getGenericName().equalsIgnoreCase("WARFARIN"))
					|| (patientMedicationData.getGenericName().equalsIgnoreCase("Fondaparinux")) 
					|| (patientMedicationData.getGenericName().equalsIgnoreCase("Desirudin")) || (patientMedicationData.getGenericName().equalsIgnoreCase("Apixaban")))
			{
				System.out.println("Apixaban::::::::"+patientMedicationData.getGenericName());
				RequestContext.getCurrentInstance().execute("searchMedicinePopUp.hide();");
				patientMedicationData.setDaySupply("30");
				patientMedicationData.setAllowSubstitution(true);
				RequestContext.getCurrentInstance().execute("quickPrescribe.show();");
			}else if((StringUtils.lowerCase(patientMedicationData.getDrugs()).contains("lithium"))||(StringUtils.lowerCase(patientMedicationData.getGenericName()).contains("lithium"))){
				logger.info("Inside Lithium med condion ");
				patientMedicationData.setDaySupply("30");
				patientMedicationData.setAllowSubstitution(true);
				viewName=returnParticularView();
				String drugNameCapitialized=StringUtils.capitalize(patientMedicationData.getDrugs());
				patientMedicationData.setDrugs(drugNameCapitialized);

				//Set the properties for Dialog box
				Map<String,Object> options = patientMedicineService.getDialogProperties();
				RequestContext.getCurrentInstance().execute("searchMedicinePopUp.hide();");
				RequestContext.getCurrentInstance().openDialog(PSYCHOPHARM_LITHIUM_QUICK_PRESCRIBE_VIEW,options,null);
			}
			else if((StringUtils.lowerCase(patientMedicationData.getDrugs()).contains("lithium"))||(StringUtils.lowerCase(patientMedicationData.getGenericName()).contains("lithium"))){
				patientMedicationData.setDaySupply("30");
				patientMedicationData.setAllowSubstitution(true);
				hepatitisC= new HepatitisC();
				viewName=returnParticularView();
				System.out.println("Hepatits C::::::::"+patientMedicationData.getGenericName());
				Map<String,Object> options = patientMedicineService.getDialogProperties();
				RequestContext.getCurrentInstance().execute("searchMedicinePopUp.hide();");
				RequestContext.getCurrentInstance().openDialog(HEPATITIS_C_VIEW,options,null);
				resetHepatitisCAcord();
				getHepatitisCDefaultMedParameters();
			}
			else 
			{
				System.out.println("generalMedicinePopUp:::::::"+patientMedicationData.getGenericName());
				RequestContext.getCurrentInstance().execute("searchMedicinePopUp.hide();");

				RequestContext.getCurrentInstance().execute("addNewMedicinePopup.hide();");
				patientMedicationData.setDaySupply("30");
				patientMedicationData.setAllowSubstitution(true);
				RequestContext.getCurrentInstance().execute("generalMedicinePopUp.show();");	 
			}
			}catch(Exception e){
				e.printStackTrace();
				throw e;
			}
		}
		public List<PatientMedicationData> getCurrentPsychopharmMeds() {
			if(currentPsychopharmMeds==null){
				int patientId=new ContextUtil().getPatientId();
				currentPsychopharmMeds=new ArrayList<PatientMedicationData>();
				currentPsychopharmMeds=patientMedicineService.getCurrentPsychopharmMeds(patientId,PSYCHOPHARM_CLINIC_NAME);
			}
			return currentPsychopharmMeds;
		}
		public void setCurrentPsychopharmMeds(
				List<PatientMedicationData> currentPsychopharmMeds) {
			this.currentPsychopharmMeds = currentPsychopharmMeds;
		}
		
		public void editClinicMeds()
		{
			logger.info("editClinicMeds method start:::");
			
			setShowRxTab(false);
			//setSelectIntervention(selectIntervention)
			setSelectIntervention(1);
			patientMedicationData=getClinicViewPatientMedicationData();
			
			pharmacogenomicInteractionDetailList=patientMedicineService.findPharmacogenomicsInteractionDuringAddMedicine(patientMedicationData.getDrugNameId(),patientMedicationData.getDrugs(),new ContextUtil().getPatientId());
			System.out.println(patientMedicationData.getDrugNameId()+"value of  PharmacogenomicInteractionDetail after @ 8356="+getPharmacogenomicInteractionDetail());
			drugPharmaInterectionListDetail=new ArrayList<DrugInteractionOverview>();
			getPharmacogenomicsRecomendationsListForImpactedMedicine();
			highestServityForpharmacogenomic = new String();
			String drugName=patientMedicationData.getDrugs();
			for (PharmacogenomicsRecomendations pr : pharmacogenomicInteractionDetailList) {
				DrugInteractionOverview drugInteractionOverview =new DrugInteractionOverview();
				System.out.println("inside onRowExpensionDrugInteraction::::::"+pr.getDrugName()+"="+drugName);
				if (drugName.equalsIgnoreCase(pr.getDrugName())) {
					System.out.println("inside if block::::::"+pr.getDrugName()+"="+drugName);
					drugInteractionOverview.setSeverityLevel(pr.getAttentionRating());
					drugInteractionOverview.setIssueType(PHARMACOGENOMIC);

					drugInteractionOverview.setConflict(pr.getPharmacogenomicsId().getGeneSymbol());
					drugInteractionOverview.setClinicalEffects(pr.getImplications());
					drugInteractionOverview.setPatientManagement(pr.getRecommendation());
					final String PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING=pr.getOvaleMessage();
					drugInteractionOverview.setSeverityLevelToolTip(pr.getOvaleMessage());
					if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), HIGH_SEVERITY_LEVEL_RATING)){
						drugInteractionOverview.setSeverityLevel(HIGH_SEVERITY_LEVEL_RATING);
						drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
					}else if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), MEDIUM_SEVERITY_LEVEL_RATING)){
						drugInteractionOverview.setSeverityLevel(MEDIUM_SEVERITY_LEVEL_RATING);
						drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
					}else if(StringUtils.contains(StringUtils.lowerCase(pr.getAttentionRating()), LOW_SEVERITY_LEVEL_RATING)){
						drugInteractionOverview.setSeverityLevel(LOW_SEVERITY_LEVEL_RATING);
						drugInteractionOverview.setSeverityLevelToolTip(PHERMACOGGENICS_SEVERITY_TOOLTIP_RATING);
					}
					if(!drugPharmaInterectionListDetail.contains(drugInteractionOverview)){
						//	drugInteractionOverview.setSeverityLevel(drugDiseaseDetail.getSeverityLevelShortText());
						drugPharmaInterectionListDetail.add(drugInteractionOverview);
					}
					for(DrugInteractionOverview dio: drugPharmaInterectionListDetail)
					{
						System.out.println("drugInterectionListDetail::PHARMACOGENOMIC:::anti::::123:::"+dio.getSeverityLevel());
						setHighestServityForpharmacogenomic(dio.getSeverityLevel());
						System.out.println("drugInterectionListDetail::PHARMACOGENOMIC::456::anti:::123:::"+dio.getSeverityLevelToolTip());
					}
				}

			}

			
			//patientMedicationData= (PatientMedicationData) getViewRxDataTable().getRowData();
			System.out.println(":::::getDrugName::"+patientMedicationData.getDrugs());
			patientMedicationData.setAlterNateDrugs(patientMedicationData.getDrugs());
			changePatientMedicineBackUpdata=new PatientMedicationData();

			changePatientMedicineBackUpdata.setId(patientMedicationData.getId());
			changePatientMedicineBackUpdata.setDrugs(patientMedicationData.getDrugs());
			changePatientMedicineBackUpdata.setStrengths(patientMedicationData.getStrengths());
			changePatientMedicineBackUpdata.setQuantity(patientMedicationData.getQuantity());
			changePatientMedicineBackUpdata.setDirections(patientMedicationData.getDirections());
			changePatientMedicineBackUpdata.setDrugId(patientMedicationData.getDrugId());
			changePatientMedicineBackUpdata.setDrugNameId(patientMedicationData.getDrugNameId());

			changePatientMedicineBackUpdata.setUnit(patientMedicationData.getUnit());
			changePatientMedicineBackUpdata.setDosageForm(patientMedicationData.getDosageForm());
			changePatientMedicineBackUpdata.setByRoute(patientMedicationData.getByRoute());
			changePatientMedicineBackUpdata.setReffils(patientMedicationData.getReffils());
			changePatientMedicineBackUpdata.setDaySupply(patientMedicationData.getDaySupply());

			changePatientMedicineBackUpdata.setPatientId(patientMedicationData.getPatientId());
			changePatientMedicineBackUpdata.setProviderId(patientMedicationData.getProviderId());
			changePatientMedicineBackUpdata.setReffils(patientMedicationData.getReffils());
			changePatientMedicineBackUpdata.setStartDate(patientMedicationData.getStartDate());
			changePatientMedicineBackUpdata.setPrescriberName(patientMedicationData.getPrescriberName());
			changePatientMedicineBackUpdata.setDoctorId(patientMedicationData.getDoctorId());
			changePatientMedicineBackUpdata.setDataProvider(patientMedicationData.getDataProvider());
			changePatientMedicineBackUpdata.setNotes(patientMedicationData.getNotes());
			changePatientMedicineBackUpdata.setPrescriptionGuid(patientMedicationData.getPrescriptionGuid());
			changePatientMedicineBackUpdata.setPrescriptionStatus(patientMedicationData.getPrescriptionStatus());
			changePatientMedicineBackUpdata.setPrescriptionSubStatus(patientMedicationData.getPrescriptionSubStatus());
			changePatientMedicineBackUpdata.setFlagForVisit(patientMedicationData.isFlagForVisit());
			changePatientMedicineBackUpdata.setGenericName(patientMedicationData.getGenericName());

			System.out.println("::::::::::::::::::::changePatientMedicineBackUpdata:::"+changePatientMedicineBackUpdata.getDrugs()+"::::"+patientMedicationData.getDrugs());
			alternativeMedicine=new ArrayList<String>();
			String	drugConcept=Double.toString(patientMedicationData.getDrugId());
			String healtPlan=Integer.toString(new ContextUtil().getInsuranceId());
			String patientId=Integer.toString(new ContextUtil().getPatientId());
			FacesContext context = FacesContext	.getCurrentInstance();
			UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");
			try {
				optimizeDPList=formulary2WSBean.convertFormularyCompositeUsingDomParser(patientId, patientMedicationData.getDrugs(),drugConcept, userManageBean.getProviderLocation(), userManageBean.getRoleSecurity());
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}                                                                                                                                                                                     // now get value by Formulary Composite API 
			for(FormularyDetail formuDetail:optimizeDPList){
				String alterMedicine=formuDetail.getAlternateMedicine();
				alternativeMedicine.add(alterMedicine);
			}

			doseDetailList=patientMedicineService.findDoseListOfParticularMeds(patientMedicationData.getDrugNameId(),patientMedicationData.getDosageForm());

		}
		public PatientMedicationData getClinicViewPatientMedicationData() {
			if(clinicViewPatientMedicationData==null){
				clinicViewPatientMedicationData=new PatientMedicationData();
			}
			return clinicViewPatientMedicationData;
		}
		public void setClinicViewPatientMedicationData(
				PatientMedicationData clinicViewPatientMedicationData) {
			this.clinicViewPatientMedicationData = clinicViewPatientMedicationData;
		}
		
		public void sendToClinic()
		{
			logger.info("sendTo clinic  method start:::"+patientMedicationData.getDrugs()+patientMedicationData.getDrugId());

			patientMedicationData.setDrugId(0.0);
			patientMedicationData.setUnit("");
			patientMedicationData.setDaySupply("");

			patientMedicationData.setPatientId(new ContextUtil().getPatientId());
			patientMedicationData.setProviderId(new ContextUtil().getProviderId());
			patientMedicationData.setFlagForVisit(true);
			patientMedicationData.setPrescriptionStatus(PRESCRIPITION_STATUS_PENDING);
			System.out.println("add med without action plan:::for:::"+patientMedicationData.getDrugs()+"123:::::");

			patientMedicationData.setPrescriberName(new ContextUtil().getLoggerFirstName()+" "+new ContextUtil().getLoggedUserMiddleName()+" "+new ContextUtil().getLoggerLastName());
			patientMedicationData.setDoctorId(new ContextUtil().getLoginId());
			
			patientMedicationData.setCauseOfAddMeds(NEW_ADDED_MEDS);
			patientMedicationData.setChangeMedId(1);
			patientMedicationData.setModifyDate(new DateUtil().getTodayDate());

			patientMedicineService.saveMedicineDetail(patientMedicationData);

			patientMedicationDataList=null;
			patientMedicationData=new PatientMedicationData();
			currentPsychopharmMeds=null;
		
			makeFilterPageRefreshData();
			RequestContext context=RequestContext.getCurrentInstance();
			logger.info("view name "+viewName);
			context.addCallbackParam("pageName", getViewName());

		}
	
		public List<PatientMedicationData> getMedicineListGetDataBeforeEprescribe() {
		
			return medicineListGetDataBeforeEprescribe;
		}
		public void setMedicineListGetDataBeforeEprescribe(
				List<PatientMedicationData> medicineListGetDataBeforeEprescribe) {
			this.medicineListGetDataBeforeEprescribe = medicineListGetDataBeforeEprescribe;
		}

		
		
		public String returnParticularView()
		{
			HttpServletRequest req = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
			String url = req.getRequestURL().toString();
			logger.info("URL of current request "+url);
			String returnValue="";
			if(url.endsWith("anticoag.jsf"))
				returnValue="anticoag";
			if(url.endsWith("personalizedMedReview.jsf"))
				returnValue="personalizedMedReview";
			if(url.endsWith("overViewFilter.jsf"))
				returnValue="overViewFilter";
			if(url.endsWith("psychopharm.jsf"))
				returnValue="psychopharm";
			if(url.endsWith("hepatitisC.jsf"))
				returnValue="hepatitisC";
			return returnValue;
		}

		private String viewName;
		private int calculateDaysForPsychopharm;
		private Double psychopharmLabResult;
		private Date psychopharmLabDate;
		private ModelMessage psychopharmMessageObj;
		private Map<String,String>psychopharmConfirmList;
		private List<GenericMedActionPlan>psychopharmLabParameters;
		private Map<String,String>drugScreeningOptions;
		private Integer patientAge;
		
		public String getViewName() {
			return viewName;
		}
		public void setViewName(String viewName) {
			this.viewName = viewName;
		}
		
		
		public Date getPsychopharmLabDate() {
			return psychopharmLabDate;
		}
		public void setPsychopharmLabDate(Date psychopharmLabDate) {
			this.psychopharmLabDate = psychopharmLabDate;
		}
		public int getCalculateDaysForPsychopharm() {
			return calculateDaysForPsychopharm;
		}
		public void setCalculateDaysForPsychopharm(int calculateDaysForPsychopharm) {
			this.calculateDaysForPsychopharm = calculateDaysForPsychopharm;
		}
		
		public Double getPsychopharmLabResult() {
			return psychopharmLabResult;
		}
		public void setPsychopharmLabResult(Double psychopharmLabResult) {
			this.psychopharmLabResult = psychopharmLabResult;
		}
		
		
		
		public ModelMessage getPsychopharmMessageObj() {
			return psychopharmMessageObj;
		}
		public void setPsychopharmMessageObj(ModelMessage psychopharmMessageObj) {
			this.psychopharmMessageObj = psychopharmMessageObj;
		}
		public void takePsychopharmClinicAction(){
			logger.info("Take action in psychopharm clinic page ");
			
		/*	genericMedActionPlan=new GenericMedActionPlan();
			genericMedActionPlan=(GenericMedActionPlan) getPsychopharmMedPlanDatatable().getRowData();*/
			
			parentMedActionPlan=new ParentMedActionPlan();
			parentMedActionPlan=(ParentMedActionPlan) getPsychopharmMedPlanDatatable().getRowData();
			String drugName=parentMedActionPlan.getDrugName();
			logger.info("Making first letter capital "+StringUtils.capitalize(drugName)+"==>capitalize");
			parentMedActionPlan.setDrugName(StringUtils.capitalize(drugName));
			logger.info("selected Generic Med Plan obj "+parentMedActionPlan.toString());
			calculateDaysForPsychopharm=0;
			calculateDaysForPsychopharm=new DateUtil().findNumberOfDays(parentMedActionPlan.getDosingStartDate(),new Date());
			logger.info("No. of days for Psychopharm after calculating from {Dosing start date}"+calculateDaysForPsychopharm);
			calculateDaysForPsychopharm++;
			boolean checkLabExists=checkLatestLabValue(parentMedActionPlan);
			psychopharmModelDataObj=new PsychopharmModelData();
			psychopharmModelDataObj.setDosing_step_1_disabled(false);
			psychopharmModelDataObj.setDosing_step_2_disabled(true);
			psychopharmModelDataObj.setDosing_step_3_disabled(true);
			psychopharmModelDataObj.setDosing_step_4_disabled(true);
			psychopharmModelDataObj.setActiveIndexDefault("0");
			RequestContext context=RequestContext.getCurrentInstance();
			context.addCallbackParam("showMsgForLabResult", checkLabExists);
		}
		private boolean checkLatestLabValue(
				ParentMedActionPlan genericMedActionPlanObj) {
		ProcedureResultHistory procedureResultHistory = new ProcedureResultHistory();
		List<String> psychopharmLabParamters = patientMedicineService
				.getPsychopharmDefaultLabs(LITHIUM_MED_NAME);
		
		ChildMedActionPlanParameter cMAPobj=patientMedicineService.getChildMedPlanObj(psychopharmLabParamters,genericMedActionPlanObj);
		parentMedActionPlan.setGoalRangeValue(cMAPobj.getGoalLowRangeValue());
		parentMedActionPlan.setGoalRangeEndValue(cMAPobj.getGoalHighRangeValue());
		
		
		if (psychopharmLabParamters.contains(cMAPobj.getLabParameterObj().getLabType())) {
			procedureResultHistory = patientMedicineService.getLatestLabValue(
					new ContextUtil().getPatientId(),
					new ContextUtil().getProviderId(),
					new ContextUtil().getLoginId(),
					cMAPobj.getLabParameterObj().getLabType());
			setPsychopharmLabResult(procedureResultHistory.getResult());
			setPsychopharmLabDate(procedureResultHistory.getDateResult());
		} else {
			procedureResultHistory = null;
		}
		boolean showMsgForLabResult = false;
		logger.info("::::::getLastUpdateDate:::"
				+ medActionPlan.getLastUpdateDate() + ":::::::getDateResult::"
				+ procedureResultHistory.getDateResult());
		if (procedureResultHistory.getDateResult() != null) {

			if (genericMedActionPlanObj.getDosingStartDate().after(
					procedureResultHistory.getDateResult())) {
				logger.info("inside if condition:::::::::");
				showMsgForLabResult = true;
			} else {
				logger.info("inside else condition><><><><><");
			}
		} else {
			showMsgForLabResult = true;
		}

		return showMsgForLabResult;
		}
		/********Below are the steps for Take Action in psychopharm clinic********/
		public void psychopharmTakeActionStep1(ActionEvent event){
			logger.info("Psychopharm  Action step 1 ");
			logger.info("Lithium lab result value "+psychopharmLabResult);
			FacesContext context = FacesContext.getCurrentInstance();

			DashBoardManageBean dashBoardManageBean = (DashBoardManageBean) context.getApplication()
					.getELResolver()
					.getValue(context.getELContext(), null, "dashBoardManageBean");
			Double creatnineClearnceValue=dashBoardManageBean.getCalculateCrCl();
			if(creatnineClearnceValue==null){
				creatnineClearnceValue=0.0;
			}
			//Take Lithium lab value and CrCl value for asking questions
			psychopharmQuestions=patientMedicineService.getPyschoPharmQuestionsBasedOnLithiumLevel(psychopharmLabResult,creatnineClearnceValue);
			psychopharm_next_button_active_wizard(psychopharmModelDataObj);
		}
		public void psychopharmTakeActionStep2(ActionEvent event){
			logger.info("Psychopharm  Action step 2 ");
			FacesContext context = FacesContext.getCurrentInstance();
			DashBoardManageBean dashBoardManageBean = (DashBoardManageBean) context.getApplication()
					.getELResolver()
					.getValue(context.getELContext(), null, "dashBoardManageBean");
			Double creatnineClearnceValue=dashBoardManageBean.getCalculateCrCl();
			if(creatnineClearnceValue==null){
				creatnineClearnceValue=0.0;
			}
			//Second step doesnt give any questions
			if(psychopharmQuestions.size()>0){
			psychopharmMessageObj=patientMedicineService.psychopharmRecomendationsBasedOnAnswer(psychopharmQuestions,psychopharmLabResult,creatnineClearnceValue);
			}else{
				psychopharmMessageObj=patientMedicineService.psychopharmRecomendations(psychopharmLabResult);
			}
			psychopharm_next_button_active_wizard(psychopharmModelDataObj);
		}
		public void psychopharmTakeActionStep3(ActionEvent event){
			logger.info("Psychopharm  Action step 3 ");
			/*psychopharmLabParameters=patientMedicineService.getPsychopharmLabParameters(genericMedActionPlan);*/
			//By default it will 1 Days for calculation
			calculateNextLab(1,"Days");
			psychopharm_next_button_active_wizard(psychopharmModelDataObj);
		}
		
		public void calculateNextLab(int numberOfDays,String frequencyUnit){
	/*	for(GenericMedActionPlan genericMedActionPlanObj:psychopharmLabParameters){
			int noOFdays=findNoOfdays(numberOfDays+" "+frequencyUnit);
			genericMedActionPlanObj.setNextLabDate(new DateUtil().AddDate(new DateUtil().getTodayDate(), noOFdays));
		}*/
			for(ChildMedActionPlanParameter childMedActionPlanParameterObj:parentMedActionPlan.getChildLabParameters()){
				int noOFdays=findNoOfdays(numberOfDays+" "+frequencyUnit);
				childMedActionPlanParameterObj.setNextLabDate(new DateUtil().AddDate(new DateUtil().getTodayDate(), noOFdays));
			}
		}
		public void psychopharmTakeActionStep4(ActionEvent event){
			logger.info("Psychopharm  Action step 4 ");
			patientMedicineService.updateGenericMedActionPlan(genericMedActionPlan);
		}

		public Map<String, String> getPsychopharmConfirmList() {
			if(psychopharmConfirmList==null){
			psychopharmConfirmList=parsePropertyEntryDropdown(PSYCHOPHARM_ACTION_CONFIRMATION_DAYS);
			}
			return psychopharmConfirmList;
		}
		public void setPsychopharmConfirmList(Map<String, String> psychopharmConfirmList) {
			this.psychopharmConfirmList = psychopharmConfirmList;
		}
		public List<GenericMedActionPlan> getPsychopharmLabParameters() {
			return psychopharmLabParameters;
		}
		public void setPsychopharmLabParameters(
				List<GenericMedActionPlan> psychopharmLabParameters) {
			this.psychopharmLabParameters = psychopharmLabParameters;
		}
		

		/**
		 * Get current Hepatits C Med List
		 * @return the currentHepatitsCMedList
		 */
		public List<PatientMedicationData> getCurrentHepatitsCMedList() {
			if(currentHepatitsCMedList==null){
				currentHepatitsCMedList=new ArrayList<PatientMedicationData>();
				
			}
			currentHepatitsCMedList=patientMedicineService.getCurrentHepatitsCMedData(new ContextUtil().getPatientId(),HEPATITIS_C_CLINIC_NAME);
			return currentHepatitsCMedList;
		}
		
		/**
		 * @param currentHepatitsCMedList the currentHepatitsCMedList to set
		 */
		public void setCurrentHepatitsCMedList(
				List<PatientMedicationData> currentHepatitsCMedList) {
			this.currentHepatitsCMedList = currentHepatitsCMedList;
		}
		/**
		 * @return the hepCMedPlanDataTable
		 */
		public DataTable getHepCMedPlanDataTable() {
			if(hepCMedPlanDataTable == null){
				hepCMedPlanDataTable=new DataTable();
			}
			return hepCMedPlanDataTable;
		}
		/**
		 * @param hepCMedPlanDataTable the hepCMedPlanDataTable to set
		 */
		public void setHepCMedPlanDataTable(DataTable hepCMedPlanDataTable) {
			this.hepCMedPlanDataTable = hepCMedPlanDataTable;
		}
		
		/**
		 * Edit Hep C Genral Med Action Plan 
		 * 
		 */
		public void editHepCMedActionPlan(){
		
			parentMedActionPlan=new ParentMedActionPlan();
			parentMedActionPlan=(ParentMedActionPlan) getHepCMedPlanDataTable().getRowData();
		}
		
		
		

		public void findNextlabDateforTakeActionPsychopharm()
		{
		
		/*	for(GenericMedActionPlan genericMedActionPlanObj:psychopharmLabParameters){
				int noOFdays=findNoOfdays(genericMedActionPlanObj.getFrequencyNo()+" "+genericMedActionPlanObj.getFrequencyValue());
				genericMedActionPlanObj.setNextLabDate(new DateUtil().AddDate(new DateUtil().getTodayDate(), noOFdays));
			}*/
			for(ChildMedActionPlanParameter childMedActionPlanParameterObj:parentMedActionPlan.getChildLabParameters()){
				int noOFdays=findNoOfdays(childMedActionPlanParameterObj.getFrequencyNumber()+" "+childMedActionPlanParameterObj.getFrequencyUnit());
				childMedActionPlanParameterObj.setNextLabDate(new DateUtil().AddDate(new DateUtil().getTodayDate(), noOFdays));
			}
			
		}

		public Map<String, String> getDrugScreeningOptions() {
			if(drugScreeningOptions==null){
				drugScreeningOptions=parsePropertyEntryDropdown(DRUG_SCREENING_OPTIONS);
			}
			return drugScreeningOptions;
		}
		public void setDrugScreeningOptions(Map<String, String> drugScreeningOptions) {
			this.drugScreeningOptions = drugScreeningOptions;
		}

		public Integer getPatientAge() {
			if(patientAge==null){
				int patientId=new ContextUtil().getPatientId();
				 FacesContext context = FacesContext.getCurrentInstance();
				DashBoardManageBean dashBoardManageBean=(DashBoardManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"dashBoardManageBean");
				Date patientBirthDate=dashBoardManageBean.getUserLoginDetail().getDateOfBirth();
				if(patientBirthDate!=null){
				 Years years = Years.yearsBetween(new LocalDate(patientBirthDate), new LocalDate());
				 patientAge=years.getYears();
				}
				logger.info("Patient Age "+patientAge);
			}
			return patientAge;
		}
		public void setPatientAge(Integer patientAge) {
			this.patientAge = patientAge;
		}
		public List<GenericMedActionPlan> getHepatitisCSvrParameters() {
			return hepatitisCSvrParameters;
		}
		public void setHepatitisCSvrParameters(
				List<GenericMedActionPlan> hepatitisCSvrParameters) {
			this.hepatitisCSvrParameters = hepatitisCSvrParameters;
		}
		public List<GenericMedActionPlan> getHepatitisCHgbParameters() {
			return hepatitisCHgbParameters;
		}
		public void setHepatitisCHgbParameters(
				List<GenericMedActionPlan> hepatitisCHgbParameters) {
			this.hepatitisCHgbParameters = hepatitisCHgbParameters;
		}
		public List<GenericMedActionPlan> getSelectedLabParamtersHgb() {
			return selectedLabParamtersHgb;
		}
		public void setSelectedLabParamtersHgb(
				List<GenericMedActionPlan> selectedLabParamtersHgb) {
			this.selectedLabParamtersHgb = selectedLabParamtersHgb;
		}
	

		public void refreshData(){
			/*logger.info("after saving med Doing Refreshing ");
			loadRefreshData();
			RequestContext context=RequestContext.getCurrentInstance();
			logger.info("view name "+getViewName());
			context.addCallbackParam("pageName", getViewName());*/
		}


	/**
	 * Remove Hep C Med action Plan Data 
	 * 
	 */
		public void removeHepCMedActionPlanData(ActionEvent actionEvent){
		/*	genericMedActionPlan=new GenericMedActionPlan();
			genericMedActionPlan=(GenericMedActionPlan) getHepCMedPlanDataTable().getRowData();*/
			parentMedActionPlan=new ParentMedActionPlan();
			parentMedActionPlan=(ParentMedActionPlan) getHepCMedPlanDataTable().getRowData();
			
		}
		

	/**
	 * @return the hepCAlertMedActionPlanList
	 */
	public List<AlertGenericMedActionLab> getHepCAlertMedActionPlanList() {
		
		if(hepCAlertMedActionPlanList==null){
			hepCAlertMedActionPlanList=new ArrayList<AlertGenericMedActionLab>();
			for(AlertGenericMedActionLab hepCMedActionPlanAlert: getAlertMedActionPlans()){
				for(String hepCMedName:getHepititsCClinicMedicineList()){
					 Pattern pattern=Pattern.compile(hepCMedName, Pattern.CASE_INSENSITIVE);
						Matcher matcher=pattern.matcher(hepCMedActionPlanAlert.getDrugName());
					  if(matcher.matches()){
						  hepCAlertMedActionPlanList.add(hepCMedActionPlanAlert);  
					  }
				}
				 
		}
			
		}
		return hepCAlertMedActionPlanList;
	}
	/**
	 * @param hepCAlertMedActionPlanList the hepCAlertMedActionPlanList to set
	 */
	public void setHepCAlertMedActionPlanList(
			List<AlertGenericMedActionLab> hepCAlertMedActionPlanList) {
		this.hepCAlertMedActionPlanList = hepCAlertMedActionPlanList;
	}
	/**
	 * @return the hepCChartLabMonitoringParameterList
	 */
	public List<GenericMedActionPlan> getHepCChartLabMonitoringParameterList() {
		if(hepCChartLabMonitoringParameterList==null){
			hepCChartLabMonitoringParameterList=new ArrayList<GenericMedActionPlan>();
		}
		hepCChartLabMonitoringParameterList=patientMedicineService.getHepCChartLabMonitoringParameterData(new ContextUtil().getPatientId(),HEPATITIS_C_CLINIC_NAME);
		return hepCChartLabMonitoringParameterList;
	}
	/**
	 * @param hepCChartLabMonitoringParameterList the hepCChartLabMonitoringParameterList to set
	 */
	public void setHepCChartLabMonitoringParameterList(
			List<GenericMedActionPlan> hepCChartLabMonitoringParameterList) {
		this.hepCChartLabMonitoringParameterList = hepCChartLabMonitoringParameterList;
	}
	/**
	 * @return the psychoPharmClinicMedicineList
	 */
	public List<String> getPsychoPharmClinicMedicineList() {
		if(psychoPharmClinicMedicineList==null){
			psychoPharmClinicMedicineList=new ArrayList<String>();
			psychoPharmClinicMedicineList=patientMedicineService.getAllPsychoPharmClinicMedicineList(PSYCHOPHARM_CLINIC_NAME);
		}
		
		return psychoPharmClinicMedicineList;
	}
	/**
	 * @param psychoPharmClinicMedicineList the psychoPharmClinicMedicineList to set
	 */
	public void setPsychoPharmClinicMedicineList(
			List<String> psychoPharmClinicMedicineList) {
		this.psychoPharmClinicMedicineList = psychoPharmClinicMedicineList;
	}
	/**
	 * @return the hepititsCClinicMedicineList
	 */
	public List<String> getHepititsCClinicMedicineList() {
		
		
		if(hepititsCClinicMedicineList==null){
			hepititsCClinicMedicineList=new ArrayList<String>();
		}
		hepititsCClinicMedicineList=patientMedicineService.getHepatitisCClinicMedicineList(HEPATITIS_C_CLINIC_NAME);
		return hepititsCClinicMedicineList;
	}
	/**
	 * @param hepititsCClinicMedicineList the hepititsCClinicMedicineList to set
	 */
	public void setHepititsCClinicMedicineList(
			List<String> hepititsCClinicMedicineList) {
		this.hepititsCClinicMedicineList = hepititsCClinicMedicineList;
	}
	

	/**
	 * reset med action alert for HEP C Clinic 
	 * 
	 */
	public void resetHepCAlertMedActiopnPlan(){
		hepCAlertMedActionPlanList=null;
	}
    /**
     * used in overViewFilter.jsf 
     * Get the List ACO Patient Data on Click of History Button and in data table based on Patient Id on overViewFilter.jsf page 
     * @return List Of ACO Patient Measure Data 
     */
	public List<ACOPatientMeasure> getPatientmesureHistory()
	 {	
       logger.info("ACOPatientMeasure in patint bean:::::");
	
		if(patientmesureHistory==null || patientmesureFalg)

		{
			patientmesureFalg = false ;
			patientmesureHistory=new ArrayList<ACOPatientMeasure>();
			List<ACOPatientMeasure> patientmesuretemp = null;
			int pat_id = new ContextUtil().getPatientId() ;
			
			patientmesureHistory = patientMedicineService.getACOPatientMeasureHistory(pat_id); // Get ACO Patient Measure History Data based on Patient Id  
			patientmesuretemp = patientMedicineService.getACOPatientMeasure(pat_id); // Get ACO Patient Measure  Data Based On Patient Id 
			 patientmesureHistory.addAll(patientmesuretemp); // Add Cuurent ACO Measure Data in Aco Measure History 
			 patientmesureHistory.removeAll(patientmesuretemp);
	 }
		 return patientmesureHistory;
		 
	 }
	public void setPatientmesureHistory(List<ACOPatientMeasure> patientmesureHistory) {
		this.patientmesureHistory = patientmesureHistory;
	}

	public void  findNextlabDatePsychopharm(){
		logger.info("inside listener findNextlabDatePsychopharm");
		for(ChildMedActionPlanParameter genericMedActionPlanObj:parentMedActionPlan.getChildLabParameters()){
		int noOFdays=findNoOfdays(genericMedActionPlanObj.getFrequencyNumber()+" "+genericMedActionPlanObj.getFrequencyUnit());
		genericMedActionPlanObj.setNextLabDate(new DateUtil().AddDate(new DateUtil().getTodayDate(), noOFdays));
	}	
	}
	
	public void  findNextlabDateHepatitisCSVR(){
		logger.info("inside listener findNextlabDate hepatitisCSVR");
		for(GenericMedActionPlan genericMedActionPlanObj:hepatitisCSvrParameters){
		int noOFdays=findNoOfdays(genericMedActionPlanObj.getFrequencyNo()+" "+genericMedActionPlanObj.getFrequencyUnit());
		genericMedActionPlanObj.setNextLabDate(new DateUtil().AddDate(new DateUtil().getTodayDate(), noOFdays));
	}	
	}
	public void  findNextlabDateHepatitisCHgb(){
		logger.info("inside listener findNextlabDate hepatitisCHgb");
		for(GenericMedActionPlan genericMedActionPlanObj:hepatitisCHgbParameters){
		int noOFdays=findNoOfdays(genericMedActionPlanObj.getFrequencyNo()+" "+genericMedActionPlanObj.getFrequencyUnit());
		genericMedActionPlanObj.setNextLabDate(new DateUtil().AddDate(new DateUtil().getTodayDate(), noOFdays));
	}	
	}
	
	public void calculateCrCl(ActionEvent event){
		logger.info("=======Psychopharm Calculate CrCl event fired========");
		try{
			int age=getPatientAge();
			String gender=getGenderOfPatient();
			FacesContext context = FacesContext.getCurrentInstance();
			DashBoardManageBean dashBoardManageBean=(DashBoardManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"dashBoardManageBean");
			PatientVital patientVital=new PatientVital();
			patientVital=dashBoardManageBean.getPatientVital();
			logger.info("Patient Vital Details:==> "+"\n"+" height "+patientVital.getHeight()+"\n"+" weight "+patientVital.getWeight());
			CalculateCreatimineClearance calculateCreatimineClearance = new CalculateCreatimineClearance();
			//Prepare Object for calculation
			UserLoginDetail userDetail=new UserLoginDetail();
			
			userDetail=dashBoardManageBean.getUserLoginDetail();
			calculateCreatimineClearance.setAge(userDetail.getAge());
			if(gender.equalsIgnoreCase("female")){
			calculateCreatimineClearance.setGender("f");
			}else if(gender.equalsIgnoreCase("male")){
				calculateCreatimineClearance.setGender("m");
			}
			
			String heightInFeet,heightInInch;
			int heightInDouble=0;
		//	double creatnineValue=0.0;
			String creatnineValue=new String();
			double CrClval=0.0;
			if(patientVital.getHeight()!=null)
				{
				heightInFeet=patientVital.getHeight().substring(0, patientVital.getHeight().indexOf("."));
				heightInInch=patientVital.getHeight().substring( patientVital.getHeight().indexOf(".")+1, patientVital.getHeight().length());
				//System.out.println("::heightInFeet:"+heightInFeet+"::::heightInInch:"+heightInInch);
				 heightInDouble=Integer.parseInt(heightInFeet)*12+Integer.parseInt(heightInInch);
				}
			calculateCreatimineClearance.setHeight(heightInDouble);
		//	calculateCreatimineClearance.setWeight(patientVital.getWeight());
			calculateCreatimineClearance.setWeight(patientVital.getWeightInKG());
			
			creatnineValue=patientMedicineService.getUI_CrVal(psychopharm_parameters);
			calculateCreatimineClearance.setSerumCreatinieValueInString(creatnineValue);
			calculateCreatimineClearance.setSerumCreatinieValue(Double.valueOf(creatnineValue));
			logger.info("calculateCreatimineClearance obj "+calculateCreatimineClearance.toString());
			CrClval=reCalculateCreatinineClearance(calculateCreatimineClearance);
			
			psychopharm_parameters=patientMedicineService.loadCalculatedCrClVal(CrClval,psychopharm_parameters);
			
			for (Map.Entry<String,PsychopharmMessage> entry : psychopharm_parameters) {
				
				logger.info("Key  "+entry.getKey());
				logger.info("parameter value "+entry.getValue().getParamter_value());
				}

			
		}catch(Exception e){
			logger.info("Error message while calculating CrCl "+e.getMessage());
			e.printStackTrace();
		}
		
	}
	
	/* For getting dosing start date from db and today's date for ticket # 806 by venu */
	Date dosingStartDateForOverview = null;
	
	public Date getDosingStartDateForOverview() {
		dosingStartDateForOverview = new Date();
		if(dosingStartDateForOverview == null)
		{
			dosingStartDateForOverview = new Date();
		}
		else
		{
			for(GenericMedActionPlan map : genericMedActionPlanList)
			{
				dosingStartDateForOverview = map.getDosingStartDate();
			}
		}
		
		return dosingStartDateForOverview;
	}
	public void setDosingStartDateForOverview(Date dosingStartDateForOverview) {
		this.dosingStartDateForOverview = dosingStartDateForOverview;
	}
	/**
	 * @return the labIntegrationValue
	 *//*
	public String getLabIntegrationValue() {
		
		
		
		ExternalContext ec = FacesContext.getCurrentInstance().getExternalContext();
	   
	    labIntegrationValue = ec.getRequestParameterMap().get("submitform:lab");
		HttpServletRequest req = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
		labIntegrationValue = req.getRequestURL().toString();
		System.out.println("labIntegrationValue"+labIntegrationValue);
		
		return labIntegrationValue;
		
	}
	*//**
	 * @param labIntegrationValue the labIntegrationValue to set
	 *//*
	public void setLabIntegrationValue(String labIntegrationValue) {
		this.labIntegrationValue = labIntegrationValue;
	}*/
	
	
	/**
	 * @return the labXmlFullSummary
	 * @throws IOException 
	 */
	public String getLabXmlFullSummary() throws IOException {
		
			
				
				 labXmlFullSummary="";
				getLoggedDoctorId();
				System.out.println(":::::::::::DoctorId:::::::"+loggedDoctorId);
				Properties properties = new Properties();
				try {
					properties.load(NcDrugDetailWSBean.class.getClassLoader().getResourceAsStream("/com/clinakos/properties/webservices.properties"));	
					//input = new FileInputStream("/com/clinakos/properties/webservices.properties");


					//properties.load(input);


					labXmlFullSummary = labXmlFullSummary+
							"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n"  +
							"<NCScript xmlns=\"http://secure.newcropaccounts.com/interfaceV7\" \n"+
							"\t xmlns:NCStandard=\"http://secure.newcropaccounts.com/interfaceV7:NCStandard\"\n "+
							"\t xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\n"+
							"<Credentials>\n"+
							"\t<partnerName>"+properties.getProperty("partnerName")+"</partnerName>\n"+
							"\t<name>"+properties.getProperty("name")+"</name>\n"+
							"\t<password>"+properties.getProperty("password")+"</password>\n"+
							"\t<productName>"+properties.getProperty("productName")+"</productName>\n"+
							"\t<productVersion>"+properties.getProperty("productVersion")+"</productVersion>\n"+
							"</Credentials>\n\n";

					//	//System.out.println("properties::::::::"+properties.getProperty("partnerName"));
					//System.out.println("properties:::1234:::::"+properties.getProperty("name"));

					//System.out.println("properties:::123456:::::"+labXmlFullSummary.length());

				} catch (Exception e) {
					// TODO: handle exception
					e.printStackTrace();
				}


				getExitLocationForLabIntegration();
				/*getLabIntegrationValue();*/
				FacesContext context = FacesContext	.getCurrentInstance();
				UserManageBean userManageBean=(UserManageBean)context.getApplication().getELResolver().getValue(context.getELContext(), null,"userManageBean");
				userManageBean.setLogedFirstName("");
				userManageBean.setLogedLastName("");
				
				
				
				/* Map<String,String> params =FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();
			               
				 labIntegrationValue = params.get("labIntegration");*/
				/* String value = FacesContext.getCurrentInstance().
							getExternalContext().getRequestParameterMap().get("labIntegration");*/
				/* System.out.println( "labIntegrationValue "+ labIntegrationValue);*/
		          
				/* String requestPage="compose";
				 if(labIntegrationValue.equals("labIntegrationData")){
					 requestPage="lab-orders";
				 }
				 else {
					 requestPage="compose";
				}
*/
				//System.out.println(":::::FirstName::::::::"+userManageBean.getLogedFirstName());
				//System.out.println("dddddddd::::"+userManageBean.getRoleSecurity().getRoleType());
				//System.out.println("dddddddd:1234:::"+userManageBean.getRoleSecurity().getNewCropRole());

				labXmlFullSummary = labXmlFullSummary+
						"<UserRole>\n" +
						"\t<user>"+userManageBean.getRoleSecurity().getRoleType()+"</user>\n"+
						"\t<role>"+userManageBean.getRoleSecurity().getNewCropRole()+"</role>\n"+
						"</UserRole>\n\n";	
				labXmlFullSummary = labXmlFullSummary+
						"<Destination>\n" +
						
							"\t<requestedPage>lab-orders</requestedPage>\n" +
						
						
							
						
						
						"\t<logoutPage>"+exitLocationForLabIntegration+"</logoutPage>\n" +
						"</Destination>\n\n";


				//System.out.println("userManageBean.providerLocation.accountId::::::"+userManageBean.getProviderLocation().getAccountId());
				//getProviderLocation();
				//ProviderLocation providerLocation =new ProviderLocation();

				//System.out.println("getProviderLocation::::::::"+userManageBean.getProviderLocation().getAccountId()+userManageBean.getProviderLocation().getCity());

				labXmlFullSummary = labXmlFullSummary+
						"<Account ID=\""+userManageBean.getProviderLocation().getAccountId()+"\">\n" +
						"\t<accountName>"+userManageBean.getProviderLocation().getLocation()+"</accountName>\n"+
						"\t<siteID>"+userManageBean.getProviderLocation().getSiteId()+"</siteID>\n"+
						"\t<AccountAddress>\n"+
						"\t\t<address1>"+userManageBean.getProviderLocation().getAddressLine1()+"</address1>\n"+
						"\t\t<address2>"+userManageBean.getProviderLocation().getAddressLine2()+"</address2>\n"+
						"\t\t<city>"+userManageBean.getProviderLocation().getCity()+"</city>\n"+
						"\t\t<state>"+userManageBean.getProviderLocation().getState()+"</state>\n"+
						"\t\t<zip>"+userManageBean.getProviderLocation().getZipCode()+"</zip>\n"+
						"\t\t<country>"+userManageBean.getProviderLocation().getCountry()+"</country>\n"+
						"\t</AccountAddress>\n"+
						"\t<accountPrimaryPhoneNumber>"+userManageBean.getProviderLocation().getPrimaryPhoneNumber()+"</accountPrimaryPhoneNumber>\n"+
						"\t<accountPrimaryFaxNumber>"+userManageBean.getProviderLocation().getFaxNumber()+"</accountPrimaryFaxNumber>\n"+
						"</Account>\n\n";


				labXmlFullSummary = labXmlFullSummary+
						"<Location ID=\""+userManageBean.getProviderLocation().getId()+"\">\n" +
						"\t<locationName>"+userManageBean.getProviderLocation().getLocation()+"</locationName>\n"+
						"\t<LocationAddress>\n"+
						"\t\t<address1>"+userManageBean.getProviderLocation().getAddressLine1()+"</address1>\n"+
						"\t\t<address2>"+userManageBean.getProviderLocation().getAddressLine2()+"</address2>\n"+
						"\t\t<city>"+userManageBean.getProviderLocation().getCity()+"</city>\n"+
						"\t\t<state>"+userManageBean.getProviderLocation().getState()+"</state>\n"+
						"\t\t<zip>"+userManageBean.getProviderLocation().getZipCode()+"</zip>\n"+
						"\t\t<country>"+userManageBean.getProviderLocation().getCountry()+"</country>\n"+
						"\t</LocationAddress>\n"+
						"\t<primaryPhoneNumber>"+userManageBean.getProviderLocation().getPrimaryPhoneNumber()+"</primaryPhoneNumber>\n"+
						"\t<primaryFaxNumber>"+userManageBean.getProviderLocation().getFaxNumber()+"</primaryFaxNumber>\n"+
						"\t<pharmacyContactNumber>"+userManageBean.getProviderLocation().getPrimaryContactNumber()+"</pharmacyContactNumber>\n"+
						"</Location>\n\n";


				if(userManageBean.getRoleSecurity().getRoleType().equalsIgnoreCase("LicensedPrescriber"))
				{
					labXmlFullSummary=labXmlFullSummary+
							"<LicensedPrescriber ID=\""+loggedDoctorId+"\">\n" +
							"\t<LicensedPrescriberName>\n"+
							"\t\t<last>"+userManageBean.getLogedLastName().trim()+"</last>\n"+
							"\t\t<first>"+userManageBean.getLogedFirstName().trim()+"</first>\n"+
							"\t\t<middle>"+userManageBean.getLogeMiddleName()+"</middle>\n"+
							"\t</LicensedPrescriberName>\n"+
							"\t<dea>"+userManageBean.getDoctorDetailData().getDea()+"</dea>\n"+
							"\t<upin>"+userManageBean.getDoctorDetailData().getUpin()+"</upin>\n"+
							"\t<licenseState>"+userManageBean.getDoctorDetailData().getDocLicenseState()+"</licenseState>\n"+
							"\t<licenseNumber>"+userManageBean.getDoctorDetailData().getDocLicenseNumber()+"</licenseNumber>\n"+
							"\t<npi>"+userManageBean.getDoctorDetailData().getNpi().trim()+"</npi>\n"+
							"</LicensedPrescriber>\n\n";

				}

				else if(userManageBean.getRoleSecurity().getRoleType().equalsIgnoreCase("Staff"))
				{
					labXmlFullSummary=labXmlFullSummary+
							"<Staff  ID=\""+loggedDoctorId+"\">\n"+
							"\t<StaffName>\n"+
							"\t\t<last>"+userManageBean.getLogedLastName().trim()+"</last>\n"+
							"\t\t<first>"+userManageBean.getLogedFirstName().trim()+"</first>\n"+
							"\t\t<middle>"+userManageBean.getLogeMiddleName()+"</middle>\n"+
							"\t\t<prefix>Mr.</prefix>\n"+
							"\t\t<suffix>Jr</suffix>\n"+
							"\t</StaffName>\n"+
							"<\tlicense>"+userManageBean.getDoctorDetailData().getDocLicenseNumber()+"</license>\n"+
							"</Staff>\n\n";

				}

				else if(userManageBean.getRoleSecurity().getRoleType().equalsIgnoreCase("MidlevelPrescriber"))
				{
					labXmlFullSummary=labXmlFullSummary+
							"<MidlevelPrescriber ID=\""+loggedDoctorId+"\">\n"+
							"\t<LicensedPrescriberName>\n"+
							"\t\t<last>"+userManageBean.getLogedLastName().trim()+"</last>\n"+
							"\t\t<first>"+userManageBean.getLogedFirstName().trim()+"</first>\n"+
							"\t\t<middle>"+userManageBean.getLogeMiddleName()+"</middle>\n"+
							"\t</LicensedPrescriberName>\n"+
							"\t<dea>"+userManageBean.getDoctorDetailData().getDea()+"</dea>\n"+
							"\t<upin>"+userManageBean.getDoctorDetailData().getUpin()+"</upin>\n"+
							"\t<licenseState>"+userManageBean.getDoctorDetailData().getDocLicenseState()+"</licenseState>\n"+
							"\t<licenseNumber>"+userManageBean.getDoctorDetailData().getDocLicenseNumber()+"</licenseNumber>\n"+
							"</MidlevelPrescriber>\n\n";



				}

				else if(userManageBean.getRoleSecurity().getRoleType().equalsIgnoreCase("supervisingDoctor"))
				{
					labXmlFullSummary=labXmlFullSummary+
							"<SupervisingDoctor ID=\""+loggedDoctorId+"\">\n"+
							"\t<LicensedPrescriberName>\n"+
							"\t\t<last>"+userManageBean.getLogedLastName().trim()+"</last>\n"+
							"\t\t<first>"+userManageBean.getLogedFirstName().trim()+"</first>\n"+
							"\t\t<middle>"+userManageBean.getLogeMiddleName().trim()+"</middle>\n"+
							"\t</LicensedPrescriberName>"+
							"\t<dea>"+userManageBean.getDoctorDetailData().getDea()+"</dea>\n"+
							"\t<upin>"+userManageBean.getDoctorDetailData().getUpin()+"</upin>\n"+
							"\t<licenseState>"+userManageBean.getDoctorDetailData().getDocLicenseState()+"</licenseState>\n"+
							"\t<licenseNumber>"+userManageBean.getDoctorDetailData().getDocLicenseNumber()+"</licenseNumber>\n"+
							"</SupervisingDoctor>\n";
				}


				getSearchPatientId();
				FacesContext context2 = FacesContext	.getCurrentInstance();
				DashBoardManageBean dashBoardManageBean= (DashBoardManageBean) context2.getApplication().getELResolver().getValue(context2.getELContext(), null, "dashBoardManageBean");

				System.out.println("ajaysearchPatientId:::::::"+getSearchPatientId());
				System.out.println("ranasearchPatientId:::::::"+dashBoardManageBean.getUserLoginDetail().getLastName());

				labXmlFullSummary=labXmlFullSummary+
						"<Patient  ID=\""+searchPatientId+"\">\n" +
						"\t<PatientName>\n"+
						"\t\t<last>"+dashBoardManageBean.getUserLoginDetail().getLastName().trim()+"</last>\n"+
						"\t\t<first>"+dashBoardManageBean.getUserLoginDetail().getFirstName().trim()+"</first>\n"+
						"\t\t<middle>"+dashBoardManageBean.getUserLoginDetail().getMiddleName()+"</middle>\n"+
						"\t</PatientName>\n"+
						"\t<medicalRecordNumber>"+searchPatientId+"</medicalRecordNumber>\n"+
						"\t<memo></memo>\n"+
						"\t<PatientAddress>\n"+
						"\t\t<address1>"+dashBoardManageBean.getUserLoginDetail().getDoorNo()+"</address1>\n"+
						"\t\t<address2>"+dashBoardManageBean.getUserLoginDetail().getStreet()+"</address2>\n"+
						"\t\t<city>"+dashBoardManageBean.getUserLoginDetail().getCity()+"</city>\n"+
						"\t\t<state>"+dashBoardManageBean.getUserLoginDetail().getState()+"</state>\n"+
						"\t\t<zip>"+dashBoardManageBean.getUserLoginDetail().getPincode()+"</zip>\n"+
						"\t\t<country>"+dashBoardManageBean.getUserLoginDetail().getCountry()+"</country>\n"+
						"\t</PatientAddress>\n"+
						"\t<PatientContact>\n"+
						"\t\t<homeTelephone>"+dashBoardManageBean.getUserLoginDetail().getPhoneNumber()+"</homeTelephone>\n"+
						"\t</PatientContact>\n";

				String genderDetails="";					 

				if(dashBoardManageBean.getUserLoginDetail().getGender().equalsIgnoreCase("Male"))
				{
					genderDetails ="M";
				}
				else
				{
					genderDetails="F";
				}

				String dateDetails =new SimpleDateFormat("yyyyMMdd").format(dashBoardManageBean.getUserLoginDetail().getDateOfBirth());

				System.out.println("date formate ::::::"+dateDetails);

				labXmlFullSummary=labXmlFullSummary+
						"\t<PatientCharacteristics>\n"+
						"\t\t<dob>"+dateDetails+"</dob>\n"+
						"\t\t<gender>"+genderDetails+"</gender>\n"+
						"\t</PatientCharacteristics>\n";
				// Added for Lab Integration 
				/*String labIntegrationValue=new String();
				 Map<String,String> params =FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();
			               
				 labIntegrationValue = params.get("labIntegration");
				 System.out.println( "labIntegrationValue "+ labIntegrationValue);
				 if(!(labIntegrationValue==null)){
					 
				 
				if(labIntegrationValue.equals("labIntegrationData")){*/
				//try{
				getPatientGuarantorList();
				if(patientGuarantorList.size()!=0){
					
					for(PatientGuarantor pg : patientGuarantorList)
					{
						String dateForGuarantor="";
					DateFormat formatter =new SimpleDateFormat("yyyyMMdd");
					if(pg.getGuarantorDOB()!=null){
						dateForGuarantor=formatter.format(pg.getGuarantorDOB());
					}
					String guarantorGenderLocal="";
					if(pg.getGuarantorGender().equalsIgnoreCase("Male")){
						guarantorGenderLocal="M";
					}
					else if(pg.getGuarantorGender().equalsIgnoreCase("Female")){
						guarantorGenderLocal="F";
					}
					else{
						guarantorGenderLocal="U";
					}
						labXmlFullSummary=labXmlFullSummary+
								"<PatientGuarantor ID=\""+pg.getGuarantorID()+"\">\n"+ //<!--Assign a unique ID for each PatientGuarantor-->
							      "<GuarantorName>\n"+				        "<last>"+pg.getGuarantorLastName()+"</last>\n"+
							        "<first>"+pg.getGuarantorFirstName()+"</first>\n"+
							        "<middle>"+pg.getGuarantorMiddleName()+"</middle>\n"+
							      "</GuarantorName>\n"+
							      "<guarantorDob>"+dateForGuarantor+"</guarantorDob>\n"+
							      "<guarantorGender>"+guarantorGenderLocal+"</guarantorGender>\n"+
							      "<GuarantorAddress>\n"+
							        "<address1>"+pg.getGuarantorAddress1()+"</address1>\n"+
							        "<address2>"+pg.getGuarantorAddress2()+"</address2>\n"+
							        "<city>"+pg.getGuarantorCity()+"</city>\n"+
							        "<state>"+pg.getGuarantorState()+"</state>\n"+
							        "<zip>"+pg.getGuarantorZip()+"</zip>\n"+
							        "<zip4>"+pg.getGuarantorZip4()+"</zip4>\n"+
							        "<country>"+pg.getGuarantorCountry()+"</country>\n"+
							      "</GuarantorAddress>\n"+
							      "<GuarantorContact>\n"+
							        "<homeTelephone>"+pg.getGuarantorHomeTelephone()+"</homeTelephone>\n"+
							        "<workTelephone>"+pg.getGuarantorWorkTelephone()+"</workTelephone>\n"+
							      "</GuarantorContact>\n"+
							      "<guarantorRelationship>"+pg.getGuarantorRelationship()+"</guarantorRelationship>\n"+ // <!--Self, Spouse, Child, Employer, Unknown-->
							    "</PatientGuarantor>\n";
					}
					
				}
				
				getPatientInsuranceList();
				if(patientInsuranceList.size()!=0){
					for(UserInsuranceDetails uid : patientInsuranceList)
					{
						String insuredDOB="";
						String insuredGenderLocal="";
						if(uid.getInsuredGender()!=null){
							if(uid.getInsuredGender().equals("Male")){
								insuredGenderLocal="M";
							}
							else if(uid.getInsuredGender().equals("Female")){
								insuredGenderLocal="F";
							}
							else{
								insuredGenderLocal="U";
							}
						}
						
						
						if(uid.getInsuredDOB() != null){
						insuredDOB=new SimpleDateFormat("yyyyMMdd").format(uid.getInsuredDOB());
						}
						System.out.println("priority code******** "+uid.getPriorityCode());
						String priorityCode="";
						if(uid.getPriorityCode()!=null){
							priorityCode=uid.getPriorityCode();
						}
							
						if(priorityCode.equals("Primary")){
							System.out.println("inside primary");
					labXmlFullSummary=labXmlFullSummary+
							    "<PatientPayorAndInsured ID=\""+uid.getPayorAndInsuredID()+"\">\n"+ //<!--ID is the HSI number-->
							     "<payor>\n"+
							        "<payorName>"+uid.getPayorName()+"</payorName>\n"+
							        "<PayorAddress>\n"+
							          "<address1>"+uid.getPayorAddress1()+"</address1>\n"+
							          "<address2>"+uid.getPayorAddress2()+"</address2>\n"+
							          "<city>"+uid.getPayorCity()+"</city>\n"+
							          "<state>"+uid.getPayorState()+"</state>\n"+
							          "<zip>"+uid.getPayorZip()+"</zip>\n"+
							          "<zip4>"+uid.getPayorZip4()+"</zip4>\n"+
							          "<country>"+uid.getPayorCountry()+"</country>\n"+
							        "</PayorAddress>\n"+
							        "<insuranceServiceProvider>"+uid.getInsuranceServiceProvider()+"</insuranceServiceProvider>\n"+ // <!--Medicare, Medicaid, BCBS, Other-->
							       " <payorGroupNumber>"+uid.getPayorGroupNumber()+"</payorGroupNumber>\n"+
							      "</payor>\n"+
							      "<insured>\n"+
							        "<patientRelationship>"+uid.getPatientRelationship()+"</patientRelationship>\n"+
							        "<priorityCode>"+uid.getPriorityCode()+"</priorityCode>\n"+ // <!--Primary, Secondary, Tertirary-->
							        "<policyNumber>"+uid.getPolicyNumber()+"</policyNumber>\n"+
							        "<groupNumber>"+uid.getGroupNumber()+"</groupNumber>\n"+
							        "<InsuredName>\n"+
							         "<last>"+uid.getInsuredLastName()+"</last>\n"+
							          "<first>"+uid.getInsuredFirstName()+"</first>\n"+
							          "<middle>"+uid.getInsuredMiddleName()+"</middle>\n"+
							        "</InsuredName>\n"+
							       "<InsuredAddress>\n"+
							         "<address1>"+uid.getInsuredAddress1()+"</address1>\n"+
							          "<address2>"+uid.getInsuredAddress2()+"</address2>\n"+
							          "<city>"+uid.getInsuredCity()+"</city>\n"+
							          "<state>"+uid.getInsuredState()+"</state>\n"+
							          "<zip>"+uid.getInsuredZip()+"</zip>\n"+
							          "<zip4>"+uid.getInsuredZip4()+"</zip4>\n"+
							          "<country>"+uid.getInsuredCountry()+"</country>\n"+
							        "</InsuredAddress>\n"+
							        "<insuredDob>"+insuredDOB+"</insuredDob>\n"+
							        "<insuredGender>"+insuredGenderLocal+"</insuredGender>\n"+
							        "<InsuredContact>\n"+
							          "<homeTelephone>"+uid.getInsuredHomeTelephone()+"</homeTelephone>\n"+
							        "</InsuredContact>\n"+
							      "</insured>\n"+
							   "</PatientPayorAndInsured>\n";}
						
						else if(priorityCode.equals("Secondary")){
							System.out.println("inside Secondary");
							labXmlFullSummary=labXmlFullSummary+
							    "<PatientPayorAndInsured ID=\""+uid.getPayorAndInsuredID()+"\">\n"+
							      "<payor>\n"+
							        "<payorName>"+uid.getPayorName()+"</payorName>\n"+
							        "<PayorAddress>\n"+
							          "<address1>"+uid.getPayorAddress1()+"</address1>\n"+
							          "<address2>"+uid.getPayorAddress2()+"</address2>\n"+
							          "<city>"+uid.getPayorCity()+"</city>\n"+
							          "<state>"+uid.getPayorState()+"</state>\n"+
							          "<zip>"+uid.getPayorZip()+"</zip>\n"+
							          "<zip4>"+uid.getPayorZip4()+"</zip4>\n"+
							          "<country>"+uid.getPayorCountry()+"</country>\n"+
							        "</PayorAddress>\n"+
							       "<insuranceServiceProvider>"+uid.getInsuranceServiceProvider()+"</insuranceServiceProvider>\n"+
							        "<payorGroupNumber>"+uid.getPayorGroupNumber()+"</payorGroupNumber>\n"+
							     "</payor>\n"+
							      "<insured>\n"+
							        "<patientRelationship>"+uid.getPatientRelationship()+"</patientRelationship>\n"+
							        "<priorityCode>"+uid.getPriorityCode()+"</priorityCode>\n"+
							        "<policyNumber>"+uid.getPolicyNumber()+"</policyNumber>\n"+
							       "<groupNumber>"+uid.getGroupNumber()+"</groupNumber>\n"+
							        "<InsuredName>\n"+
							         "<last>"+uid.getInsuredLastName()+"</last>\n"+
							          "<first>"+uid.getInsuredFirstName()+"</first>\n"+
							          "<middle>"+uid.getInsuredMiddleName()+"</middle>\n"+
							       "</InsuredName>\n"+
							        "<InsuredAddress>\n"+
							         "<address1>"+uid.getInsuredAddress1()+"</address1>\n"+
							          "<address2>"+uid.getInsuredAddress2()+"</address2>\n"+
							          "<city>"+uid.getInsuredCity()+"</city>\n"+
							         "<state>"+uid.getInsuredState()+"</state>\n"+
							         "<zip>"+uid.getInsuredZip()+"</zip>\n"+
							         "<zip4>"+uid.getInsuredZip4()+"</zip4>\n"+
							         "<country>"+uid.getInsuredCountry()+"</country>\n"+
							        "</InsuredAddress>\n"+
							        "<insuredDob>"+insuredDOB+"</insuredDob>\n"+
							        "<insuredGender>"+insuredGenderLocal+"</insuredGender>\n"+
							        "<InsuredContact>\n"+
							          "<homeTelephone>"+uid.getInsuredHomeTelephone()+"</homeTelephone>\n"+
							        "</InsuredContact>\n"+
							     "</insured>\n"+
							   "</PatientPayorAndInsured>\n";}
						
						else{
							System.out.println("inside Tertiary");
							labXmlFullSummary=labXmlFullSummary+
							  "<PatientPayorAndInsured ID=\""+uid.getPayorAndInsuredID()+"\">\n"+
							      "<payor>\n"+
							       "<payorName>"+uid.getPayorName()+"</payorName>\n"+
							       "<PayorAddress>\n"+
							        "<address1>"+uid.getPayorAddress1()+"</address1>\n"+
							        "<address2>"+uid.getPayorAddress2()+"</address2>\n"+
							        "<city>"+uid.getPayorCity()+"</city>\n"+
							          "<state>"+uid.getPayorState()+"</state>\n"+
							          "<zip>"+uid.getPayorZip()+"</zip>\n"+
							         " <zip4>"+uid.getPayorZip4()+"</zip4>\n"+
							         "<country>"+uid.getPayorCountry()+"</country>\n"+
							        "</PayorAddress>\n"+
							        "<insuranceServiceProvider>"+uid.getInsuranceServiceProvider()+"</insuranceServiceProvider>\n"+
							        "<payorGroupNumber>"+uid.getPayorGroupNumber()+"</payorGroupNumber>\n"+
							      "</payor>\n"+
							      "<insured>\n"+
							        "<patientRelationship>"+uid.getPatientRelationship()+"</patientRelationship>\n"+
							        "<priorityCode>"+uid.getPriorityCode()+"</priorityCode>\n"+
							        "<policyNumber>"+uid.getPolicyNumber()+"</policyNumber>\n"+
							        "<groupNumber>"+uid.getGroupNumber()+"</groupNumber>\n"+
							        "<InsuredName>\n"+
							          "<last>"+uid.getInsuredLastName()+"</last>\n"+
							          "<first>"+uid.getInsuredFirstName()+"</first>\n"+
							        "</InsuredName>\n"+
							        "<InsuredAddress>\n"+
							          "<address1>"+uid.getInsuredAddress1()+"</address1>\n"+
							          "<city>"+uid.getInsuredCity()+"</city>\n"+
							          "<state>"+uid.getInsuredState()+"</state>\n"+
							          "<zip>"+uid.getInsuredZip()+"</zip>\n"+
							          "<zip4>"+uid.getInsuredZip4()+"</zip4>\n"+
							          "<country>"+uid.getInsuredCountry()+"</country>\n"+
							        "</InsuredAddress>\n"+
							        "<InsuredContact>\n"+
							          "<homeTelephone>"+uid.getInsuredHomeTelephone()+"</homeTelephone>\n"+
							        "</InsuredContact>\n"+
							      "</insured>\n"+
							    "</PatientPayorAndInsured>\n";}
					}
				}
				
				

				for(PatientAllergy patAllergy:getPatientAllergyList())
				{

					System.out.println("patAllergy.getAllergySeverity():::::"+patAllergy.getAllergySeverity());

					String onsetdate="";
					if(!(patAllergy.getOnSetDate()==null))
					{
						onsetdate=new DateUtil().convertDateFormatUsingFormat(patAllergy.getOnSetDate(),DATE_PATTERN);
					}
					
					if(patAllergy.getCompositeAllergyId()==0)
					{
						System.out.println(":::::::::::::::::!!!!!!1234!!!!!!!!!!!"+patAllergy.getAllergyName()+":::"+patAllergy.getAllergySeverity()+":::"+patAllergy.getCompositeAllergyId()
								+"pff"+patAllergy.getAllergySource()+"hero"+patAllergy.getAllergytype()+"htr"+patAllergy.getAlergyConceptId()+"hhh"+patAllergy.getAllergySeverity()
								+"fff"+patAllergy.getAllergyNotes()+"dd"+onsetdate+"getAllergyConceptTypeId::::"+patAllergy.getAllergyConceptTypeId());


						labXmlFullSummary=labXmlFullSummary+
								"\t<PatientAllergies>\n"+
								"\t\t<allergyID>"+patAllergy.getAllergySource()+":"+patAllergy.getAlergyConceptId()+":"+patAllergy.getAllergyConceptTypeId()+"</allergyID>\n"+
								"\t\t<allergyTypeID>Y</allergyTypeID>\n";

						if(!(patAllergy.getAllergySeverity().equals("")))
							labXmlFullSummary=labXmlFullSummary+
							"\t\t<allergySeverityTypeID>"+patAllergy.getAllergySeverity()+"</allergySeverityTypeID>\n";

						labXmlFullSummary=labXmlFullSummary+
								"\t\t<allergyComment>"+patAllergy.getAllergyNotes()+"</allergyComment>\n"+
								"\t\t<onsetDate>"+onsetdate+"</onsetDate>\n"+
								"\t\t</PatientAllergies>\n\n";

					}
					else
					{
						System.out.println(":::::::::::::::::!!!!!!PatientAllergies!!!!!!!!!!!"+patAllergy.getAllergyName());
						labXmlFullSummary=labXmlFullSummary+
								"\t<PatientAllergies>\n"+
								"\t\t<allergyID>"+patAllergy.getCompositeAllergyId()+"</allergyID>\n"+	
								"\t\t<allergyTypeID>"+"FDB"+"</allergyTypeID>\n";

						if(!(patAllergy.getAllergySeverity().equals("")))

							labXmlFullSummary=labXmlFullSummary+							
							"\t\t<allergySeverityTypeID>"+patAllergy.getAllergySeverity()+"</allergySeverityTypeID>\n";

						labXmlFullSummary=labXmlFullSummary+
								"\t\t<allergyComment>"+patAllergy.getAllergyNotes()+"</allergyComment>\n"+
								"\t\t<onsetDate>" +onsetdate+"</onsetDate>\n"+
								"\t</PatientAllergies>\n\n";
						
					}
					


				} 
				labXmlFullSummary=labXmlFullSummary+			
						"</Patient>\n\n\n";
				//   String medicineDetail="";
				int medCheck=0;
				//labXmlFullSummary=labXmlFullSummary+


				String exernalId;//=userManageBean.getLogedFirstName()+"_";
				//int i=0;
				for(PatientMedicationData pat:medicineListForEprescribe)
				{
					if(pat.getDrugId()!=0)
					{
						medCheck++;
						Date date;
						if(!(pat.getStartDate()==null))
							date=pat.getStartDate();
						else
							date=pat.getModifyDate();

						//RandomCharacter randomCharacter =new RandomCharacter();
						//exernalId=""+(int)pat.getDrugId()+randomCharacter.generateRandomString();
						//System.out.println(":::exernalId::"+exernalId+":::::::::date::"+date+"::::!!!"+pat.getStartDate());

						int daySupply=0;
						/*if(pat.getDaySupply()!=null)
						{
							daySupply=Integer.parseInt(pat.getDaySupply().substring(0,pat.getDaySupply().indexOf(" ")));
						}*/
						int numberTypeId=findNumberTypeIDForParticularMedicine(pat.getUnit());	
						int formTypeID=findFormTypeIDForParticularMedicine(pat.getDosageForm());
						int routeTypeId=findRouteTypeIDForParticularMedicine(pat.getByRoute());
						int frequencyTypeID=findFrequencyTypeIDForParticularMedicine(pat.getDirections());
						
						String prnDetails="";
						System.out.println("prn details:::::"+pat.isPrn()+":::::"+prnDetails);
						if(pat.isPrn())
							prnDetails="Yes";
						else
							prnDetails="No";

						String allowSubstitution="";
						System.out.println("allowSubstitution details:::::"+pat.isAllowSubstitution()+":::::"+allowSubstitution);
						if(pat.isAllowSubstitution())
							allowSubstitution="DispenseAsWritten";
						else
							allowSubstitution="SubstitutionAllowed";	
						System.out.println("allowSubstitution:::::"+allowSubstitution);



						System.out.println(":::::::::::numberTypeId:"+numberTypeId+":::::::formTypeID:"+formTypeID+":::::::::routeTypeId::"+routeTypeId+":::frequencyTypeID::"+frequencyTypeID);
						if(pat.getPrescriptionStatus()!=null && pat.getPrescriptionStatus().equals("P"))
						{
							// "<LicensedPrescriber ID=\""+loggedDoctorId+"\">" +
							if(pat.getPrescriptionGuid()!=null)
							{
								labXmlFullSummary=labXmlFullSummary+
										"<OutsidePrescription ID=\""+pat.getPrescriptionGuid()+"\">\n";
							}
							else
							{
								labXmlFullSummary=labXmlFullSummary+
										"<OutsidePrescription>\n";
							}
							System.out.println("allowSubstitution:::::"+allowSubstitution);

							labXmlFullSummary=labXmlFullSummary+
									/*"<externalId>"+exernalId+"</externalId>"+*/
									"\t<externalId>"+pat.getId()+"</externalId>\n"+
									"\t<date>"+new DateUtil().convertDateFormatUsingFormat(date,DATE_PATTERN) +"</date>\n"+
									"\t<doctorName>NOT SENT</doctorName>\n"+
									"\t<dispenseNumber>"+pat.getQuantity()+"</dispenseNumber>\n"+
									"\t<sig>"+pat.getAdditionalSig()+"</sig>\n"+
									//"\t<daysSupply>"+pat.getDaySupply()+"</daysSupply>\n"+
									//"\t<prn>"+prnDetails+"</prn>\n"+

							    				    	"\t<refillCount>"+pat.getReffils()+"</refillCount>\n"+

							    				    	"\t<substitution>"+allowSubstitution+"</substitution>\n"+


							    				    	"\t<drugIdentifier>"+(int)pat.getDrugId()+"</drugIdentifier>\n"+
							    				    	"\t<drugIdentifierType>"+pat.getDataProvider()+"</drugIdentifierType>\n" +
							    				    	"\t<prescriptionType>reconcile</prescriptionType>\n"+
							    				    	"\t<codifiedSigType>\n"+
							    				    	"\t\t<ActionType>0</ActionType>\n"+
							    				    	"\t\t<NumberType>"+numberTypeId+"</NumberType>\n"+
							    				    	"\t\t<FormType>"+formTypeID+"</FormType>\n"+
							    				    	"\t\t<RouteType>"+routeTypeId+"</RouteType>\n"+
							    				    	"\t\t<FrequencyType>"+frequencyTypeID+"</FrequencyType>\n"+
							    				    	"\t</codifiedSigType>\n"+
							    				    	"\t<prn>"+prnDetails+"</prn>\n";
							
							//try{
													if(pat.getDaySupply()!=null)
													{
														
														daySupply=Integer.parseInt(pat.getDaySupply());
														
													
													labXmlFullSummary=labXmlFullSummary+
													    				    	
													    				    	"\t<daysSupply>"+daySupply+"</daysSupply>\n";
													}
							/*}
							catch(Exception e)
							{
								e.printStackTrace();
							}*/
							labXmlFullSummary=labXmlFullSummary+
							    				   " </OutsidePrescription>\n\n";
						}

						else{

							if(pat.getPrescriptionGuid()!=null)
							{
								labXmlFullSummary=labXmlFullSummary+
										"<OutsidePrescription ID=\""+pat.getPrescriptionGuid()+"\">\n";
							}
							else
							{
								labXmlFullSummary=labXmlFullSummary+
										"<OutsidePrescription>\n";
							}



							labXmlFullSummary=labXmlFullSummary+
									"\t<externalId>"+pat.getId()+"</externalId>\n"+
									"\t<date>"+new DateUtil().convertDateFormatUsingFormat(date,DATE_PATTERN) +"</date>\n"+
									"\t<doctorName>"+pat.getPrescriberName() +"</doctorName>\n"+
									"\t<dispenseNumber>"+pat.getQuantity()+"</dispenseNumber>\n"+
									"\t<sig>"+pat.getAdditionalSig()+"</sig>\n"+
									//"\t<daysSupply>"+pat.getDaySupply()+"</daysSupply>\n"+
									//"\t<takeAsNeeded>"+prnDetails+"</takeAsNeeded>\n"+
									//"\t<prn>"+prnDetails+"</prn>\n"+

											    	"\t<refillCount>"+pat.getReffils()+"</refillCount>\n"+

											    	"\t<substitution>"+allowSubstitution+"</substitution>\n"+


											    	"\t<drugIdentifier>"+(int)pat.getDrugId()+"</drugIdentifier>\n"+
											    	"\t<drugIdentifierType>"+pat.getDataProvider()+"</drugIdentifierType>\n" +
											    	"\t<prescriptionType>reconcile</prescriptionType>\n"+
											    	"\t<codifiedSigType>\n"+
											    	"\t\t<ActionType>0</ActionType>\n"+
											    	"\t\t<NumberType>"+numberTypeId+"</NumberType>\n"+
											    	"\t\t<FormType>"+formTypeID+"</FormType>\n"+
											    	"\t\t<RouteType>"+routeTypeId+"</RouteType>\n"+
											    	"\t\t<FrequencyType>"+frequencyTypeID+"</FrequencyType>\n"+
											    	"\t</codifiedSigType>\n"+
											    	"\t<prn>"+prnDetails+"</prn>\n";
											    	
														//try{
														if(pat.getDaySupply()!=null)
														{
															daySupply=Integer.parseInt(pat.getDaySupply());
														labXmlFullSummary=labXmlFullSummary+
														 "\t<daysSupply>"+daySupply+"</daysSupply>\n";
														}
														/*}
														catch(Exception e){
															e.printStackTrace();
														}*/
														labXmlFullSummary=labXmlFullSummary+
														    				   "</OutsidePrescription>\n\n";
											    

						}//close if
					}//close for loop


					//i++;

				}
				if(medCheck==0)
				{
					labXmlFullSummary=labXmlFullSummary+"<OutsidePrescription><prescriptionType>NoCurrentMeds</prescriptionType></OutsidePrescription>\n\n";
				}

				labXmlFullSummary=labXmlFullSummary+"</NCScript>";

				try {
					boolean check = validate(labXmlFullSummary,"https://preproduction.newcropaccounts.com/InterfaceV7/NCScript.xsd");
					//boolean check=false;
					if(!check)
					{
						labXmlFullSummary="";
						patientMedicineService.saveValueForIntegration(new ContextUtil().getPatientId(), true);
					}
					System.out.println("::::::::::::::::::check:::"+check);
				} catch (SAXException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				//labXmlFullSummary=labXmlFullSummary.trim();	


				System.out.println("labXmlFullSummary:::::::::::::"+labXmlFullSummary);
				
		
		return labXmlFullSummary.trim();
			
	}
	/**
	 * @param labXmlFullSummary the labXmlFullSummary to set
	 */
	public void setLabXmlFullSummary(String labXmlFullSummary) {
		this.labXmlFullSummary = labXmlFullSummary;
	}
	/**
	 * @return the exitLocationForLabIntegration
	 */
	public String getExitLocationForLabIntegration() {
		if(exitLocationForLabIntegration.isEmpty()){
			HttpServletRequest req = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
			String url = req.getRequestURL().toString();
			url=url.replace("lab_model_content", "redirectToPMR");
			//String url="http://localhost:8082/clinakos/page/Doctor/redirectToPMR.jsf";
			System.out.println(url+":::::::::::::::::>>>>>>>>>>>>>>>>>>>>>> url::"+url+"::::");
			exitLocationForLabIntegration=url;
		}
		
		return exitLocationForLabIntegration;
	}
	/**
	 * @param exitLocationForLabIntegration the exitLocationForLabIntegration to set
	 */
	public void setExitLocationForLabIntegration(
			String exitLocationForLabIntegration) {
		this.exitLocationForLabIntegration = exitLocationForLabIntegration;
	}
	

	private List<String>responseList;


	public List<String> getResponseList() {
		return responseList;
	}
	public void setResponseList(List<String> responseList) {
		this.responseList = responseList;
	}
	public ILabService getLabService() {
		return labService;
	}
	public void setLabService(ILabService labService) {
		this.labService = labService;
	}
	
	
	// To get patient guarantor list for lab integration added by venu
	public List<PatientGuarantor> getPatientGuarantorList() {
		int loggedPatient=new ContextUtil().getPatientId();
		System.out.println("Logged in patient id "+loggedPatient);
		if(patientGuarantorList == null)
		{
			patientGuarantorList = new ArrayList<PatientGuarantor>();
		}
		patientGuarantorList=patientService.getPatientGuarantorList(loggedPatient);
		System.out.println("patientGuarantorList after calling dao method size "+patientGuarantorList.size());
		return patientGuarantorList;
	}
	public void setPatientGuarantorList(List<PatientGuarantor> patientGuarantorList) {
		this.patientGuarantorList = patientGuarantorList;
	}
	
	
	public List<UserInsuranceDetails> getPatientInsuranceList() {
		int loggedPatient=new ContextUtil().getPatientId();
		System.out.println("Logged patient id in patient insurance list "+loggedPatient);
		if(patientInsuranceList == null)
		{
			patientInsuranceList = new ArrayList<UserInsuranceDetails>();
		}
		patientInsuranceList=patientService.getPatientInsuranceList(loggedPatient);
		System.out.println("patientInsuranceList size after calling daoimpl method "+patientInsuranceList.size());
		return patientInsuranceList;
	}
	
	public void setPatientInsuranceList(List<UserInsuranceDetails> patientInsuranceList) {
		this.patientInsuranceList = patientInsuranceList;
	}
	
	/*
	 * Temporary Fix for Last recoinciled by
	 * 
	 */
	
	private String lastRecoinciledBy;
	private String lastRecoinciledDate;

	public String getLastRecoinciledBy() 
	{
		lastRecoinciledBy=new ContextUtil().getLoggerFirstName()+" "+new ContextUtil().getLoggerLastName();
		return lastRecoinciledBy;
	}
	public void setLastRecoinciledBy(String lastRecoinciledBy) {
		this.lastRecoinciledBy = lastRecoinciledBy;
	}
	public String getLastRecoinciledDate() {
		lastRecoinciledDate=new DateUtil().convertDateFormatUsingFormat(new Date(), MM_DD_YYYY_DATE_PATTERN);
		return lastRecoinciledDate;
	}
	public void setLastRecoinciledDate(String lastRecoinciledDate) {
		this.lastRecoinciledDate = lastRecoinciledDate;
	}

	/**
	 * @return the encounterSummary
	 */
	public EncounterSummary getEncounterSummary() {
		if(encounterSummary==null){
			encounterSummary=new EncounterSummary();
		}
		return encounterSummary;
	}

	/**
	 * @param encounterSummary the encounterSummary to set
	 */
	public void setEncounterSummary(EncounterSummary encounterSummary) {
		this.encounterSummary = encounterSummary;
	}

	/**
	 * @return the ifYesInputDisabled
	 */
	public boolean isIfYesInputDisabled() {
		return ifYesInputDisabled;
	}

	/**
	 * @param ifYesInputDisabled the ifYesInputDisabled to set
	 */
	public void setIfYesInputDisabled(boolean ifYesInputDisabled) {
		this.ifYesInputDisabled = ifYesInputDisabled;
	}
	
	/**
	 * Disabled Input Text ifYesInputDisabled  when selected No 
	 * 
	 */
	public void checkTenPointSytemReviewCompletedValue(){
		String selectedValue=encounterSummary.getTenPointReviewOfSytemCompleted();
		System.out.println("Selecte3d Value "+selectedValue);
		if(selectedValue.equalsIgnoreCase("No")){
			ifYesInputDisabled=true;
		}
		if(selectedValue.equalsIgnoreCase("Yes")){
			ifYesInputDisabled=false;
		}
	}
	
	/**
	 * Disable Input Text Reason for Encounter For Oter  
	 * 
	 */
	public void checkReasonForEncounterValueForDisableInputText(ValueChangeEvent event){
		String selectedValueForReasonForEncounter=event.getNewValue().toString();
		System.out.println("selectedValueForReasonForEncounter"+selectedValueForReasonForEncounter);
		if(selectedValueForReasonForEncounter.equalsIgnoreCase("Other")){
			reasonForEncounterInputEnabledForOther=false;
			
		}
		if(!(selectedValueForReasonForEncounter.equalsIgnoreCase("Other"))){
			reasonForEncounterInputEnabledForOther=true;
		}
	}

	/**
	 * @return the reasonForEncounterInputEnabledForOther
	 */
	public boolean isReasonForEncounterInputEnabledForOther() {
		return reasonForEncounterInputEnabledForOther;
	}

	/**
	 * @param reasonForEncounterInputEnabledForOther the reasonForEncounterInputEnabledForOther to set
	 */
	public void setReasonForEncounterInputEnabledForOther(
			boolean reasonForEncounterInputEnabledForOther) {
		this.reasonForEncounterInputEnabledForOther = reasonForEncounterInputEnabledForOther;
	}

	public List<GeriatricPrecaution> getGeriatricPrecautions() {
		return geriatricPrecautions;
	}

	public void setGeriatricPrecautions(
			List<GeriatricPrecaution> geriatricPrecautions) {
		this.geriatricPrecautions = geriatricPrecautions;
	}

	public List<PaediatricPrecaution> getPaediatricPrecautions() {
		return paediatricPrecautions;
	}

	public void setPaediatricPrecautions(
			List<PaediatricPrecaution> paediatricPrecautions) {
		this.paediatricPrecautions = paediatricPrecautions;
	}

	public List<PatientMedicationData> getReconciledMeds() {
		return reconciledMeds;
	}

	public void setReconciledMeds(List<PatientMedicationData> reconciledMeds) {
		this.reconciledMeds = reconciledMeds;
	}

	/**
	 * @return the patientEncounterSummaryHistoryList
	 * Get Patient Encounter Summary History Data 
	 */
	public List<EncounterSummary> getPatientEncounterSummaryHistoryList() {
		if(patientEncounterSummaryHistoryList==null){
			patientEncounterSummaryHistoryList=new ArrayList<EncounterSummary>();
		}
		patientEncounterSummaryHistoryList=patientMedicineService.getPatientEncounterSummaryHistoryData(new ContextUtil().getPatientId());
		System.out.println("Encounter Start Date :::"+encounterSummary.getStartDate()+"Encounter End Date"+encounterSummary.getEndDate());
		if(encounterSummary.getEndDate() != null){
			patientEncounterSummaryHistoryList=patientMedicineService.getEncounterSummaryHistoryData(new ContextUtil().getPatientId(),encounterSummary.getStartDate(),encounterSummary.getEndDate());
		}
		return patientEncounterSummaryHistoryList;
	}

	/**
	 * @param patientEncounterSummaryHistoryList the patientEncounterSummaryHistoryList to set
	 */
	public void setPatientEncounterSummaryHistoryList(
			List<EncounterSummary> patientEncounterSummaryHistoryList) {
		this.patientEncounterSummaryHistoryList = patientEncounterSummaryHistoryList;
	}
	
	/**
	 * Get Encounter Summary History Data With Filter 
	 * 
	 */
	public List<EncounterSummary> getPatientEncounterSummaryDataWithFilter(){
		
		
		patientEncounterSummaryHistoryList=patientMedicineService.getEncounterSummaryHistoryData(new ContextUtil().getPatientId(),encounterSummary.getStartDate(),encounterSummary.getEndDate());
		System.out.println("patientEncounterSummaryHistoryList.size():::::::"+patientEncounterSummaryHistoryList.size());
		
		return patientEncounterSummaryHistoryList;
		
	}


	/**
	 * @return the encounterSummaryHistoryDataTable
	 */
	public DataTable getEncounterSummaryHistoryDataTable() {
		if(encounterSummaryHistoryDataTable==null){
			encounterSummaryHistoryDataTable=new DataTable();
		}
		return encounterSummaryHistoryDataTable;
	}

	/**
	 * @param encounterSummaryHistoryDataTable the encounterSummaryHistoryDataTable to set
	 */
	public void setEncounterSummaryHistoryDataTable(
			DataTable encounterSummaryHistoryDataTable) {
		this.encounterSummaryHistoryDataTable = encounterSummaryHistoryDataTable;
	}


	public void setAuditManageBean(AuditManageBean auditManageBean) {
		this.auditManageBean = auditManageBean;
	}

	

    public void getSelectedDataForEncounterSummaryPrint(){
    	EncounterSummary summary=(EncounterSummary) getEncounterSummaryHistoryDataTable().getRowData();
    	selectedEncounterDateForPrint=summary.getEncounterDate();
    	System.out.println("Encounter Date :::::::::"+selectedEncounterDateForPrint);
                  
    }

	/**
	 * @return the selectedEncounterDateForPrint
	 */
	public Date getSelectedEncounterDateForPrint() {
		return selectedEncounterDateForPrint;
	}

	/**
	 * @param selectedEncounterDateForPrint the selectedEncounterDateForPrint to set
	 */
	public void setSelectedEncounterDateForPrint(Date selectedEncounterDateForPrint) {
		this.selectedEncounterDateForPrint = selectedEncounterDateForPrint;
	}

	/**
	 * @return the selectedEncounterSummary
	 */
	public EncounterSummary getSelectedEncounterSummary() {
		if(selectedEncounterSummary==null){
			selectedEncounterSummary=new EncounterSummary();
		}
		selectedEncounterSummary=patientMedicineService.getSelectedEncounterSummaryData(new ContextUtil().getPatientId(),new ContextUtil().getProviderId(),selectedEncounterDateForPrint);
		return selectedEncounterSummary;
	}

	/**
	 * @param selectedEncounterSummary the selectedEncounterSummary to set
	 */
	public void setSelectedEncounterSummary(
			EncounterSummary selectedEncounterSummary) {
		this.selectedEncounterSummary = selectedEncounterSummary;
	}

	/**
	 * @return the medAndGenrticMedPlanListForSelectedDate
	 */
	public List<MedandGenricmed> getMedAndGenrticMedPlanListForSelectedDate() {
		if(medAndGenrticMedPlanListForSelectedDate==null){
			medAndGenrticMedPlanListForSelectedDate=patientMedicineService.getMedAndGenrticMedPlanDataForSelectedDate(new ContextUtil().getPatientId(),new ContextUtil().getProviderId(),selectedEncounterDateForPrint);
		}
		return medAndGenrticMedPlanListForSelectedDate;
	}

	/**
	 * @param medAndGenrticMedPlanListForSelectedDate the medAndGenrticMedPlanListForSelectedDate to set
	 */
	public void setMedAndGenrticMedPlanListForSelectedDate(
			List<MedandGenricmed> medAndGenrticMedPlanListForSelectedDate) {
		this.medAndGenrticMedPlanListForSelectedDate = medAndGenrticMedPlanListForSelectedDate;
	}

	/**
	 * @return the sendMessageEditRxListForSelectedEncounterDate
	 */
	public List<SendMessageEditRx> getSendMessageEditRxListForSelectedEncounterDate() {
		if(sendMessageEditRxListForSelectedEncounterDate==null){
			sendMessageEditRxListForSelectedEncounterDate=new ArrayList<SendMessageEditRx>();
		}
		sendMessageEditRxListForSelectedEncounterDate=patientMedicineService.getSendMessageEditRDataForSelectedEncounterDate(new ContextUtil().getPatientId(),new ContextUtil().getProviderId(),selectedEncounterDateForPrint);
		return sendMessageEditRxListForSelectedEncounterDate;
	}

	/**
	 * @param sendMessageEditRxListForSelectedEncounterDate the sendMessageEditRxListForSelectedEncounterDate to set
	 */
	public void setSendMessageEditRxListForSelectedEncounterDate(
			List<SendMessageEditRx> sendMessageEditRxListForSelectedEncounterDate) {
		this.sendMessageEditRxListForSelectedEncounterDate = sendMessageEditRxListForSelectedEncounterDate;
	}

	/**
	 * @return the addedOrChangeMedListOnSelectedEncounterDate
	 */
	public List<PatientMedicationData> getAddedOrChangeMedListOnSelectedEncounterDate() {
		if(addedOrChangeMedListOnSelectedEncounterDate==null){
			addedOrChangeMedListOnSelectedEncounterDate=new ArrayList<PatientMedicationData>();
		}
		addedOrChangeMedListOnSelectedEncounterDate=patientMedicineService.getAddedOrChangeMedDataOnSelectedEncounterDate(new ContextUtil().getPatientId(),new ContextUtil().getProviderId(),selectedEncounterDateForPrint); 
		return addedOrChangeMedListOnSelectedEncounterDate;
	}

	/**
	 * @param addedOrChangeMedListOnSelectedEncounterDate the addedOrChangeMedListOnSelectedEncounterDate to set
	 */
	public void setAddedOrChangeMedListOnSelectedEncounterDate(
			List<PatientMedicationData> addedOrChangeMedListOnSelectedEncounterDate) {
		this.addedOrChangeMedListOnSelectedEncounterDate = addedOrChangeMedListOnSelectedEncounterDate;
	}

	/**
	 * Get Patient Medication data for selected Encounter date 
	 * @return the patientMedicationListForSelectedEncounterDate
	 */
	public List<PatientMedicationData> getPatientMedicationListForSelectedEncounterDate() {
		if(patientMedicationListForSelectedEncounterDate==null){
			patientMedicationListForSelectedEncounterDate=new ArrayList<PatientMedicationData>();
		}
		patientMedicationListForSelectedEncounterDate=patientMedicineService.getPatientMedicationDataForSelectedEncounterDate(new ContextUtil().getPatientId(),new ContextUtil().getProviderId(),selectedEncounterDateForPrint);
		return patientMedicationListForSelectedEncounterDate;
	}

	/**
	 * @param patientMedicationListForSelectedEncounterDate the patientMedicationListForSelectedEncounterDate to set
	 */
	public void setPatientMedicationListForSelectedEncounterDate(
			List<PatientMedicationData> patientMedicationListForSelectedEncounterDate) {
		this.patientMedicationListForSelectedEncounterDate = patientMedicationListForSelectedEncounterDate;
	}

	public Map<String, DrugCategoryFilter> getDosageMap() {
		return dosageMap;
	}

	public void setDosageMap(Map<String, DrugCategoryFilter> dosageMap) {
		this.dosageMap = dosageMap;
	}

	public List<String> getDosageForms() {
		return dosageForms;
	}

	public void setDosageForms(List<String> dosageForms) {
		this.dosageForms = dosageForms;
	}


	/**
	 * @return the formularyTextAlterantiveMedicineMap
	 */
	public Map<String, List<String>> getFormularyTextAlterantiveMedicineMap() {
		if(formularyTextAlterantiveMedicineMap==null){
			formularyTextAlterantiveMedicineMap=new HashMap<String, List<String>>();
		}
		return formularyTextAlterantiveMedicineMap;
	}

	/**
	 * @param formularyTextAlterantiveMedicineMap the formularyTextAlterantiveMedicineMap to set
	 */
	public void setFormularyTextAlterantiveMedicineMap(
			Map<String, List<String>> formularyTextAlterantiveMedicineMap) {
		this.formularyTextAlterantiveMedicineMap = formularyTextAlterantiveMedicineMap;
	}

	/**
	 * @return the alternativeMedicineKeyList
	 */
	public List<String> getAlternativeMedicineKeyList() {
		if(alternativeMedicineKeyList==null){
			alternativeMedicineKeyList=new ArrayList<String>();
		}
		return alternativeMedicineKeyList;
	}

	/**
	 * @param alternativeMedicineKeyList the alternativeMedicineKeyList to set
	 */
	public void setAlternativeMedicineKeyList(
			List<String> alternativeMedicineKeyList) {
		this.alternativeMedicineKeyList = alternativeMedicineKeyList;
	}

/**
 * used in medication.jsf
 * old medicationd data 
 * Get the list of Medication data for old year except from current year 
 * 
 * @return List of Pharmacy Detail Data 
 */
	public List<PharmacyDetail> getOldMedicationDataList() {
		if (oldMedicationDataList==null) {
			oldMedicationDataList=patientMedicineService.getOldMedicationDataList(new ContextUtil().getPatientId(),getPatientMedicationDataList()); // Get previous year data based on patient id and medication data list 
		}
		return oldMedicationDataList;
	}


	public void setOldMedicationDataList(List<PharmacyDetail> oldMedicationDataList) {
		this.oldMedicationDataList = oldMedicationDataList;
	}		

	
}


