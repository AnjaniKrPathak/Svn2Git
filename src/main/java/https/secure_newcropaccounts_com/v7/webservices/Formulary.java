package https.secure_newcropaccounts_com.v7.webservices;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * A web service that performs pharmacy related functions.
 *
 * This class was generated by Apache CXF 2.7.3
 * 2013-11-29T14:11:58.351+05:30
 * Generated source version: 2.7.3
 * 
 */
@WebServiceClient(name = "Formulary", 
                  wsdlLocation = "http://preproduction.newcropaccounts.com/V7/WebServices/Formulary.asmx?wsdl",
                  targetNamespace = "https://secure.newcropaccounts.com/V7/webservices") 
public class Formulary extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("https://secure.newcropaccounts.com/V7/webservices", "Formulary");
    public final static QName FormularySoap = new QName("https://secure.newcropaccounts.com/V7/webservices", "FormularySoap");
    public final static QName FormularySoap12 = new QName("https://secure.newcropaccounts.com/V7/webservices", "FormularySoap12");
    public final static QName FormularyHttpPost = new QName("https://secure.newcropaccounts.com/V7/webservices", "FormularyHttpPost");
    static {
        URL url = null;
        try {
            url = new URL("http://preproduction.newcropaccounts.com/V7/WebServices/Formulary.asmx?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(Formulary.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://preproduction.newcropaccounts.com/V7/WebServices/Formulary.asmx?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public Formulary(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Formulary(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Formulary() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns FormularySoap
     */
    @WebEndpoint(name = "FormularySoap")
    public FormularySoap getFormularySoap() {
        return super.getPort(FormularySoap, FormularySoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns FormularySoap
     */
    @WebEndpoint(name = "FormularySoap")
    public FormularySoap getFormularySoap(WebServiceFeature... features) {
        return super.getPort(FormularySoap, FormularySoap.class, features);
    }
    /**
     *
     * @return
     *     returns FormularySoap
     */
    @WebEndpoint(name = "FormularySoap12")
    public FormularySoap getFormularySoap12() {
        return super.getPort(FormularySoap12, FormularySoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns FormularySoap
     */
    @WebEndpoint(name = "FormularySoap12")
    public FormularySoap getFormularySoap12(WebServiceFeature... features) {
        return super.getPort(FormularySoap12, FormularySoap.class, features);
    }
    /**
     *
     * @return
     *     returns FormularyHttpPost
     */
    @WebEndpoint(name = "FormularyHttpPost")
    public FormularyHttpPost getFormularyHttpPost() {
        return super.getPort(FormularyHttpPost, FormularyHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns FormularyHttpPost
     */
    @WebEndpoint(name = "FormularyHttpPost")
    public FormularyHttpPost getFormularyHttpPost(WebServiceFeature... features) {
        return super.getPort(FormularyHttpPost, FormularyHttpPost.class, features);
    }

}
