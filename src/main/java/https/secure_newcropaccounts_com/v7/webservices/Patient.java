package https.secure_newcropaccounts_com.v7.webservices;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * A web service that performs patient related functions.
 *
 * This class was generated by Apache CXF 2.7.3
 * 2013-10-24T11:24:57.767+05:30
 * Generated source version: 2.7.3
 * 
 */
@WebServiceClient(name = "Patient", 
                  wsdlLocation = "http://preproduction.newcropaccounts.com/V7/WebServices/Patient.asmx?wsdl",
                  targetNamespace = "https://secure.newcropaccounts.com/V7/webservices") 
public class Patient extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("https://secure.newcropaccounts.com/V7/webservices", "Patient");
    public final static QName PatientSoap12 = new QName("https://secure.newcropaccounts.com/V7/webservices", "PatientSoap12");
    public final static QName PatientSoap = new QName("https://secure.newcropaccounts.com/V7/webservices", "PatientSoap");
    public final static QName PatientHttpPost = new QName("https://secure.newcropaccounts.com/V7/webservices", "PatientHttpPost");
    static {
        URL url = null;
        try {
            url = new URL("http://preproduction.newcropaccounts.com/V7/WebServices/Patient.asmx?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(Patient.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://preproduction.newcropaccounts.com/V7/WebServices/Patient.asmx?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public Patient(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Patient(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Patient() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns PatientSoap
     */
    @WebEndpoint(name = "PatientSoap12")
    public PatientSoap getPatientSoap12() {
        return super.getPort(PatientSoap12, PatientSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns PatientSoap
     */
    @WebEndpoint(name = "PatientSoap12")
    public PatientSoap getPatientSoap12(WebServiceFeature... features) {
        return super.getPort(PatientSoap12, PatientSoap.class, features);
    }
    /**
     *
     * @return
     *     returns PatientSoap
     */
    @WebEndpoint(name = "PatientSoap")
    public PatientSoap getPatientSoap() {
        return super.getPort(PatientSoap, PatientSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns PatientSoap
     */
    @WebEndpoint(name = "PatientSoap")
    public PatientSoap getPatientSoap(WebServiceFeature... features) {
        return super.getPort(PatientSoap, PatientSoap.class, features);
    }
    /**
     *
     * @return
     *     returns PatientHttpPost
     */
    @WebEndpoint(name = "PatientHttpPost")
    public PatientHttpPost getPatientHttpPost() {
        return super.getPort(PatientHttpPost, PatientHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns PatientHttpPost
     */
    @WebEndpoint(name = "PatientHttpPost")
    public PatientHttpPost getPatientHttpPost(WebServiceFeature... features) {
        return super.getPort(PatientHttpPost, PatientHttpPost.class, features);
    }

}
