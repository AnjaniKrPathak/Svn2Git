package https.secure_newcropaccounts_com.v7.webservices;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * A web service that performs drug related functions.
 *
 * This class was generated by Apache CXF 2.7.3
 * 2013-11-25T16:48:50.977+05:30
 * Generated source version: 2.7.3
 * 
 */
@WebServiceClient(name = "Drug", 
                  wsdlLocation = "http://preproduction.newcropaccounts.com/V7/WebServices/Drug.asmx?wsdl",
                  targetNamespace = "https://secure.newcropaccounts.com/V7/webservices") 
public class Drug extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("https://secure.newcropaccounts.com/V7/webservices", "Drug");
    public final static QName DrugSoap = new QName("https://secure.newcropaccounts.com/V7/webservices", "DrugSoap");
    public final static QName DrugSoap12 = new QName("https://secure.newcropaccounts.com/V7/webservices", "DrugSoap12");
    public final static QName DrugHttpPost = new QName("https://secure.newcropaccounts.com/V7/webservices", "DrugHttpPost");
    static {
        URL url = null;
        try {
            url = new URL("http://preproduction.newcropaccounts.com/V7/WebServices/Drug.asmx?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(Drug.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://preproduction.newcropaccounts.com/V7/WebServices/Drug.asmx?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public Drug(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Drug(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Drug() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns DrugSoap
     */
    @WebEndpoint(name = "DrugSoap")
    public DrugSoap getDrugSoap() {
        return super.getPort(DrugSoap, DrugSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns DrugSoap
     */
    @WebEndpoint(name = "DrugSoap")
    public DrugSoap getDrugSoap(WebServiceFeature... features) {
        return super.getPort(DrugSoap, DrugSoap.class, features);
    }
    /**
     *
     * @return
     *     returns DrugSoap
     */
    @WebEndpoint(name = "DrugSoap12")
    public DrugSoap getDrugSoap12() {
        return super.getPort(DrugSoap12, DrugSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns DrugSoap
     */
    @WebEndpoint(name = "DrugSoap12")
    public DrugSoap getDrugSoap12(WebServiceFeature... features) {
        return super.getPort(DrugSoap12, DrugSoap.class, features);
    }
    /**
     *
     * @return
     *     returns DrugHttpPost
     */
    @WebEndpoint(name = "DrugHttpPost")
    public DrugHttpPost getDrugHttpPost() {
        return super.getPort(DrugHttpPost, DrugHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns DrugHttpPost
     */
    @WebEndpoint(name = "DrugHttpPost")
    public DrugHttpPost getDrugHttpPost(WebServiceFeature... features) {
        return super.getPort(DrugHttpPost, DrugHttpPost.class, features);
    }

}
