package https.secure_newcropaccounts_com.v7.webservices;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * A web service that performs doctor related functions.
 *
 * This class was generated by Apache CXF 2.7.3
 * 2013-10-25T09:49:17.902+05:30
 * Generated source version: 2.7.3
 * 
 */
@WebServiceClient(name = "Doctor", 
                  wsdlLocation = "https://preproduction.newcropaccounts.com/v7/WebServices/Doctor.asmx?wsdl",
                  targetNamespace = "https://secure.newcropaccounts.com/V7/webservices") 
public class Doctor extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("https://secure.newcropaccounts.com/V7/webservices", "Doctor");
    public final static QName DoctorSoap12 = new QName("https://secure.newcropaccounts.com/V7/webservices", "DoctorSoap12");
    public final static QName DoctorSoap = new QName("https://secure.newcropaccounts.com/V7/webservices", "DoctorSoap");
    public final static QName DoctorHttpPost = new QName("https://secure.newcropaccounts.com/V7/webservices", "DoctorHttpPost");
    static {
        URL url = null;
        try {
            url = new URL("https://preproduction.newcropaccounts.com/v7/WebServices/Doctor.asmx?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(Doctor.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "https://preproduction.newcropaccounts.com/v7/WebServices/Doctor.asmx?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public Doctor(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Doctor(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Doctor() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns DoctorSoap
     */
    @WebEndpoint(name = "DoctorSoap12")
    public DoctorSoap getDoctorSoap12() {
        return super.getPort(DoctorSoap12, DoctorSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns DoctorSoap
     */
    @WebEndpoint(name = "DoctorSoap12")
    public DoctorSoap getDoctorSoap12(WebServiceFeature... features) {
        return super.getPort(DoctorSoap12, DoctorSoap.class, features);
    }
    /**
     *
     * @return
     *     returns DoctorSoap
     */
    @WebEndpoint(name = "DoctorSoap")
    public DoctorSoap getDoctorSoap() {
        return super.getPort(DoctorSoap, DoctorSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns DoctorSoap
     */
    @WebEndpoint(name = "DoctorSoap")
    public DoctorSoap getDoctorSoap(WebServiceFeature... features) {
        return super.getPort(DoctorSoap, DoctorSoap.class, features);
    }
    /**
     *
     * @return
     *     returns DoctorHttpPost
     */
    @WebEndpoint(name = "DoctorHttpPost")
    public DoctorHttpPost getDoctorHttpPost() {
        return super.getPort(DoctorHttpPost, DoctorHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns DoctorHttpPost
     */
    @WebEndpoint(name = "DoctorHttpPost")
    public DoctorHttpPost getDoctorHttpPost(WebServiceFeature... features) {
        return super.getPort(DoctorHttpPost, DoctorHttpPost.class, features);
    }

}
