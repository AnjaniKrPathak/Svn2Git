package https.secure_newcropaccounts_com.v7.webservices;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * Update 1 for V7 web services.
 *
 * This class was generated by Apache CXF 2.7.3
 * 2013-10-29T12:28:47.182+05:30
 * Generated source version: 2.7.3
 * 
 */
@WebServiceClient(name = "Update1", 
                  wsdlLocation = "https://preproduction.newcropaccounts.com/v7/WebServices/Update1.asmx?wsdl",
                  targetNamespace = "https://secure.newcropaccounts.com/V7/webservices") 
public class Update1 extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("https://secure.newcropaccounts.com/V7/webservices", "Update1");
    public final static QName Update1Soap12 = new QName("https://secure.newcropaccounts.com/V7/webservices", "Update1Soap12");
    public final static QName Update1Soap = new QName("https://secure.newcropaccounts.com/V7/webservices", "Update1Soap");
    public final static QName Update1HttpPost = new QName("https://secure.newcropaccounts.com/V7/webservices", "Update1HttpPost");
    static {
        URL url = null;
        try {
            url = new URL("https://preproduction.newcropaccounts.com/v7/WebServices/Update1.asmx?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(Update1.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "https://preproduction.newcropaccounts.com/v7/WebServices/Update1.asmx?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public Update1(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Update1(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Update1() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns Update1Soap
     */
    @WebEndpoint(name = "Update1Soap12")
    public Update1Soap getUpdate1Soap12() {
        return super.getPort(Update1Soap12, Update1Soap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Update1Soap
     */
    @WebEndpoint(name = "Update1Soap12")
    public Update1Soap getUpdate1Soap12(WebServiceFeature... features) {
        return super.getPort(Update1Soap12, Update1Soap.class, features);
    }
    /**
     *
     * @return
     *     returns Update1Soap
     */
    @WebEndpoint(name = "Update1Soap")
    public Update1Soap getUpdate1Soap() {
        return super.getPort(Update1Soap, Update1Soap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Update1Soap
     */
    @WebEndpoint(name = "Update1Soap")
    public Update1Soap getUpdate1Soap(WebServiceFeature... features) {
        return super.getPort(Update1Soap, Update1Soap.class, features);
    }
    /**
     *
     * @return
     *     returns Update1HttpPost
     */
    @WebEndpoint(name = "Update1HttpPost")
    public Update1HttpPost getUpdate1HttpPost() {
        return super.getPort(Update1HttpPost, Update1HttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Update1HttpPost
     */
    @WebEndpoint(name = "Update1HttpPost")
    public Update1HttpPost getUpdate1HttpPost(WebServiceFeature... features) {
        return super.getPort(Update1HttpPost, Update1HttpPost.class, features);
    }

}
