<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-3.0.xsd
        http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	 <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <!-- <property name="ignoreUnresolvablePlaceholders" value="true"/> -->
        <property name="locations">
            <list>
                 <value>classpath*:/properties/WsdlUrl.properties</value> 
                
            </list>
        </property>
    </bean> 
  
  	  <context:property-placeholder location="classpath*:/properties/WsdlUrl.properties" ignore-unresolvable="true" /> 
	<!-- Message Protocol -->
	 <bean id="messageFactory" class="org.springframework.ws.soap.saaj.SaajSoapMessageFactory">
		<property name="soapVersion">
			<util:constant static-field="org.springframework.ws.soap.SoapVersion.SOAP_12" />
		</property>
	</bean> 

	<!-- Marshaller/UnMarshaller -->
	 <bean id="manageMemberServiceMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
		<property name="contextPaths">
			<list>			
				<value>https.secure_newcropaccounts_com.v7.webservices</value> 			   
			</list>
		</property>

	</bean> 
	
<!-- Added By Anjani Update Service Template -->

	<bean id="Update1ServiceDetail" class="org.springframework.ws.client.core.WebServiceTemplate">
		<!-- If u explode and open WebServiceTemplate u will find Setter/Getter 
			for Marshalling/UnMarshalling and constructor has WebServiceMessageFactory -->
		<constructor-arg ref="messageFactory" />
		<property name="marshaller" ref="manageMemberServiceMarshaller"></property>
		<property name="unmarshaller" ref="manageMemberServiceMarshaller"></property>
	     <!-- interceptors   -->
		 <property name="interceptors">
			<list>
				<!-- <ref local="wss4jSecurityInterceptor" /> -->
			</list>
		</property>
		
		<!-- CommonsHttpMessageSender is responsible for sending XML messages across a Transport layer -->
		<property name="messageSender">
			<bean
				class="org.springframework.ws.transport.http.CommonsHttpMessageSender">
			</bean>
		</property>
		 <property name="defaultUri"
			value="https://preproduction.newcropaccounts.com/v7/WebServices/Update1.asmx?wsdl" />
	   </bean> 
	
	
	
	
	
	
	
<!-- Managed Beans will acts as a client only Added By Anjani-->
	 <bean id="update1ServiceClient" 
		class="com.clinakos.viewController.webservicMangedBean.NcUpdate1WSBean">
		<constructor-arg ref="Update1ServiceDetail"></constructor-arg>		
	</bean> 
	
	
	<!-- Added By Anjani For Lab Service Template  -->
	
	<bean id="labServicesDetail" class="org.springframework.ws.client.core.WebServiceTemplate">
		<!-- If u explode and open WebServiceTemplate u will find Setter/Getter 
			for Marshalling/UnMarshalling and constructor has WebServiceMessageFactory -->
		<constructor-arg ref="messageFactory" />
		<property name="marshaller" ref="manageMemberServiceMarshaller"></property>
		<property name="unmarshaller" ref="manageMemberServiceMarshaller"></property>
	     
		
		
		<!-- CommonsHttpMessageSender is responsible for sending XML messages across a Transport layer -->
		<property name="messageSender">
			<bean
				class="org.springframework.ws.transport.http.CommonsHttpMessageSender">
			</bean>
		</property>
		 <property name="defaultUri"
			value="https://preproduction.newcropaccounts.com/v7/WebServices/CI/Lab.asmx?wsdl" />
	   </bean> 
	
	
	
	<!--Managed Bean For Lab Data act as a Client Added By Anjani -->
	
	<bean id="labDetailServiceClient" class="com.clinakos.viewController.webservicMangedBean.NcLabDetailWSBean">
	 <constructor-arg ref="labServicesDetail"/>
	</bean>
	
	
	<!-- Added By Anjani For  Formulary  Service Template -->

	<bean id="FormularyServiceDetail" class="org.springframework.ws.client.core.WebServiceTemplate">
		<!-- If u explode and open WebServiceTemplate u will find Setter/Getter 
			for Marshalling/UnMarshalling and constructor has WebServiceMessageFactory -->
		<constructor-arg ref="messageFactory" />
		<property name="marshaller" ref="manageMemberServiceMarshaller"></property>
		<property name="unmarshaller" ref="manageMemberServiceMarshaller"></property>
	     <!-- interceptors   -->
		 <property name="interceptors">
			<list>
				<!-- <ref local="wss4jSecurityInterceptor" /> -->
			</list>
		</property>
		
		<!-- CommonsHttpMessageSender is responsible for sending XML messages across a Transport layer -->
		<property name="messageSender">
			<bean
				class="org.springframework.ws.transport.http.CommonsHttpMessageSender">
			</bean>
		</property>
		 <property name="defaultUri"
			value="https://preproduction.newcropaccounts.com/V7/WebServices/Formulary2.asmx?wsdl" />
	   </bean> 
	
<!-- Managed Beans will acts as a client For Formulary  only Added By Anjani-->

	 <bean id="formularyDetailServiceClient" 
		class="com.clinakos.viewController.webservicMangedBean.NcFormulary2WSBean">
		<constructor-arg ref="FormularyServiceDetail"></constructor-arg>		
	</bean> 
	
	
	
	<!-- Added By Anjani For  Drug  Service Template -->

	<bean id="DrugServiceDetail" class="org.springframework.ws.client.core.WebServiceTemplate">
		<!-- If u explode and open WebServiceTemplate u will find Setter/Getter 
			for Marshalling/UnMarshalling and constructor has WebServiceMessageFactory -->
		<constructor-arg ref="messageFactory" />
		<property name="marshaller" ref="manageMemberServiceMarshaller"></property>
		<property name="unmarshaller" ref="manageMemberServiceMarshaller"></property>
	     <!-- interceptors   -->
		 <property name="interceptors">
			<list>
				<!-- <ref local="wss4jSecurityInterceptor" /> -->
			</list>
		</property>
		
		<!-- CommonsHttpMessageSender is responsible for sending XML messages across a Transport layer -->
		<property name="messageSender">
			<bean
				class="org.springframework.ws.transport.http.CommonsHttpMessageSender">
			<property name="connectionTimeout" value="5000" />
            <property name="readTimeout" value="5000" />
			</bean>
		</property>
		 <property name="defaultUri"
			value="http://preproduction.newcropaccounts.com/V7/WebServices/Drug.asmx?wsdl" />
	   </bean> 
	
	
<!-- Managed Beans will acts as a client For Drug WSDL  only Added By Anjani-->

	 <bean id="drugDetailServiceClient" 
		class="com.clinakos.viewController.webservicMangedBean.NcDrugDetailWSBean">
		<constructor-arg ref="DrugServiceDetail"></constructor-arg>		
	</bean> 
	
	
	
	
		
	  
	  
	  
	  
	  <!-- Added By Anjani For Formulary 1  Service Template -->

	<bean id="Formulary1ServiceDetail" class="org.springframework.ws.client.core.WebServiceTemplate">
		<!-- If u explode and open WebServiceTemplate u will find Setter/Getter 
			for Marshalling/UnMarshalling and constructor has WebServiceMessageFactory -->
		<constructor-arg ref="messageFactory" />
		<property name="marshaller" ref="manageMemberServiceMarshaller"></property>
		<property name="unmarshaller" ref="manageMemberServiceMarshaller"></property>
	     <!-- interceptors   -->
		 <property name="interceptors">
			<list>
				<!-- <ref local="wss4jSecurityInterceptor" /> -->
			</list>
		</property>
		
		<!-- CommonsHttpMessageSender is responsible for sending XML messages across a Transport layer -->
		
		<property name="messageSender">
			<bean
				class="org.springframework.ws.transport.http.CommonsHttpMessageSender">
			</bean>
		</property>
		 <property name="defaultUri"
			value="http://preproduction.newcropaccounts.com/V7/WebServices/Formulary.asmx?wsdl" />
	   </bean> 
	
	
<!-- Managed Beans will acts as a client For Drug WSDL  only Added By Anjani-->

	 <bean id="formulary1ServiceClient" 
		class="com.clinakos.viewController.webservicMangedBean.NcFormulary1WSBean">
		<constructor-arg ref="Formulary1ServiceDetail"></constructor-arg>		
	</bean> 
	
	
	
	
	
	
	
	
	
	
	<!-- Controller will acts as a client only -->
		<bean id="webServiceClient" class="com.clinakos.service.serviceImpl.WebServiceClientImpl" />
		
	  
	  
	  
	  
	  
	  

	<!-- Tricky Configuration, dont touch as sequencing in WS:Security matters, 
		touching this will break things -->
		
	 <!-- SAML Header -->
	 <!--  <bean id="wss4jSecurityInterceptor"
		class="org.springframework.ws.soap.security.wss4j.Wss4jSecurityInterceptor">
		The web service provider requires us to pass a timestamp, username, 
			and password
		<property name="securementActions" value="UsernameToken Timestamp " />
		<property name="timestampPrecisionInMilliseconds" value="true" />
		<property name="PartnerName" value="demo" />
		<property name="Name" value="demo" />
		I need to exteranlize both username/pwd instead of hardcoding
		<property name="Password" value="demo" />
			<property name="securementUsernameTokenElements" value="Nonce Created" />
		
	</bean>     -->

</beans>
